		print(f'{str(x)}x{str(y)}={str(ans)}')

        print(str(i)+"x"+str(j)+"="+str(i*j))

        print(f"{i}x{j}={ans}")

    print('%dx%d=%d'%i)

        print(f'{i}x{j}={i*j}')

        print('%dx%d=%d'%(i,j,i*j))

            print(f'{i}x{j}={i * j}')


        print(m,"x",n,"=",n,sep='')
        print(m,"x",n,"=",2*n,sep='')
        print(m,"x",n,"=",3*n,sep='')
        print(m,"x",n,"=",4*n,sep='')
        print(m,"x",n,"=",5*n,sep='')
        print(m,"x",n,"=",6*n,sep='')
        print(m,"x",n,"=",7*n,sep='')
        print(m,"x",n,"=",8*n,sep='')
        print(m,"x",n,"=",9*n,sep='')
        print("{0}x{1}={2}". format(i, j, i * j))

    


        print(str(i) + "x" + str(j) + "=" + str(tmp))

        print(f"{i}x{j}={i*j}")

        print(f"{i}x{j}={i*j}")


        print(f"{i}x{j}={i * j}")

        print(str(i)+"x"+str(j)+"="+str(i*j))

        print(str(i) + "x" + str(j) + "=" + str(i*j))

        print(str(i)+"x"+str(j)+"="+str(i*j))

        print(str(i+1)+"x"+str(j+1)+"="+str(ans))

        print(str(i) + "x" + str(j) + "=" + str(i*j))

  print(str(i)+"x"+str(j)+"="+str(i*j))

        print(f"{a}x{b}={a*b}")


        print("{}x{}={}".format(i+1,j+1,(i+1)*(j+1)))

    print("%dx%d=%d" % (i, j, i * j))

        print('{}x{}={}'.format(i, j, i * j))

		print(str(i) + "x" + str(j) + "=" + str(i * j))

        print("%dx%d=%d" % (i, j, i*j))

        print(str(i) + "x" + str(j) + "=" + str(i*j))

        print('%sx%s=%s'%(i,j,i*j))

print('\n'.join('{0}x{1}={2}'.format(i, j, i * j) for i in range(1, 10) for j in range(1, 10)))

        print(str(i) + "x" + str(j) + "=" + str(i * j))

        print(str(i)+"x"+str(j)+"="+str(k))
        print("{0}x{1}={2}".format(i, j, i*j))

        print(str(i) + "x" + str(j) + "=" + str(i*j))

    print(str(i)+"x"+str(j)+"="+str(i*j))

    print(i[0],"x",i[1],"=",i[0]*i[1],sep="")

        print("%sx%s=%s"%(i,j,i*j))

		print(str(i)+"x"+str(j)+"="+str(i*j))

        print('%sx%s=%s'%(i,j,i*j))

            print(str(N)+"x"+str(M)+"="+str(N*M))


        print(str(i) + "x" + str(j) + "=" + str(i*j))

        print(str(i) + "x" + str(j) + "=" + str(i*j))

        print(str(x) + 'x' + str(y) + '=' + str(x * y))

        print(str(i)+"x"+str(j)+"="+str(i*j))

		print('%dx%d=%d' % (i, j, i*j))

        print("{0}x{1}={2}".format(i+1, j+1, (i+1)*(j+1)))

		print(str(i)+"x"+str(j)+"="+str(i*j))

		print("%dx%d=%d"%(i,j,i*j))

        print("%dx%d=%d" %(a,b,c))
        print("{}x{}={}".format(x,y,x*y))

        print(str(x) + 'x' +str(i) + '=' + str(a))

        print(str(x) + "x" + str(y) + "=" + str(x*y))

        print(i, end="")
        print("x", end="")
        print(j, end="")
        print("=", end="")
        print(i*j)

        print("{}x{}={}".format(i, j, i*j))

        print(i,"x",j,"=",i*j,sep="")

        print(i+1, "x", j+1, "=", (i+1)*(j+1), sep="")

		print(str(i)+"x"+str(j)+"="+str(i*j))

    print(list_1[i])

print(*S[:3], sep="\n")

print(list[-1])
print(list[-2])
print(list[-3])


print(ls[9])
print(ls[8])
print(ls[7])


print(*heapq.nlargest(3, H), sep='\n')

    print(m[0])
    print(m[1])
    print(m[2])


    print(f"{l[i]}")

print(*h[0:3], sep = '\n')

    print(mountain[i])

print(h1)
print(h2)
print(h3)


    print(h)



print(heights[0])
print(heights[1])
print(heights[2])

    print(height)
    print(j[k])


print(myList[0])
print(myList[1])
print(myList[2])

        print(a[i])

    print(inputList[length - i - 1])

    print(List[0])
    print(List[1])
    print(List[2])
        
 
	print(mountain[j])

print( mt[9] )
print( mt[8] )
print( mt[7] )

    print(a[i])


print(result[0])
print(result[1])
print(result[2])

print( yama[9] )
print( yama[8] )
print( yama[7] )

	print(A[i])

    print(hills[i])

    print(data[i])

    print(set[a])
    print(l[-1 * (i+1)])

  print(mounts[i])

print(list[9])
print(list[8])
print(list[7])

print(max(L))
print(max(L))
print(max(L))

    print(sdata[9-i])

print(N[-1])
print(N[-2])
print(N[-3])

    print(max(mountain))
    print(heights[i])

    print(a[i])

    print(m)

print(a[0])
print(a[1])
print(a[2])

	print(ans[i])

    print(i)

    print(mons[i])

   print(i)

        print(List2[len(List)-1-i])
  print(i)

    print(ans[i])

	print(a[i])

    print(hs[i])

 print(mountain[i])

    print( mv )
    print(sorted(height_li,reverse=True)[i])

print(heights[9])
print(heights[8])
print(heights[7])

    print(a[-i])

    print(i)

    print(max(High))
    print(x)

    print('{0}\n{1}\n{2}'.format(mountains[0], mountains[1], mountains[2]))

print(a[9])
print(a[8])
print(a[7])

    print(a1_list[9-i])

    print(m[i])

    print(data[i])

        print(len(list(str(int(str_1[0]) + int(str_1[1])))))
            print(len(str(a + b)))
    print(len(str(a+b)))


        print(len(str(a + b)))
        print(len(str(a+b)))
    print(len(str(a + b)))


		print(len(result))
		print(len(str(a + b)))
    print(output[x])

        print(len(str(int(s[i].split(' ')[0])+int(s[i].split(' ')[1]))))

    print(len(str(int(num[0])+int(num[1]))))

        print(len(str(a + b)))
    print(len(str(a + b)))

	print(len(str(sums)))

    print(len(digitstr))

        
        print(len(str(ans)))

    print(int(math.log10(a+b) + 1))

			print(len(str(i)))
	print(len(str(int(a)+int(b))))


    print(len(str(a+b)))

		print(len(str(a + b)))
    print(size)
    print(str(len(str(x+y))))

	print(len(str(sums)))

    print(len(str(int(a) + int(b))))

    print(len(str(sum(ns))))

	print(len(str(b)))

            print(ans)
        print(len(str(a+b)))
    print(len(str(sum(nums))))

    print(len(str(i)))

    print(len(str(i+j)))

        print(len(str(a+b)))
    print(size)
    print(num)

  print(len(str(a+b)))

	print(len(str(a+b)))

        print(len(str(sum(list(map(int, input().split()))))))
    
    print(len(str(int_a+int_b)))

    print(len(str(a + b)))

        print(int(log10(a+b)+1))

    print(len(str(int(a)+int(b))))

        print(len(str(sum)))
    

            print(len(str(i)))
	print( len('{}'.format(value)) )

	print(len(str(a+b)))

    print(len(str(add(*list(map(int, i.split()))))))

        print(len(str(a + b)))
        print(digit_check(ls[0]+ls[1]))

    print(len(str(int(num[0]) + int(num[1]))))

            print(1)

            print(ans)

 
    print(len(str(a+b)))

    print(len(str(abs(sum(map(int, line.rstrip().split(' ')))))))

    print(len(str(a + b)))

        print(len(c))
        print(len(str(su)))
		print('YES')
		print('NO')

            print("YES")
            print("NO")


        print("YES")
        print("NO")

        print("YES")
        print("NO")

    print("YES" if a * a + b * b == c * c or b * b + c * c == a * a or c * c + a * a == b * b else "NO")

        print("YES")
        print("NO")

            print("YES")
            print("NO")

   print(b[i])

    print("YES" if l[0]**2 + l[1]**2 == l[2]**2 else "NO")


 print(['NO','YES'][a*a+b*b==c*c])

    print("YES")
    print("NO")

        print("YES")
        print("NO")

    print(a)
    

    print(c[i])

        print('YES')
        print('NO')
        

            print('YES')
            print('YES')
            print('YES')
            print('NO')
    print("YES" if a*a+b*b==c*c else "NO")

        print("YES")
        print("NO")

            print("YES")
            print("NO")

        print("YES")
        print("NO")

    print(ans[i])

        print(r)

        print('YES')
        print('NO')

        print('YES')
        print('NO')

            print('YES')
            print('NO')
            
        print(ans[j])

    print("YES" if (l1**2 + l2**2 == l3**2) else "NO")

        print('YES')
        print('NO')

        print("YES")
        print("NO")

        print("YES")
        print("NO")

            print("YES")
            print("NO")
            print("YES")
            print("NO")

            print("YES")
            print("NO")


    print("YES")
    print("NO")

        print('YES') if item[0]**2 + item[1]**2 == item[2]**2 else print('NO')


            print("YES")
            print("NO")

            print("YES")
            print("NO")

        print('YES')
        print('NO')

        print("YES")
        print("NO")

        print('YES')
        print('NO')

        print(r)


    print(i)

        print("YES")
        print("NO")


    print("YES" if max(e) ** 2 * 2 == sum(i ** 2 for i in e) else "NO")

        print('YES')
        print('NO')
    


        print("YES")
        print("NO")


            print("NO")
            print("YES")

            print('YES')
            print('NO')
        

    print(a)
        

        print("YES")
        print("NO")

    print(a)


        print("YES")
        print("NO")


        print("YES")
        print("NO")


        print("YES")
        print("NO")

        print("YES")
        print("YES")
        print("YES")
        print("NO")


        print("YES")
        print("NO")
        print("YES")
        print("NO")

        print('YES')
        print('NO')

		print("YES")
		print("NO")

        print("YES")
        print("NO")


        print('YES')
        print('NO')



    print("YES" if (a[0]**2+a[1]**2)==a[2]**2 else "NO")

      print("YES")
      print("NO")
  
    print('YES')
    print('NO')

            print(f'{x:.3f} {y:.3f}')
        print('{:.3f} {:.3f}'.format(x,y))

    print(f"{x} {y}")

        print(x, y)
    print(f"{x:.3f}", f"{y:.3f}")


        print( "{0:.3f} {1:.3f}".format(x,y))
			print("{:.3f} {:.3f}".format(x+0,y+0))
        print("{0:.3f} {1:.3f}".format(x,y))
    print("%.3f %.3f"%(g,h))

            print("{:.3f} {:.3f}".format(x+0,y+0))
        print( "{0:.3f} {1:.3f}".format(x,y))
            print("{:.3f} {:.3f}".format(x+0,y+0))
    print('{:.3f} {:.3f}'.format(x+0, y+0))

			print("{:.3f} {:.3f}".format(x,y))
			
    print("{:.3f} {:.3f}".format(x, y))

    print("{0:.3f}".format(x), "{0:.3f}".format(y))

		print("{:.3f} {:.3f}".format(x+0, y+0))
        print('{0:.3f} {1:.3f}'.format(x + 0, y + 0))
    print('{0:.3f} {1:.3f}'.format(x, y))


    print('%.3f %.3f' % (x, y))

    print('%.3f %.3f' % (round(x,3), round(y,3)))

    print(x+" "+y)

        print('{0:.3f} {1:.3f}'.format(x,y))

    print('%03.3f' % x,'%03.3f' % y)

  print("{0:.3f} {1:.3f}".format(x,y))

    print("{0:.3f} {1:.3f}".format((c*e-b*f)/(a*e-b*d)+0., (a*f-c*d)/(a*e-b*d)+0.))

        print("{0:.3f}".format(x),end = ' ')
        print("{0:.3f}".format(y))
        print("{:.3f} {:.3f}".format((c-b*x)/a,x))
    print('{:.3f} {:.3f}'.format(x, y))

  print("%s %s"%("{0:.3f}".format(x),"{0:.3f}".format(y)))


        print("{:0.3f}".format(_round(x / s, 4)), "{:0.3f}".format(_round(y / s, 4)))

    
    print("{:.3f} {:.3f}".format(x+0,y+0))
    

    print("{:>.3f}".format(x) +" " + "{:>.3f}".format(y))

    print("%.3f %.3f" % (solutions[0], solutions[1]))

    print('%.3f %.3f' % (x,y))


        print(str(x) + " " + str(y))

    print('{:.3f} {:.3f}'.format(x+0, y+0))

    print('{:.3f} {:.3f}'.format(x+0, y+0))

        print('{0:0.3f} {1:0.3f}'.format(x, y))
        print('%.3f' % round(answer[0],3), '%.3f' % round(answer[1],3))
    
        print('%.3f' % round(answer[0],3), '%.3f' % round(answer[1],3))
    
    print('{:.3f} {:.3f}'.format(x, y))

	print(xs,ys)

	print('{0:.3f} {1:.3f}'.format(x, y))

        print("{:.3f} {:.3f}".format(xr, yr))

	print('{0:.3f} {1:.3f}'.format(x, y))

    print("{0:.3f} {1:.3f}".format(x+0.0,y+0.0))

    print("{:.3f} {:.3f}".format(x, y))

	print("{:.3f} {:.3f}".format(x,y))

        print(str(x_2) + " " + str(y_2))
        print("{0:.03f}".format(Round((c*e-f*b)/(a*e-d*b), 3)) + " " + "{0:.03f}".format(Round((a*f-d*c)/(a*e-d*b), 3)))
    print('%.3f %.3f' % (x/base+0,y/base+0))

        print("{0:.3f} {1:.3f}".format(x,y))

	print('{0:.3f} {1:.3f}'.format(x,y))


        print("%.3f %.3f" % (round(x, 3), round(y, 3)))

    
    print("%.3f %.3f" %(x, y))
    

        print("{0:.3f} {1:.3f}".format(x,y))
        
    

        print("{0:.3f}".format(round(x,3)), "{0:.3f}".format(round(y,3)))
    print("{:.3f} {:.3f}".format(x, y))

		print("0.000 0.000")
		print('{:.3f}'.format(a1) ,'{:.3f}'.format(a2))

    print("%.3f %.3f"%(sol[0],sol[1]))

        print("{:.3f} {:.3f}".format((c*e-b*f)/(a*e-b*d)+0,(c*d-a*f)/(b*d-a*e)+0))

    print('{0:.3f} {1:.3f}'.format(x, y))

    print("{0:.3f} {1:.3f}".format(x,y))

        print('{:.3f} {:.3f}'.format(x,y))
    print("%.3lf %.3lf" % (detA[0][0] * P[0] + detA[0][1] * P[1], detA[1][0] * P[0] + detA[1][1] * P[1]))
        print(f'{math.gcd(num[0], num[1])} {math.lcm(num[0], num[1])}')
            print(gcd(x, y), lcm(x, y))
    print('%d %d\n'%(gcd(a,b),lcm(a,b)),end='')
    
    print(f"{d} {LCM}")


         print(gcd_num,lcm_num)


        print(gcd(a, b), lcm(a, b))
        print(math.gcd(A,B),my_lcm(A,B))
    
    print(gcd(a, b), lcm(a, b))



            print(g,l)
        print("%s %s" %(y, a*b//y))
    print(c, lcm(a, b, c))

    print(gcd(a,b), lcm(a, b))

    print(gcd(a, b), lcd(a,b))

    print(g, a*b//g)

	print(i)

        print("%s %s" %(y, a*b//y))
        print(d, a * b // d)
        print(gcd(a, b), lcm(a, b))


    print(int(b), int(d))

        print(gcd, lcm)
        
        
    print('%d %d' % (x, smallest))

    print(gcd(a, b), int(lcm(a, b)))
  print(gcd(a,b),(a*b)//gcd(a,b))
    print("%d %d" % (gcd(a, b), lcm(a, b)))

    print(gcd(a, b), lcd(a,b))

        print('{0:d} {1:d}'.format(int(ng), int(nl)))

    print("%d %d" % (low, n[0] / low * n[1]))

        print(g, a*b//g)


            print(gcd, int(lcm))
    print(int(gcd(n, m)),int(lcm(n, m)))

    print(gcd(a, b), a * b // gcd(a, b))

    print(g, l)

    print(g, a * b // g)

        print(b, cross // b)
        print(g, int(ls[0]*ls[1]/g))

        print(gcd(a, b), lcm(a, b))
    print("{} {}".format(gcd(a,b),lcm(a,b)))

    print(gcdab, a // gcdab * b)

	print(c,i//c*j)


        print("{} {}".format(gcd,lcm))
       

		print(b, c//b)

    print(a, ab//a)

    print("{0} {1}".format(gcd(a, b), int((a * b) / gcd(a, b))))


    print(str(g)+" "+str(int(l)))

                print(y,a*b//y)
        print(str(g) + " " + str(line[0]*line[1]//g))

        print("{} {}".format(x,l))

    print(g,m//g*n)

        print(gcd, lcm)




        print(gcd(nums[0], nums[1]), lcd(nums[0], nums[1]))

        print(gcd,int((a*b)/gcd))

        print(a, x[0]*x[1]//a)
  print(gcd(x, y), lcm(x,y))

	print(int(c),int((a*b)/c))


    print(gcd(a,b), int(lcm(a,b)))

	print("{} {}".format(gcd(a,b),lcm(a,b)))

	print(str(x) + " " + str(int(a / x)))

    print(d[i], m[i])

        print(gcd, lcm)

        print(x,int(a*b/x))
    print(g,int(a*b/g))

    print("{} {}".format(g,l))

    print(gcd(a,b),int(lcm(a,b)))

            print(b,c//b)
        print('{} {}'.format(res_gcd,res_lcm))
    print(g, int(x*y/g))

    print("%d %d" % (g, l))
		print(d,a*b//d)
print(''.join(list(input())[::-1]))


print(s[::-1])

    print(s[::-1])


print(f"{''.join(list(reversed(input())))}")

print(data_str[::-1])

print(input()[::-1])

print(input()[::-1])

print(input()[::-1])

print(input()[::-1])

print(IN[::-1])

print(str[::-1])

print(rev(str))

print(input()[::-1])

print(input()[::-1])

print(input()[::-1])

print("".join([input()[-1::-1]]))

   
print("".join(rev_str))

  print(input()[::-1])

print(inp[::-1])

print(input()[::-1])

print(input()[::-1])

print(input()[::-1])

print(''.join(reversed(input())))

print(b)

    print(s[::-1])

print(res[::-1])

print(line[::-1])

    print(s[::-1])

print(input()[::-1])

print("".join(reversed(st)))

print(input()[::-1])

print(''.join(reversed(list(input()))))

print(input()[::-1])

print(input()[::-1])

print(input()[::-1])

print(str[::-1])

print(str_sequence[::-1])

print(input()[::-1])

print(input()[::-1])

    print(x[i],end='')
print('')

print(input()[::-1])

print(str[::-1])


print(out_str)

print(input()[::-1])

print(sys.stdin.readline().strip()[::-1])

print(s[::-1])

print(line[::-1])

print(line[::-1])

print("".join(str))

print(input()[::-1])

print(input()[::-1])

print(s[::-1])

print(str[::-1])

    print(rev_s)

print(input()[::-1])

print(input()[::-1])


print(a[::-1])

    print("".join(reversed(input())))

    print(str[::-1])
                
    
print(input()[::-1])

	print(s[::-1])

print(input()[::-1])

print(input()[::-1])

print(input()[::-1])

print(num)


print(int(a))

    print(debt)


print(int(x))

print(ans)


print(a)


print(int(debt))

print(a)

print(DEBT)

    print(int(c))

print(a)

print(yen)

print(int(rounds*interest(debt/rounds, rate, weeks)))


print(ans)

	print(x)
print(int(a))

print(dept)

print(yen)

print(p * 1000)

print(money)


print(borrowing)

print(int(debt))


print(int(m))

    print(int(ret))

print(n)

print(result)

print(s)


print(int(debt))

print(int(s))

print(a*1000)

        
print(int(x))


print(int(n))


print(debt*1000)

print(debt)

print(int(x))


print(debt)

print(int(debt))

print(debt*1000)

print(int(d))

print(out)


print(base * 1000)


print(x)

print(cost)

print(ans)

print(loan)

print(ganpon)


    print(debt)
    
    
print(r)


print(debt * 1000)

    
print(int(debt))

print(money)

print(money)


print(y*1000)


print("%d" % cal)

print(sum)

print(int(b))


print(debt)
    

print(a)


print(int(money))

print(int(a))

print(debt)

print(debt)

    print(a)


print(int(debt))

print(debt*1000)


print(debt(n))

print(dbt*1000)

    print(_debt)



print(res*1000)

		print(ans[int(input())])
        print(0)
        print(list[int(n)])


        print(res)

    print(p[int(i)])

  print(answermap[i])

    print(p[int(i)])

    print(n[int(i)])



        print(int(ans))

        
        print(ans)

        print(ans[int(input())])
        print(s[int(line)])

            print(cnt)
		print(x[int(input())])

    print(c)

        print(rec(0,n))
    print(x[int(n)])

	print(x[int(i)])

    print(d[int(s)])

        print(x[int(input())])
    print(answer[int(line)])
        print(x[int(input())])
        print(num[int(input())])
        print(lst[int(input())])
        print(ans[int(input())])
    print(a[n])
   
    print(com[int(line)])

        print(ans[int(input())])
    print(e[int(input())])
    print(a[n])
    
    print(cnt)


        print(ans[int(input())])
	print(dp[int(n)])

        print(sum[int(input())])
        print(0)
        print(1)


    print(a)

        print(sumint(n,4))

		print(table[n])


        print(len(results))
    print(ans)


        print(0)
        print(A_sum.count(n))

        print("0")

        print(count)

            print(0)
                    
        print(s)        
        print(ans)
    print(len(list(filter(lambda x: sum(x)==n, l))))

    print(ans)


		print(cnt)
        print(solve(int(input())))
        print(0)
    print(cnt)

    print(cnt)


        print(calc(4, int(input())))
        print(ans)
        print(count)
    print(ans)

    print(ans)

        print(ans)
    print(cnt)

    print(calcCombi(w))




    print(count_combination(n))

        print(len(Q))
    print(t.count(int(line)))

    print(len(s))

        print(making_n(4, n))

    print(ans)


	print(ans)


    print(bisect.bisect_right(sieve, n))


    print(idx)

    print(p[i])

    print(r)

    print(r)

print(*(bisect_right(primes, int(n)) for n in sys.stdin), sep="\n")

        print(n-1)
        print(sum(primes[:(n+1)//2])+1)

        print(acc_primes[n])
        print(n - 1)
        print(sum(primes[:(n + 1) // 2]) + 1)

        print(n - 1)
        print(sum(primes[:(n + 1) // 2]) + 1)

        print(n - 1)
        print(sum(primes[:(n + 1) // 2]) + 1)

        print(n - 1)
        print(sum(primes[:(n + 1) // 2]) + 1)


        print(n - 1)
        print(sum(primes[:(n + 1) // 2]) + 1)



		print(N-1)
		print(sum(prime[:(N+1)//2])+1)

    print(i)


    print(h[n])


    print(h[n])

        print(bisect(P, int(input())))
    print(bisect.bisect_right(prime_numbers, n))

        print(bisect(P, int(input())))
        print(num_primes_tuple[n])

        print(sum(prime_list[:n + 1]))

    print(sum(primes[0:n+1]))

    print(y)

    print(A)


            print(prime_count(n, primes))
    print(bisect.bisect(primes, n))


        print(acc[a])
        print(cnt[int(input())])
        print(cnt[int(input())])
        print(cnt[int(input())])
        print(n_prime[n])
        
        print(cnt[int(input())])
		print(cnt)


        print(k)
    print(prime[int(i)])

    print(sum(f[:i + 1]))

    print(P[num])

  print(sum(prime[:array[i] + 1]))

		print(prime[n])

        print(cnt[n])
        print(lst[n])


    print(c[n])

    print(y[int(l)])

    print(sum(prime[:array[i]+1]))

        print(sum(p[:n+1]))
    print(c[n])

    print(memo[n])
  

        print(cnt[n])
        print(len(list(itertools.takewhile(lambda x: x <= n, p))))


    print(sum(prime[:n]))

    print(sum(prime[:n]))

    print(prime[:i + 1].count(1))


    print(sum(prime[:n]))

    print(l + 1)


    print(count)

    print(A[n])

        print(bisect.bisect(pl, n))
    print(A[n])

			print(j)
		print(len(素数リスト))



        print(count)
            print(cnt)
    print(ans[s])

    print(ls_ans[i])

        print(f'{px:.3f} {py:.3f} {r:.3f}')


        print(format(round(e,3),'.3f'), end=chr(32))

    print(format(round(r,3),'.3f'))



        print(format(round(e,3),'.3f'), end=chr(32))

    print(format(round(r,3),'.3f'))



    print(f"{x:.3f} {y:.3f} {r:.3f}")


    print(f"{x:.3f} {y:.3f} {r:.3f}")


	print("{:.3f} {:.3f} {:.3f}".format(x, y, r))

    print("%03.3f %03.3f %03.3f"%(temp[0],temp[1],temp[2]))

 print('{0:.3f} {1:.3f} {2:.3f}'.format(x,y,((a-x)**2+(d-y)**2)**0.5))

 print('{0:.3f} {1:.3f} {2:.3f}'.format(x,y,((a-x)**2+(d-y)**2)**0.5))


        print('{0:.3f} {1:.3f} {2:.3f}'.format(-x, -y, r))

  print("{0:.3f} {1:.3f} {2:.3f}".format(x,y,r))

    print('%.3f %.3f %.3f'%(x,y,math.hypot(x1-x,y1-y)))

    print('{:.3f} {:.3f} {:.3f}'.format(res[0], res[1], res[2]))

    print("{:.3f} {:.3f} {:.3f}".format(x,y,r))

    print('{:.3f} {:.3f} {:.3f}'.format(x, y, r))

	print('{:.3f}'.format(px) + ' ' + '{:.3f}'.format(py) + ' ' + '{:.3f}'.format(r))

    print('%.3f %.3f %.3f' %(px, py, r))

    print("%03.3f %03.3f %03.3f"%(temp[0],temp[1],temp[2]))

    print("{:0.3f} {:0.3f} {:0.3f}".format(round(p,3),round(q,3),round(r,3)))

    print(zx, zy, r)

    print("%.3f %.3f %.3f" % (px, py, r))

    print('{0:.3f} {1:.3f} {2:.3f}'.format(x,y,((a-x)**2+(d-y)**2)**0.5))

        print('{0:.3f} {1:.3f} {2:.3f}'.format(px, py, r))

    print( "{0:.3f} {1:.3f} {2:.3f}".format(rx+0, ry+0, r+0))

	print("{0:.3f} {1:.3f} {2:.3f}".format(x,y,math.sqrt(r)))

    print("{:.3f} {:.3f} {:.3f}".format(l, m, R))



    print(format(X, '.3f'), format(Y, '.3f'), format(R, '.3f'))

 print('%.3f %.3f %.3f'%(x,y,((x-a)**2+(y-b)**2)**.5))

    print("{0:.3f}".format(ans[i][0]),"{0:.3f}".format(ans[i][1]),"{0:.3f}".format(ans[i][2]))


    print("%.3f %.3f %.3f"%(round(px,3),round(py,3),round(r,3)))

    print("{:.3f} {:.3f} {:.3f}".format(p, q, r))

    
    print('{:.3f} {:.3f} {:.3f}'.format(x, y, r))

	print(x + " " + y + " " + r)
    print("{0:.3f} {1:.3f} {2:.3f}".format(X, Y, R))
    print("{0:.3f} {1:.3f} {2:.3f}".format(X, Y, R))

	print(format(ans[0].real+EPS, ".3f"), format(ans[0].imag+EPS, ".3f"), format(ans[1]+EPS, ".3f"))


        print("{:.3f} {:.3f} {:.3f}".format(x,y,r))



        print('{0:.3f} {1:.3f} {2:.3f}'.format(x,y,r))

  print(' '.join(map(lambda x:f'{x:0.03f}', a)))

    print("%.3f %.3f %.3f"%(Xc,Yc,r))


        
            
    print("{:.3f} {:.3f} {:.3f}".format(round3(px),round3(py),round3(r)))

  print("{0:.3f} {1:.3f} {2:.3f}".format(rcc_x,rcc_y,radius))

  print(f"{px:.3f}",f"{py:.3f}",f"{r:.3f}")

    print('%.3f %.3f %.3f'%(x,y,math.hypot(x1-x,y1-y)))

    print('%.3f %.3f %.3f'%(x,y,math.hypot(x1-x,y1-y)))

    print("{:.3f} {:.3f} {:.3f}".format(p, q, r))


  print('%.3f %.3f %.3f'%(x,y,math.hypot(x1-x,y1-y)))

  print("{0:.3f} {1:.3f} {2:.3f}".format(rcc_x,rcc_y,radius))

    print('{:.3f}'.format(round(x, 3)), end=" ")
    print('{:.3f}'.format(round(y, 3)), end=" ")
    print('{:.3f}'.format(round(r, 3)))

        
        print('{:.3f} {:.3f} {:.3f}'.format(U.real, U.imag, R))

    print('{:.3f}'.format(0+px),'{:.3f}'.format(0+py),'{:.3f}'.format(0+round(r)))


    print(zx, zy, r)

    print("%.3f %.3f %.3f" % (circle.x, circle.y, circle.r))

    print("%.03f %.03f %.03f" % (x, y, r))



    print('{:.3f}'.format(px), '{:.3f}'.format(py), '{:.3f}'.format(r))

	print('%.3f %.3f %.3f'%(x,y,math.hypot(x1-x,y1-y)))

            
    print(f'{x:.03f} {y:.03f} {r:.03f}')



    print('{:.3f}'.format(px), end= " ")
    print('{:.3f}'.format(py), end= " ")
    print('{:.3f}'.format(r))

        print(f'{round(x, 3):.3f} {round(y, 3):.3f} {round(r, 3):.3f}')



    print("%.3f %.3f %.3f" % (px, py, r))

    
    print(f'{px:.3f} {py:.3f} {r:.3f}')


    print('{:.3f}'.format(x), '{:.3f}'.format(y), '{:.3f}'.format(r))

    print("%.03f %.03f %.03f" % (x, y, r))

    print(f'{p.real:.3f} {p.imag:.3f} {abs(z):.3f}')


    print("%.3f %.3f %.3f" % (px, py, r))
    

    print("%.3f %.3f %.3f" % (px, py, r))

    print(f'{px:.3f} {py:.3f} {r:.3f}')

    print('{:.3f} {:.3f} {:.3f}'.format(x, y, r))

    
    print("%.3f %.3f %.3f" % (px, py, r))
    

    print("%.03f %.03f %.03f" % (x, y, r))


	print('%.3f %.3f %.3f'%(x,y,math.hypot(x1-x,y1-y)))


    print('{:.3f} {:.3f} {:.3f}'.format(a, b, r))

    print('{:.3f} {:.3f} {:.3f}'.format(pxy.real,pxy.imag,r))

    print("{0:.3f} {1:.3f} {2:.3f}".format(px, py, r))

    print(list_tate[i])

        print(lots[i])


    print(e)

    print(v)

    print(routes[i])

print(*l, sep="\n")


        print(str(i))
            
    
    print(l[i])

  print(i)


print('\n'.join([str(i) for i in l[1:]]))


    print(c)

	print(A[i])

        print(i)
    print(Ver[i])

    print(x)

    print(x)

    print(arr[i])

    print(j)

	print(item)

    print(nums[i])

print("\n".join(map(str, m)))

    print(Num[k][1])

    print(v[i])

        print(results[i])

  print(i)

    print(temp)

        print(r)
 
    print(i+1)

    print(v_lines[i])

    print(i+1)

    print(i+1)

    print(cur)

        print(xs[i])

    print(x)

    print(b[i])

    print(now)

    print(s)

    print(Ans[i])

    print(po)

    print(lots[i] + 1)

        print(value)
      


  print(d)

    print(i)

	print(x)



print(*kuji, sep="\n")


    print(amida[i+1]+1)


    print(arr[k])

    print(i)

    print(i)

  print(lst[i])


    print("\n".join(map(str, result)))

print(*結果,sep='\n')

    print(i)

    print(i)


                print("YES")
                print("NO")

        print('YES')
        print('NO')

            print("YES")
            print("NO")

        print("YES")
        print("NO")

            print("YES")
            print("YES")
            print("NO")

    print("YES" if s>0 and s<1 and t>0 and t<1 and s+t<1 else "NO")

    print("YES")
    print("NO")

            print("YES")
            print("NO")
        print("YES")
        print("NO")

        print('YES')
        print('YES')
        print('NO')

        print("YES")
        print("NO")

    print("YES" if point_in_triangle(inp[:6], inp[6], inp[7]) else "NO")

            print("YES")
            print("NO")
            print('YES')
            print('YES')
            print('NO')

            print("YES")
            print("NO")
    print(["NO", "YES"][(v1<0 and v2<0 and v3<0) or (v1>0 and v2>0 and v3>0)])



        print('YES')
        print('NO')



            print("YES")
            print("NO")
        print("YES")
        print("NO")

 print(['NO','YES'][f(p,q,r,s)==f(r,s,t,u)==f(t,u,p,q)])

    print("YES" if (a[0] > 0 and a[1] > 0 and a[2] > 0) or (a[0] < 0 and a[1] < 0 and a[2] < 0) else "NO")
        print("YES")
        print("NO")


        print("YES")
        print("YES")
        print("NO")

        print('YES')
        print('NO')
            print('YES')
            print('NO')
            print('YES')
            print('NO')

            print("YES")
        print("NO")
        print("YES")
        print("NO")

                print("YES")
                print("NO")
    print("YES")
    print("NO")

        print(['NO','YES'][isPos(p,a,b)==isPos(p,b,c)==isPos(p,c,a)])
 
    print('YES' if abc == pab == pbc == pca else 'NO')

 print(['NO','YES'][f(p,q,r,s)==f(r,s,t,u)==f(t,u,p,q)])

 print(['NO','YES'][f(p,q,r,s)==f(r,s,t,u)==f(t,u,p,q)])


  
    print('YES' if abc == pab == pbc == pca else 'NO')


            print("YES")
            print("NO")
            
        print('YES')
        print('YES')
        print('NO')

            print("YES")
            print("NO")
        print("YES")
        print("NO")


                print("YES")

                print("NO")
        
                print("YES")
            
                print("NO")

            print("NO")

    print('YES' if flg_ans else 'NO')
            print('YES')
            print("NO")
        print(comment)
        print("NO" if pab * pbc * pca == 0 or abc != pab + pbc + pca else "YES")

        print(ans)


            print('YES')
            print('NO')


            print('YES' if judge(*input_()) else 'NO')
            print("YES")
            print("NO")

   print("YES")
   print("NO")
            print('YES')
            print('NO')
    print(*res, sep = "\n")

        print('YES')
        print('NO')

            print("NO")
            print("YES")
            print("NO")
            print('YES')
            print('NO')
            print("YES")
            print("NO")
        print("YES")
        print("NO")


        print("YES")
        print("NO")

        print("NO")
        print("YES")
        print("NO") 

            print("NO")
            print("YES")
            print("NO")
        print("YES")
        print("NO")


             print('YES')
             print('NO')
    
            print("YES")
            print("NO")
    print("YES")
    print("NO")


    print('YES' if abc == pab == pbc == pca else 'NO')

        print(l.pop())

                print(stack.pop())
        print(station[-1])
            print(list.pop())
    print(u[i])

        print(garage.pop())
			print(A[-1])
        print(stack.pop())
        print(stack.pop(), end = '')
        print(a.pop())

 

        print(queue[-1])
    print(c) 
        print(cars[-1])
        print(a.pop())
            print(L[-1])
        print(stack.pop())
        print(s.pop())
        print(stack.pop())
        print(s.pop())
    print(memory.pop())
            print(stack[-1])
            print(tracks.pop())
        print(stack[-1])
		print(a[-1])
        print(stack.pop())
        print(shako.pop())

        print(l.pop())

        print(cars.pop())
        print(a.pop())
        print(cars[num])
            print(a.pop(-1))


            print(stack[i])
            print(numbers[-1])
            print(leaving)
                print(_Stack.pop())
      print(stack.pop())
        print(s.pop())

            print(stack.pop())
        print(stack.pop())
        print(stack.pop())
            print(nlist.pop(-1))
      print(st.pop())
        print(li.pop())
		print(b.pop())
        print(queue.pop())


        print(l.pop())
            print(s.pop())
            print(cars.pop())
		print(train[counter])
            print(waits[-1])
      print(q.pop())
            print(ar.pop())
        print(li.pop())
        print(ans)
            print(stack.pop(0))
            print(x[-1])
            print(stack.pop())
            print(list1.pop())
        print(stack.pop())
    print(stack.pop(-1))

            print(car.pop())
            print(cars.pop(-1))
            print(ans)
    print(s)

    print(s)
  print(s)

    print(output[x])

        print(calculate(int(line), 600))

		print(integral * d)
    print(s)

    print(s)

    print(sum)

    print(sum)

    print(S)

        print(SUM*d)

    print(result)

    print(ans)

    print(integral(int(line)))

    print(S)

    print(S)

        print(sum(d * ((i * d) ** 2) for i in range(int(600/d))))

        print(s)

    print(result)
    print(sum(d * x**2 for x in range(d, 600, d)))


    print(S)


	print(sum([(i*d)**2*d for i in range(600//d)]))

    print(sum(t))

    print(s)
    print(sum(a * x**2 for x in range(a, 600, a)))

        print(ans)
    print(test(d))

        print(integral(int(d)))

        print(r)
    print(s)


        print(sum)
        print(s)
            print(ans)
        print(ans)
    print(sum(a * x**2 for x in range(a, 600, a)))


  print(sum)

    print(sum(list))

    print(S)
    
    print(count)
    print(sum)

    print(sum)

    print(ans)
    print(sum)

    print(sum)

    print(sum([(i*d)**2*d for i in range(600//d)]))

   print(sum([(i*d)**2*d for i in range(600//d)]))

    print(sum([(i*d)**2*d for i in range(600//d)]))

        print(s)
  print(s)

        print(area)
  print(ans)

    print(area)


    print(area)

    print(s)

    print(s)

        print(result)
        print(round(area_new))
print(*ans_l,sep='\n')

    print(ans * D)


            
        print(sum(D))
        
    print(c)

        
    print(ans)    

      print(ans)

    print(s)

        print(z)
    print('overflow' if len(str(a)) > 80 else a)

            print("overflow")
                print("overflow")
                    print(i, end='')
                print()


        print("overflow")
        print("overflow")
        print("".join(s3))

            print("overflow")
                print("overflow")
                print(sum)

            print("overflow")
            print(result)

            print("overflow")
            print(a)
            
    
        print("overflow")
        print(x + y)

        print("overflow")
        print(ss)

    print('overflow' if len(str(s)) > 80 else s)

        print("overflow")
        print(a+b)

	print(i)

            print("overflow")
            print(a + b)
        print("overflow")
        print("overflow")
        print("overflow")
        print(a + b)

        print("overflow")
        print(x + y)

        print("overflow")
        print(c)

	print('overflow' if len(ans) > 80 else ans)

        print('overflow')
        print(c)

        print('overflow')
        print(s)

		print("overflow")
		print(s)

            print('overflow')
                print('overflow')
                print(ans)

        print("overflow")
        print("overflow")
        print(0)
        print(result)

        print(a+b)
    print(result)

        print('overflow')
        print(s)

        print("overflow")
        print(a+b)

        print("overflow")
    print( n1 + n2 if n1+n2 < upper else "overflow")

            print('overflow')
            print(result)

        print(s)
        print('overflow')

    print([a+b,'overflow'][len(str(a+b))>80])

        print("overflow")
        print(ans)

    print('overflow' if len(x) > 80 else a+b)

        print('overflow')
        print('overflow')
        print(v0 + v1)

        print('overflow')

            print(i,end='')
        print('')

        print("overflow")
        print(total)

        print("overflow")
        print("overflow")
        print(str(A[i] + B[i]))

        print("overflow")
        print(c)

            print("overflow")
            print(a+b)

        print("overflow")
        print(str(a + b))

    print(budget if len(str(budget)) <= 80 else "overflow")

		print(a+b)
		print("overflow")

        print("overflow" if uNumber >= 10**80 else uNumber)

        print("overflow")
        print(c)

                print("overflow")
                print(a+b)
    print("overflow")
    print(sum)

  print(ans if len(str(ans)) <= 80 else "overflow")

		print(a+b)
		print("overflow")


        print("overflow")
        print(x + y)


        print("overflow")
        print(result)

                print("overflow")
        print("overflow")
        print(ans)


 print([s,'overflow'][s>=10**80])

        print(a+b)
        print("overflow")

		print(ans)
		print("overflow")

    print("overflow")
    print(c)

    print(a if len(str(a)) < 81 else "overflow")

        print(s)
        print('overflow')

        print("overflow")
        print(a)


        print("overflow")
        print(s)


    print("overflow")
    print(s)

            print('overflow')
            print(x+y)

        print("overflow")
        print(s3)

        print(add(a, b))

        print("overflow")
        print(s)


    print(m1 + m2 if len(str(m1 + m2)) <= 80 else 'overflow')


        print("overflow")
        print(c)

            print("overflow")

        print(add(n1, n2))
print(int(x))
print(int(y))


    print(int(x[-1]), int(y[-1]), sep='\n')

print(int(loc[0]))
print(int(loc[1]))

print(int(x))
print(int(y))

print(int(x))
print(int(y))

print(int(x))
print(int(y))


print(int(res_x))
print(int(res_y))

print(int(x))
print(int(y))


print(int(x))
print(int(y))

print(int(x))
print(int(y))

  print(int(c))

print(*map(int,[_x,_y]),sep='\n')


print(int(x))
print(int(y))

print(int(x))
print(int(y))
print(int(pos[0]))
print(int(pos[1]))

    
print(int(x))
print(int(y))

print(int(t.real))
print(int(t.imag))


    print(int(x))
    print(int(y))

        
        
            

print(int(x), "\n", int(y), sep="")

print(int(Ansx))
print(int(Ansy))


print(int(treasure_x))
print(int(treasure_y))

print(*map(int,(X,Y)),sep='\n')

print(int(x))
print(int(y))


print(math.trunc(x))
print(math.trunc(y))


print(int(x))
print(int(y))

print(int(z.real))
print(int(z.imag))

print(int(x))
print(int(y))

print(*map(int,(x,y)),sep='\n')

print("{0}\n{1}".format(int(x),int(y)))

print(int(x))
print(int(y))

print(int(X))
print(int(Y))

print(int(r * math.cos(q)), int(r * math.sin(q)), sep='\n')

print(int(x), int(y), sep="\n")


    print(int(x))
    print(int(y))

        print(int(x))
        print(int(y))
    print(int(x))
    print(int(y))


print(int(x))
print(int(y))


print(int(cur_pos.x))
print(int(cur_pos.y))


        print(int(y))
        print(int(x))
    print(int(x))
    print(int(y))
  
  
print(int(x))
print(int(y))

print(int(t.real))
print(int(t.imag))


	print(int(x))
	print(int(y))


print(*map(int,(X,Y)),sep='\n')


print(int(x))
print(int(y))



print(int(x), int(y), sep="\n")



print(int(x))
print(int(y))


print(int(x))
print(int(y))

print(int(x))
print(int(y))

print("%d" % x)
print("%d" % y)



print(int(posx))
print(int(posy))


print(int(East))
print(int(North))


print(int(x))
print(int(y))


print(str(int(pos[0])))
print(str(int(pos[1])))

        print(int(x))
        print(int(y))
print(int(r * math.cos(q)), int(r * math.sin(q)), sep='\n')

print(int(x))
print(int(y))



    print(int(x))
    print(int(y))


print(x)
print(y)

print(int(sumx))
print(int(sumy))

print(x)
print(y)

print(int(z.real))
print(int(z.imag))

print(int(x))
print(int(y))

print(int(location.real))
print(int(location.imag))



print(int(-x))
print(int(y))


print(int(gx))
print(int(gy))


    print(int(LIST[1]))
    print(int(LIST[0]))
    
        print(int(x),int(y),sep='\n')
            print(' '.join(t))
                print(''.join(list(map(lambda x:_decode(tv,x),txt))))
            print(t + '.')
            print(a)
			print(a)
            print(text)

            print(c(line, i))
    print(sentence)

    print(t)


    print(decoded_s)

    print(d)

            print(s, end = "")
    print("".join(map(lambda x:l(x,-i),s)))


        print(decrypt(line.strip()))

            print(s0)
                print(s)
                print(text2)
                print(ans)
                print(decoded_str)
                print(result)
        print(''.join(S))
    print(t)

            print(sentence, end='')
            print(state)
            print(ans)
            print(decode, end = '')
            print(t)

        print(decrypt(line), end="")

            print(t)

            print(ceasar(line, i))
  print(line.rstrip())

    print(" ".join(words))

            print(found)

            print(cae(s))
    print(unzip(line.rstrip()))

            print(rotated, end='')
            print(' '.join(decode))
            print(c(line, i))
			print(ss)
            print(decrypted)
            print(_s)
      print(s)
                print(ans)
            print(t + '.')
        print(s)
			print(tt)
                print(d)
            print(ch)
            print(ch + " ", end="")



    print(''.join(list(map(lambda c:get_shifted_char(shift_count,c),enc_text.strip()))))



      print(raw_strings)
      print(t)
  

                print(strings)
					print(t)
            print(t)
    print(letlst)

            print(new_string)
                print(S)
            print(' '.join(ans))

                print(sent)

print(*sorted(A, reverse=True))

    print(*v)



print(*sorted(a, reverse=True))

print(*sorted(lx, reverse=True))

print(' '.join([str(i) for i in result]))

print(' '.join(map(str, sorted(map(int, input().split()), reverse=True))))

print(*sorted(map(int, input().split()), reverse=True))

print(*sorted(map(int, input().split()), reverse=True))

print(" ".join(sl))

print(" ".join(map(str, reversed(sorted(map(int, input().split()))))))

        print(arr[i], end=" ")
        print(arr[i])

print(' '.join(map(str, sorted(list(map(int, input().split())), reverse=True))))

print(' '.join(str(e) for e in sorted(l, reverse=True)))

print(*sorted(n, reverse=True))

print(' '.join(map(str, sorted(map(int, input().split()), reverse=True))))

print(' '.join(map(str, reversed(sorted(map(int, input().split()))))))


print(*a)

print(' '.join(sorted(line, key=int, reverse=True)))

        print(Num[i])
        print(Num[i],end = ' ')

print(" ".join(list(map(str, sorted(list(map(int, input().split())), reverse=True)))))

    print(*data)

    print(n[i],end=' ')


print(n[len(n)-1])

print(*a)

print(*sorted(map(int,input().split()))[::-1])

print(*nums)

print(*a)


print(*lst)

print(' '.join(a))


print(*list)

    print(*numbers)

print(" ".join(map(str,sorted(map(int,input().split()))[::-1])))

print(' '.join(l))

print(" ".join(list(map(str,sort(A)))))

print(*ls)

print(*ls)

        print(sort[i])
        print(sort[i], end = " ")
        

        print(a[j])
        print(str(a[j]), end=" ")



print(' '.join([str(_) for _ in sorted([int(__) for __ in input().split()], reverse=True)]))

print(' '.join(map(str, sorted(map(int, input().split()), reverse=True))))

    print(*a)

print(' '.join(map(str, number_list)))

print(*y)

  print(line[i], end=" " if i != 4 else "\n")

    print(*A)

print(*a)


print(*sorted(map(int, input().split()))[::-1])


print(*a)

print(A[0],A[1],A[2],A[3],A[4])


print(*sorted(map(int,input().split()))[::-1])

print(*sorted(list(map(int,input().split())))[::-1])

print(" ".join(map(str,sorted([int(i) for i in input().split()],reverse=True))))

print(" ".join(map(str, sorted(list(map(int, input().split())), reverse = True))))

print(" ".join(map(str,sorted(list(map(int, input().split())), reverse=True))))

print(" ".join(map(str,sorted(map(int,input().split()),reverse=True))))


print(*a[::-1])


print(n[0],n[1],n[2],n[3],n[4])

print(*sorted(list(map(int, input().split())),reverse=True))

    print(' '.join([str(n) for n in numbers]))

print(" ".join(str(e) for e in sorted(list(map(int,input().split())))[::-1]))


print( ' '.join( [str(x) for x in xs] ) )

    print(*sorted(a, reverse=True))

        print(n)
        print(str(n) + " ", end="")


print(*sorted([int(x) for x in input().split()])[::-1])

    print(a[i],end=' ')
print(a[4])


print(math.factorial(n))

    print(ans)


print(res)


print(math.factorial(n))


    print(a)
        
print(f(n))

print(m.factorial(int(input())))

print(product)


print(factorial(int(input())))

print(factorial(int(input())))


print(v[int(input())])

print(ans)


print(Factorial(eval(input())))

print(math.factorial(int(input())))

    print(fac(n))


print(math.factorial(line))

print(factorial(int(input())))


    print(fact(n))


print(m)

print(f(int(input())))

print(array.pop())

print(factorial(n))

print(factorial(n))

print(math.factorial(int(input())))

print(result)

print(kai)



print(math.factorial(int(input())))

print(factorial)

print(factorial(int(n)))

    print(factorial(n))

    print(factorial)

print(math.factorial(x))

print(factorial(n))



print(fact(int(input())))

    print(math.factorial(n))

print(math.factorial(n))


print(math.factorial(int(input())))

print(math.factorial(int(input())))

print(x)

print(f(n))


print(math.factorial(int(input())))

print(key)

print(ans)

print(math.factorial(int(input())))

print(math.factorial(int(input())))

print(math.factorial(int(input())))

print(fact(int(input())))

print(kj(int(input())))


print(math.factorial(int(input())))


print(base)

print(math.factorial(n))

print(math.factorial(int(input())))

    print(math.factorial(n))

print([0,1,2,6,24,120,720,5040,40320,362880,3628800,39916800,479001600,6227020800,87178291200,1307674368000,20922789888000,355687428096000,6402373705728000,121645100408832000,2432902008176640000][int(input())])



print(f(int(input())))


print(fact(n))


print(ans)


print(math.factorial(int(input())))

print(k)

print(math.factorial(int(input())))

print(math.factorial(n))




print(math.factorial(n))

print(math.factorial(a))

print(input().upper())


print(s.upper())

        print(c.upper(), end='')
    print()



print(text.upper())


    print(IN.upper())
        
print(a)

print(input().upper())

print(input().upper())

print(input().upper())

print(input().upper())

print(input().upper())

print(input().upper())

print(input().upper())

print(input().swapcase())

print(input().upper())

print(data.upper())

print(input().upper())

print(input().upper())

print(input().upper())

print(input().upper())

print(x)

print(input().upper())

print(s.upper())

print(input().upper())

print(input().rstrip().upper())

print(line.upper())


print(str.upper(input()))


print(input().upper())

print(ans)

print(input().upper())

print(''.join(list(map(lambda i: i.upper(),input()))))

print(str.upper())

print(input().upper())

print(input().upper())

print(s.upper())

print(s)

print(str.upper())

print(sentence)

	print(t)

    print(tmp_txt.upper())

    print(str.upper())

print(input().upper())


print(input().upper())


print("".join(map(str.upper, input())))


print(a)

print(input().upper())

print(input().upper())

print(str(input()).upper())

print(input().upper())

print(input().upper())

print(input().upper())


print(input().upper())

print(n.upper())


print(input().upper())

    print(text.upper())

print(input().upper())


print(s)

print(input().upper())



print(s)


print(input().upper())

print(input().upper())

print(s.upper())

            print("YES")
            print("NO")


        print('YES')
        print('NO')

    print("YES" if abs((b-a)*(h-g)-(d-c)*(f-e)) < 1e-10 else "NO")

            print("YES")
            print("NO")
    
        
    print("YES")
    print("NO")

    print("YES" if abs((x2 - x1) * (y4 - y3) - (x4 - x3) * (y2 - y1))
        print('YES')
        print('NO')

        print('YES')
        print('NO')

        print('NO')
        print('YES')

            print("YES")
            print("NO")
            print("YES")
            print("NO")
            print("YES")
            print("NO")

        print('YES')
        print('NO')
        print('YES')
        print('NO')

        print('YES')
        print('NO')
        print('YES')
        print('NO')

    print(['NO','YES'][abs((ay-by)*(dx-cx)-(ax-bx)*(dy-cy))<1e-10])

        print('YES')
        print('NO')

        print("YES")
        print("NO")

        print("YES")
        print("NO")
        print("YES")
        print("NO")

        print("YES")
        print("NO")

        print("YES")
        print("NO")


    print('YES' if abs((y1-y2)*(x3-x4)-(y3-y4)*(x1-x2))<1e-10 else 'NO')

 print(['NO','YES'][abs((a-c)*(f-h)-(e-g)*(b-d))<1e-10])

        print("YES")
        print("NO")

    print(["NO","YES"][abs((x1 - x2) * (y3 - y4) - (x3 - x4) * (y1 - y2)) < 1e-10])

  print("YES" if check(plst) else "NO")

            print('YES')
            print('NO')

    print('YES')
    print('NO')

        print('YES')
        print('NO')
        print('YES')
        print('NO')


        print("YES")
        print("NO")


		print("YES" if ax==bx and cx==dx and ay!=by and cy!=dy else "NO")
		print("YES" if abs((ay-by)/(ax-bx)-(cy-dy)/(cx-dx))<1e-10 else "NO")

        print("YES")
        print("NO")

            print("YES")
            print("NO")
            print("YES")
            print("NO")

        print(['NO', 'YES'][abs(abx - cdx) < 1e-10 or abs(aby - cdy) < 1e-10])
        print('YES')
        print('NO')


        print('YES')
        print('NO')

    print("YES")
    print("NO")

    print("YES")
    print("NO")

    print(['NO','YES'][abs(((a-b).conjugate()*(c-d)).imag)<1e-11])

     print("YES")
     print("NO")
  

        print('YES')
        print('NO')


        print("YES")
        print("NO")
    


        print('YES')
        print('NO')

    print("YES" if abs(x2*y4 - x4*y2) < 1e-10 else "NO")


    print("YES" if parallel else "NO")



    print("YES" if abs((b-a)*(h-g)-(d-c)*(f-e)) < 1e-10 else "NO")

    print(i)

        print("YES")
        print("NO")

        print('YES')
        print('NO')

                print('YES')
                print('NO')
        print('YES')
        print('NO')

        print("YES")
        print("NO")


        print('YES' if judge(*input_()) else 'NO')


        print("YES")
        print("NO")

        print("YES")
        print("NO")



        print('YES')
        print('NO')

        print('YES')
        print('NO')


    print('YES' if parallel else 'NO')

        print('YES')
        print('NO')

            print('YES')
            print('NO')

        print("YES")
        print("NO")


        print("YES")
        print("NO")


    print(ans)


    print(max_sum)


    print(max_)

	print(ans)



print(s,end="")

    print(max(s))

    print(getMax(array))

        print(ans)

    print(ans)
   print(mg)



    print(max_so_far)


        print(max_sum)

    print(max)


      print(max)

    print(max(a))

    print(sum_max if sum_max else max(a))


    print(max(dp))

    print(result)

    print(max(a))

        print(max(a))

	print(max(B))


    print(maxsum(A))

    print(ans)

    print(max(list))
        print(max_total)


    print(maxp)

    print(max(s))

        print(solve(a_list))


    print(max_sum)

    print(maxv)

    print(max(a))

    print(max(dp))

    print(max(dp))


 print(max(a))

    print(m if m else max(l))

        print(max(sums))
        print(max(nums))


        print(max(sums))
        print(max(nums))


    print(max(dp))


    print(ans)


    print(r)


     
    print(res)


    print(max(res))

    print(max(seq))

    print(nans)

    print(max(max_seq))

    print(res)


 print(max(a))

    print(maxValue)

    print(maximumSubArray(a))


  print(ans)

    print(maximo)
    print(max(a))


    print(ans)
    

    
    print(check(a))


    print(ans)


    print(max(s))

    print(max(dp))

    print(ans)


    print(ans)


    print(ans)

    print(max_subarray_sum(arr))

  print(max_sum(n, a))



    print(max_sum) 

        
        print(max_sum)

    print(best)

    print(max(a))

	
	print(res)

    print(max(dp))


    print(max(list))

    print(M)

            print(0)
            print(-2)
            print(2)
            print(1)


            print(0)

            print(1)

                print(2)
                print(-2)
        
            
    
        
        print(2)
        print(-2)
        print(1)
        print(0)

        print(2)
        print(-2)
        print(0)
        print(1)

        print('0')
            print('2')
            print('-2')
        print('1')

        print(0)
        print(1)
        print(2 if rb < ra else -2)

            print(2)
            print(-2)
        print(1)
        print(0)

        print(0)
        print(-2)
        print(2)
        print(1)

            print(-2)
            print(2)
        print(1)
        print(0)

        print(0)

            print(2)

            print(-2)

            print(1)

        print(0)
        print(1)
            print(2)
            print(-2)

        print(0)
        print(-2)
        print(2)
        print(1)

    print(solve(circleAInfo, circleBInfo))

        print(result)


        print(2)
        print(-2)
        print(1)
        print(0)

            print(-2)
            print(2)
        print(1)
        print(0)

            print(0)
            print(1)
                print(2)
                print(-2)
        print(0)
            print(2)
            print(-2)
        print(1)

        print("2")
        print("-2")
        print("0")
        print("1")


 print([[[1,0][r+u<d],-2][d<u-r],2][d<r-u])

    print([2,-2,1,0][[d<l[2]-l[5],d<l[5]-l[2],d<=l[2]+l[5],d>l[2]+l[5]].index(True)])
    

        print(0)
        print(-2)
        print(2)
        print(1)

        print(2)
        print(-2)
        print(0)
        print(1)

        print(2)
        print(-2)
        print(1)
        print(0)

        print(-2)
        print(2)
        print(0)
        print(1)


        print(2)
        print(-2)
        print(1)
        print(0)


        print(0)
            print(2)
            print(-2)
            print(1)


		print(2)
		print(-2)
		print(0)
		print(1)

            print(2)
            print(-2)
        print(1)
        print(0)

    print(2)
    print(-2)
    print(1)
    print(0)

    print("2")
    print("-2")
    print("1")
    print("0")

            print("1")
            print("2")
            print("1")
            print("-2")
        print("1")
        print("1")
        print("0")


        print(2)
        print(-2)
        print(0)
        print(1)


        print(0)
            print(2)
            print(-2)
            print(1)


        print(0)
        print(1)
        print(2)
        print(-2)
    print(ans)

        print(0)

            print(-2)
            print(2)

        print(1)

        print(0)
        print(2)
        print(-2)
        print(1)


        print('0')
        print('-2')
        print('2')
        print('1')

        print(0)
        print(1)
        print(2)
        print(-2)
    

    


            print(2)
            print(-2)
        print(1)
        print(0)

            print(0)
            print(2)
            print(-2)
            print(1)

        print(2)
        print(-2)

        print(0)
        print(2)
        print(-2)
        print(1)
        print(1)
        print(1)
        print(0)

        print(2)
        print(-2)
        print(0)
        print(1)


            print(2)
            print(-2)
        print(1)
        print(0)

		print(0)
			print(2)
			print(-2)
			print(1)
		print(1)
			

        print(0)
        print(1)
        print(2)
        print(-2)

    print(ans)

        print(0)
        print(2)
        print(-2)
        print(1)

        print("2")
        print("-2")
        print("1")
        print("0")

            print(-2)
            print(2)
            print(1)
        print(0)

        print(0)
        print(-2)
        print(2)
        print(1)

            print(2 if ra > rb else -2)
            print(1)
        print(0)

        print(2)
        print(-2)
        print(1)
        print(0)

        print('0')
            print('2')
        print('1')
        
        print(aux(v))

        print(2)
        print(-2)
        print(0)
    

        print("0")
        print("1")
        print("2" if ra > rb else "-2")

    print(flag(a))

    print(check_circles(xa, ya, ra, xb, yb, rb))

    

        print('0')
        print('1')
        print('2')
        print('-2')

	print(ans)

        print(0)
        print(1)

        print(-2)

        print(2)

            print(f'{(n + 0.5):.0f}')
        print(int(((y+5+5)/5)))
                    print(i)

		print(floor(y))
		print(int(N) + 1)
        print(math.ceil(N))
            print(f)
        print(i)
        print(experiment(v))
    print(math.ceil((4.9*(mv/9.8)**2+5)/5))

    print(ceil(y / 5) + 1)

    print(break_floor)

    

        print(N)
        print(int(float(input())**2/98+2))
            print(i)
    print(math.ceil(N))

        print(floor_number)

        print(n)
        print(math.ceil(N))

    print(ceil((y + 5) / 5))

        print(n)
    print(n)

    print(math.ceil(float(e) ** 2 / 98) + 1)

    print(ans)

        print((int)(v**2 / 19.6) // 5 + 2)
    print(math.ceil(v ** 2 / 19.6 / 5) + 1)
        print(math.ceil(float(input())**2/98)+1)
        print(int((4.9*(v/9.8)**2)/5)+2)
    print(int(ans))


		print(n)
        print(N)
  print(int(flr))

    print(n)
    
			print(N)

        print(math.ceil((y + 5.0)/5.0))
        print((int)(v**2 / 19.6) // 5+2)
        print(math.ceil((y+5)/5))
        print(int(N1))
    
    print(f+1)
    
    

    print(math.ceil((h+5)/5))
                           

        print(int(floor) + 1)
    print(i)

        print(int(H/5)+1)
        print(int(H//5)+2)


    print(int(N))

        print(ans)

        print(N)
        print(math.ceil(n))
    print(N)


    print(int(y_max//5+2))

        print(y // 5 if y % 5 == 0 else y // 5 + 1)

        print(ceil(h / 5) + 1)
        print((int)(v**2 / 19.6) // 5 + 2)
                print(_)
        print(N)
  print(math.ceil(N))

    print(n)

        print(ans)
                print(cnt)
    print(n)


    print(floor)

  print(n)

   print(floor)

    print(N)

        print(N)
            print(hits, blows)
            print(Hit,Blow)

   print(hits,blows)

    print(hit, blow)

    print(Hit, Blow)


        print(*(s, v))
		print(hit, blow)
    print(hit, blow)

        print(hit, blow)

        print(hit,brow)
                
                       
    print(hit,blow)

    print(hit,blow)
                                
        print("%d %d" % (hit,blow)) 
    print(str(hit)+" "+str(blow))

    print(hit, blow)

        print(hit, blow)
        print(HB(A,B)[0] , HB(A,B)[1] )
        print(hit, blow)
  print(hit,blow)
    print(hit, blow)

    print(sum(x == y for x, y in zip(a, b)), sum(a[i] != b[i] and a[i] in b for i in range(4)))


    print(hit, blow)


        print(hi, bl)


        print(h, b)

    print(hit, blow)

        print(hit,bro-hit)
    print(hit, end=" ")
    print(blow - hit)
            print(str(hit_count)+ " " + str(blow_count))
        print(hit, blow)
        print(hit,bro)
    print(hit,blow)


 print(h,4-len(set(a)-set(b))-h)

    print("{0} {1}".format(hit,blow))

	print(hit, blow)

    print(hit, blow)


    print("{} {}".format(hit, blow))


	print(hit, blow)


        print(h,v)
  print(full_match, spec_match)


    print(hit, blow)


        print(hit_count, blow_count)
		print(hit, blow)
 
    print(hit, blow)

    print(hit,blow)

        print(hit,blow)
  print(hit,blow)

        print(str(hit) + ' ' +str(blow))
        print(str(hit) + " " + str(blow))
       print(str(h) + " " + str(b))

			print(hit,blow)

        print(str(hit) + " " + str(blow))
        print(hit, blow)
    print(h,len(set(a)&set(b))-h)

        print(hit, blow)
        print(hit,blow,)
	print(hit, blow)
    print(hit, blow)



            print(hit,blow)
                
                    
    print(str(hit) + " " + str(brow))

        print(hit,brow)
        print(str(num1) + " " + str(num2))
	print(hit, blow)


        
    print(hit, brow)

                
        print(hit, blow)
    
    print(hit,blow)

    print(hit,blow)


    print(count)
    print(M)
    
        

    print(A1)
    print(A2)
        
            
    
    


print(cnt)
print(max)

            print(row)


    print(white_cell)
    print(max_ink)

print(flat.count(0))
print(max(flat))


print("%d\n%d" % ans())


print(sum(1 for l in t for v in l if not v))
print(max(v for l in t for v in l))


print(sum(paper[i].count(0) for i in range(10)))
print(max(paper[i][j] for i in range(10) for j in range(10)))

    print(counter)
    print(thickest)



print(sum([row.count(0) for row in paper]))
print(max([max(row) for row in paper]))

print(count)
print(max_density)

print(count)
print(num)

print(cnt)
print(max)

print(sum(x==0 for x in p_flatten))
print(max(p_flatten))


print(count)
print(max_element)


print(sum(1 for r in a for c in r if c==0))
print(max(max(r)for r in a))


print(a)
print(b)


print(n)
print(m)


print(sum(i.count(0) for i in area))
print(max(max(i) for i in area))


print(zero_cnt)
print(max_ink)


print(cnt, max, sep='\n')

print(sum([b.count(0) for b in br]))
print(max([max(b) for b in br]))

 
print(cnt, max, sep='\n')

print(flat_paper.count(0))
print(max(flat_paper))


		print(sum(zero))
		print(int(max([max(i) for i in b])))
print(ans)
print(dark)

        print(co)
        print(ma)
print(sum0)
print(max_ink)

	print(cnt)
	print(maxcnt)




print(w)
print(dens)


    print(num1)
    print(max)


print(zero_cnt)
print(max_ink)

    
    print(zero_cnt)
    print(max_density)

        
print(S)
print(M)


print(summat)
print(maxmat)



print(zero)
print(max_)

        print(white)
        print(max)
print(cnt)
print(max_c)



print(zeros)
print(max_num)




        print(str(len0))
        print(str(tbMax))
print(cnt)
print(ans)



    print(sum(1 for x in range(n) for y in range(n) if grid[y][x] == 0))
    print(max(grid[y][x] for x in range(n) for y in range(n)))


print(cnt, max, sep='\n')


print(c)

print(max1)

print(cnt)
print(ans)


print(sum(ban[y][x] == 0 for y in range(10) for x in range(10)))
print(max(ban[y][x] for y in range(10) for x in range(10)))


print(sum(paper[y][x] == 0 for y in range(10) for x in range(10)))
print(max(paper[y][x] for y in range(10) for x in range(10)))

print(sum(1 for thick in paper if thick == 0))
print(max(paper))


print(empty)
print(deep)


print(r1)
print(r2)

print(sum(field, []).count(0))
print(max(sum(field, [])))

        print(kosu)
        print(komax)
print(nu)
print(max_val)

print(ls.count(0))
print(max(ls))


print(arr.count(0))
print(max(arr))


print(white)
print(max_value)

print(len([i for x in mas for i in x if not i]))
print(max([max(v) for v in mas]))

            
print(num)
print(max)


print(cnt_0)
print(max_inc)


print(len(set(c)-set(o)))
print(sorted(collections.Counter(o).values())[-1])


print(cnt)
print(m)

print(t.count(0))
print(max(t))


print(sum(sum(1 for i in range(10) if row[i] == 0) for row in board))
print(max([max(row) for row in board]))

print(sum(a[i][2:12].count(0) for i in range(2, 12)))
print(max(max(a[i][2:12]) for i in range(2, 12)))

        print(weekday[ymd.weekday()])


    print(w[i % 7])


        print(week[d % 7])
        
    
    print(wk[dt.weekday()])



            print(LIST[count%7])

    print(DAY_OF_WEEK[day_of_week(2004,m,d)])

    print({0:'Thursday', 1:'Friday', 2:'Saturday', 3:'Sunday', 4:'Monday', 5:'Tuesday', 6:'Wednesday'}[ds % 7])

    print(days[(sum(nums[:m - 1]) + d + 2) % 7])

        print("Sunday")
        print("Tuesday")
        print("Monday")
        print("Wednesday")
        print("Thursday")
        print("Friday")
        print("Saturday")

    print(weeks[w])

    print(['Wednes','Thurs','Fri','Satur','Sun','Mon','Tues'][([0,31,60,91,121,152,182,213,244,274,305,335][m-1]+d)%7]+'day')

        print(DOTW[date(2004,month,day).weekday()])
    print({0:'Thursday', 1:'Friday', 2:'Saturday', 3:'Sunday', 4:'Monday', 5:'Tuesday', 6:'Wednesday'}[ds % 7])

    print(day[days])

        print(lis[k])
  print(DoD[n % 7])

    print(weekdays[datetime.date(2004, m, d).weekday()])

    print(date_list[datetime.date(2004, m, d).weekday()])


    print(getYoubi(month, day))


    print(ans)

    print(namelist[ans])

        print("Monday")
        print("Tuesday")
        print("Wednesday")
        print("Thursday")
        print("Friday")
        print("Saturday")
        print("Sunday")


	print(day[(month[m-1]+d)%7]+'day')

    print(w[(d + sum(s[:m])) % 7])

        print(week[Zeller(2004, m, d)])
    print(day_en[day(2004, m, d)])


        print(datetime.date(2004, m,d).strftime('%A'))
    print(["Thursday","Friday","Saturday","Sunday","Monday","Tuesday","Wednesday"][dn%7])

    print(dateList[dd_date%7])


    print(w)


	print(days[(tot_d + offset - 1)%7])


    print("Sunday")
    print("Monday")
    print("Tuesday")
    print("Wednesday")
    print("Thursday")
    print("Friday")
    print("Saturday")

  print(d[day % 7])

		print(W[ans-1])



    print(num2wd[date.weekday()])


 
    print(day[(totalDay+2)%7])

    print(W[(total + 4) % 7])

        print("Thursday")
        print("Thursday")
        print("Friday")
        print("Saturday")
        print("Sunday")
        print("Monday")
        print("Tuesday")
        print("Wednesday")


            print(num, end="")
                print(" ", end="")
        print()

        print(n, end='')
            print(' ', end='')
    print()

    print(A[B])



    print(day[num%7])
    
    


  print(days[date(2004, month, day).weekday()])


  print(dic[date(2004, month, day).weekday()])

            print("Wednesday")
            print("Thursday")
            print("Friday")
            print("Saturday")
            print("Sunday")
            print("Monday")
            print("Tuesday")

    print(youbi.strftime("%A"))

    print(w[(day[m-1]+d)%7])

        print(lst[(d + 2) % 7])

        print(lst[(d + 5) % 7])

        print(lst[(d + 6) % 7])

        print(lst[(d + 4) % 7])

        print(lst[d % 7])

        print(lst[(d + 1) % 7])

        print(lst[(d + 3) % 7])

    print(week[days%7])

        print(lst[(d+2)%7])

        print(lst[(d+5)%7])

        print(lst[(d+6)%7])

        print(lst[(d+4)%7])

        print(lst[d%7])

        print(lst[(d+1)%7])

        print(lst[(d+3)%7])

    print(days[(cnt-1) % 7])

        print(day_in_week[day%7-5])

    print(datetime.datetime(2004, m, d).strftime('%A'))

    print(W[(day+2)%7])

        print(day_tuple[num_days % 7])

    print(ANS[res % 7])


    
    print(YOBI[day%7])

    print(yo[d%7])

            print("Sunday")
            print("Monday")
            print("Tuesday")
            print("Wednesday") 
            print("Thursday")
            print("Friday")
            print("Saturday")      
    

        print("Thursday")
        print("Friday")
        print("Saturday")
        print("Sunday")
        print("Monday")
        print("Tuesday")
        print("Wednesday")


            print(DoWlist[i])


    print(dt.strftime("%A"))

    print(days[date.weekday()])

    print(dw[(total + 4) % 7])

    print(days[datetime.date(2004, m, d).weekday()])

    print(week[datetime.date(2004, a, b).weekday()])

            print(i)


    print(an)


        print(item[0])
        print(k)


    print(mode)

        print(i[0])

    
  print(i)

	print(i)

    print(i)

print(10000 - num)
	print(10000-num)

	print(item)

        print(num)
        
        
            print(num)
    print(m[i])

            print(i)

        print(i)

    print(k)

        print(i)

    print(i)

        print(a)

        print(x)

        print(i+1)

        print(i+1)

    print(i[0])

    print(i)


print(*sorted(b),sep="\n")



    print(i)


        print(j)

        print(i)


    print(i)


        print(k)


		print(i)

  print(i)

    print(mode)

			print(i)
    print(n.index(m_n)+i)
    print(i[0])

            print(j + 1)

                print(j+1)
    print(i+1)

    print(i)

		print(i)


        print(i)

    print(i)

        print(i)


                print(i+1)
        print(i)
    

        print(i)

    print(ans[n])


        print(i)


    print(M[i] + 1)



			print(i)
        print(j)

            print(j+1)

        print(i+1)

        print(i)

		print(i)

            print(saihin[0])
      print(i)
 

    print(a[0][0], b[0][0])



print(A.most_common(1)[0][0], max(s, key=len))

print(a, b)



print(f"{d_sorted_by_wordcount[0][0]} {d_sorted_by_wordlength[0][0]}")


    print(freq_word, long_word)


print(max_dw[0], max_dn[0])


            print("{0} {1}".format(ans,longest))

print(max(ws.items(), key = lambda x: x[1][0])[0], max(ws.items(), key = lambda x: x[1][1])[0])

print(hindo_word, len_word)

print(max(words, key=words.count), max(words, key=len))

print(freq_word,long_word)

print(Ooi,Msiz)
    

print(max_index,max)

print(max(s,key=s.count),max(s,key=len))


print(frq,mx)

print(l[0][0], next(s for s in w[::-1] if s))

            print(ans[x], end = " ")
            print(ans[x])


print(max(words, key=words.count), max(words, key=len))

    print(a[[i for i,x in enumerate(countWords) if x == max(countWords)][0]],a[[i for i,x in enumerate(lenWords) if x == max(lenWords)][0]])

print(mode_key, longest)

print(max(words, key=words.count), max(words, key=len))


print(sorted(d.items(), key=lambda x: x[1])[-1][0], l)

    print(data[i], maxstr)
print(w_freq, w_len)



print(ans1,ans2)

print(max(s,key=s.count),max(s,key=len))

print(p_w[0], l_w)


print(max(a, key=a.count), max(a, key=len))

print(max(term_data, key=lambda x:x[1][0])[0], max(term_data, key=lambda x:x[1][1])[0] )

print(max(s, key=s.count), max(s, key=len))


print(max(list, key=list.count), max(list, key=len)) 


print(max(s,key=s.count), max(s,key=len))


print(common, max)


print(most, amax_)



    print(maxFans, maxLans)

print(m[0], l[0])
    
    

print(fre_word, long_word)


print(freq_word,long_word)

            print(num, end="")
                print(" ", end="")
        print()


print(maxnumstr,maxlenstr,sep=' ')    


 
print(max(list, key=list.count), max(list, key=len)) 

  
print(max(list, key=list.count), max(list, key=len)) 


print(max(a, key=a.count), max(a, key=len))



print(max(dc, key=dc.get), max(l, key=l.get))


print(s[cnt_id], s[len_id])


print(list1,s[len(s)-1])
        




print(max(dic, key=dic.get), max_word)

    print(max(a, key=a.count), max(a, key=len))
    
print(cnt.most_common(1)[0][0], max(sentence, key=lambda x: len(x)))

print(list(dic.keys())[0],maxWords)

print(p[0],q[0])

        
print(N, L)


        print(word + ' ' + longest_word)

print(text[c],text[l])

print(count[0][0], max_sentence)
    

print(max(a, key=a.count), max(a, key=len))


print(max(line,key = line.count),max(line,key = len))

print(max_num,max_word)

print(J,K)


print(max(n, key=n.count),max(n, key=len))


print(ans1,ans2)

      print(d[i][0], end = "")
      print("", d[i][0])

   
      


print(A[Y],A[y])

    
print(x,y)


print(cs, ls)


print(c.most_common()[0][0], max(D,key=len))

        print(ans)


    print(an)


    print(check(9, n, s))

        
        print(ans)


    print(cnt)


    print(cnt)

    print(sum(1 for i in itertools.combinations(range(10), n) if sum(i) == s))


    print(cnt)

        print(cal(n,s))

    print(t)

    print(len([1 for c in itertools.combinations(range(10), n) if sum(c)==s])) 

	print(sum(1 for nums in itertools.combinations([i for i in range(10)],n) if sum(nums) == s))

 print(sum(s==sum(p)for p in itertools.combinations(range(10),n)))

    
    print(ans)

    print(sum([1 for m in combinations(list(range(10)),r=n) if sum(m)==s]))

  print(count)


    print(cnt)


 print(sum(s==sum(p)for p in itertools.combinations(range(10),n)))

    print(len([l for c in l if sum(c) == s]))


    print(rec(n, s, 0))

    print(retval)


    print(ANS(n, s))

    print(ans)

    print(ans)

    print(countUp(d[0],0,d[1]))
    

    print(ans)




    print(count)


        print(ans)

    print(ans)

    print(ct)

	print(answer)

    print(calc(n,s))

    print(c.count(a[1]))

        print(result)


    print(sum(1 for x in combinations(range(10), n) if sum(x) == s))

    print(sum([1 for j in range(0,len(sumMap)) if sumMap[j] == S[i]]))

    print(sum(1 for nums in itertools.combinations([i for i in range(10)], n) if sum(nums) == s))

    print(f2(n, s, 0))

    print([sum(i) for i in itertools.combinations(range(10), n)].count(s))

    print(num)

        print(answer)

    print(cnt)

    print([sum(c) for c in combinations(range(10), n)].count(s))

    print(len([1 for c in itertools.combinations(range(10), n) if sum(c)==s]))

        print(solve(n,s,list(range(10))))
            
    print(ctr)

    print(cnt)

    print(count)

    print(len(list(filter(lambda c: sum(c) == s, c))))

    print(calc_combination(n, s, 9))

    print(count)


    print(search(N, s, 0, n))

	print(dfs(n,0,s))



  print(counter(n, 0, 0, s))

    print(sum(1 for a in combinations(range(10), n) if sum(a)==s))

	print(rec(n, s, 0))

  print(dfs(0, 0, 0))

  print(rec_sum(n, s, 0))

  print(dfs(n, s, 0))

  print(counter(n, 0, 0, s))


    print(dfs(0, 0, -1))

	print(dfs(0,-1,0))

    print(count)
        print(dfs(9, n, s))
    print(c)
    

    print(ans)

    print(cnt)

    print(ans)

    print(c)


        print(0)
    print(count(0,-1,0,n,s))

    print(len(list(filter(lambda ls:sum(ls) == question[1],combi))))
    

    print(*res)


    print(*l)



    print(*result)
 

  print(' '.join(l))

       print(result[i],end=' ')
   print(result[0])
	print(" ".join(map(str,B)))	


    print(* [t[digi] for digi in range(len(b)-2) if b[-1-digi] == '1'])

	print(' '.join(anslist))

    print(' '.join(ans))

    print(" ".join(ans))

        print('{0}'.format(' '.join(map(str, comp))))

    print(*a)

        print(w[res[0]],end = '')
            print(' ',w[res[i]],sep = '',end = '')
        print('')
    print(*[pow(2*g[i], i) for i in range(len(g)) if g[i]])

        print(*right, sep=" ")
        print(*w_c)
    print(ans[0], end="")
        print(" " + str(ans[i]), end="")
    print("")


			print(a[i] ,end=" ")
		print(a[0])
			print(i)
			print(i, end=' ')

    print(ans[:-1])

    print(out)


    print(ans.rstrip())

print("\n".join((" ".join(str(2**i)for i, n in enumerate(bin(int(s))[:1:-1])if n=="1")for s in sys.stdin.readlines())))

	print(*ans)

    print(' '.join(map(str, weights_list)))


    print(*ans)

    print(*ans)

        print(" ".join(str(2**i) for i,s in enumerate(a[:1:-1]) if s=="1"))
    print( ' '.join( [f'{int(a)}' for a in ans] ) )
    print(' '.join(str(ans) for ans in reversed(anslist)))


                    print(blist[i])
                    print(blist[i], end= " ")
        print(' '.join(map(str,ans[::-1])))
    print(*toBin(n),sep=' ')


			print(*sorted(ans))

        print(*ans)

  print(*n)

        print(" ".join(map(str,L)))
    print(ans.rstrip())

    print(" ".join(l))
                

        print(*s)

            print(*ans)
        print(*result)
                    print('', end=' ')
                print(pow(2, i), end='')
        print()
    print(' '.join(map(str,ans)))





    print(*bundo)

    print(*A)

        print(ret)
        print(*ANS)
        print(*ans)
    print(*ans)

        print(*output)
        print((" ").join([str(num) for num in answer]))
                    print(*v)
    print(' '.join(map(str, [2**i for i, b in enumerate(bin(n)[-1:1:-1]) if b == '1'])))

    print(*[weight for weight in [2 ** i for i in range(10)] if target & weight])

            print(2**i, end="")
                    print(" ",end="")
            
    print()

		print(ans[i], end='')
			print(' ', end='')
	print()

                print(i,end="")
                    print("")
                    print(" ",end="")
        print(*l)
    print(rectangle)
    print(rhombus)


print(cho)
print(his)


print(count_tyouhoukei)
print(count_hisigata)


print(cnt_rect)
print(cnt_rhombus)


        print(rect)
        print(loze)
print(rect)
print(loze)


print(r1)
print(r2)

print(t)
print(h)

        print(tyou)
        print(hisi)
print(rectangle)
print(rhombus)

    print('{0}\n{1}'.format(rectangle_count, rhombus_count))

print(rect)
print(loze)

        print('{}\n{}'.format(d,e))
print(rect)
print(rh)


print(rec)
print(loz)

print(tyo)
print(hisi)

print(t)
print(h)

print(c1)
print(c2)

print(n1)
print(n2)

print(r)
print(l)

print(rect)
print(rhom)

    print('{}\n{}'.format(Rec,Dia))

    print('{}\n{}'.format(Rec,Dia))

print(ans1)
print(ans2)


print(r)
print(d)

print(rectangle)
print(lozenge)


    print(r)
    print(d)



print("{}\n{}".format(x,y))


print(sq)
print(ss)

 
print(oblong)
print(rhombus)


print(rect_num)
print(diam_num)


print(rect_cnt)
print(dia_cnt)

    print(counter_list[0])
    print(counter_list[1])


print(rect, loz, sep='\n')


print(rect)
print(dia)

print(n0)
print(n1)

print(na)
print(nb)


print(rec)
print(dia)


        print(rec)
        print(rod)
print(square)
print(rhombus)

        print(tyou)
        print(hisi)
print(rec)
print(dia)

    print(X)
    print(Y)

print(rect)
print(hish)



print(rect)
print(hish)

    
print(s)
print(h)
    

print(r)
print(d)

print(rect_cnt)
print(dia_cnt)

print(r)
print(d)

    print(cnt1)
    print(cnt2)

    
print(A)
print(B)


	print(x)
	print(y)




print(rectangles)
print(lozenges)


    print(rect)
    print(dia)

print(num1)
print(num2)



print(c)
print(h)



print(rec)
print(rhom)

print(rectangle)
print(parallelogram)

    
print(Rectangle)
print(Rhombus)

print(rect_cnt)
print(dia_cnt)


print(rec)
print(rho)

        print(s)
        print(t)
print(cho)
print(hishi)


print(ans1)
print(ans2)

print(rect)
print(hishi)

        print(cho)
        print(hishi)
print(rec)
print(rhom)







print(rec)
print(dia)

            print('YES')
            print('NO')
                


    print("YES" if flag else "NO")


        print("YES" if flg else "NO")


            print("YES")
        print("NO")


        print("YES")
        print("NO")

            print('NO')
        print('YES')

        print("NO")
        print("YES")


    print(res)

    print('YES' if ano == sorted(ano) else 'NO')

    print(ball(nums))

            print("NO")
            print("YES")

            print('YES')
            print('NO')

    print("YES" if solve(0,0,0) else "NO")

    print(['YES','NO'][a])

        print('NO')
        print('YES')

    print("YES") if q==1 else print("NO")

            print("NO")
        print("YES")

        print("NO")
        print("YES")

      print("NO")
    print("YES")

                print("NO")
            print("YES")

            print("NO")
        print("YES")


    print(ans)


 print(['YES','NO'][f])

			print("NO")
		print("YES")

		print('YES')
		print('NO')

        print('YES')
        print("NO")


      print("NO")
  
  print("YES")
	print('YES' if yes else 'NO')

            print('NO')
        print('YES')


    print("NO") if flag else print("YES")

    print("YES" if len(left) + len(right) == len(seq) else "NO")

            print("NO")
        print("YES")


            print("NO")
        print("YES")


    print("YES" if balling(balls, 0, 0) else "NO")


                    print("NO")
        print("YES")
                

    


    print('YNEOS'[flag::2])

    print("YES" if yes else "NO")

    print("YES")
    print("NO")
			print("YES")
			print("NO")


  print(answer[i])

    print('YES' if yes else 'NO')

    print('\n'.join(ans))

        print("YES")
        print("NO")


      print("NO")
      print("YES")

            print("YES")
            print("NO")
            print('NO')
        print('YES')


            print("NO")
            print("YES")


    print(ans)





    print("YES")
    print("NO")

    print(text)




        print('YES' if cc <= 2 else 'NO')


    print(ans)

	print('YES' if yes else 'NO')


    print("YES" if yes else "NO")

        print("YES")
        print("NO")



    

            print("NO")
            print("YES")

    print(judge(0, [], []))



    print(ans)

            print("NO")
            print("YES")
    

                    print(i)
                    print(i + 1)
            print(i)
        
        print(i)



      print(c)
        print(solve(ls, v1, v2))

            print(i+1)
                print(i + 1)
    print(ans)

                print(j + 2)
                print(j + 1)

        print(ans)

        print(meet_point(v1,v2,l))
            print(i + 1)
            print(i+1)
        print(number)
    print(n.index(min(n)))

            print(i+1)
                print(i+1)
                print(i)
    print(ans)


				print(i+1)
            print(i+1)
        print(i)
	print(i)


            print(i+1)
            print(i)
        print(idx+1)

  print(res)

            print(i+1)
            print(i+1)
        print(bl(a,a[9]/(v1+v2)*v1) + 1)
                print(i+1)
        print(ans)
                print(flag)
    print(i)

                print(i)
      print(i+1)
            print(l)
            print(i+1)
                print(num + 1)
            print(i+1)

        print(ans)

        print(i)
            print(i+1)
                print(i+1)
        print(idx + 1)
        print(bisect_left(station_list, ip))

                print(i+1)
                print(i+1)
                print(d+1)
                print(idx+1)
            print(i + 1)
        print(ans)
            print(i + 1)
			print(i+1)
    print(ans)

			print(i + 1)
        print(i)

	print(i+1)

                print(i+1)
    print(n)

            print(i + 1)
            print(i + 1)
    print(i)

                print("NO")
                print("YES")
        print("NO")
        print("NO")
    print("YES")


    print('YES' if ab * bc > 0 and ab * cd > 0 and ab * da > 0 else 'NO')

    print('YES' if max(angles) < math.pi or min(angles) > math.pi else 'NO')

            print("NO")
            print("NO")
                print("NO")
                print("NO")
                    print("NO")
                    print("NO")
                        print("NO")
                        print("NO")
                        print("YES")

            
        print('YES')
        print('NO')

            print("NO")
            print("YES")
        print('YES')
        print('NO')

    print(line2)
    

    print("YES" if len(jarvis([[x1, y1], [x2, y2], [x3, y3], [x4, y4]])) == 5 else "NO")

            print('YES')
            print('NO')
            print("NO")
            print("YES")
 print(['YES','NO'][sum((e[i]-e[(2+i)%8])*(e[(5+i)%8]-e[(3+i)%8])-(e[1+i]-e[(3+i)%8])*(e[(4+i)%8]-e[(2+i)%8])>0 for i in range(0,8,2))%4>0])

        print("YES")
        print("NO")

            print("YES")
            print("NO")
    print("YES" if len(sign) == 1 else "NO")

        print('YES')
        print('NO')
    

            print("NO")
            print("YES")
            print("NO")
            print("YES")
    print("NO")
    print("YES")

            print("NO")

            print("YES")

            print('YES')
            print('NO')




            print("NO")
            print("YES")
    
            print("YES")
            print("NO")
            print('YES')
            print('NO')

            print('YES')
            print('NO')
            print("YES")
            print("NO")
            print("YES")
            print("NO")
    
    print('YES' if is_convex(a,b,c,d) else 'NO')

		print("YES")
		print("NO")

        print('YES')
        print('NO')

        print('YES')
        print('NO')

            print("YES") 
            print("NO") 

        print('YES')
        print('NO')

    print("YES" if cnv_a and cnv_b and cnv_c and cnv_d else "NO")

			print("NO")
			print("YES")
        print("YES")
        print("YES")
        print("NO")


    print("NO")
    print("YES")
    print("NO")

            print("YES")
            print("NO")

                    print(name[i])
            print("ABCDEFG"[x])
        print('A')
        print('B')
        print('C')
        print('D')
        print('E')
        print('F')
        print('G')
            print('C')
                print('B')
                    print('F')
                    print('D')
                print('A')
                print('E')
                print('G')
                    print("B")
                    print("F")
                    print("D")
                    print("A")
                    print("E")
                    print("G")
                    print("C")
 print('B'if 4 in x else'C'if 4 in y else'DF'[a[y.index(1)][x.index(2)]]if 1 in y else'GE'[a[y.index(2)][x.index(1)]]if 1 in x else'A')
                print(name)
                print(v)
    print(ans[h.rfind("1")-h.find("1")])
        print("C")
        print("A")
        print("E")
        print("G")
        print("B")
        print("F")
        print("D")

                print("G")
                print("A")
                print("E")
                print("C")

                print("D")
                print("B")
                print("F")

                print('A')
                print('C')
                print('E')
                print('G')

                print('B')
                print('F')

            print('D')

                            print(figure_name_list[i])
                    print("B")
                    print("C")
                            print("F")
                            print("D")
                            print("E")
                            print("G")
                            print("A")
    print(d[piece])

            print(k)
		print("C")
			print("A")
			print("E")
			print("G")
			print("D")
			print("F")
		print("B")

            print("A")
            print("B")
            print("C")
            print("D")
            print("E")
            print("F")
            print("G")
                print(ans)
            print('B')
                print('F')
                print('D')
            print('C')
                print('A')
                    print('G')
                    print('E')
                    
                print(i)
                print(ans[k])
                        print('B')
                print(k)
    print(get_figure(figure))
    print(ans)

			print("C")
			print("B")
							print("A")
							print("E")
							print("G")
								print("A")
								print("E")
						print("F")
							print("D")
							print("F")
	print(judge(sr, sc, tbl))
      print(k)
                        print("C")
                            print("E")
                            print("A")
                            print("G")
                            print("B")
                                print("F")
                                print("D")




    print(i)


                print("A")
                print("B")
                print("C")
                print("D")
                print("E")
                print("F")
                print("G")
                

				print("C")
				print("B")
						print("E")
						print("G")
						print("A")
						print("F")
						print("D")
    print("A")
    print("B")
    print("C")
    print("D")
    print("E")
    print("F")
    print("G")
	print(ans(sr, sc, tbl))
        print(block)
        print(*key)
        print(ans)
	print(judge(sr, sc, tbl))
        print(solve())
        print('A')
        print('B')
        print('C')
        print('D')
        print('E')
        print('F')
        print('G')
                            print()
                            print('all fit', key)
                            print('A', A)
                            print('x, y', x, y)
                            print('W, H', W, H)
                            print('figure', figure)
        print(answer)
        print("C")
        print("A")
        print("E")
        print("G")
        print("B")
        print("F")
        print("D")

            print(n)
                print(t)


    print(''.join(path))



print(''.join(log))

    print(d, end='')
print('')

                print("L",end="")
                print("R",end="")
                print("U",end="")
                print("D",end="")
print("")

        print("U",end="")

        print("D",end="")

        print("R",end="")

        print("L",end="")


            print()
print(''.join('URDL'[c]for c in a))

print(ans)


print(maze.solve())

print("".join("RLUD"[e] for e in ans))

print(p[1:])


    


print(ans)


print(''.join(move))


    print(directions)



print(record)



print(ans)

print('R',end='')
            print(step[(direct.real,direct.imag)],end='')
print()

        print('R', end='')
        print('D', end='')
        print('L', end='')
        print('U', end='')


print("R", end='')


print()

print("R", end = "")
    print(direction[move][0], end = "")
print()

    print(d, end="")
print()

print(out)

                print("four card")
                    print("full house")
                    print("three card")
                    print("two pair")
                    print("one pair")
                    print("straight")
                    print("null")
    print(res[x])


    print(check(cards))

		print("four card")
		print("full house")
		print("three card")

		print("two pair")
		print("one pair")
		print("straight")
		print("straight")
		print("null")

        print('four card')
            print('full house')
            print('three card')
            print('straight')
        print('two pair')
        print('one pair')
        print('null')

            print("four card")
            print("full house")
            print("three card")
            print("two pair")
            print("one pair")
                    print("straight")
                    print("null")
                    print("straight")
                print("null")
            
        print(hand(card))
            
    print(['null','straight','one pair','four card','two pair','','three card','','full house'][c])

        print('four card')

        print('full house')
        print('full house')

        print('straight')
        print('straight')

        print('three card')

        print('two pair')

        print('one pair')

        print('null')

      print(result)
      print("straight" if checkStraight(cards) else result)
                print("four card")
                print("full house")
            print("straight")
                print("two pair")
                print("three card")
            print("one pair")
            print("null")
    print(ans)

 print([['null','straight'][e[0]*9<e[1]or e[4]-e[0]<5],'one pair','two pair','three card','full house',0,'four card'][sum(e.count(s)for s in e)//2-2])

        print("full house")
            print("one pair")
            print("two pair")
        print("three card")
        print("four card")
                print("straight")
            print("straight")
            print("null")


            print("four card")
            print("full house")
            print("straight")
            print("three card")
            print("two pair")
            print("one pair")
            print("null")

            print("full house")
            print("four card")
            print("full house")
            print("three card")
            print("two pair")
            print("one pair")
            print("straight")
            print("null")
        print("straight")
                print("four card")
                print("null")
        print("full house")
        print("three card")
        print("two pair")
        print("one pair")
        
			print(chk_all(A))

            print(num, end="")
                print(" ", end="")
        print()

        print(n, end='')
            print(' ', end='')
    print()

    
    print(ans)

        print(ans)
        print('four card')
        print('full house')
        print('straight')
        print('three card')
        print('two pair')
        print('one pair')
        print('null')

            print('four card')

                print('full house')
                print('three card')
            print('two pair')
            print('one pair')
                print('straight')
                print('null')
    
            print("four card")
            print("full house")
            print("straight")
            print("straight")
            print("three card")
            print("two pair")
            print("one pair")
            print("null")
        print('four card')
        print('full house')
        print('straight')
        print('three card')
        print('two pair')
        print('one pair')
        print('null')
            print('four card')

            print('full house')

            print('three card')

        
            print('two pair')

            print('one pair')

            print('straight')

            print('null')

            print('straight')
            print('null')

            print('one pair')
            print("two pair")
            print("three card")
            print("four card")
            print("full house")
        
        print(result)

                print('four card')
                print('full house')
                    print('three card')
                print('two pair')
            print('one pair')
                print('straight')
                print('straight')

            print('null')

        print("four card")
        print("full house")
        print("straight")
        print("three card")
        print("two pair")
        print("one pair")
        print("null")


            print("four card")
            print("full house")
            print("three card")
            print("two pair")
            print("one pair")
        print("straight")
        print("null")    


        print(porker())
        print('four card')
        print('full house')
        print('three card')
        print('two pair')
        print('one pair')
        print('straight')
        print('null')

                print("straight")
                print("straight")
                print("null")
                    print("four card")
                    print("full house")
                        print("three card")
                        print("two pair")
                print("one pair")
        print('four card')
        print('full house')
        print('three card')
            print('two pair')
            print('one pair')
            print('straight')
            print('null')

        print("four card")
        print("full house")
        print("three card")
        print("two pair")
        print("one pair")
        print("straight")
        print("null")

        print("four card")
        print("full house")
        print("straight")
        print("three card")
        print("two pair")
        print("one pair")
        print("null")

    print('four card')
    print('full house')
    print('three card')
    print('two pair')
    print('one pair')
    print('straight')
    print('null')

	print(hantei(hand))

            print('four card')
            print('full house')
            print('three card')
            print('two pair')
            print('one pair')
            print('straight')
            print('null')
        print(result)

    print(ans[v])

            print('four card')
            print('full house')
            print('straight')
            print('three card')
            print('two pair')
            print('one pair')
            print('null')

            print('four card')
                print('full house')
            print('straight')
            print('three card')
                print('two pair')
            print('one pair')
    print('null')

                    print('two pair')
                    print('three card')
    print(poker_hand(hand))

                print('full house')       
                print('one pair') 
                print('two pair')
                print('three card')   
                print('four card')
                print('straight')
                print('straight')
                print('null')
                
            

       
    print("straight")
    print("straight")
    print("null")
    print("one pair")
    print("two pair")
    print("three card")
    print("full house")
    print("four card")

	print(judge(sorted(card), sorted(cnt.items(), key=lambda x: -x[1])))

        print(ans[p])
        print("four card")
        print("full house")
            print("straight")
                print("straight")
        print("three card")
        print("two pair")
        print("one pair")
        print("null")

    print(judge(sorted(card), sorted(cnt.items(), key = lambda x:-x[1])))

        print("four card")
        print("full house")
        print("straight")
        print("three card")
        print("two pair")
        print("one pair")
        print("null")

            print("four card")
            print("full house")
            print("straight")
            print("three card")
            print("two pair")
            print("one pair")
            print("null")

            print("four card")
            print("full house")
            print("straight")
            print("three card")
            print("two pair")
            print("one pair")
            print("null")
	print(judge(sorted(card), sorted(cnt.items(), key=lambda x: -x[1])))


            print(num)
    print(res)


    print(toNum(num))

    print(ans)
        

        print(w)

    print(ans)


    print(sum(A))

        print(total)
    print(c)


        print(s)
    print(ans)

    print(ans)

    print(ans)

        print(sum([-ans[i] if ans[i]<ans[i+1] else ans[i] for i in range(len(ans)-1)] + [ans[-1]]))

    print(ans)


        print(tot)
        print(ans)
    print(ans)

    print(count)

			print(cnt)

    print(ans)

    print(ans)

        print(sum+t[s[len(s)-1]])

    print(ans)

	print(ans)
            print(num, end="")
                print(" ", end="")
        print()

        print(n, end='')
            print(' ', end='')
    print()

    print(ans)


    print(sum(s))


        print(sum(s) - ad)



        print(num)
    print(sum)



    print(Num)

    print(val)
    
    


        print(s)

    print(ans)

    print(ans)


	print(ans)

	print(str(r))

    print(n)

		print(s)

        
    print(x)

	print(ans)


        print(res)
    print(ans + nums[-1])

    print(l[0])
    print(s)

        print(Num)
        
        print(ans)


        print(ans)
    print(sum(res))

    print(S)

    print(roman_to_decimal(line.strip()))

    print(solve(line))
	print(ans)


        print(result)

    print(A)
            



        print(ans)
    print(sum1)

    print(todec(a))

                    print(' '.join(ans))
	print(*ans)


            print(line.translate(str.maketrans(''.join([affine(c, a, b) for c in string.ascii_lowercase]), string.ascii_lowercase)))
 print(s.translate(str.maketrans(''.join(e(c,*k)for c in z),z)))

        print(temp3, end="")
    print()

    print(line)

    print(''.join(decrypt(c, a_rev, b) for c in line))

    print(decrypt(s))

                print(dst)

            print(" ", end="")
            print(F(keyA,keyB,S[i]), end="")
    print("")


    print(ans)

  print(restore(input()))

                print(new_str)
                    print(*sentence_list)
  print(restore(input()))

    print(affine(input()))


                print(message)
    print(s)


                print(" ".join(plain))
    print(ans)


    print(" ".join(dec_words))

            print(text)
                print(*test)
                        print(''.join(new[k]))
                        print(''.join(new[k]), end=' ')


                print(*string)
                print(out)



        print(sent2)

                print(" ".join(unzip(instr, a, b)))
                print(" ".join(unzip(instr, a, b)))
                print(a)
                print(s)
                print(s)
                        print(format(expression1))
                        print(format(expression2))
        print(0)

                        print(postfix_to_infix(s))
            print(0)


				print(s)
    print(ans)

        print(l)
        print(l)
    print(ans if ans!='?' else '0')
    
                print('('+num[0]+oprs[0]+num[1]+')'+oprs[1]+'('+num[2]+oprs[2]+num[3]+')')
                print('('+'('+num[0]+oprs[0]+num[1]+')'+oprs[1]+num[2]+')'+oprs[2]+num[3])
                print('('+num[0]+oprs[0]+'('+num[1]+oprs[1]+num[2]+')'+')'+oprs[2]+num[3])
                print(num[0]+oprs[0]+'('+'('+num[1]+oprs[1]+num[2]+')'+oprs[2]+num[3]+')')
                print(num[0]+oprs[0]+'('+num[1]+oprs[1]+'('+num[2]+oprs[2]+num[3]+')'+')')
        print(0)

    print(solve(a))

                print(formula)
        print(0)

                        print(formula)
            print(0)

                    print(form.format(op[0], op[1], op[2], numpair[0], numpair[1], numpair[2], numpair[3]))
                print(formula)
        print(0)


                print(formula)
        print(0)

        print(result)
                        print(command)
            print(0)

                    print(expr)
        print(0)


        print(0)


                            print(f)
    print(0)
                            print(f)

    print(0)
    print(f(l.split()))


  print(check(lst))


                        print("({0}{4}{1}){5}{2}{6}{3}".format(a,b,c,d,i,j,k))
                        print("({0}{4}{1}{5}{2}){6}{3}".format(a,b,c,d,i,j,k))
                        print("{0}{4}({1}{5}{2}){6}{3}".format(a,b,c,d,i,j,k))
                        print("{0}{4}({1}{5}{2}{6}{3})".format(a,b,c,d,i,j,k))
                        print("{0}{4}{1}{5}({2}{6}{3})".format(a,b,c,d,i,j,k))
                        print("(({0}{4}{1}){5}{2}){6}{3}".format(a,b,c,d,i,j,k))
                        print("({0}{4}{1}){5}({2}{6}{3})".format(a,b,c,d,i,j,k))
                        print("{0}{4}(({1}{5}{2}){6}{3})".format(a,b,c,d,i,j,k))
                        print("({0}{4}({1}{5}{2})){6}{3}".format(a,b,c,d,i,j,k))
                        print("{0}{4}({1}{5}({2}{6}{3}))".format(a,b,c,d,i,j,k))
                        print("{0}{4}{1}{5}{2}{6}{3}".format(a,b,c,d,i,j,k))
        print("0")


  print(f'Case {c}:\n{d[W]}\n{d.index(d[W])}')
        print(f'Case {ds}:')
        print(max_v)
        print(max_w)


    print(f"Case {i + 1}:")
    print(a)
    print(b)


    print('Case %d:\n%d\n%d'%(c,dp[W],i))
  
    print("Case " + str(case) + ":")
    print(dp[w])
    print(dp.index(dp[w]))
    print('Case ',str(nCase),':',sep='')
    print(bestValue)
    print(bestWeight)


    print("Case " + str(cnt) + ":")
    print(ans)
    print(ansW)

    print("Case {0}:".format(cnt))
    print(md)
    print(wgt)

    print("Case {0}:".format(cnt))
    print(md)
    print(wgt)

    print(f'Case {cnt}:\n{max(V)}\n{V.index(max(V))}')





    print('Case {}:'.format(case))
    print(max_v)
    print(max_v_w)

    print("Case {}:".format(count))
    print(value)
    print(weight)


 print(f'Case {l}:\n{D[W]}\n{D.index(D[W])}')

    print("Case {}:".format(cnt))
    print(av)
    print(aw)
 print(f'Case {l}:\n{D[W]}\n{D.index(D[W])}')

    print("Case "+str(ctr)+":")
    print(max(dp))
    print(dp.index(max(dp)))
    print("Case ", caseN, ":", sep='')
    print(sum_value)
    print(sum_weight)

    
    print(f'Case {case}:\n{max_v}\n{min_w}')
        print('Case {0}:'.format(case_no))
        print('{0}\n{1}'.format(target, weight))
    print('Case ' + str(c) + ':')
    print(ansv)
    print(answ)


    print("Case ", caseN, ":", sep='')
    print(sum_value)
    print(sum_weight)

    print("Case",Case_num,end = ":\n")
    print(List[N][W])
    print(List[N].index(List[N][W]))

        print(f'Case {case_number}:')
        print(max_v)
        print(w)
    print("Case %d:\n%d\n%d" % (dn, max(v), v.index(max(v))))

        print("Case {}:".format(idx))
        print(ansV)
        print(ansW)
    print("Case ", cno, ":", sep='')
    print(V[k1][lim], W[k1][lim], sep='\n')

	print("Case ", cno, ":", sep='')
	print(V[k1][lim], W[k1][lim], sep='\n')

    print("Case ", cno, ":", sep='')
    print(V[k1][lim], W[k1][lim], sep='\n')


    print('Case ',str(case),':',sep='')
    print(value)
    print(dp[N].index(value))
    print("Case ",case,":",sep="")
    print(max(dp[0]))
    print(dp[0].index(max(dp[0])))


    print("Case " + str(case) + ":")
    print(dp[-1][-1])
    print(dp[-1].index(dp[-1][-1]))

    print('Case ', cnt, ':', sep='')
    print(dp[n][l])
            print(i)
    print("Case %d:"%case)
    print(dp[0][W])
    print("Case {0}:\n{1}\n{2}".format(case, maxv, C[-1].index(maxv)))


  print("Case "+str(c)+":")
  print(dp[N][W])
  print(max_w)

    print("Case "+str(c)+":")
    print(dp[N][W])
    print(max_w)


    print("Case "+str(cs+1)+":")
    print(out[cs][0])
    print(out[cs][1])

    print(f"Case {case}:")
    print(ANS[0])
    print(ANS[1])


    print("Case {0}:".format(cnt))
    print(ansvalue)
    print(answeight)


    print('Case {}:'.format(case))
    print(VT[N][C])
    print(WT[N][C])

        print(line)

    print('Case {0}:'.format(i))
        print(dp[N][W][i])

                print(ans[0], end='')
                    print(f' {ans[i]}', end='')
                print()
                print(0)
            print(" ".join(list(map(str,ans))))
    print(*ans)


    print(' '.join(map(str,anss)))

    print(" ".join(map(str,anss)))



        print(" ".join(map(str, result)) if result else 0)


      print(*ans)
      print(0)
    
    print(" ".join(map(str,anss)))


        print(' '.join(map(str, ANS)))


            print(*result)
            print(0)


            print("0")
            print(" ".join(retval))
    print(0 if len(ans)==0 else " ".join(ans))

            print(0)
            print(*ans)
            print(0)
            print(answers[0], end='')
                print(' ' + str(answers[i]), end='')
            print('')

        print(' '.join(map(str, ans)))
        print(0)






    print(*res if len(res) else [0])

            print(x, y)
            print(i, end=' ')
            print(i)
    print(mx,mn)


    print(answer0, answer1)

 print(a,b)

    print(*[s,b])

        print(p_l(n),p_h(n))
            print(num-s,end=" ")
            print(num+l)
    print(left, right)



    print(minv, maxv)

        print(n-1-temp[n-1:0:-1].index(True), n+1+temp[n+1:].index(True))
    print(a, b)


 
    print(min, max)

        print(prime_list[idx - 1], end=' ')
        print(prime_list[idx + 1] if n == prime_list[idx] else prime_list[idx])

    print(under(prime, ni), over(prime, ni))

        print(primes[idx-1], primes[idx+1])
        print(primes[idx-1], primes[idx])
    

	print(a, b)

        print(primes[i-1], primes[i+(n==primes[i])])
        print(l, r)

	print(a, b)

            print(i,end=" ")
            print(i)
    print(n-primes[n-1::-1].index(1)-1, n+primes[n+1:].index(1)+1)

      print(primes[ind - 1], primes[ind + 1])
      print(primes[ind - 1], primes[ind])

        print(bp, ap)
    print(a,b)


        print('%d %d' % (minn, maxn))
	print(a,b)

        print("{} {}".format(n - 1 - a[:n][::-1].index(1), n + 1 + a[n + 1:].index(1)))
    print(ans)


    print(x_low,x_high)


            print(prime[m-2],prime[m])
            print(prime[m-1],prime[m])
        print(pre, p)
    print(lst[i],lst[j])
        print(min[-1],max[0])
    print(*ANS)


            print(n1, end =" ")
            print(n2)
            print("{} {}".format(x, y))
        print(pmax[n-2],pmin[n])
        
        print("%d %d"%(a,b))
        
        print((n - 1 - a[::-1].index(1)),(n + 1 + b.index(1)))

        print(a,b)
    print(l[bisect(l,n)-1-c],l[bisect(l,n)])
    
    

    print(max([x for x in prime_list if x < n]), end=' ')
    print(min([x for x in prime_list if x > n]))

            print(n-d, end=" ")
            print(n+d)
                print(i, "", end="")
                print(i)
        print('{} {}'.format(lt, gt))

        print(min,end=' ')
        print(max)

            print(p[i-1],p[i+1])
            print(p[i-1],p[i])

            print('%s %d' % (ans[0],ans[1]))
            print(p[i-1],p[i+1])
            print(p[i-1],p[i])
     
     print(num1,end=' ')
     print(num2)
     

            print('%s %d' % (ans[0],ans[1]))
    print("%d %d"%(ans[0],ans[1]))

                
        print("%s %d"%(a,b))
    print(a,b)


    print(amount)
        print(0)
        print(quantity // cnt + 1)
        print(quantity // cnt)


print(s)
print(v)


print(amount_of_sales)
print(int(sales_number/len(A)+0.5))

print(sum(data[i][0] * data[i][1] for i in range(len(data))))
print(int(sum(data[i][1] for i in range(len(data))) / len(data) + 0.5))


print(asum)
print(bave)

        print(P_Sum)
        print(int((N_Sum / Kazu)+ 0.5))
print(sum(a))
print(int(sum(b)/len(b)+0.5))

print(total)
print(int(sell_num/cnt+0.5))

        print(a)
        print(int(b/c+0.5))
print(sum)
print(int(total / len(y) + 0.5))


print(sum(prices))

print(int(mean))

    print(result)
    print(round(result2/count+0.5))


print(revenue)
print(math.ceil(total/N))

print(sv)
print(math.ceil(sn / c))

    print(sum_prise)
    print(int(sum_number/count+0.5))
print(s)
print(int(round(n_sum/i)))


print(S)
print(f(T/len(N)))


print(s)
print(int(m/k+.5))


print(value_sum)
print(average)

print(sum(map(lambda x:x[0]*x[1],a)))
print(int(sum(map(lambda x:x[1],a))/len(a)+0.5))

        
print(sum)
	print(n//k + 1)
	print(n//k)

    print(total)
    print(n)

        print(sum)
        print(int(ave/n+0.5))
        print(tot)
        print(round_(qua/count))
        print(ans_n)
        print(ans)

print(sum1)
print(round_off(sum2/count))


print(s)
print(av)



print(total)
print(avg)      


print(total_cost)
    print(total_amount // n)
    print(total_amount // n + 1)

    print(sum(kei))
    
print(s)
print(math.floor(a + 0.5))


print(Sum)
print(N_average)


print(S)
print(int((10*(avr/n)+5)//10))


print(int(ans))
print(ave)




    print(total_sales_amount)
    print(average_sales_quantity)

print(sum(sales))
print(math.ceil(sum(total_num)/len(total_num)))

print(s)
print(int(ave / cnt + 0.5))

print(ans1)
print(ans2 // 10)



print(value_sum)
print(average)


        print(su)
            print(items // count + 1)
            print(items // count)
print(s)
print(int(c / n + 0.5))

        print(int(price))
            print(int(num) + 1)
            print(int(num))
    
print(sum_price)
print(int(sum_amount / kind + 0.5))



print(sum)
print(int(ave / num + 0.5))

print(sum(A [i] * B [i] for i in range(N)))
print(sum(B) * 2 // N - sum(B) // N)

print(sumsell)
print((int)(sumn/i+0.5))

    print('{0}\n{1}'.format(sum, math.ceil(total_pieces / number_of_data)))


print(Sum)
 print(total)
 print(round(s/i+0.5))

print(p)
print(Decimal(c / i).quantize(Decimal('0'), rounding=ROUND_HALF_UP))

print(nsum)
print(Decimal(str(nave/n)).quantize(Decimal('0'), rounding=ROUND_HALF_UP))

            print(num, end="")
                print(" ", end="")
        print()

        print(n, end='')
            print(' ', end='')
    print()


print(A)


print(B)


print(price)
    print(number//count+1)
print(s_sum, Decimal(n_sum/cnt).quantize(Decimal('0'), rounding=ROUND_HALF_UP), sep="\n")    


        print(_sum)
        print(int(_avg / n + 0.5))

print(sum)
print(Decimal(str(mean)).quantize(Decimal('0'), rounding=ROUND_HALF_UP))



print(sum)
print(nums)

    print(f'{max(m) - min(m):.1f}')


print(elevation_difference)


print(l[-1] - l[0])


print(max(l) - min(l))

print(A[0]-A[-1])
	


print(max(a) - min(a))

print(max(data) - min(data))


print(max(inputs) - min(inputs))

        print(max(Mon_lis) - min(Mon_lis))
print(max(ms)-min(ms))

print(max(a)-min(a))

print(max(a)-min(a))

print(max(f) - min(f))


print(max(A) - min(A))


    print(max_height - min_height)

  print(max(lst)-min(lst))
 
    

print(max(data) - min(data))

    print(abs(m_MAX - m_MIN))

print(max(a)-min(a))

print(max(d) - min(d))


print(m[len(m)-1]-m[0])


print(max(a)-min(a))

print(l - s)

print(height_lst[-1] - height_lst[0])

print(max(a)-min(a))

print(max(data)-min(data))

print(max(li) - min(li))

print(max(a) - min(a))

print(ma-mi)

        print(ma-mi)
print(diff)


        print("{:.1f}".format(max-min))
        print("{:.1f}".format(ans))

	print(max(ans) - min(ans))


            print(num, end="")
                print(" ", end="")
        print()


print(max(N)-min(N))



print(f"{sa:.1f}")

print(max(a)-min(a))

        print(max - min)
print(height_lst[-1] - height_lst[0])


print(maxv-minv)


print(max(a)-min(a))


print( max(L) - min(L) )
        
    
    

        print(big-small)
print(a[0]-a[-1])
        
    

print(t[len(t) - 1] - t[0])

print(max(list) - min(list))

print(max(a)-min(a))


print(max(a)-min(a))


print(max_high - min_high)
    
    

print(max(x)-min(x))

        print(ma - mi)
print(f'{max-min:.2f}')

print(max(mount) - min(mount))

    print(difference)

print(max_h - min_h)



print(round(max(a)-min(a),2))



print(max(l) - min(l))

print(maxh - minh)


print(max - min)


print(abs(max(l)-min(l)))

        
print(max(a) - min(a))

        print(difference)
        print(max(m) - min(m))
print(a)

            print(k)

print(ball_location)


        print(k)


	print('A')
	print('B')
	print('C')

        print(k)

print(ans)

print(place)

            print(Ans)
        print(Ans)
print(chr(65+cup.index(True)))

        print(i)

    print('A')
    print('B')
    print('C')

    print('A')
    print('B')
    print('C')

print(now)

        print(key)


print(chr(65 + cups.index(1)))

        print(k)

  print('A')
  print('B')
  print('C')

        print('A')
        print('B')
        print('C')

print(list(d.keys())[list(d.values()).index(1)])


            print(S[i])


print(c[0])

    print(s)
print(chr(t.index(1)+65))


print(chr(t.index(1)+65))


print(chr(t.index(1)+65))


print(chr(t.index(1)+65))


        print([x for x in di.keys() if di[x] == 1][0])

print(ball)


        print(d_[n.index(0)])
                print(v)
    print(ALF[pos.index("o")])


            print(num, end="")
                print(" ", end="")
        print()

    print("A")
    print("B")
    print("C")
    

                print(i)
        print("ABC"[i])
    

            print(keys[i])
print(cup)
    
    

print(cup[0])

        print(chr(i + ord("A")))


print(ans)

    print('A')
    print('B')
    print('C')


print(ans)

      print("A")
      print("B")
      print("C")
        print(key)

print(ans)

        print(ANS[i])
            print("A")
            print("B")
            print("C")

print(pos)

print(Ball_in)

        print(k)

                print(k)
        print(c)

print(cup)

print(ans)


                print(cup_position)
print(m[l.index(1)])

                print("light fly")
                print("fly")
                print("bantam")
                print("feather")
                print("light")
                print("light welter")
                print("welter")
                print("light middle")
                print("middle")
                print("light heavy")
                print("heavy")
            print("light fly")
            print("fly")
            print("bantam")
            print("feather")
            print("light")
            print("light welter")
            print("welter")
            print("light middle")
            print("middle")
            print("light heavy")
            print("heavy")

		print("light fly")
		print("fly")
		print("bantam")
		print("feather")
		print("light")
		print("light welter")
		print("welter")
		print("light middle")
		print("middle")
		print("light heavy")
		print("heavy")

            print(name[i])
        print(name[10])

            print("light fly")
            print("fly")
            print("bantam")
            print("feather")
            print("light")
            print("light welter")
            print("welter")
            print("light middle")
            print("middle")
            print("light heavy")
            print("heavy")
            print(lev)
        print("light fly")
            

            print(d[k])
        print("heavy")

                print(rank[i])
        print(boxing_class)


				print(level[str(weight[i])])
   print(judge)
        print("light fly")
        print("fly")
        print("bantam")
        print("feather")
        print("light")
        print("light welter")
        print("welter")
        print("light middle")
        print("middle")
        print("light heavy")
        print("heavy")
        

            print(name)
      print("light fly")
      print("fly")
      print("bantam")
      print("feather")
      print("light")
      print("light welter")
      print("welter")
      print("light middle")
      print("middle")
      print("light heavy")
      print("heavy")
            print('light fly')
            print('fly')
            print('bantam')
            print('feather')
            print('light')
            print('light welter')
            print('welter')
            print('light middle')
            print('middle')
            print('light heavy')
            print('heavy')
    
            print("light fly")
            print("fly")
            print("bantam")
            print("feather")
            print("light")
            print("light welter")
            print("welter")
            print("light middle")
            print("middle")
            print("light heavy")
            print("heavy")
    print(ans)

    print("light fly")
    print("fly")
    print("bantam")
    print("feather")
    print("light")
    print("light welter")
    print("welter")
    print("light middle")
    print("middle")
    print("light heavy")
    print("heavy")

		   print(s[i])
			print(h[i])
    print(c[bisect_left(w, _w)])

    print("light fly")

        print("light fly")
        print("fly")
        print("bantam")
        print("feather")
        print("light")
        print("light welter")
        print("welter")
        print("light middle")
        print("middle")
        print("light heavy")
        print("heavy")


        print(rank(i))
            print("heavy")
            print("light heavy")
            print("middle")
            print("light middle")
            print("welter")
            print("light welter")
            print("light")
            print("feather")
            print("bantam")
            print("fly")
            print("light fly")
            print(className[i])


           print(s[i])
  print(c[i])

            print(WCLS[ind])
            print(num, end="")
                print(" ", end="")
        print()

        print("light fly")
        print("fly")
        print("bantam")
        print("feather")
        print("light")
        print("light welter")
        print("welter")
        print("light middle")
        print("middle")
        print("light heavy")
        print("heavy")



            print("heavy")
            print("light heavy")
            print("middle")
            print("light middle")
            print("welter")
            print("light welter")
            print("light")
            print("feather")
            print("bantam")
            print("fly")
            print("light fly")
        print("light fly")
        print("fly")
        print("bantam")
        print("feather")
        print("light")
        print("light welter")
        print("welter")
        print("light middle")
        print("middle")
        print("light heavy")
        print("heavy")

      print(a[i])
            print("heavy")
            print("light heavy")
            print("middle")
            print("light middle")
            print("welter")
            print("light welter")
            print("light")
            print("feather")
            print("bantam")
            print("fly")
            print("light fly")
            print('light fly')
            print('fly')
            print('bantam')
            print('feather')
            print('light')
            print('light welter')
            print('welter')
            print('light middle')
            print('middle')
            print('light heavy')
            print('heavy')
        print("light fly")
        print("fly")
        print("bantam")
        print("feather")
        print("light")
        print("light welter")
        print("welter")
        print("light middle")
        print("middle")
        print("light heavy")
        print("heavy")


        print("light fly")
        print("fly")
        print("bantam")
        print("feather")
        print("light")
        print("light welter")
        print("welter")
        print("light middle")
        print("middle")
        print("light heavy")
        print("heavy")
            print(a[i])
            print('light fly')
            print('fly')
            print('bantam')
            print('feather')
            print('light')
            print('light welter')
            print('welter')
            print('light middle')
            print('middle')
            print('light heavy')
            print('heavy')
        print('heavy')
        print('light heavy')
        print('middle')
        print('light middle')
        print('welter')
        print('light welter')
        print('light')
        print('feather')
        print('bantam')
        print('fly')
        print('light fly')

            print("light fly")
            print("fly")
            print("bantam")
            print("feather")
            print("light")
            print("light welter")
            print("welter")
            print("light middle")
            print("middle")
            print("light heavy")
            print("heavy")
        print('light fly')
        print('fly')
        print('bantam')
        print('feather')
        print('light')
        print('light welter')
        print('welter')
        print('light middle')
        print('middle')
        print('light heavy')
        print('heavy')

            print('light fly')
            print('fly')
            print('bantam')
            print('feather')
            print('light')
            print('light welter')
            print('welter')
            print('light middle')
            print('middle')
            print('light heavy')
            print('heavy')

      print("light fly")
      print("fly")
      print("bantam")
      print("feather")
      print("light")
      print("light welter")
      print("welter")
      print("light middle")
      print("middle")
      print("light heavy")
      print("heavy")
            print("light fly")
            print("fly")
            print("bantam")
            print("feather")
            print("light")
            print("light welter")
            print("welter")
            print("light middle")
            print("middle")
            print("light heavy")
            print("heavy")
            print("light fly")
            print("fly")
            print("bantam")
            print("feather")
            print("light")
            print("light welter")
            print("welter")
            print("light middle")
            print("middle")
            print("light heavy")
            print("heavy")
        print("light fly")
        print("fly")
        print("bantam")
        print("feather")
        print("light")
        print("light welter")
        print("welter")
        print("light middle")
        print("middle")
        print("light heavy")
        print("heavy")

        print("light fly")
        print("fly")
        print("bantam")
        print("feather")
        print("light")
        print("light welter")
        print("welter")
        print("light middle")
        print("middle")
        print("light heavy")
        print("heavy")

            print('light fly')
            print('fly')
            print('bantam')
            print('feather')
            print('light')
            print('light welter')
            print('welter')
            print('light middle')
            print('middle')
            print('light heavy')
            print('heavy')
            print(class_name)
        print("light fly")
        print("fly")
        print("bantam")
        print("feather")
        print("light")
        print("light welter")
        print("welter")
        print("light middle")
        print("middle")
        print("light heavy")
        print("heavy")

        print("light fly")
        print("fly")
        print("bantam")
        print("feather")
        print("light")
        print("light welter")
        print("welter")
        print("light middle")
        print("middle")
        print("light heavy")
        print("heavy")

        print(judge_class(weight))
            print(a[i])
        print('light fly')
        print('fly')
        print('bantam')
        print('feather')
        print('light')
        print('light welter')
        print('welter')
        print('light middle')
        print('middle')
        print('light heavy')
        print('heavy')
        print('light fly')
        print('fly')
        print('bantam')
        print('feather')
        print('light')
        print('light welter')
        print('welter')
        print('light middle')
        print('middle')
        print('light heavy')
        print('heavy')

                print(classes[i])
        print('light fly')
        print('fly')
        print('bantam')
        print('feather')
        print('light')
        print('light welter')
        print('welter')
        print('light middle')
        print('middle')
        print('light heavy')
        print('heavy')

                print(c_list[i])
            print("heavy")
    print("light fly")
    print("fly")
    print("bantam")
    print("feather")
    print("light")
    print("light welter")
    print("welter")
    print("light middle")
    print("middle")
    print("light heavy")
    print("heavy")
 
    print(b["A"])
    print(b["B"])
    print(b["AB"])
    print(b["O"])
    

    print(dict[i])

print(a)
print(b)
print(ab)
print(o)

print(a)
print(b)
print(ab)
print(o)


print(cnt_A)
print(cnt_B)
print(cnt_AB)
print(cnt_O)

        print(A_Num)
        print(B_Num)
        print(AB_Num)
        print(O_Num)
    print(man.count(b))


print("%d\n%d\n%d\n%d" % (hist['A'],hist['B'],hist['AB'],hist['O']))

print(a)
print(b)
print(ab)
print(o)

print(cnt ['A'])
print(cnt ['B'])
print(cnt ['AB'])
print(cnt ['O'])

print(no[0])
print(no[1])
print(no[2])
print(no[3])

print(A)
print(B)
print(AB)
print(O)

print(blood["A"])
print(blood["B"])
print(blood["AB"])
print(blood["O"])

    print(counts[group])

  print(l)

    print('{}\n{}\n{}\n{}'.format(a_count,b_count,ab_count,o_count))

print(a, b, ab, o, sep="\n")


print(A)
print(B)
print(AB)
print(O)



print(b["A"])
print(b["B"])
print(b["AB"])
print(b["O"])

print(*cnt, sep='\n')


print(ac)
print(bc)
print(abc)
print(oc)

print(di["A"])
print(di["B"])
print(di["AB"])
print(di["O"])


print(a)
print(b)
print(ab)
print(o)


        print(blood["A"]);print(blood["B"]);print(blood["AB"]);print(blood["O"])
    print(btc[i])

  print(a[i])


	print(ans.count("A"))
	print(ans.count("B"))
	print(ans.count("AB"))
	print(ans.count("O"))


            print(num, end="")
                print(" ", end="")
        print()

    print(i)


        print(i)

            print(i)
    print(L.count(i))


print(m['A'],m['B'],m['AB'],m['O'], sep = '\n')

    print(val)



print(A)
print(B)
print(AB)
print(O)

print(A,B,AB,O,sep='\n')



print(A)
print(B)
print(AB)
print(O)

print(A)
print(B)
print(AB)
print(O)



print(A_blood)
print(B_blood)
print(AB_blood)
print(O_blood)

    print(i)

    print(a_total)
    print(b_total)
    print(ab_total)
    print(o_total)
print(blood.count('A'))
print(blood.count('B'))
print(blood.count('AB'))
print(blood.count('O'))

    print(v)


    print(m.count(b))

    print(C[b])
    

            print(type[i])
print(*cnt, sep='\n')


print(nA, nB, nAB, nO, sep="\n")

            print(value)
    print(blood_count[blood_type])

    print(data.count(grp))

print(bloods["A"])
print(bloods["B"])
print(bloods["AB"])
print(bloods["O"])

        print('error')
print(len(A))
print(len(B))
print(len(AB))
print(len(O))


print(d['A'])
print(d['B'])
print(d['AB'])
print(d['O'])

    print(blood_type_counter['B'])
    print(blood_type_counter['AB'])
    print(blood_type_counter['O'])


  print(dic[s])

    print(counter[t])

    print(i)


print(s.replace('apple', '*').replace('peach', 'apple').replace('*', 'peach'))

    print(s)


print(input().replace('apple', '???').replace('peach', 'apple').replace('???', 'peach'))

print(string3)

print(s)

print(''.join(cs))

print(l3)

print(" ".join(ans))

print(input().replace('apple','#').replace('peach','apple').replace('#','peach'))

print(s.replace('tmp','peach'))

print(instr)


print(s)

print(' '.join(ss))

print(dest)

    print(text)

    
print(result)    

    print(sentence)

print(tmp.replace("XXX", "peach"))


print(S)

print(input().replace(a,t).replace(p,a).replace(t,p))

print(" ".join(ss))


print(*s)

print(s)


print(s.replace('_____', 'peach'))

print(st)


print(sentence)


print(text)


print(s)


print(w)

print(s)


print(s)


print(input().replace('apple','*').replace('peach','apple').replace('*','peach'))

print(s)

            print(num, end="")
                print(" ", end="")
        print()


print(S)



print(s)


print(s)


print(s)

    print(sen.replace('-----','peach'))

print(input().replace("apple","_").replace("peach","apple").replace("_","peach"))

print(string)


print(s)


print(s)


        print(S[i])
        print(S[i], sep = "", end = "")
    

        print('peach', end='')
        print('apple', end='')
        print(input_str[index], end='')
        print('')


print(" ".join(A))


print(n)


print(s.replace('peach', 'X').replace('apple', 'peach').replace('X', 'apple'))

print(bun.replace("apple", "KKKK").replace("peach", "apple").replace("KKKK", "peach"))

print(a)

    print(s)
    print('')

   


print(text)


print(x.replace('___', 'peach'))

print(d)

print(s.replace("apple", "あ").replace("peach", "apple").replace("あ", "peach"))


print(x.replace("peach","X").replace("apple","peach").replace("X","apple"))


print(*lst)


print(x)

print(a3)

print(words)

print(d.replace('apple', 'X').replace('peach', 'apple').replace('X', 'peach'))


print(L)

print(s)


print(s)


print(tmp)

print(s)

print(x.replace("peach","X").replace("apple","peach").replace("X","apple"))


print(a)

print(string)

print(n.replace('apple', 'X').replace('peach', 'apple').replace('X', 'peach'))
    
    

print(''.join(s))

print(w4)

print(s)

print(*n)

print(s)

print(b)

print(Eng.replace('peach', 'X').replace('apple', 'peach').replace('X', 'apple'))

print(*a)

print(n.replace('tmp','peach'))

print(a)


print(n)

print(s)

        print(max_s - min_s)


	print(Max-Min)

    print(int(''.join(sorted(data, reverse=True))) - int(''.join(sorted(data))))


    print(int(big) - int(small))

    print(Max-Min)

    print(int(n[::-1]) - int(n))

    print(dif)

    print(mx - mn)

    print(c - b)

    print(int(Max) - int(Min))

        print(r)

    print(int(n_sort2) - int(n_sort))

    print(int(''.join(k[::-1])) - int(''.join(k)))

    print(max - min)

        print(int(a[::-1]) - int(a))
    print(b-a)


 print(int(M[::-1])-int(M))

    print(int(''.join(l)) - int(''.join(s)))

    print(nl[i])

    print(int("".join(sorted(a, reverse = True))) - int("".join(sorted(a))))

  print(int("".join(sorted(s,reverse=True))) - int("".join(sorted(s))))

    print(max_n - min_n)

	print(int(''.join(sorted(x,reverse=True))) - int(''.join(sorted(x))))

    print(int(a[::-1])-int(a))

    print(int(maxs)-int(mins))


    print(max - min)


    print(dif)

    print(ans)

            print(n_max-n_min)

		print(int(tmp2) - int(tmp))



 print(int(M[::-1])-int(M))

    print(int(maxv) - int(minv))
    

    print(max-min)

    print(max-min)

    print(ans_num(num))
    
    


    print(int(max_str) - int(min_str))

    print(int(large_m) - int(small_m))

    print(maxnum - minnum)



    print(int(''.join(sorted(ques, reverse=True))) - int(''.join(sorted(ques))))


    print(ans)

    print(max - min)

    print(maxs-mins)


  print(maxnum - minnum )


    print(max_num-min_num)


    print(max_n - min_n)


    print(abs(int(x)-int(y)))
    

    print(max-min)


    print(int(max1) - int(min1))


    print(max_num - min_num)
    print(int(''.join(s[::-1])) - int(''.join(s)))

    print(int(''.join(sorted(line)[::-1])) - int(''.join(sorted(line))))

    
    print(max-min)

    print(sa)
                  

    print(b-a)

    print(maxno-minno)

  print(max-min)

    print(int("".join(sorted(data)[::-1])) - int("".join(sorted(data))))

    print(int("".join(map(str, inp_max))) - int("".join(map(str, inp_min))))


	print(int(''.join(sorted(a, reverse=True))) - int(''.join(sorted(a))))

            print(num, end="")
                print(" ", end="")
        print()


    print(maxnum-minnum)


    print(toValue(max) - toValue(min))   

        print(cnt)


            print(count_zeros(n))

print(s, end="")

        print(0)
        print(five_num)

    print(ans)

    print(n//5 + n//25 + n//125 + n//625 + n//3125 + n//15625)

    print(ans)


    print(c)

    print(sum(n//(5**i) for i in range(1, 7)))


    print(ans)


    print(t)





    print(count_0(data))


    print(n//5+n//25+n//125+n//625+n//3125+n//15625)

    print(a//5+a//25+a//125+a//625+a//3125+a//15625)
    


    print(s)

    print(ans)

    print(x)


    print(sum(a))

    print(a)

    print(K)

            print(x+y+z+w+u+s)
    print(a)

    print(ans)

    print(ans)

    print(x)

    print(ans)


    print(zer)

    print(s)

  print(ans)

    print(sum(n//(5**i) for i in range(1, 7)))

        print(a+b+c+d+e+f)
        

    print(x)

    print(x)

  print(c)


        print(sum)
        
        print(0)
        
  

    print(a+b+c+d+e+f)

    print(b+c+d+e+f+g)

    print(s)


    print(c)


        print(0)
        print(five_num)

    print(x)


    print(x)


    print(ans)

	print(ans)

            
    print(a)

    print(c)

    print(ans)

    print(ans)
    


	print(ans)

    print(s)

    print(a)
        

    print(s)

    print(n//5+n//5**2+n//5**3+n//5**4+n//5**5+n//5**6)

    print(s)

        print(n//5+n//25+n//125+n//625+n//3125+n//15625)


    print(ans)


    print(p//5+p//5**2+p//5**3+p//5**4+p//5**5+p//5**6+p//5**7)


    print(n // 15625 + n // 3125 + n // 625 + n // 125 + n // 25 + n // 5)

    print(ans)

        print(counter)

    
    print(ans)




    
    print(numFive)

    print(cnt)


    print(count)

    print(zero_count)

    print(n)


    print(z)

    print(sum(int(n / 5 ** i) for i in range(1, 7)))

    print(ans)

    print(factorial_trailing_zeros(N))

	print(ans)

    print(solve(n))


	print(ans)


    print(cnt)

    print(c)

    print(c)

  print(ans)


    print(p[i])

    print(cumsum[n-1])

	print(sum(prime[:n]))

    print(sum(prime[:n]))

    print(cumsum[n-1])

    print(S[n-1])

    print(a[n - 1])

    print(sum(l[:n]))

    print(sum(ps[:n]))

	print(sum[n])

    print(total[n])





    print(sum(anslst[:n]))

	print(sum[n])

    print(sum_prime_[n-1])


            print(num, end="")
                print(" ", end="")
        print()


    print(sum(P[:N]))

    

    print(sum(p_num[:n]))


    print(ans)

    print(sum(p[:n]))

  print(sum(primes[:n]))

    print(sum(values[:n]))

        print(s)


    print(sum(p[0:n]))


    print(sum(Prime[:n]))


        print(s)


        print(ans)
    print(sum(primes [:N]))

        print(sum_primes_tuple[n])

    print(sum(prime[:n]))

        print(2)
        print(sum)

    print(D[N])

        print(ans)
    print(ans)

    print(sum(prime[:n]))

        print(sum(result))

    print(S[n])


                print(s)
    print(sum)

    print(re)

    print(sum(subset))


    print(sumOfPrimes[n-1])

    print(s)


    print(sum1)

    print(ans)

    print(result)

            print(sum(ans))
    print(s)

    print(ans)

        print(result)

    print(sum([int(d) for d in frac[:n]]))


    print(sum(map(int, ' '.join(str(a / b).split('.')[1][:n]).split())))

        print(ans)
    print(ans)

 print(sum(a*10**i//b%10 for i in range(1,n+1)))

    print(ans)


    print(sum)



    print(ans)

	print(sum)

    print(ans)

    print(sum(map(int,list(str((a%b)*10**n//b)))))

    print(sum(a*10**i//b%10 for i in range(1,n+1)))

        print(ans)
        print(ans)
    print(ans)
    print(ans)



    print(total)
        
    


	print(ans)


        print(ans)

        print(total)
        print(sum(L))
    print(sum)

    print(sum)

    print(x)

    print(s)


    print(sum)

    print(sum(a * 10 ** (i + 1) // b % 10 for i in range(n)))

  print(s)

        print(s)
    print(sum(a*10**(i+1)//b%10 for i in range(c)))

        print(w)

    print(sum(lst[:n]))

		print(sum([eval(fra[i]) for i in range(n if n <= len(fra) else len(fra))]))
        print(sum(decimal[:n]))

    print(sum)


    print(s)

            print(f'{sum(ans):.8f}')
    print(s)


  print(s)

        print(float(input()) * 211 / 27)
        print(s)

    print(sum(A))

        print('{:.8f}'.format(result))

    print(sum(s))

    print(total)

        print(s)

    print(sum(lst))

    print(7.81481481481481 * float(a))

	print(x)

    print(ans)

    print(sum(num_list))

    print("%.8f"%ans)


    print(ans)

        print("{:.8f}".format(s))
        print(f'{sum(n):.8f}')
        print(7.81481481*float(input()))

    print(S)


        print(sum)
    print(sum(a))

    print("{:.8f}".format(sum(L)))


    print(round(total,8))


        print(ans)
    print(sum(S))

    print(f'{sum(S):.6f}')

        print(ans)


        print(sum(seq))
        print(ans)
    print(sum(l))

        print(sum(aList))
    print(r)

    print(x)

    print('{:.8f}'.format(s))


    print(sum(l))

		print(sequence(x))
        print(Sum)
    print(s)

    print(sum)

        print(sum(s))
    print("%.8f" % S)

            print(num, end="")
                print(" ", end="")
        print()

    print(ans)
    


    print(ans)

    print("{:.8f}".format(sum1))

        print(is_prime[n-2])
        print(len([1 for p in primes[:bisect_right(primes, n/2)] if is_prime[n-p]]))

    
    print(ans[N])

    print(len([1 for v in values[:I] if primes[n-v]]))

  
    print(ans)

        print(ans)

        print(ans)

        print(ans)

    print(res)

        print(int(n - 2 in sp))
    print(cnt)

    print(count(num,n))


        print(cnt)


    print(gold_count(n))

    print(count)

    print(count)

    print(count[n])

    print(count_arr[n])

    print(count_arr[n])

    print(cnt)


    print(cnt)


    print(c)


    print(cnt)


    print(cnt)

        print(result)

  print(count)

    print(S)

            print((n * n + n + 2) // 2)
    print(int((i**2+i+2)/2))

        print(result)
        print(int(ans))
    print((n*n+n+2)//2)

    print((l**2+l+2)//2)

        print(result)


    print((n**2 + n + 2) // 2)
        print((n**2 + n + 2)//2)
    print(n*(n+1)//2+1)

    print(1 + n * (n + 1) // 2)

	print(1+n*(n+1)//2)

    print(n*(n+1)//2+1)

		print(int((x**2 + x + 2) / 2))
    print(int(i)*(int(i)+1)//2+1)

    print(ans)


        print(int((n**2+n+2)/2))
        print(int(n*(n+1)/2)+1)
    print((l**2+l+2)//2)

        print(int(2+(n - 1) * (n + 2)*0.5))
    print(round(ans))

    print(search(n))


    print(m)

        print(ans)

    print(1 + n * (n + 1) // 2)


    print(int(ans))

        print(s)
    print(ans)

    print(n * (n + 1) // 2 + 1)

        print(str(int(((a * a) + a + 2) / 2)))
    print(n * (n + 1) // 2 + 1)

    print(1 + sum(range(N + 1)))

        print(2)
        print(num)

    print(1 + n * (n + 1) // 2)

    print(1+sum([i+1 for i in range(n)]))

            print(num, end="")
                print(" ", end="")
        print()

    print(ans)




        print(a[int(input())])
    print(an[n])

        print((1+n)*n//2 + 1)

    print(sum)

		print(a)
    print(n * (n + 1) // 2 + 1)

    print(a)

    print(sum1)

  print(i)

                print("YES")
                print("YES")
                print("NO")
            print("YES")
            print("NO")
            print('YES')
            print('NO')
            print('YES')
            print('NO')
        print('YES')
        print('NO')

            print("NO")
            print("YES")
        print("YES")
        print("NO")

 print(['NO','YES'][abs((a-c)*(e-g)+(b-d)*(f-h))<1e-10])

        print("YES")
        print("NO")


	print('YES' if isOrthogonalLL([p1,p2], [p3,p4]) else 'NO')

        print("YES")
        print("NO")

    print("YES" if abs(vabx * vcdx + vaby * vcdy) < E else "NO")
        print("YES")
        print("NO")


        print(ans)
            print('YES')
            print('NO')

            print('NO')
            print('YES')

            print('YES')
            print('NO')

        print("YES")
        print("NO")


        print('YES')
        print('NO')

    print('YES' if abs(dot(a - b, c - d)) < 1.e-10 else 'NO')

        print('YES')
        print('NO')

        print('YES')
        print('NO')

    print(['NO','YES'][abs((ay - by)*(cy-dy)+(ax-bx)*(cx-dx))<1e-10])

        print('YES')
        print('NO')

    print("YES" if abs(scalar_product) < 1e-10 else "NO")

                print('YES')
                print('NO')


            print("YES")
            print("NO")
        print('YES')
        print('NO')

    print("YES")
    print("NO")

            print('YES')
            print('NO')
        print("YES")
        print("NO")

    print("YES" if abs(vabx * vcdx + vaby * vcdy) < E else "NO")
    print("YES")
    print("NO")

            print("NO")
            print("YES")

		print("NO")
		print("YES")


    print("YES")
    print("NO")

        print('NO')
        print('YES')

        print('NO')
        print('YES')

        print("YES" if intersect(xa1, ya1, xa2, ya2, xb1, yb1, xb2, yb2) else "NO")

    print("YES" if not overlap(x1, y1, x2, y2, x3, y3, x4, y4) < 1e-10 else "NO")

            print("YES")
            print("NO")
 print(['YES','NO'][c<e or g<a or d<f or h<b])

        print("NO")
        print("YES")

        print("YES")
        print("NO")

            print("NO")
            print("YES")
        print('YES')
            print('YES')
            print('NO')

            print("NO")

            print("YES")

            print('YES')
            print('NO')

        print("YES")
        print("NO")

            print('YES')
            print('NO')
    print('NO'  if xb2 < xa1 or xa2 < xb1 or yb2 < ya1 or ya2 < yb1 else 'YES')

        print('YES')
        print('NO')

            print("NO")
            print("NO")
            print("YES")
	print("YES" if judge(xa1, ya1, xa2, ya2, xb1, yb1, xb2, yb2) else "NO")



        print("NO")
        print("YES")


                print("YES")
                print("NO")
    print(['NO','YES'][sum([1 for i in a if c+i<=20])/7>=0.5])

            print('YES')
            print('NO')



        print("YES")
        print("NO")


 print(['YES','NO'][len({*range(1,21-a-b)}-{a,b,c})<3.5])

      print("YES")
      print("NO")

        print("YES")
        print("NO")

	print(["YES","NO"][len(deck) / 7 <= 0.5])

        print("YES")
        print("NO")


            print("YES")
            print("NO")
            print("YES")
                print("YES")
                print("NO")
            print('YES')
            print('NO')

        print("YES")
        print("NO")
    


        print("YES")
        print("NO")

        print(ans)
            print('YES')
            print('NO')


        print('YES')
        print('NO')

            print('NO')
            print('YES')

            print('YES')
            print('NO')
        print("YES")
        print("NO")


            print("YES")
            print("NO")

    print("YES" if cnt >=4 else "NO")

        print("YES")
        print("NO")

            print('YES')
            print('NO')
        print('YES')
        print('NO')

   
    print( 'YES' if 0.5 <= sum(1 for i in cards if c1 + c2 + i <= 20) / len(cards) else 'NO')

        print("YES")
        print("NO")

    print('YES' if cnt > 3 else 'NO')

            print('YES')
            print('NO')
        print('YES')
        print('NO')

        print('YES')
        print('NO')

    print("YES" if sum(p)/len(p) >= 0.5 else "NO")

    print("YES" if card_game(c1, c2, c3) else "NO")

    print("YES" if len(safeCards) / 7 >= 0.5 else "NO")
            print("YES")
            print("NO")
	print('YES' if win >= 4 else 'NO')

    print('YES')
    print('NO')

                    print(i + 1)
		print(Inquiry(team))
	
    print(rank.index(ses[ps.index(q)]) + 1)

                print(ans)
        print(len(Poi_ran) - Poi_ran.index(point))
    print(len(st) + 1)

    print(score_set.index(teams_score) + 1)

                print(rank[i])
    print(ans)


        print(ans[int(input())])
        print(result[table[q]])
            print(i + 1)


        print(rank[a])
        print(rank.index(team[n])+1)

            print(ind)
        print(rank.index(t[n])+1)
    print(d[p])


    




    print(dic[team[n-1][1]])
    


        print(rank)
        print(s.index(lst[num-1]) +1)

    print(Convert[q])


        print(rk[s[temp]])
        print(place[keys.index(n)])
            print(ind + 1)

    print(scores.index(teams[int(line)]) + 1)

  print(l.index(d1[n])+1)

        print(rankScore.index(arr[num])+1)
            print(ans)
        print(r)

        print(result)


    print(dic[int(input())])
    
    print(Sorted_List.index(List[q])+1)
    

    print(m[ip])

            print(i + 1)
            print(v[9][0])
    print(res)

		print(A[9][0])
	
    print(data[0])

        print(Num_lis[0])
            
            print(na[0])
    print(*n)

      print(shorten(f))
  
    print(S)


        print(a[0])


    print(A[0])

    print(*a)

        print(a[0])
    print(n[0])

        print(calc(s))
    print(table[9][0])



    print(sum(int(n)*m for n, m in zip(s, [1, 9, 36, 84, 126, 126, 84, 36, 9, 1]))%10)

	print(x[0])

        print(a[0])
        print(ans%10)
        print(suuji[0])

            print(rec(A))        

        print(*n)
    print(a[0])


    print(L[0])


        print(main(num))
        print(n)
    print(line[0])

    print(A[0])

        print(ans)

    print(int(A10[0]))

        print(*data)
    print(A[0])


    print(l[0])

        print(s)
    print(a[0])

    print(nums[0])

    print(*line)

  print(l[0])

        print(ans%10)

    print(func(arr))
        

    print(lst[0])

    print(solve(s))

	print(a[0])


    print(num[0])


        print(ans%10)

        print(plus(num))
        print(result)

    print(cnt)


print(count)



print(cnt)

print(res)

        print(num)
print(cnt)

print(a)

    print(count)


print(count)


print(ans)

        print(i)
print(ans)

print(sum(e[:-1]==e[-2::-1]for e in sys.stdin))


print(ans)

print(sum([1 for i in sys.stdin if i.strip()==i.strip()[::-1]]))


print(ans)

print(sum(s[:-1]==s[-2::-1]for s in sys.stdin))

print(ans)



print(cnt)


        print(count)
print(count)

print(count)

        print(cnt)

print(c)





print(SUM)
        
    


print(ans)

print(s)

        print(cnt)
print(count)

print(ans)

print(a)

print(c)

        print(kai)
        
print(ans)       

   
print(c)



    
print(len(a))

print(s)

        print(C)
print(sum)


print(c)


print(d)

print(count)

print(n)


    
print(s)

print(ans)

    print(A)

print(a)

    
print(ans)

print(ans)

print(n)

    
print(c)

print(s)


print(q)

print(sum(e[:-1]==e[-2::-1]for e in sys.stdin))

        print(s)
print(ans)

print(ans)


print(c)


print(s)
        

        print(count)
print(s)

print(num)

print(c)

print(c)

print(s)

print(a)

   
print(c)

print(ans)

print(a)

print(count)

print(ans)

print(ans)

    print(total_palindromes)

print(ans)

print(ans)

print(cnt)

    print(ans)


print(sum(map(int, ans.replace("@", " ").split())))

print(sum_value)

    print(result)

print(ans)

print(sum(map(int,''.join([' ',c][c.isdigit()]for e in sys.stdin for c in e).split())))

print(ans)

print(sum(nums))

print(sum(sn))

print(num)



    print(ans)



print(ans)

print(sum(num))


print(ans)

        print(ans)
    print(sum(map(int, ''.join(T).split())))
    
print(sum)


print(sum1)


print(password)

print(secret)


print(sn)

print(ans)

print(res)

print(a)

print(p)


print(u)


print(ans)

   print(l)

    print(total)

print(N)

print(ans)

print(sum(map(int,re.findall(r"\d+",sys.stdin.read()))))


print(sum(sumlist))

print(y)

print(SUM)

print(S)

print(S)

print(ans)

print(S)

print(s)

        print(i)
print(sum(c))



print(ans)

print(ans)


        print(total_sum)
        print(ans)
print(sum([sum(map(int,re.findall(r"[0-9]{1,5}",i))) for i in [j for j in sys.stdin]]))


print(a)

print(p)

print(sum(a))



print(c)
    


print(password)


print(ans)

        print(ans)
print(s)

print(a)

print(c)


print(ans)

print(sum(a))

print(sum(l))

print(sum(a))


print(sum(s_s))

print(M)

print(S)

        print(ans)
print(ans)

        
print(sum(S))

print(sum(l))

print(sum)

print(S)

print(a)

print(ans)

            print(k, this_month[k] + prev_month[k])


    print(str(i) + " " + str(d1[i]+d2[i]))

        print(i, cli[i][0] + cli[i][1])

    print(cst,cont[cst])

        print(i,A [i] + B [i])

            print(k, tmp)

    print(no, both[no])

    print(c[0], c[1])


  print(k, v + dic1[k])


        print(c, count)


        print(i,sum_[i])

        print(c,cnt[c])


    print(i,com[i])

    print(i[0],i[1])


        print(i,cnt)


    print(key,thisMonth[key]+lastMonth[key])


        print(x,y)

        print(str(i) + ' ' + str(clst1[i]+clst2[i]))

        print(i, lst1[i]+lst2[i])

    print(*i)

        print(f'{c} {count}')


        print(i, last_month[i] + this_month[i])

    print('%d %d' % (a[0], a[1]))

    print(id, trade_count[id])

    print(key, t0[key] + t1[key])

        print('{} {}'.format(d[0], d[1]))


        print(i, cnt)

    print(i,aa[i]+bb[i])

    print(n, table[0][n]+table[1][n])

        print(i, t1[i]+t2[i])


    print(A[i][0], A[i][1])
    
    

    print(c,da[c]+db[c])


    print(i, d1[i] + d2[i])


                print(result)
                    print(result)
                    print(result)
            print(ans)
            print('d')
            print('o')
            print('x')
        print('d')

    print(ans)

    print(isSolved(board))

                print(s[4])
                print(s[i])
                print(s[3*i])
            print("d")

    print(ans)


 print('dxo'[(-3in a)+(3in a)*2])

      print(s[i])
      print(s[i])
      print(s[0])
      print(s[2])
            print(ls[0])
        print("d")

            print("o")
            print("x")
            print("d")
            print(s[0])
            print(s[3])
            print(s[6])
            print(s[0])
            print(s[1])
            print(s[2])
            print(s[0])
            print(s[2])
            print("d")
        print(f(input()))
        print(win)
        print("d")
    
    
        

        print(s[0])
        print(s[2])
            print(s[i])
            print(s[i])
        print("d")

    

        print(ans())

        print(ans)


        print(ans)

            print("o")
            print("x")
        print("d")

        print('o')
        print('x')
        print('d')

    print(result)
    

  print(answer)

            print('x')
            print('o')
            print('d')
            print(s[i[0]])
    print("d")

        print(judge(t))

        print('o')
        print('x')
        print('d')

        print(result)


			print(ans)

            print(S[i])
            print(S[i])
        print(S[4])
    print('d')


        
    print(winner)
        

    print('o' if 'ooo' in b else ('x' if 'xxx' in b else 'd'))
        print(island_count)

            print(islands)

        print(num_of_islands)

        print(cnt)

    print(cnt)


            print(counter())
        print(counter())

  print(ans)


    print(count)

    print(count)


			print(iland)


  print(ans)

        print(ans)
    print(cnt)
    

    print(count)

            print(f1())
        print(f1())
    print(ans)
    print(b)

        
        print(count)

    print(ans)

    print(len(line))

        print(result)

        print(count)

    print(ID)

	print(ans)
        print(result)
    print(b)

        print(sum)
    print(c)
        print(ans)
    print(ans)
        print(ans)
        print(cnt)

    print(count)

        print(count)
    print(len(G.GetConnectedComponents()))

        print(result)


    print(solve(p,[False for _ in range(n)],2000.0 + 0.0*1j).count(False))

	print(n - len(convex_hull(p)))

    print(n-len(result)+1)

    print(n-len(k))


    print(n - len(points))
        print(solve(N, XY))


        print(n - len(cv_list))

    print(len(X) - visit_num)

    print(N - (len(jarvis(points)) - 1))

    print(len(p_all) - len(p_hull))


    print(n - len(get_convex_hull(P)))


    print(len(points) - len(convex_hull(points)))
    

        print(n - len(ch))




print(main())


            print(0)
                            print(i + 1, j + 1)
                print(1)


    print(0)

          print(i + 1, ind1 + 1)
      print(1)


		print(0)
				print(i+1, j+1)
        print(0)
                print(i+1, j)
        print(1)

        print(0)
        print(1)
        print(*ANS)


        print(0)
                print(i, min(lot.index(m), lot.index(star)) + 1)
            print(1)

        print("0")
        print(0)
                    print(i+1,x+1)
                    print(i+1,y+1)
            print(1)



        print(0)
                        print(i+1,j+1)
            print(1)

        print(0)
            print(ans)
            print(1)

        print(0)
            print(d_ans, n_ans)
            print(1)


	print(ans)

		print(0)
		print(ans[n][s])

        print(0)
        print(ans[n][s])

    print(sum(v for counter in dp[n].values() for k, v in counter.items() if k == s))


        print(ans)
        print(ans)
        print(ans)
    print(calc(n, s, (1 << 10) - 1))

            print(result)
        print(0)
    print(ans)



        print(Hit)
        print(f'Data {i + 1}:')
            print(''.join(r))


    print('Data %d:'%(i+1))
        print('Data {}:'.format(count))
            print(''.join(row))

    print("Data " + str(l+1) + ":")
                print("1", end="")
                print("0", end="")
        print("")



    print("Data " + str(i_data) + ":")
        print(s)
 print(f'Data {i+1}:')

  print("Data " + str(i + 1) + ":")
  
    print("".join(map(str,line)))



	print("Data ", i+1, ":", sep='')
		print(s[0:8], sep='')


    print("Data {}:".format(i))
        print("".join(map(str, l[3:-3])))


    print(f'Data {i+1}:')

		print("Data "+str(i+1)+":")
			print("".join(A[z]))




    print("Data {}:".format(k+1))

        print( "".join(map(str,l)) )





    
    print('Data ', i+1, ':', sep='')
        print(*M[j], sep='')
    


	print("Data %s:" % str(i+1))
		print("".join(p))

    
    print('Data {}:'.format(i + 1))
        print(line)

    print('Data {0}:'.format(testCase + 1))
        print(''.join(S [i]))

    print("Data {}:".format(t+1))
        print(''.join(row))

            print("{0:d}".format(r),end="")
        print("")

    
    print('Data {0:d}:'.format(i))
    print("Data "+str(i+1)+":")
        print(answer_box[k])

    print('Data %d:' % (i+1))


    print('Data '+ str(i+1) + ':')
        print(''.join(k))


    print("Data " + str(i) + ":")
    print(f"Data {i + 1}:")
        print(''.join(map(str, F[i])))


    print("Data {}:".format(count+1))
        print(*bomb[i],sep="")                    



    print('Data ' + str(c) + ':')
      print(b)

    print('Data ' + str(i+1) + ':')
        print(''.join(k))

        print(lanterns)



    print(kruskal(n, edges))


    print(int(sum(d)/100)-(n-1))


  print(s)


  print(ans)

    print(ans)


	print(ans)

    print(ans)


        print(result)



        print(compute_number_of_lanterns(n, adj_list))



    print(w)


  print(s)

    print(light_num)

        print(f'{x * x + x * y / 2 * 4:.6f}')


    
    print(x**2 + 2*x*math.sqrt((x**2)/4 + h**2))

    print(res)


    print(surface_area_square_pyramid(h, x*x))


    print(x*x+x*t*2)

    print("{0:.8f}".format(x*x + 2.0 * x * sqrt(h*h + 1/4.0*x*x)))

	print(S)

    print("{0:.6f}".format(ans))

    print((x*x) + sum([sh*x*0.5 for _ in range(4)]))

    print(x*x+2*x*(((x/2)**2)+h*h)**0.5)

    print(s)

    print(area)

            print("{:.6f}".format(s2))
    print("%.6f" % A)

        print('{:.6f}'.format(result))


    print(x**2 + 2.0*x*y)


    print(x**2 + 2*x*l)


	print(4 * (h*h+(x/2)*(x/2))**0.5 * x / 2 + x*x)


  print("{0:6f}".format(S))

  print(x ** 2 + x * (4 * h ** 2 + x ** 2) ** (1 / 2))

    print(hypot(x/2, h)*x*2+x*x)

    print("%.6f"%(x**2+x*2*(h**2+(x/2)**2)**0.5))

    print(s)


    print("{:.6f}".format(tot))

        print(f"{ans:.7f}")
  print(s)

        print("{:.6f}".format(x**2+(((((x/2)**2)+h**2)**0.5)*x)*2))
  print(x*x+2*x*(((x/2)**2)+h*h)**0.5)

  print(x**2+x*(4*h**2+x**2) ** (1/2))

  print(s)

    print(S)

    print(a)

    print(float(x*x + 2*x*h2))

			print('{:.5f}'.format(ans))

    print(4 * b + x * x)


    print(S)

    print('{:.6f}'.format(ans))
    


    print(S)

    print(S)

    print(S)

    print(x ** 2 + 2 * x * sqrt(x ** 2 / 4 + h ** 2))

    print(((0.5*x)**2+y**2)**0.5*x*2+x**2)

    print(area)

    print(ans)

        print("{0:0.6f}".format(x * math.sqrt(4 * h**2 + x**2) + x**2))
    print(x * x + 2 * x * hh)


    print(S)

    print('{:.6f}'.format(s))

    print(ans)

    print(x*x+2*x*(((x/2)**2)+h*h)**0.5)

    print(S)

    print(f'{t:0>2}:{h:0>2}:{s:0>2}')


    
    print('%.2d:%.2d:%.2d' % (t,h,s))
    
    
    print('%.2d:%.2d:%.2d' % (t,h,s))

        print(f"{a:02}:{b:02}:{c:02}")


    print(f"{hours:02d}:{minutes:02d}:{seconds:02d}")

    print(f"{hours:02d}:{minutes:02d}:{seconds:02d}")


        print("%02d:%02d:%02d" % (h, m, s))

  print(":".join(map(change,(hour,minu,sec))))

    print("0"+ str(ans[0])+ ":" + str(ans[1]) + ":" +str(ans[2]))

    print("0"+ str(t_ans[0])+ ":" + str(t_ans[1]) + ":" +str(t_ans[2]))

    print("{:02d}:{:02d}:{:02d}".format(t//3600,(t%3600)//60,(t%3600)%60))
    print(s2hms(rest))
    print(s2hms(3*rest))


    print(second_to_str(rest_second))
    print(second_to_str(rest_second_3x))

        print(prettify_second(remaining_sec, 'normal'))
        print(prettify_second(remaining_sec, 'long'))



    print(str(TT).zfill(2) + ":" + str(HH).zfill(2) + ":" + str(SS).zfill(2))


    print(str(TT).zfill(2) + ":" + str(HH).zfill(2) + ":" + str(SS).zfill(2))

        print("{0:02d}:{1:02d}:{2:02d}".format(t, h, r))


  print(str(h).zfill(2) + ":" + str(m).zfill(2) + ":" + str(s).zfill(2))

	print('{:02d}:{:02d}:{:02d}'.format(t//3600, (t%3600)//60, t%60))
	print('{:02d}:{:02d}:{:02d}'.format(t//3600, (t%3600)//60, t%60))


    print("{:02d}:{:02d}:{:02d}".format(ans//3600, (ans//60)%60, ans%60))
    print("{:02d}:{:02d}:{:02d}".format(ans2//3600, (ans2//60)%60, ans2%60))


    print(diff_t + ":" + diff_h + ":" + diff_s)
    print(diff_3t + ":" + diff_3h + ":" + diff_3s)


        print(f'{last//3600:0>2}:{(last%3600)//60:0>2}:{last%60:0>2}')
        print(f'{last//3600:0>2}:{(last%3600)//60:0>2}:{last%60:0>2}')     
    print('{:02d}:{:02d}:{:02d}'.format(t//3600, (t%3600)//60, t%60))
    print('{:02d}:{:02d}:{:02d}'.format(t//3600, (t%3600)//60, t%60))


  print("{:02d}:{:02d}:{:02d}".format(x//3600,(x%3600)//60,x%60))
  print("{:02d}:{:02d}:{:02d}".format(x//3600,(x%3600)//60,x%60))

    print('{:02d}:{:02d}:{:02d}'.format(n // 3600, (n % 3600) // 60, n % 60))
    print('{:02d}:{:02d}:{:02d}'.format(m // 3600, (m % 3600) // 60, m % 60))


        print("{:02d}:{:02d}:{:02d}".format(dh,dm,ds))
    
    

    print('{:02d}:{:02d}:{:02d}'.format(rest_time//3600, (rest_time%3600)//60, rest_time%60))
    print('{:02d}:{:02d}:{:02d}'.format(rest_time_3//3600, (rest_time_3%3600)//60, rest_time_3%60))

    print('{0:0=2}:{1:0=2}:{2:0=2}'.format(n_T, n_H, n_S))
    print('{0:0=2}:{1:0=2}:{2:0=2}'.format(b_T, b_H, b_S))

    
    print(twoch(Ta)+ ':'+ twoch(Ha)+ ':'+ twoch(Sa))
    print(twoch(Tb)+ ':'+ twoch(Hb)+ ':'+ twoch(Sb))


    print(':'.join(ans1))
    print(':'.join(ans2))

    print(func(r))
    print(func(r * 3))


    print('{:02d}:{:02d}:{:02d}'.format(t//3600, (t%3600)//60, t%60))
    print('{:02d}:{:02d}:{:02d}'.format(t//3600, (t%3600)//60, t%60))

	print('{:02d}:{:02d}:{:02d}'.format(t // 3600, (t % 3600) // 60, t % 60))
	print('{:02d}:{:02d}:{:02d}'.format(t // 3600, (t % 3600) // 60, t % 60))

    print(f"{h1:02}:{m1:02}:{s1:02}")
    print(f"{h2:02}:{m2:02}:{s2:02}")

        print(str(tt).zfill(2)+":"+str(hh).zfill(2)+":"+str(ss).zfill(2))
        print(str(ttt).zfill(2)+":"+str(hhh).zfill(2)+":"+str(sss).zfill(2))
        
        print("{0:02d}:{1:02d}:{2:02d}".format(H, M, S))
        print("{0:02d}:{1:02d}:{2:02d}".format(H3, M3, S3))
    print(formatHHMMSS(leave_time))
    print(formatHHMMSS(leave_time * 3))

    print("{0:02d}:{1:02d}:{2:02d}".format(t, h, s))

    print("{:0>2}:{:0>2}:{:0>2}".format(hour,minu,sec))
    print("{:0>2}:{:0>2}:{:0>2}".format(hour_,minu_,sec_))

        print("0%d:0%d:0%d" %(T1,H1,S1))

        print("0%d:0%d:%d" %(T1,H1,S1))

        print("0%d:%d:0%d" %(T1,H1,S1))
        print("0%d:%d:%d" %(T1,H1,S1))


        print("0%d:0%d:0%d" %(T3,H3,S3))

        print("0%d:0%d:%d" %(T3,H3,S3))

        print("0%d:%d:0%d" %(T3,H3,S3))
        print("0%d:%d:%d" %(T3,H3,S3))


                print(int(s))
    print(an)


        print(s)


        print(data[0])

    print(int(n))

			print(int(number))
      print(int(a)) 
        print(int(s))

     print(int(a))
        print(id)

        print(s)

      print(int(s))
    print(int(n)) if w/(t**2) >= 25 else print('', end='')

        print(s)


            print(int(s))
      print(s)

		print(s)


print("\n".join(map(str, [int(s) for l in sys.stdin for s, w, h in [map(float, l.split(","))] if w/h**2 >= 25])))

        print(int(s))

    print(ans)


        print(s)

        print(int(s))

        print(b[0])


            print(int(answer[i]))
    print(s)
 

  print(n)   

            print(int(id))
    print(int(s))

      print(s)
 
          print(int(id))
      print(int(id))
         print(int(id))
  print(S[i])

    print(int(n))

    print(int(n))

      print(s)
 
        print(int(s))

            print(int(id))
        
      print(s)
 
      print(int(s))
      print(int(s))
                print(int(s))

    print(int(s))

            print(num, end="")
                print(" ", end="")
        print()

        print(S)



        print(int(s))

      print(int(s))
    print(s)

        print(int(s))

      print(int(s))
            print(int(s))
    print(i)





print(*r, sep='\n')


        print(a)


            print(int(s))
            print(s)
            print(int(int_list[0]))
        print(x[0])


        print(int(s))

            print(s)

      print(overweight_student)
            print(num)
            print(s)

            print(int(lst[0]))
        print(data[0])

        print(int(L[0]))

    print(f'{x:.2f}')
    print(f'{y:.2f}')


    print(*[f"{a:.2f}" for a in an], sep="\n")


    print(coord[n - 1][0])
    print(coord[n - 1][1])



    print("{:.2f}\n{:.2f}".format(p.real, p.imag))

    print(x[n])
    print(y[n])


 print(f'{z.real}\n{z.imag}')

	print(r[i]*math.cos(d[i]), r[i]*math.sin(d[i]), sep='\n')

    print(result[n-2][0])
    print(result[n-2][1])

    print('{:.2f}'.format(location.real))
    print('{:.2f}'.format(location.imag))
    

    print(x)
    print(y)

    print(x)
    print(y)


    print(v[0])
    print(v[1])

    print('{:.2f}'.format(location.real))
    print('{:.2f}'.format(location.imag))

        print('{:.2f}'.format(result[0]))
        print('{:.2f}'.format(result[1]))

    print("%.2f" % positions[n-1][0])
    print("%.2f" % positions[n-1][1])
    

    print(nx)
    print(ny)



  print(x, y)

    print("{:.2f}".format(x))
    print("{:.2f}".format(y))

    print("{:.2f}".format(L[k][0]))
    print("{:.2f}".format(L[k][1]))



    print(x)
    print(y)

    print('{:.2f}'.format(x))
    print('{:.2f}'.format(y))

    
    print(round(ax, 3))
    print(round(ay, 3))


        print(f'{x:.2f}')
        print(f'{y:.2f}')

    print(x)
    print(y)

    print(ANS[n - 1][0])
    print(ANS[n - 1][1])


    print("{:.2f}".format(x))
    print("{:.2f}".format(y))

    print(Decimal(pos[n-1][0]).quantize(Decimal('0.01'), rounding=ROUND_HALF_UP))
    print(Decimal(pos[n-1][1]).quantize(Decimal('0.01'), rounding=ROUND_HALF_UP))

            print(ans)
    print("".join(ans))


    print(buf)
    

        print(ans)
    
        print(ans)
    print(ans)

    print(t)

    print(ans)


    print(''.join(answer))

        print(res)
        print(result)


    print(run_length(line.strip()))

                print(S[i+2],end="")
            print(S[i],end="")
    print("")


        print(s_out)
 print(a)

    print(restore(input()))

    print(s)

	print(*ans, sep='')


    print(line)



    print(''.join(w for w in newword))


        print(*o,sep="")

        print(ans)
        print(answer)
                print(S[i+2], end='')
            print(S[i], end='')
        
    print()







            print(ans)
 print(a)

        print(t)

print(*r, sep='\n')

    print(ans)
    

        print(ans)
                    print(str2[num1 + 2],end="")
                    print(str2[num1],end="")
        print()

    print(''.join(s))

    print(x,end="")

    print(''.join(Tlist))


        print(''.join(code))
                    print(i * y, end = "")
        print()
    print(ans)


    print(W)

    print(ANS)


                print(num[i], end='')
                    print(temp, end='')              
        print()
    print(s)

                print(str[_ + 2] * int(str[_ + 1]), end = "")
                print(str[_], end = "")
        print()
    print("".join(ans),end="")

    print(r)

    print(method(line.replace('\n', '')))

    print(line)

		print(string)
    print(a)

    print(re.sub(r"@(\d)(.)", lambda m: m.group(2)*int(m.group(1)), s.rstrip()))

                print(s[i+2], end="")
            print(s[i], end="")
    print()

                print(f'{g[i][j]:>4}', end='')
            print()


        print(*[f"{v:>4}" for v in r], sep="")


        print(s)


        print(("".join([str(l).rjust(4) for l in i])))


			print(format(tbl[r][c], '4d'), end='')
		print()

        print(s)


            print('{:4}'.format(magic[i][j]), end="")
        print()
            

        print(*l[s],sep="")


            print("{:4d}".format(num),end='')
        print()

      print(a)

            print(str(v).rjust(4), end='')
        print()

            print(temp)
            print('{0:4d}'.format(aaa),end="")
        print('')

        print("   ",end="")
        print("  ",end="")
        print(" ",end="")
    print(x,end="")

        print("")


    print(s)

        print("".join(map(lambda x: "{:>4d}".format(x), l[1:-1])))

		print(s)


            print('{:4d}'.format(j), end= '')


        print()


        print(*L[i],sep="")

        print(ans)


                    print(str)
        print(out)
        
        

    print(f'{area:.6f}')


print(ans)



print(area_polygon(p))

print(s)

 
print(abs(area_polygon(p)))

print(ans)

print(answer)

print("%.6f" % poly_area(poly, len(poly)))

print(ans)


print(s)


print(abs(s)/2)

print(S)

print(calc_area(p))


print(S)

print(result)

print(s)

print("%.6f" % (abs(total)/2.0))


print(ans)

        print("{:.6f}".format(answer / 2))

print("%.6f" % (total))

print(S)

print(abs(total))

    
    print(area)

    
print('{:.6f}'.format(ans))
    

print(s)

print("%.6f" % (abs(total)/2.0))



print(abs(ans))


print("%.6f" % (abs(sum)/2.0))


print("%.6f" % (abs(total)))


print(S)

print(S)


print(S)



    print(f'{area:.6f}')

print(abs(ans) / 2)


print(abs(total))

print("%.6f" % (abs(total)/2.0))

print(S if S>0 else S*(-1))

print(solve())

print(total)


    print(res)

print("%.6f" % abs(total))


print("%.6f" % (abs(total)/2.0))


print(S)

print("%.6f" % (abs(total)/2.0))


print("%.6f" % (abs(total)/2.0))

print(abs(total))

print(abs(total/2))


print("%.6f"%(abs(total)/2.0))


print("%.6f" % (abs(s)))

print("%.6f" % (abs(total)/2.0))

print("%.6f" % (abs(total)/2.0))

print("%.6f" % (abs(total)))

print(ans)



print(abs(ans))

print(s)



print(sumS)


print(ANS/2)



print("%.6f" % abs(sum))


print(abs(s))

print(abs(ans))

print(total)

        print(f'{cube_root(x, q):.6f}')


        
    print('{:.6f}'.format(x))

    print(an)


    print(ans)

    print(x)

        print(result)


    print(x)


 print(x)

    print(x)


	print(x)


  print(x)

    print(x)

    print("{:.6f}".format(tri(n)))

    print(ans)

    print(x)


  print(x)

    print("{:.6f}".format(result))

        print(x)

    
    print("{:.6f}".format(x))
        
        

  print(cubeRoot(q))

    print(str('{:.06f}'.format(three_pow)))


  print(f'{x:.6f}')


        print(f"{x:.6f}")

    
    print('{:.6f}'.format(x))
        

    print("{:.6f}".format(x))

   print(x)


	print("%.06f" %x)

    print("{:.6f}".format(x))

    print(f"{x:.6f}")

    print(f'{x:6f}')


    print(x)

  print(f'{x:.6f}')


  
    print( '{:.6f}'.format(x))

    print(x)


    
    print('{:.6f}'.format(x))

    
    print(x)
    

    print(x)

    print(f'{y:.6f}')
    print(f'{x:.6f}')

    print(f'{x:.6f}')


    print(f'{x:.6f}') 

    print(f'{x:.6f}')

    print(f'{x:.6f}')
    
   

   print(f'{x:.6f}')

    
    print(f'{x:.06f}')

    print(x)

    print(f'{x:6f}')


    print(f"{x:.6f}")


    print(f"{x:.6f}")

            print(format(xn,'.6f'))
    print(f'{x:.6f}')

    print(f'{a:.6f}')

    print(f'{x:.6f}')

    print(f'{y:.6f}')
    
    print(f'{x:.6f}')
    

  print(x)

    print(x)

    print(f'{x:.6f}')

   print(x)

        print(f'{x:.6f}')
    print("%.06f" %x)

    print(f'{x:.6f}')

    print(f'{x:.6f}')

    print(x)

	print(x)

    
    print('{:.7f}'.format(x))

    print(x)


    print(f[x]) 


    print('{:.6f}'.format(x))

    print(x)

    print(x1)

    print("%.6f" % solve(q))

    print("{:.6f}".format(x))


    print(x)

    print("%f" % third_root(n))

            print(x)
    print(x)

            print(f'{x:.6f}')
        
    print(x)

    print(f'{x:.6f}')
        

 print(x)

            print("%.6f"%n)

            print(f'{point_r.x:.6f} {point_r.y:.6f}')
    
    print(r.real, r.imag)

        print(b.real,b.imag)
    print("{0:.6f} {1:.6f}".format(x*cos(ang)-y*sin(ang)+x1,y*cos(ang)+x*sin(ang)+y1))

        print(xr, yr)

    print(X,Y)


 print(f'{t*x+s*y+a:.6f} {s*x-t*y+b:.6f}')

	print(qq.real, qq.imag)

	print(qq.real, qq.imag)

        print("%.6f %.6f" % (R.real,R.imag))
        print("{:.6f} {:.6f}".format(x1+r*cos(th3),y1+r*sin(th3)))
        print(*Point(xq, yq).reflect(vector))

    
    print('{0:.8f} {1:.8f}'.format(xq2, yq2))
    
    


        print(xr, yr)


        print(f'{xr:6f} {yr:6f}')

    print(X, Y)

            print("{:.6f} {:.6f}".format(-xq+2*x1, yq))
            print("{:.6f} {:.6f}".format(xr, xy))

        print("%.6f" % R.real,"%.6f" % R.imag)
        print(R.real,R.imag)
    print('{:.6f} {:.6f}'.format(pp.real,pp.imag))
    

     
    print(r.real, r.imag)


    print(OR)

    print("%.6f %.6f" % (xr, yr))

        print('{:.8f} {:.8f}'.format(result.x, result.y))



  print(" ".join(["{:.6f}".format(i) for i in [X,Y]]))

    print(xr, yr)


    print(X, Y)

        print(OR[0],OR[1])
            print(' '.join(v[0][1]))
            print(" ".join(list(str(min(ans)))))
            print(" ".join(map(str, mgr[i:] + mgr[:i])))
    print(*enter_num_max_list[0])

        
        print(*c[ans:ans + 8])
        print(ans[i], end=" ")
    print(ans[7])

    print(t[:-1])

 print(*list(d[min(d)]))


    print(" ".join(map(str, max_horse)))

    print(" ".join([i for i in str(sorted(q[max(q.keys())])[0])]))

	print(*list(str(d[id])))


    print(*Q)

                print(" ",end="")
            print(maxTable[i],end="")
        print()
        

        print(*lst[ans])


        print(*ans)
        
    print(*ANS)


    print(*min_c)
            
    

        print(' '.join(map(str, list(str(result)))))



    print(" ".join(sorted(a)[0][1]))

    
    print(*ans)


    print(*L[ck[0][2]:ck[0][2]+8])

        print(" ".join(out))
    print(*b_prev)

                print("pre-meiji")
                print("meiji", y - 1868 + 1, m, d)
                print("taisho", y - 1912 + 1, m, d)
                print("showa", y - 1926 + 1, m, d)
                print("heisei", y - 1989 + 1, m, d)
    print(res)


		print("pre-meiji")
		print("meiji %d %d %d"%(y-1868+1,m,d))
		print("taisho %d %d %d"%(y-1912+1,m,d))
		print("showa %d %d %d"%(y-1926+1,m,d))	
		print("heisei %d %d %d"%(y-1989+1,m,d))


            print("pre-meiji")
            print("pre-meiji")
            print("meiji",y - 1868 + 1,m,d)
            print("meiji",y - 1868 + 1,m,d)
            print("taisho",y - 1912 + 1,m,d)
            print("taisho",y - 1912 + 1,m,d)
            print("showa",y - 1926 + 1,m,d)
            print("heisei",y - 1989 + 1,m,d)
        print("pre-meiji")
        print("meiji %d %d %d" % (a-1867, b, c))
        print("taisho %d %d %d" % (a-1911, b, c))
        print("showa %d %d %d" % (a-1925, b, c))
        print("heisei %d %d %d" % (a-1988, b, c))

        print(gengo)
        print(gengo, Y, m, d)

        print(result)


        print("pre-meiji")
        print("meiji", y - 1868 + 1, m, d)
        print("taisho", y - 1912 + 1, m, d)
        print("showa", y - 1926 + 1, m, d)
        print("heisei", y - 1989 + 1, m, d)

    
        print("pre-meiji")
        print("meiji", y - 1867, m, d)
        print("taisho", y - 1911, m, d)
        print("showa", y - 1925, m, d)
        print("heisei", y - 1988, m, d)



    print("pre-meiji")
  
    print("meiji",day[0] - 1868 + 1, day[1], day[2])
  
    print("taisho",day[0] - 1912 + 1, day[1], day[2])
  
    print("showa",day[0] - 1926 + 1, day[1], day[2])
  
    print("heisei",day[0] - 1989 + 1, day[1], day[2])

                print(era[0])
                print(era[i], date//10000 - start_date[i-1]//10000 + 1, m, d)
        print("pre-meiji")
        print("meiji",y-1867,m,d)
        print("taisho",y-1911,m,d)
        print("showa",y-1925,m,d)
        print("heisei",y-1988,m,d)

        print(name[index], date)
        print(name[index])

        print(gen)
        print(gen, str(y), str(month), str(day))


            print("pre-meiji")
            print("meiji", int(s/1000) -int(meiji/1000) + 1, m ,d)
            print("taisho", int(s/1000) -int(taisho/1000) + 1, m,d)
            print("showa", int(s/1000) -int(showa/1000) + 1, m,d)
            print("heisei", int(s/1000) -int(heisei/1000) + 1, m,d)
            print('pre-meiji')
            print('meiji', (a-67) % 100, b, c)
            print('taisho', (a-11) % 100, b, c)
            print('showa', (a-25) % 100, b, c)
            print('heisei', (a - 88) % 100, b, c)
        print(ans)
            print(era)
        
            print(era + " " + str(lst[0]) + " " + str(lst[1]) + " " + str(lst[2]))
        
            print('pre-meiji')
                print('pre-meiji')

                print('meiji', y-1867, m, d)

            print('meiji', y-1867, m, d)

                print('meiji', y-1867, m, d)

                print('taisho', y-1911, m, d)

            print('taisho', y-1911, m, d)

                print('taisho', y-1911, m, d)

                print('showa', y-1925, m ,d)

            print('showa', y-1925, m, d)

                print('showa', y-1925, m , d)

                print('heisei', y-1988, m, d)

            print('heisei', y-1988, m, d)

                print(N[i][3])
                print(N[i][3], Y-N[i-1][0]+1, M, D)
        print("meiji", int(y) - 1867, int(m), int(d))
        print("taisho", int(y) - 1911, int(m), int(d))
        print("showa", int(y) - 1925, int(m), int(d))
        print("heisei", int(y) - 1988, int(m), int(d))
        print("pre-meiji")


        print("pre-meiji")
            print("pre-meiji")
                print("pre-meiji")
                print(f"meiji 1 {m} {d}")
            print(f"meiji 1 {m} {d}")
        print(f"meiji {y - 1867} {m} {d}")
            print(f"meiji {y - 1867} {m} {d}")
                print(f"meiji {y - 1867} {m} {d}")
                print(f"taisho 1 {m} {d}")
            print(f"taisho 1 {m} {d}")
        print(f"taisho {y - 1911} {m} {d}")
            print(f"taisho {y - 1911} {m} {d}")
                print(f"taisho {y - 1911} {m} {d}")
                print(f"showa 1 {m} {d}")
        print(f"showa {y - 1925} {m} {d}")
                print(f"showa {y - 1925} {m} {d}")
                print(f"heisei 1 {m} {d}")
            print(f"heisei 1 {m} {d}")
        print(f"heisei {y - 1988} {m} {d}")


                print(era_name)
                print(era_name, target.year - period['start'].year + 1, target.month, target.day)
        print(era(f))
            print("pre-meiji")
            print("meiji", y - 1867, m, d)
            print("taisho", y - 1911, m, d)
            print("showa", y - 1925, m, d)
            print("heisei", y - 1988, m, d)
                    print(era[0])
                    print(era[i], data // 10000 - start_data[i - 1] // 10000 + 1, m, d)
        print(gengo(y,m,d))
        print("pre-meiji")
        print("pre-meiji")
        print("pre-meiji")
        print("meiji", y-1867, m, d)
        print("meiji", y-1867, m, d)
        print("meiji", y-1867, m, d)
        print("taisho", y-1911, m, d)
        print("taisho", y-1911, m, d)
        print("taisho", y-1911, m, d)
        print("showa", y-1925, m, d)
        print("showa", y-1925, m, d)
        print("heisei", y-1988, m, d)

    print(' '.join(ans))


print(" ".join(ans))



print(*s)

print(' '.join([w for w in input().replace(',', '').replace('.', '').split(' ') if len(w) > 2 and len(w) < 7]))

print(' '.join([x for x in input().replace(',','').replace('.','').split() if 2<len(x)<7]))

    print(*words)

print(*filter(lambda x: 2 < len(x) < 7, input().replace(",", "").replace(".", "").split()))

    print(' '.join(result))


    print(' '.join(words))

    
print(ans)

print(*[w for w in map(lambda x:x.strip('.,'),input().split())if 2<len(w)<7])


print(' '.join(newwordlist))


print(*words,sep=" ")

print(' '.join([x for x in input().replace('.',' ').replace(',',' ').split() if 3 <= len(x) <= 6]))


print(*ans)


print(*[s for s in s.split() if 3 <= len(s) <= 6])

        print(" ".join(ans))
print(' '.join(y))

print(" ".join(y))

print(' '.join(TEXT))

print(" ".join(a))


print(*a)


   print(ans[i], end = "")
print("")
   


    print(ans[i], end="")
print()

print(*m)

print(*ans)

print(*B)

print(" ".join(y))



print(*a)

print(" ".join(l))

print(" ".join(ans))



        print(A[j],end=" ")
        print(A[j])
        
        



print(*R)


print(*ans)

print(*s)

print(*x)

    print(ans[i],end='')
print()

print(*ans)

print(*b)


print(*l)
    

print(*[s for s in a.split() if 3<=len(s)<=6])



print(*li)

print(*B)
    

print(*[s for s in ss.split() if 3<=len(s)<=6])

print(*b)



print(*b)

   print(ans[i], end = "")
print("")

print(*b)

   print(b[i],end="")
print()

    print(ans[i], end="")
print()


print(*W)

print(*ANS)

print(*b)


print(*[word for word in re.split(r'\s|,|\.', f.readline()) if 3 <= len(word) <= 6])

print(" ".join(words))

print(" ".join(ans))

print(' '.join(u)) 

print(*[s for s in ss.split() if 3 <= len(s) <= 6])

print(" ".join([i for i in re.split("[,.\s]",input()) if 3<=len(i)<=6]))


print(*ans)


    print(*ans)


    print(word_list[:-1])
    print(word_list)

print(*ans)

print(*b)

        print(S[i])
        print(S[i], " ", sep = "", end = "")

    
print(*ans)


print(*[s for s in a.split() if 3 <= len(s) <= 6])


print(p)

            print(" ", end="")
        print(k[i], end="")

print("")

                print(" ",end="")

                print("%s"%(work.popleft()),end="")
print()


        print(*ans)
print(b)

print(*ans)

print(" ".join(ans))


print(*ans)

print(*s)


print(" ".join(word for word in re.split(r"[,.\s]", input()) if 2 < len(word) < 7))

print(' '.join(map(str,ans)))

        print(*ans)
                print(" ",end="")

                print("%s"%(work.popleft()),end="")
print()

    print(an)


	print(solve(n,m))

    print(a+1)


    print(lst[0])

	print(k)


    print(cnt+1)


        print(now.next + 1)


  print(l[0]+1)

    print(*p)

    print(josephus_survivor(n, m))
          
            

        print(result)


    print(table[0])


  print(lst[0])

    print(l[0])


        print(n)

    print(a[0])

    print(l[0])


		print(A[0])


    print(s[0])


    print(*guest)

    print(*L)

    print(L[0])


    print(num)


    print(circle[0])

  print(P[0])

            print(potato[0])
        print(*count)
                print(q.pop() + 1)
        print(sum(p_list))
    print(lst.index(1)+1)

            print("OK")
            print("NG")


  print(['NG','OK'][(v[1]&1)*(v[2]&1)*sum(x&1 for x in v)==2])
        print('OK')
        print('NG')

            print('OK')
            print('NG')


            print("OK")
            print("NG")



                    print("NG")
                print("OK")
            print("NG")
            print('OK')
            print('NG')
    print("NG")

        print("NG")
      print("OK")

                print("NG")
            print("OK" if cntlist[1] & 1 and cntlist[2] & 1 else "NG")
                print('NG')
            print('OK' if c[0] & 1 and c[1] & 1 else 'NG')
            print('OK')
            print('NG')

            print("OK")
            print("NG")
            print("NG")
        print("OK")
        print("NG")

            print('OK')
            print('NG')
        print("OK" if result else "NG")

	print("OK" if f else "NG")

            print("OK")
            print("NG")
            print('OK')
            print('NG')

        print("OK" if c == 0 and a[1] % 2 == 1 and a[2] % 2 == 1 else "NG")
            print(f'{stack[0]:.6f}')
        print(calc_inverse_polish_notation_string(line.strip()))

    print(a.pop())

        print("%.6f" % invpol(f))

 print(*s)

            print(format(stack[0], '.6f'))


    print(s[0])


    print(stack[0])

  print("{:.6f}".format(l[0]))

	print(s.pop())


    print("{:6f}".format(float(stack[0])))


    print(numlist[0])


        print("{:.6f}".format(stack[0]))
    print("{:.6f}".format(S[0]))


        print(calc(s.split(" ")))
        print(a[0])
    print(RPN(state))

    print('{:.8f}'.format(stack[0]))


        print(d.pop())

    print(*S)

            print('{:.06f}'.format(execute(data)))
    print(float(Stack[0]))


    print('{:.6f}'.format(stack[0]))
        

    print(stack.pop())

        print(stack[0])
    print(S[0])

        print(result)


    print("%.6f" % upn(line.split()))


        print(*stack)
        
        print('{0:.5f}'.format(prnd[0]))
        print("{:.6f}".format(answer))
        print(st.pop())
    print(s[0])


    print("{:.6f}".format(d.popleft()))

    print(stack[0])

    print(stack[0])

                print(decode[s], end='')
            print()

        print(result)


 print(''.join("ABCDEFGHIJKLMNOPQRSTUVWXYZ .,-'?"[int(a[i:i+5],2)]for i in range(0,len(a),5)))


        print(decode)

        
    print(s2)

    print(encode(line.replace('\n', '')))

    print(to_alpha(to_digit(input())))
    print("".join(table2[int(code[i*5:(i+1)*5], 2)] for i in range(len(code)//5)))

        print(decoded)
    print(o)



    print(c2)

    print(anslst)


    print(ans)


    print(c2)

    print(b)

        print(ans)
	print(ans)


    print(S3)



    print(ans)


        print(ans)
        print(decoded)
        print(answer)

    print(max_cnt)


print(s[k][0])


        print(rom[-1][0])

print(dp[N - 1][N - 1])

    print('---')
        print(row)


print(S[-1][0])

    print(result)



print(sums[0])
    

print(dp[-1][-1])

print(*ans)


print(*s[-1])


print(mp[-1][0])


print(dp[0])

                print(path[-1][0])
print(DP[n][0])



print(lines[-1][0])


print(table[N-1][N-1])


print(dp(0,0))

    print(max([sum(1.01 >= abs(q - p) for p in P) for q in Q] + [1]))

        print(max(counts))
        print(1)


        print(max(counts))
        print(1)


        print(max_num_intersection)

	print(1 if ans == 0 else ans)

    print(max_cnt)


    print(a)

    print(ans)

    print(ans)

            print(*h)
                print(f'{x + (i == 1)} {y + 1 + (i == 2)} {i + 1}')
            print(grid[y][x], end=' ')
        print('')

                    print(x, y, 3)
                    print(x, y, 2)
                    print(x, y, 1)
            print(*a)
        print(ans)


        print(ans)

        print(result)



    print(max(chain.from_iterable(dp)))


    print(max_value)

  
  print(ans)

	print(ans)

	print(ans)


    print(ans)


    print(m_si)

            print()
            print('NA')
                print(y)


    print(*an, sep="\n")
        print()



print("\n\n".join(result))

        print()

        print('NA')

            print(i)

        print()
    print('\n'.join(map(str, leapyear)) if leapyear else 'NA')
            print(y)
        print()

            print(y)
        print('NA')
        
    print()
      print(i)
    print("NA")
        print()
            print(i)
            print(i)
        print("NA")
    print(y)
    print('NA')
        print()
            print(i)
            print(i)
        print('NA')

        print()
                    print(y)
            print(y)
        print("NA")
    print()
      print(year)
    print("NA")

        print("")

            print(i)

        print("NA")



            print()

                print(y)
            print('NA')	


        print()

        print("NA")
            print(ans)

        print()
            print(i)
            print(i)
        print()

            print(a)
        print("NA")
    print()
          print(i)
        print(i)
    print("NA")
    print()
      print(year)
    print("NA")

        print()
            print(i)
        print("NA")


        print()
            print(i)
        print("NA")
        print()

        print('NA')

            print(i)


        print()

        print('NA')
            print(i)

            print(i)
        print("NA")
        print()

        print()
        print(*ANS, sep='\n')
        print("NA")


            print(y)

print('\n\n'.join(['\n'.join(ss) if ss else 'NA' for ss in s]))

            print(i)
        print('')
            print(i)
        print('NA')

            print('NA')
            print('{0}'.format('\n'.join(map(str, leap_years))))

        print()
    print("\n".join(map(str, ans)) if len(ans) else "NA")

        print("NA")
            print(i)
    print(result)

    print()

                print(_)
                print(_)
    print()

        print()
        print("NA")
            print(year)
        
        

print(a*b/3.305785)


print(a*b/3.305785)

    print(f'{a * b / t:.6f}')


print(ans)


print(t)

print((a * b) / base)

print("%f"%(x*y/3.305785))

print(a*b/3.305785)

print(S)

print(a * b / 3.305785)

print((a * b) / 3.305785)

print("%.6f"%(pod))

print(a*b/3.305785)

print(a*b/3.305785)

print(a*b/3.305785)

print(a * b / 3.305785)

print(a*b / 3.305785)

print("%.6f"%(pod))

print(a*b/3.305785)

    print(test())

print((a*b) / 3.305785)


print(s / 3.305785)

print("{:.6f}".format(c))

print(tubo)

print(a * b / 3.305785)

print("{:.6f}".format((a*b)/3.305785))

        print(" ", end="")
            print(num, end="")
                print(" ", end="")
        print()

print(a*b/3.305785)



print(f"{e:.6f}")

print(a * b / 3.305785)

print(a*b / 3.305785)

print(s)

print(a * b / 3.305785)

  print(a*b/3.305785)

print(S)

			print('{:.5f}'.format(ans))

print(s / 3.305785)

print(a * b / 3.305785)

print(a*b/3.305785)



print("{:.6f}".format(a*b / 3.305785))

print(c)

        print(S)
print(f"{x:0.6f}")


print(f"{S:.6f}")


print(f'{s:.6f}')

print(a * b / 3.305785)

print(f"{c:.6f}")

print(f'{S:0.06f}')


print(f'{s:8.6f}')


print('{:.7f}'.format(S))


print('{:.6f}'.format(S))

print((a*b) /3.305785)

print("{0:6f}".format(S))


print(f"{a*b/3.305785:.6f}")

    print(f'{a*b/3.305785: .6f}') 
print('{:.6f}'.format((a*b)/3.305785))


print("{:.6f}".format(s))

print(f"{c:.6f}")


print(format(S))

print(S)



print("%.6f"%(a*b/3.305785))

print(f"{a*b/3.305785:.4f}")



print(format(x/3.305785,'.6f'))

print(S)

print('{:06f}'.format(a*b/3.305785))

print(f"{t:.6f}")


print(f'{S:.6f}')


print(S)

print('{:f}'.format(S))

print(S)

print("{:.6f}".format(a*b/3.305785))

print("{:.6f}".format(S))

print(f'{S:.6f}')


print(a*b/3.305785)


print("{:.6f}".format(a*b/3.305785))


print("{:.6f}".format(S))

print("{0:.6f}".format(a*b/3.305785))

print(f"{a*b/3.305785:.6f}")

print("{0:.6f}".format((a*b)/3.305785))

print('{0:.6f}'.format(S))

print(format((a*b)/3.305785,'.6f'))


print(f"{c:.6f}")

print(f'{S:.5f}')


print('{0:.4f}'.format(S))


    print(p[0][1], p[0][0])


print(*ans)


print(data.index(result)+1, result)

print(young,maximum)

print(*max(a.items(),key=lambda x:x[1]))

print("%d %d" % w[0])

print(maxA, maxV)

print(d[m],m)

print(*result[0])



print(dic[max_v], max_v)



print(sorted(d[m])[0],m)

		print(i, vmax)
print(*sorted([list(map(int, input().split())) for _ in [0]*int(input())], key=lambda x:(-x[1],x[0]))[0])

print(*a[-1])


print(num, max)


print(a_,max_)

print(nmb,r_m)

print(ans, av[ans - 1][1])


print(min(answer),number_max)


print(L[0][0],L[0][1])


print(*fish[0])

print(num, val)


print(ans, M)


print(str(winner_id) + " " + str(winner_fish_capture))


print(a, n)

print(*max(d.items(), key=lambda x: x[1]))

print(max_index + 1, max_value)

print(book.index(max_val), max_val-1)

print(' '.join(map(str, sorted(rs, key=itemgetter(1),reverse=True)[0])))

    print('{} {}'.format(winner[0], winner[1]))



print(ans.index(max(ans)), max(ans))
    


print(*winner)


print(ma,mv)

print(A[0][0], A[0][1])

	print(ans)


        print(int(ans))

        
        print(ans)

            print(cnt)
    print(p[int(i)])

        print(ans[n])
    print(sum(dp[i]*dp[j] for i, j in zip(range(n+1), range(n, -1, -1))))

    print(ans)


    print(solve(nm))

  print(count)

        print(ans)
    print(ans)

        print(Sum)
    print(ans)

        print(ans)


            print(0)
            
            print(cnt)
                
            print(cnt)
       
    print(ans)


    print(sum_n_num)

    print(ans)

    print(ans)

        
        print(ans)
            print(DP[3][n])
    print(n[3][int(i)])

    print(ans4[int(N[l])])

  print(dp[3][n])


        print(dp[n][s])

  print(dp[n][s])

    print(dp[n][s])


  print(dp[n][s])

    print(DP[n][s])


	print(dp[n][s])

    print(ans[n][s])


    print(dp[n][s])

    print(dp[n][s])

        print(solver(sequence, n, s))


    print(max_value)



print(ans)

    print(ans)


print(ans)

print(ans)


print(ans)

print(ans)

  print(w,m)

        print(str(max_idx + 1) + ' ' + str(num_fish[max_idx]))

    
    print(ans, end="")

    print(max_player, max_score)

    print(winner, maxv)

    print(*b)


    print(max_index + 1, max_value)

    print(max_idx, max_val)



        print('{} {}'.format(winner, max_fish))


    print(index, result)

 
    print("{} {}".format(max_idx+1,max_val))


    print("%d %d" % (mx[0], mx[1]))

    print(max_a, max_v)



    print("{} {}".format(max_idx+1,max_val))

			print(id, v)
    print(res, val)


    print(seg_tree[0][0], seg_tree[0][1])

        print(rmq.top())


            print(ansList[i][0])
        print("NA")


            print("NA")
                print(k)


      print(i)
    print('NA')

                print(k)
                print('NA')

        print('\n'.join(k[1] for k in sorted(d)))
        print('NA')

      print(i)
    print('NA')

        print('NA')
                print(k)

            print(e)
        print("NA")
    

      print(i)
    print('NA')

                print(s)
        print("NA")

      print(i)
    print('NA')

      print(i)
    print('NA')

      print(i)
    print('NA')

            print(k)
        print("NA")
    



      print(e[1])
    print("NA")

      print(j[0])
    print("NA")

			print(e)
            print(e)
        print('NA')
    
            print(e_i)
        print("NA")


        print("NA")
            print(e)


            print(k)
            print(i)
        print("NA")

            print(e)
        print("NA")

        print('NA')
    
            print(i)

            print(shain_id)
        print("NA")
        

            print(key)
        print('NA')

                print(key)
            print('NA')

            print(k)
        print("NA")

      print('NA')
        print(a)

            print(k)
        print(f'NA')

			print(e[1])
		print("NA")
		
        print('NA')
                print(k)

                print(k)
            print("NA")

		print("NA")
				print(k)

        print('NA')
                print(i)

        print('NA')
                print(k)

            print(i)
        print("NA")

        print("NA")
            print(k)
        print('NA')

        print("NA")
            print(i)
            
    
            
        

        print("NA")
            print(w[1])
            print(i+1)
                print(ele)
            print('NA')


            print("NA")
    print("\n".join(result))
    

                    print(e)
                print('NA')


                print(i)
        print("NA")

					print(no[j])
				print("NA")

        print("NA")
            print(i)

            print(i)
        print("NA")


            print(k)
        print("NA")

            print(e)
        print("NA")
        print('NA')
            print(ans_i[1])

      print(good_worker)
    print("NA")

    print(sentence.replace("Hoshino", "Hoshina"))


        print(s[i].replace("Hoshino", "Hoshina"))
        

    print(b.replace('Hoshino','Hoshina'))

  print(a)

    print(input().replace('Hoshino', 'Hoshina'))

    print(s)

        print(input().replace('Hoshino', 'Hoshina'))

    print(words[i])

	print(sentence)

    print(Sent)

    print(input().replace('Hoshino', 'Hoshina'))

    print(input().replace("Hoshino", "Hoshina"))

    print(input().replace('Hoshino', 'Hoshina'))

    print(input().replace("Hoshino","Hoshina"))

    print(box.replace("Hoshino", "Hoshina"))
    

    print(input().replace("Hoshino", "Hoshina"))

		print(string.replace('Hoshino','Hoshina'))
		print(string)

        print(tmp_txt.replace("Hoshino","Hoshina"))

    print(content)

        print(input().replace("Hoshino","Hoshina"))

    print(input().replace("Hoshino","Hoshina"))

    print(s.replace("Hoshino","Hoshina"))


    print(cnv)


  print(input().replace("Hoshino", "Hoshina"))

	print(s.replace('Hoshino', 'Hoshina'))

    print(input().replace(wrong_name,correct_name))

    print(input().replace("Hoshino", "Hoshina"))

    print(t[i])


    print(input().replace('Hoshino', 'Hoshina'))

    print(input().replace("Hoshino","Hoshina"))


    print(result)


    print(str1)


    print(sent.replace("Hoshino", "Hoshina"))

    print(str.replace('Hoshino', 'Hoshina'))


    print(s.replace('Hoshino', 'Hoshina'))

  print(s.replace('Hoshino', 'Hoshina'))


    print(s.replace("Hoshino","Hoshina"))


    print(input().replace('Hoshino', 'Hoshina'))

  print(output)

		print(input().replace("Hoshino","Hoshina"))



    print(input().replace("Hoshino","Hoshina"))

    print(tmp_string.replace('Hoshino', 'Hoshina'))

  print(A.replace("Hoshino", "Hoshina"))

    print(input().replace("Hoshino","Hoshina"))

            print(num, end="")
                print(" ", end="")
        print()

    print(s)



    print(s.replace("Hoshino", "Hoshina"))

  print(input().replace("Hoshino","Hoshina"))

    print(ans)

    print(s.replace("Hoshino","Hoshina"))



       print(D_replace[0])
    print(s.replace("Hoshino", "Hoshina"))

            print(output.rstrip())


            print('%5d' % matrix[i][j], end='')
        print()


        print(str("{:>5d}" * (n+1)).format(*matrix[i], sum_))
    print(str("{:>5d}" * (n+1)).format(*sum_, sum(sum_)))


        print("".join("{:>5}".format(item) for item in array))


  print()
 print()

    print(put)


        print(''.join(str(ans).rjust(5) for ans in mat[i]))


    print(''.join(str(ans).rjust(5) for ans in col))


        print(str("{:>5d}" * (n+1)).format(*matrix[i], sum_))
    print(str("{:>5d}" * (n+1)).format(*sum_, sum(sum_)))


		print("".join(map("{0:>5}".format,t[i])))

    print(("").join(inline))


                print('{:>5}'.format(a[i][j]))
                print('{:>5}'.format(a[i][j]), end='')

		print("".join(map("{0:>5}".format,t[i])))

        print(s_num)

    print(line)

        print('%5d'%a[i][n])
    print('%5d'%sum(a[n]))

        print(''.join(map('{0:5d}'.format, l))) 
    print(''.join(map('{0:5d}'.format, bottom_record)))
            print("".join("{:5}".format(x) for x in col))


            print("%5d" % (a[j]), end = "")
        print()
        print("%5d" % (total[i]), end = "")
    print()

            print(str(val).rjust(5), end='')
        print()

                print('{:5d}'.format(n), end='')
            print('')


                    print("{0:5d}".format(a[x][y]), end = "")
                    print()

        print(fmt % tuple(row))

            print('{0:>5}'.format(a[i][j]), end="")
        print()

				print('{:>5}'.format(data[i][j]))

        print("".join(["{:5d}".format(x) for x in r]))

            print(str(table[i][j]).rjust(5), end="")
        print("")


            print("{0:>5}".format(rows[r][c]), end="")
        print()

        print("{0:>5}".format(total[t]), end="")
    print()




		print()

            print("%5d"%d,end="")
        print()

                print(' '*cn + '{}'.format(nnn))
                print(' '*cn + '{}'.format(nnn), end = '')
    
            print("%5d" % (i[j]), end="")
        print()
        

        print()


            print(f"{ans[i*(n+1)+j]:>5}",end="")
        print()

			print(tmp2)
		print(tmp3)


                print(str(matrix[i][j]).rjust(5), end="")
            print()
            print(str(a[i][j]).rjust(5),end='')
        print()

        print(str(ts[i]).rjust(5),end='')
    print(str(t).rjust(5))

            print(num, end="")
                print(" ", end="")
        print()

            print(s.rjust(5, ' '), end='')
        print()
            print(format(arr[r][c],'5d'), end ='')
        print()

      print(a,end="")
    print()
      

            print("{:>5d}".format(i),end="")
        print()


		print()

        print(str(mat[x]).rjust(5),end="")
            print(str(total).rjust(5))
        print(str(tmp_last[y]).rjust(5),end="")
    print("")
      

            print("%5d" %(t[i][j]),end="")
        print()

            print(str(tmp[j]).rjust(5), end = "")
        print()
        print(str(L[j]).rjust(5), end = "")
    print()

            print(str(result[i][j]).rjust(5),end="")
        print()
    

        print(''.join(A[i]))


        print(''.join(A[i]))



		print("".join(xs))
	print("".join(sums))
        print(("").join(["     "[len(str(num)):] + str(num) for num in column]))

        print(''.join(['%5d' % x for x in ls]))

    print(''.join(['%5d' % x for x in col]))

            print('{:5}'.format(data[i][j]),end='')
        print('')

            print('{:5}'.format(data[i][j]),end='')
        print('')
                  

    print(a)

    print(''.join(map(lambda num: str(num).rjust(5), row)), str(sum(row)).rjust(5), sep='')


            print('{0:5d}'.format(arr[i][j]),end = '')
        print('')
        print('{0:5d}'.format(last_line[i]),end = '')
    print('')

                print("{:5}".format(j), end='')
            print("{:5}".format(num))

            print("{:5}".format(j), end='')
        print("{:5}".format(num))

            print("%5d"%(table[row][col]),end="")
        print()

            print(score)
        print(score)
        

                print(point)
        print(point)
    print(score[i])

            print(point)
	print(score)
    print(p)

  print(points)

    print(score)

    print(point)
            
             

    print(score)

            print(score)
print(*score, sep="\n")

    print(score)

        print(b.score)


    print(score)

                print(s)
    print(score)


print("\n".join(output))


            print(score)
    print(inningScore[i])



  print(point)



	print(cnt)

    print(runner[3])


            print(np)

    print(p)


            print(cnt)
                print(cnt)
                print(cnt)

    print(p)



    print(score)
	print(score)

                    print(PointCount)
    print(score)

        print(baseball.score)
				print(score)
    print(str(inning.score))

                        print(game.score)
            print(point)
			print('Error')

		print(self.inning.get_score())
    print(cnt)

            print(num, end="")
                print(" ", end="")
        print()

            print(ans)
        print(P)
 print(P)

    print(runner[3])
            print(score)
    print(ans)


    print(score)
            

                print(score)
    print(point)

            print(score)
                print(score_a)
    print(score)

    print(point)
    

    print(score)

    print(score)

        print("LOOP")
        print(posX, posY)
        print(ans)


             print(x, y)
             print("LOOP")
                print(y, x)
                print("LOOP")


            print("LOOP")
            print("{} {}".format(c,r))
            print(j, i)
        print("LOOP")


      print("LOOP")
      print(x, y)
        print("LOOP")
        print(cursol_W, cursol_H)
    
    

        print("LOOP")
        print(last_x, last_y)




            print('LOOP')
            print('{} {}'.format(posX,posY))
        print('LOOP' if res == 'LOOP' else '%d %d' % (res[0], res[1]))


            print('LOOP')
                print(x, y)
            print(now_x, now_y)
            print("LOOP")
        print('LOOP')
        print(x, y)

            print(col, row)
            print("LOOP")
			print(y,x)
			print('LOOP')


print("\n".join(output))


			print('LOOP')
			print(c, r)
        print(poshist[-1][0],poshist[-1][1])
        print('LOOP')

            print("LOOP")
            print(x, y)
            print(p[0], p[1])
            print("LOOP")
            print(x,y)
            print("LOOP")
            print(x,y)
            print("LOOP")
				print(W,H)
				print("LOOP")
        print(answer[1],answer[0])
            print("LOOP")
        print(x,y)

            print(num, end="")
                print(" ", end="")
        print()

            print(x,y,sep=' ')
            print("LOOP")
        print("LOOP")
        print(j,i)
    
        
    
        

        print(ans)
        print("LOOP")
        print(str(y) + " " + str(x))
        print("LOOP")
        print(x,y)


            print("LOOP")
            print(cj, ci)
            print(col,row)
                print("LOOP")
	print(ans)

        print("LOOP")
        print(now[0],now[1])

      print('LOOP')
      print(x,y)
					print(w, h)
				print('LOOP')
            print('LOOP')
            print(m.pos[0], m.pos[1])


    print(res)

        print("LOOP")
        print(y, x)
        print('LOOP')
        print(y,x)   
        
            print("%d %d"%(col,row))
                print("LOOP")
            print("LOOP")
            print(y,x)
      print(x,y)
      print("LOOP")
        print("LOOP")
        print(y, x)


			print('LOOP')
			print(str(currentIdx[0])+' '+str(currentIdx[1]))
        print(word)
        print(*sorted(index[word]))


  print(s)
  print(' '.join(d[s]))

    print(k)
    print(" ".join(map(str,sorted(I[k]))))

    print(i[0])
    print(*sorted(i[1]))

    print(k)
    print(' '.join(map(str, sorted(v))))

            print(Date_lis[i][0])
                
                print(Num[j],end = " ")
            print(Num[len(Date_lis[i][1]) - 1])
        
            print(i)
            print(*sorted(j))
    print(i)
        print(n[i], end = ' ')
    print(n[-1])

        print(ele[0])
        print(*ele[1])



    print(word)
    print(' '.join([str(page) for page in sorted(index[word])]))

			print(names[i])
					print(pages[j])
        print(key)
        print(" ".join(map(str,pages)))

print("\n".join(output))


 print(k)
 print(*sorted(d[k]))

  print(k)
  print(*sorted(v))

  print(i)
  print(" ".join(map(str,sorted(d[i]))))


    print(w)
    print(*book[w])


    print(i)
    print(" ".join(str(j) for j in sorted(m)))

    print(d)
    print(' '.join(map(str, sorted(dic[d]))))


    print(i)
    print(' '.join(map(str,ans)))

    print(object[0])
    print(" ".join([str(i) for i in sorted(object[1])]))


		print(word)
		print(*sorted(dic[word]))



    print(k)
    print(*sorted(v))

    print(w[i][0])
    print(*p)

            print(num, end="")
                print(" ", end="")
        print()

        print(n, end='')
            print(' ', end='')
    print()

    print(i)
    print(k)
    print(*v)


    print(k)
    print( *sorted(d[k]) )


    print(k)
            print(" ",end="")
        print(arr[i],end="")
    print()


    print(k)
    print(*sorted(v))


    print(book[i][0])
    print(*sorted(page))

    print(i[0])
    print(*sorted(map(int, i[1])))

    print(k)
    print(*sorted(d[k]))


    print(" ".join(v))

    print(k)
    print(*sorted(v))

	print(n)
	print(" ".join(map(str,list(sorted(hs[n])))))

            print(k)
            print(" ".join(map(str,sorted(d[k]))))
    print(i)
    print(" ".join(map(str, a)))

    print(i)
            print(a[j], end=" ")
            print(a[j])

    print(k)
    print(' '.join(map(str, (sorted(book_index.get(k))))))

    print(key)
    print(*pages)

  print(key)
  print(" ".join(value))

    print(a)
    print(*sorted(map(int,b)))

        print(word)
        print(pnum[0], end="")
            print(" ", end="")
            print(pnum[i], end="")
        print("")

print(word)
print(pnum[0], end="")
    print(" ", end="")
    print(pnum[i], end="")
print("")

	print(x)
	print(*sorted(map(int, index[x])))

    print(b)
    print(" ".join(str(e) for e in sorted(dic[b])))


    print(k[0])
    print(*sorted(k[1]))


    print(tup[0])
            print(i,end=" ")
            print(i) 

      print(word)
      print((" ".join([str(x) for x in page_numbers])))
    print(ds[i][0])
    print(kk)

    print(title)
    print(*sorted(S[title]))


        print(k)
        print(*v)

	print(*sorted(i[1]))

        print(int(min_amount))


    print(dp[n//100])

    print(ans[N//100])

    print(R[v//100])


    print(Range[v // 100])


    print(Range[v//100])

    print(dp[n // 100])


  print(int(c))

        print("{:.0f}".format(min))
  print(int(ans))

	print(tbl[n//100])

    print(int(inf))
            
        print(price[data//100])
    print(ans)


	print(min(ans))
    print(DP[6][g_g])    
                

        print(result)


            print(num, end="")
                print(" ", end="")
        print()

        print(n, end='')
            print(' ', end='')
    print()


    print(int(cost))



    print(p)


    print(ans)

	print(cheapest)

    print(dic[n])

    print(min(fees))

    print(int(min(ans)))


    print(int(min(costs)))


    print("%d"%(ans))

        print(min(m_list))
            print("OK" if ok else "NA")


      print('OK')
      print('NA')

            print('OK')
            print('NA')

			print('OK')
			print('NA')

            print("NA")
            print("OK")
        

      print("OK")
      print("NA")

        print("OK" if int(input()) > t else "NA")

        print("OK" if r > R else "NA")
        

                print("OK")
                print("NA")

print("\n".join(output))


            print("OK")
            print("NA")


    print("OK" if int(input()) > rad else "NA")
  

		print('OK' if (2*r)**2 > vmin else 'NA')

            print("OK")
            print("NA")

                    print("OK")
                    print("NA")


            print('OK')
            print('NA')

            print("OK")
            print("NA")


            print("OK")
            print("NA")


            print("NA")
            print("OK")


                print("NA")
                print("OK")


        print("OK" if (r*2)**2>s else "NA")

            print(num, end="")
                print(" ", end="")
        print()

        print(n, end='')
            print(' ', end='')
    print()

            print('OK')
            print('NA')


      print("OK")
      print("NA")
  

            print("OK")
            print("NA")

        print("OK" if int(input()) > cir else "NA")

        print("OK" if gai < r[i] else "NA")

            print('NA')
            print('OK')


                print('OK')
                print('NA')

            print("OK")
            print("NA")


            print("OK")
            print("NA")

			print("OK")
			print("NA")

                print("OK")
                print("NA")
            print('OK')
            print('NA')

            print('OK')
            print('NA')

            print(r)


			print('OK')
			print('NA')

    	print(ans)

            print('OK')
            print('NA')

                print(cnt)
                print(*p)
 print(c);print(*s)

		print(count)
		print(" ".join(map(str, b)))
    print(num)
    print(ans)

    print(cnt)
    print(' '.join(map(str, cur)))


    print(cnt - 1)
    print(*A)


        print(count)
        print(*A)


    print(cnt)
    print(' '.join(map(str,b)))

                print(ops)
                print(' '.join(map(str,a)))
			print(cont)
			print(s[i],end=' ')
			print(s[i])

            print(str(operateCount))
            print(items)
    print(c)
    print(" ".join(map(str,s)))

	print(cnt)
	print(*a[0])

    print(n)
    print(" ".join(str(e) for e in br))


        print(c)
        print(*C)
                print(c)
                print(*C)
    print(cnt)
    print(*a)

            print(count)
            print(" ".join(map(str,S)))
    print(count)
    print(" ".join([str(s) for s in ans]))


    print(answer_2)
    print(*answer_1)

    
    print(changeNum - 1)
            print(" ",end="")
        print(arr[i],end="")
    print()

        print(cnt-2)
        print(P[i],end=" ")
    print(P[-1])


        print(counter)
        print(c_list[0], end='')
            print(' ' + str(c_list[i]), end='')
        print('')

	print(c)
	print(" ".join(map(str,xs)))

    print(times - 1)
    print(' '.join(map(str, s)))

    print(cnt)
    print(*a)

    print(num)
    print(*result, sep = ' ')

    print(steps)
    print(' '.join([str(s) for s in S]))
    

    print(cnt)
        print(p[i], end = " ")
    print(p[N-1])


    print(i - 1)
    print(*s)


            print(num, end="")
                print(" ", end="")
        print()

        print(n, end='')
            print(' ', end='')
    print()

    
    print(ans-1)
    print(cnt)
    print(*S)
                print(counter)
                print(*data)
    print(cnt)
    print(*S)


  print(ans)
  print(*slst)


    print(cnt)
    print(' '.join(str(p) for p in prev))

				print(cnt)
				print(*ans)
			print(str(v))
			print(" ".join(t_str))

    print("%d"%(ans))
    print(' '.join(map(str,TMP)))

        print(calc_rev_polish(to_rev_polish(exp)))


        print(evaluate(postFix(expr)))
        

    print(answer)


 print(*S)

    print(ans)


    print(res)

    print(siki)

    print((expr()))


    print(ans)

    print(_S.expression()) 

    print(p.poly)


print(*ans, sep="\n")

    print(ans)

  print(expr(s))

        print(expression(s))


    print(expression())


  
  print(expression())

    print(expression())

    print(p.expr(input()))


    print(expression(S))

    print(int(plussub()))


    print(calc(latters))

    print(add(s + "$", 0)[0])


    print(eval(expr))

	print(eval(s))

    print(eval(re.sub(r'(\d+)',r'c(\1)',input()[:-1])))

    print(eval(command))

    print(eval(expr))

    print(s[0])


	print(S[top-1])

    print(ans[0])


        print(calcplus(exp3))

        print(calc(tokenize(formula)))

    print(a)


    print(a)

    print(a)

    print(a)

  print(expr())

    print(eval(s))


    print(eval(s))

    print(eval(re.sub(r'(\d+)',r'c(\1)',input()[:-1])))

    print(eval(d))
        print(int(eval(s)))

    print(eval(s))


print('\n'.join(ans))


    print("%d"%(calc_E(0,len(line)-2)))



    print(ans.expression())



    print(eval(re.sub(r'(\d+)',r'c(\1)',input()[:-1])))


    print(eval(s[:-1]))


	print(num[0])
    print(eval(s[:-1]))


	print(eval(s))

    print(syori(ko.expr()))


    print(', '.join(names.get(id(arg),'???') + str(id(arg)) +' = '+repr(arg) for arg in args), file=stderr)

    print(parse_expr())


                    print(c)
                print("NA")
          print(x)
      print("NA")

            print(i)
        print("NA")

                print(i)
        print(i)
        print("NA")



            print(x)
        print("NA")


            print(i)
            print('NA')

                    print(i)
                print("NA")
            print(i)
          print(i)
      print('NA')
            print("NA")
            print(ans)
      print(x)
      print("NA")

            print(i)
        print("NA")

        print(result)


                print(i)
        print("NA")
				print(x)
                print(i)
            print("NA")
        print(ans)
        print("NA")




                print(X)
            print("NA")

					print(i)
				print("NA")

                print(x)
      print(solve(s))

    print(ans)

	print(ans)

                print(i)
            print("NA")
            print(i)
    print("NA")

                print(i)
            print('NA')
        
        print(ans)
        
                print(i)
        print("NA")


                print(X)
            print("NA")
            print(i)
        print(ans)
        print('NA')

        print('0')
            print(x)
        print('NA')

	print(ans)
                print(i)
        print('NA')

        print("NA")
        print(ans)

            print(x)
    print("NA")
    
					print("NA")
					print(i)
			print("NA")
            print(decode(s))

    print(my_solve(s))


    print(string)


    print(decode(line.replace('\n', '')))

    print(ans)

    print(st)


  print(ans)

        print(decode(encode(input())))
        print(answer)
    print(s)




        print(decode)

    print(ans)


    print(c)

    print(ans)


    print(S3)


        print(ans)
        print(result)


    print(ans)
    

        print(ans)
        print(ans)
  print(decode(code(ipt)))


    print(''.join(l for l in list2))

        print(sum(ans))


    print(sum(b[:-1]))



        print(total_waiting_time)

  print(s)

    print(sum([a[i]*(n-i-1) for i in range(n-1)]))

    print(sum(s))

        print(result)
    print(latence)


    print(ans)

    print(sum)

    print(s)


    print(str(sum(waitTimeList)))


  print(sum([(n - i - 1) * lst[i] for i in range(n)]))

    print(sum-time)

    print(answer)

    print(ans)

		print(0)
	print(ans)


				print(sum(B))
        print(ans)          
    print(sum(time_list))

    print(ans)


	print(ans)

    print(S)



    print(sum(waits))

  print(sum([a[i] * (n-i-1) for i in range(n-1)]))

        print(ans)
    print(ans)


    print(retval)



    print("%d"%(ans))


        print(wait)


    print(sum([sum(m[:i]) for i in range(1,ll)]))


    print(ans)

     
        print(sum(W))
        
    


    print(total)

    print(time)

    print(sum(wait))


        print(sum)


    print(ans)

            print(''.join(a))
            print(''.join(a))
            print(''.join(b))
            print(''.join(map(str, quotients)))
            print(' '*cycle_start + '^'*cycle_length)
            print(''.join(map(str, quotients)))


            print(ansstr)
            print(ansstr)
            print(" "*(ansind)+"^"*(len(checked)-ansind))
            print(''.join(decs))
                print(''.join(decs))
    print(s)
        print(t)


			print(0)
			print(''.join(decs))
				print(''.join(decs))
	print("".join(ans))
		print("".join(ans2))
			print(0)
			print(''.join(decs))
				print(''.join(decs))
        print(''.join(map(str, arr1)))
        print(''.join(map(str, arr1)))
        print(''.join(repeat))

    print(*a,sep='')
    print(p1 + p2)
        print(' ' * len(p1) + '^' * len(p2))

                print(ans)
                print(ans)
                print(" "*r_list.index(b) + "^"*(len(r_list) - r_list.index(b)))
        print(ans(p,q))
                print(n, end='')
            print('')
                print(n, end='')


            print('')

                print(' ', end='')

                print('^', end='')


            print('')

    print(''.join(map(str, ANS)))
        print(' ' * loop_idx + '^' * (len(R) - loop_idx))


        print(pair[0], end='')
    print()

                print('^', end='')
                print(' ', end='')
        print()

        print(str(a//b), end = "")
    print()
        print(" " * flag + "^" * (i-flag))

        print(s)
            print(t)
			print(ans)
    print("".join(ans))
        print(" "*(U[p]-1) + "^"*(d-U[p]))


      print("".join(save))
      print(" " * dic[p] + "^" * (counter - dic[p]))
    print("".join(save))


        print((p*10)//q, end="")
        print((p*10)//q, end="")
    print("")

            print(" ", end="")
            print("^", end="")
        print("")

            print(lcm(l, r3))

    print(ans)


        print(cnt)

    print(xyz)

    print(lcm(t1, lcm(t2, t3)))


	print(ans)

    print(ans)


    print(int(lcm))


  print(loop_abc)


        print(lcm)


	print(int(lcm(c1, lcm(c2, c3))))

        print(result)


    print(b)

    print(int(c*d/g(c,d)))

    print(ixy * iz // gcd(ixy, iz))

    print(fry.mv())

    print(xyz)


    print(lcm(lcm(cnt1,cnt2),cnt3))




    print(lcm(nx,ny,nz))


    print(lcm_list(C))


            print(tmp)
            print("error")

	print(ans)


    print(lcm(*cyc))



    print("%d"%(ans))


    print(lcm(x,lcm(y,z)))


    print("HIT")
        print("MISS")
        print("HIT")


        print("HIT")
            print("MISS")
            print("HIT")
            print("MISS")
            print("HIT")

            print('MISS')
            print('HIT')
            print('MISS')
            print('HIT')

        print('HIT')

        print('MISS')

        print('HIT')
    print('HIT')

print('MISS' if sol and all(0<=e[-1]<=1 for e in sol) else 'HIT')

        print(max_rectangle_area(grid))


    print(ans)
        print(ans)


        print(max_area)


  
  print(ans)

    print(ans)


    print(ans)

    print(v - x - y - p)


print(V-K[s][g]-K[g][s])

print(money - price - cost1 - cost2)


    print(V - dp[s][g] - dp[g][s] - P)




print(v - p - dp[s-1][g-1] - dp[g-1][s-1])



print(v - p - dij(s, g) - dij(g, s))


print(V-P-ans)


print(V-P-roads[s-1][g-1]-roads[g-1][s-1])


print(V - P - cost[s - 1][g - 1] - cost[g - 1][s - 1])


print(R)

print(v-p-mat[s-1][g-1]-mat[g-1][s-1])


print(v - p - dij(s, g) - dij(g, s))


print(V-P-cost[s-1][g-1]-cost[g-1][s-1])


print(v - p - costs[s-1][g-1] - costs[g-1][s-1])




print(V-P-Map[s-1][g-1]-Map[g-1][s-1])

    print(max(0, V - (calc(s, g) + calc(g, s)) - P))
    print(ans)
print(ans)

                
print(V-P-data[s-1][g-1]-data[g-1][s-1])

print(int(V - P - route[s-1][g-1] - route[g-1][s-1]))


print(V-P-K[s-1][g-1]-K[g-1][s-1])


print(c-d-cost[a-1][b-1]-cost[b-1][a-1])

    print(floyd_warshall(*input_()))


print(A)


print(V-P-K[s][g]-K[g][s])

print(V-P-K[s-1][g-1]-K[g-1][s-1])


print(v-p-matrix[s][g]-matrix[g][s])


print(reward)


            

    print(res)


print(rwd)


print(rwd)

    print(reward)
print(v - D[s][g] - D[g][s])



print(reward)

print(R)



print(V - (cost[s][g] + cost[g][s] + P))


print(V-K[s][g]-K[g][s]-P)



print(V-P-K[S-1][G-1]-K[G-1][S-1])

print(solve(n,list_h,list_o))




print(answer)


print(V-P-K[start][goal]-K[goal][start])

print()
  print(" ".join(map(str,i)))
print(max(0,V-(calc(s,g)+calc(g,s)))-P)


print(y)

print(V-P-graph[s-1][g-1]-graph[g-1][s-1])


print(reward-cost-price)

print(V - P - x[s - 1][g - 1] - x[g - 1][s - 1])



    

print(V - dist(s - 1,g - 1) - dist(g - 1,s - 1) - P)  


print(v - p - mat[s-1][g-1] - mat[g-1][s-1])

print(answer)


print(v - p - dij(s, g) - dij(g, s))



  print(V - P - K[s-1][g-1] - K[g-1][s-1])

print(y1 - y2 - d_go - d_back)

print(money-cost-dist[fr-1][to-1]-dist[to-1][fr-1])


print(V - P - res0 - res1)

	print(0)
	print(funding-cost-fees[start-1][end-1]-fees[end-1][start-1])

print(V)

print(V-P-K[s][g]-K[g][s])

print(v-p-(listl[s][g]+listl[g][s]))

print(v-p-cost[s-1][g-1]-cost[g-1][s-1])


print(V-P-K[s][g]-K[g][s])

print(V)


print(Cost)

        print(cnt)


        print(ans)

        print(result)



    print(result)


  
  print(ans)

    print(count)



    print(n)

    print(ans)


   
  print(ans)

  print(ans)

  
  print(ans)


    print(cnt)




    print(count)
 
    
    print(count)
    

    print(calc(H,W,property))


            
    print(count)



    print(ans)



    print(ans)




    print(count)

		print(solve(values))
    print(count)


	print(res)

        print(ans)

    print(ans)

                print(f'{root:2d}', end=' ')
            print('')


        print(uft.segmentation(grid))

        print(count)


    print(cnt)



    print(ans)


        print(res)

	print(count)
    print(person)


    print(color_num)

	print(ans)

    print(ans)



        print(count)
    print(cnt)
    print(cnt)

	print(len(hs))
        print(r + 1)


            print(i+1)
    print(i+1)

    print('\n'.join(map(str, result)))

  print(i + 1)

		print(i+1)
    print(e+1)

    print(*order_list)

	print(t)
    print(ans[i])

    print(*ans, sep='\n')
    print('\n'.join(map(str, ans)))

            print("ERROR: can't remove edge", node1, "->", node2)
            print(self.edges)
                print("ERROR: graph has cycle!", self.edges)
    print(k)

    print("%d"%(node_id))
            print('OK')
            print('NA')


      print("OK")
      print("NA")
            print('OK')
            print('NA')

		print("OK")
	print("OK" if w <= W else "NA")

    print('OK' if rec(0, 0) <= box else 'NA')

    print('OK' if rec(0, 0) <= box else 'NA')

            print(visited[s])
            print(n, end=' ')
        print('')
        print(state_num_moves_dic[tuple(start_num_list)])
		print(hs[n])
        print(costs[board])


    print(dist[a])

        print(score[puzzle])
	print(hash[state])

        print(dic[tuple(inp)])
    print(dic[tuple(map(int, input().split()))])
		print(m[''.join(v)][1])
    print(used[goal])


    print(ans_set[s])


            print(dist[p[tuple(A)]])
		print(m[''.join(v)][1])
            print(count[str(a)])
            print(results[tmp])
        print(board_step_map[str(goal)])
            print(count[str(prob)])
    print(M[key])

            print("OK")
            print("NA")


        print("OK")
        print("NA")



    print(pyon(point,0,n,box,M))

    print("OK" if dfs(0, px-1, py-1) else "NA")
            print('OK')
            print('NA')


        print("NA")
        print("OK")


		print("OK")
		print("NA")

        print('NA')
        print('OK')

            print("OK")
            print("NA")


                print('OK')
                print('NA')
        print("OK")
        print("NA")


    print("OK")
    print("NA")

					print("OK")
        print("OK")
        print("NA")

                print('OK')
                print('NA')
        print(result)


            print(grade[ans] if ans != -1 else "NA")
    print(an)


        print('AAA')
        print('AA')
        print('A')
        print('B')
        print('C')
        print('D')
        print('E')
        print('NA')

        print(result)


    print(result)


        print("AAA")
        print("AA")
        print("A")
        print("B")
        print("C")
        print("D")
        print("E")
        print("NA")
        

        print("AAA")
        print("AA")
        print("A")
        print("B")
        print("C")
        print("D")
        print("E")
        print("NA")


    print("AAA")
    print("AA")
    print("A")
    print("B")
    print("C")
    print("D")
    print("NA")

        print("AAA")
        print("AA")
        print("A")
        print("B")
        print("C")
        print("D")
        print("E")
        print("NA")


        print(rank[max(r1,r2)])
            print(time[0])
            print("NA")
        
    

        print(ranks[rankB])
                print(grades[i])
            print('NA')

            print(Class[i])
        print(Class[7])

            print("AAA")
            print("AA")
            print("A")
            print("B")
            print("C")
            print("D")
            print("E")
            print("NA")
    print(R[rank])


		print(["AAA","AA","A","B","C","D","E","NA"][s])
    print(badge[max(rank(t500, limit[500]), rank(t1000, limit[1000]))])

        print("AAA")
        print("AA")
        print("A")
        print("B")
        print("C")
        print("D")
        print("E")
        print("NA")

            print(grades[k])
			print(clas[i])
    print(R[t])

        print(rank[max(result)])
            print()
            print(f'{name},{points}')


        print(f"{re[2]},{re[0]}")
        print("")


        print('%s,%d'%(y,z[0]))

            print()
            print(','.join(map(str, r)))


        print()
        print(name + "," + str(score))

        print()
        print(name + "," + str(score))


        print()
        print(country + "," + str(point))


        print()
        
        print("{},{}".format(l[1], l[2]))

        print(z[2]+","+str(z[0]))
        print()

        print()

        print("{0},{1}".format(*t))
        print(f'{i},{j}')
        print(i[0],",",i[2],sep="")

        print()

        print(str(k) + ',' + str(v), sep='')

            print()
            print(score[1], score[0], sep=',')

        print()
        print("%s,%d"%(L[i][2], L[i][0]))

        print()
        print(f"{name},{score}")


        print()

        print('{},{}'.format(name, score))

        print("")
        print(teams[l].name,end="")
        print(",",end="")
        print(teams[l].score)



    print()

      print(name, score, sep=",")

        print()
        print(str(n) + ',' + str(s))
        print()
        print("%s,%d" % (team, points))
    

        print()

        print("%s,%d"%(table[i].name,table[i].value))


    print(B.days)

        print((b - a).days)


    print((e-s).days)

    print((date2 - date1).days)


    print(subtract.days)


	print(ut2jd(y2, m2, d2)-ut2jd(y1, m1, d1))

    print((datetime.datetime(y2,m2,d2)-datetime.datetime(y1,m1,d1)).days)

    print((d2-d1).days)


    print((end - start).days)

    print(days.days)


  print(total_days)


    print((d-D).days)

	print((d2-d1).days)


        print(date_diff.days)

    print(ans.days)

            print(result)
    print(a)


    print(ans)


  print(dD.days)

    print((date(*t[3:])-date(*t[:3])).days)

    print(diff)


    print((d2-d1).days)

    print((dt2-dt1).days)


    print(convert(y2, m2, d2) - convert(y1, m1, d1))


    print(c.days)


    print(ans.days)

    print(delta.days)


        print(days1 - days0)

    print(delta.days)

    print(res2 - res1)


    print(ymd2 - ymd1)


    print(an)


                    print(f'*{x}', end='')
                    print(f' {x}', end='')
            print()
            print()


            print(f"{q[i][j]}{p[i][j]}", end="")
        print("")
        print("")


    print("".join(map(_rj, line)))

    print()
        print()


        print("".join(output))


            print(board[j][k],end="")
        print()
            print(board[j][k],end="")
        print()
            print(f'{t}{l}',end='')
        print()
            print()
                    print(' ', end='')
                    print('*', end='')
                print(grid[y][x], end='')
            print()

        print()
        print(out)

            print('{}{}'.format(status[y][x], data[y][x]), end='')
        print()


            print()



        print("")

                print(" ", end="")
                print("*", end="")
            print(table[i][j], end="")
        print("")

        print(''.join(ANS[i]))
        print()


        print()

                print("*", end="")
                print(" ", end="")
            print(puzzle[i][j], end="")
        print()
                print("NA")
                print(ans)
    print("".join(res))


    print(ss)

    print(word)

        print("NA")
        print("NA")
        print("".join(M))



        print(message(n))
        print(ans)
        print(*s,sep="")
        print(*s,sep="")

            print('NA')
        print(output_str)

        print("NA")
            print(W)
            print("NA")

            print('NA')
            print(''.join(ans))
        print(result)


    print(pocket_pager(line.strip()))

        print("NA")
            print("NA")
        print(message)



    print(ans)


    print(to_mess(nums))
	print(ans if f else "NA")

        print("NA")
            print("NA")
        print(ans)


                print()
                    print(v[j][i], end='')
                print()
        print()
        print(i1 + i2 + i3 + i4 + i5)


        print(''.join(l))


            print()
    print("".join(line))

      print()
            print()
            print("".join(num[i]))
        print()
        print("".join(A[i]))
        print(''.join(i))

        print()
        print(''.join(a for a in ans_t[i]))

print(ans)


        print()
        print("".join(t))



			print("".join(e))
            print()
                print(abacus_str[num][y], end='')
            print()

        print("")

            print(ans[j][i], end="")
        print("")

                print("Safe")
            print("Danger")
                print('Safe')
                print('Danger')

            print("Safe")
            print("Danger")


        print(ans)


                print("Safe")
            print("Danger")
            print("Safe" if intersect else "Danger")


                print('Safe')
                print('Danger')


        print(train)


    print(trainList)

    print(*train, sep='')


    print(form) 


    print(form)


    print(train)

        
    print( form )

    print(''.join(ANS))           


                   
    print("".join(car).strip('0'))



	print("".join(xs))
 
    print("".join(train))



    print("".join(train))

    print("".join(train))




    print(type) 

    print(form)

    print(trip)

    print(form)

    print(form)            

    print(a)


    print(form)


    print(a)

    print(form)

    print(a)

    print(ans)


    print(''.join(map(str,ans_l)))

            print(i,end="")
    print()


    print("".join(train))


    print(form)

    print(form)
    

    print(a)



    print(form)

    print(Train)

    print(form)      


    print(s)

    print("".join(train))


    print(form)

    print(order)

    print(train)


    print(formation)

    print(a)

    print(form)



    print(form)

	print(*ans, sep='')

    print(formation)

    print(form)

	print("".join(xs))
 
    print(a_s)

    print(''.join(train))

    print(r)

    print(train)



    print(trainList)



  print("".join(rec[min_ind:max_ind + 1]))

	print(*ans, sep='')

    print("".join(train))


    print(''.join(str(a) for a in ans))


    print(*word,sep="")

		print(B)






        print(k,end="")
    print()

            print(car, end='')
        print()

    print(train)

    print(''.join(ANS))



    print("".join(train))



        print("".join(trains))

        print(x,end = '')
    print()


    

            print(S)
        print(''.join(txt))


        print("%s"%(table[i]),end="")
    print()


        print(*line)
                        print(' ', end='')
                    print(r[i], end='')
                print()
            print(result_grid[y][0], end='')
                print(' ' + str(result_grid[y][x]), end='')
            print()

            print(ans[i][j], end="")
                print(" ", end="")
        print("")

        print(''.join(vv))


                print(deg[i])
    print(90*n)
        print(''.join(m[i]),end='')
        print()


    print(s, end="")



    print(s, end="")



print("90")

print("180")

print("270")

print(90)
        print(table[7-j][i], end="")
    print("")


print(180)
        print(table[7-i][7-j], end="")
    print("")


print(270)
        print(table[j][7-i], end="")
    print("")

    print("".join(line))


print(90)

print(180)

print(270)
	print(title[k])
print("90")
    print("".join(pazzule[i]))
print("180")
    print("".join(pazzule[i]))
print("270")
    print("".join(pazzule[i]))

print(90)
    print(''.join(m for m in mat90[i]))

print(180)
    print(''.join(m for m in mat180[i]))

print(270)
    print(''.join(m for m in mat270[i]))


        print("".join(line))


print(90)

print(180)

print(270)
    print(r*90)
        print("".join(l))



    
print(90)
        print(t[7-j][i],end="")
    print("")


print(180)
        print(t[7-i][7-j],end="")
    print("")


print(270)
        print(t[j][7-i],end="")
    print("")

        print(row_str)



    print('90')
    print('180')
    print('270')
	print(i)
		print("".join(ms[i]))

    print('90' if k==1 else('180' if k==2 else '270'))
            print(p[j][i], end='')
        print()
        print(''.join(l))
        print(''.join(l))

    print('90')
    print('180')
    print('270')
    print(90 * (d + 1))
        print(''.join(ANS[i]))
    
print(ans//n)

            print(sum(v) // n)
    print(average // n)

print(sum([int(input()) for _ in range(n)])//n)

print(sum([int(input()) for _ in range(n)])//n)

print(int(sum_ / n))

print(sum([int(input()) for i in range(N)]) // N)

    print(ans)


    print('{}'.format(total//n))


print(average)


print(sum(v)//n)


print(sum([int(input()) for _ in range(n)]) // n)

print(sum // n)

print(ans)


print(m//n)

print(sum([int(input()) for i in range(n)])//n)

print(math.floor(s / n))

print(math.floor(ans/float(n)))

print(int(sum(v_list)/n))



print(s//N)



print(int(sum(num)/n))


print(sum//n)

print(ans // n)


                    print("alert")
                    print("safe")
                    print("warning")
    print(b)

        print("alert")
        print("warning")
        print("safe")

        print(result)


        print("alert")
        print("safe")
        print("warning")


        print("alert")
        print("safe")
        print("warning")

        print("alert")
        print("warning")
        print("safe")


        print("alert")
        print("safe")
        print("warning")

            print('alert')
            print('warning')
            print('safe')

        print("alert")
        print("safe")
        print("warning")


		print("alert")
		print("safe")
		print("warning")

    print(solve(v[0],v[1])) 

        print("alert")
        print("safe")
        print("warning")


    print("alert")
    print("warning")
    print("safe")

        print("safe")
        print("warning")
        print("alert")

        print("alert")
        print("warning")
        print("safe")


                print(f'{i}:{"*" * histogram[i]}')
    print(ans[k])

    print(s)

        print('{}:{}'.format(i+1, '*'*f))


    print("{}:{}".format(k, v*"*"))

        print("{}:".format(i+1), end="")
            print("*", end = "")
        print()

    print(str(index + 1) + ":" + "*" * distribution[index])


print('1:'+s_1)
print('2:'+s_2)
print('3:'+s_3)
print('4:'+s_4)
print('5:'+s_5)
print('6:'+s_6)


    print(l+1, end="")
    print(":", end="")
        print("*", end="")
    print("")


	print(i+1, ':', '*'*freq[i], sep='')

    print(str(i)+":"+"*"*j)

    print(str(i+1) + ":" + hist[i])


    print(m)

  print('{}:{}'.format(i+1,x[i]*'*'))

    

print("1:"+ c1*"*", sep="")
print("2:"+ c2*"*", sep="")
print("3:"+ c3*"*", sep="")
print("4:"+ c4*"*", sep="")
print("5:"+ c5*"*", sep="")
print("6:"+ c6*"*", sep="")


  print(str(i+1) + ':' + hist[i])
 

    print("{}:{}".format(i, "*" * L[i]))


    print(str(j) + ":",end="")
        print("*",end="")
    print()

    print(ans)

            print(j+1, ':', '*' * h[j], sep='')
        print(str(i + 1) + ':', end='')
            print('*', end='')
        print('')

    print(f"{i + 1}:" + '*' * C[i])


	print(str(i+1)+":"+"*"*cs[i])

    print(str(i+1) + ':' + '*' * ans[i])

    print(str(i + 1) + ":" + "*"*h[i])



  print(k, "*" * cnt[k], sep=":")


    print(i+1, ":", sep = "", end = "")
        print("*", end = "")
    print()

print("1:"+"*"*a)
print("2:"+"*"*b)
print("3:"+"*"*c)
print("4:"+"*"*d)
print("5:"+"*"*e)
print("6:"+"*"*f)

    print("%d:%s" % (k, '*' * dist[k]))

    print("%d:"%(i),end="")
        print("*",end="")
    print()



        print(f'Case {i + 1}:')
            print(s)


    print(cas)
        print(num)

    print("Case " + str(i+1) + ":")
        print(int(x))

    print('Case %d:'%(i+1))
        print(b)
    print(s)
    

  print("Case {0}:".format(i+1))
        print("Case {}:".format(i))
            print(int(out[2:6]))
    print('Case {}:'.format(i + 1))

        print(s)



    print("Case " + str(lp) + ":")

        print(num)



    print("Case " + str(l+1) + ":")
        print(k)



  print("Case ", i + 1, ":", sep="")
    print(int(x))


	print('Case ', i+1, ':', sep='')
		print(s)

    print("Case",str(i+1)+":")
        print(int(tmp))

    print("Case " + str(i+1) + ":")

        print(int(ans))
    print(f"Case {i+1}:")
        print(n)

    print("Case %d:"%(i+1))
        print(method(s)[j])

    print("Case {}:".format(i+1))
        print(s)

    print("Case "+str(i+1)+":")
        print(seed)


    print("Case " + str(i + 1) + ":")
        print(num)

    print(f"Case {i}:")
        print(n)


        print(f'Case {i + 1}:')
            print(r)

    print(f"Case {i + 1}:")
        print(x)


	print("Case " + str(i+1) + ":")
		print(m)

    print("Case {}:".format(i+1))
        print(d)

        print('Case {}:'.format(i))
        print('\n'.join(map(str, result)))


        print(k)
        
    
    print("Case %d:" % case)
        print("Case ",end = "")
        print(x+1, end = "")
        print(":")
            print(a[x])


            print(f'{p} {t:.2f}')
        print(f'{p} {t:.2f}')


    print(S_lis[0][0],S_lis[0][1])
    print(S_lis[0][0],S_lis[0][1])
print(A_lis[0][0],A_lis[0][1])
print(A_lis[1][0],A_lis[1][1])

print(*ts[0][1])

    print(id, t)

        print(self.id, self.score)

	print(*x[0])
	print(*x[1])
print(*x[0])
print(*x[1])


    print(p,race1.pop(p))
    print(p,race2.pop(p))
    print(p,race3.pop(p))
    print(p,race1.pop(p))

print(first_s[0][0], '{0:.2f}'.format(first_s[0][1]))
print(first_s[1][0], '{0:.2f}'.format(first_s[1][1]))
print(second_s[0][0], '{0:.2f}'.format(second_s[0][1]))
print(second_s[1][0], '{0:.2f}'.format(second_s[1][1]))
print(third_s[0][0], '{0:.2f}'.format(third_s[0][1]))
print(third_s[1][0], '{0:.2f}'.format(third_s[1][1]))
print(loser_s[0][0], '{0:.2f}'.format(loser_s[0][1]))
print(loser_s[1][0], '{0:.2f}'.format(loser_s[1][1]))


    print(i[1],i[0])

        print(*L[i])
    print(*R[i])


    print(*Time[0])
    print(*Time[1])
    
print(*hoketsu_1)
print(*hoketsu_2)



    print(int(ans[i][0]),ans[i][1])

    print(i[0], str(i[1]))

        print(f'{time_info_list[0][1]} {time_info_list[0][0]:.2f}')
        print(f'{time_info_list[1][1]} {time_info_list[1][0]:.2f}')
    print(f'{number3_list[0][1]} {number3_list[0][0]:.2f}')
    print(f'{number3_list[1][1]} {number3_list[1][0]:.2f}')

    print(f"{T[-1][0]} {T[-1][1]:.2f}")
    print(f"{T[-1][0]} {T[-1][1]:.2f}")
print(f"{L[0][0]} {L[0][1]:.2f}")
print(f"{L[1][0]} {L[1][1]:.2f}")

	print("%d %0.2f" % (n,t))

        print(tformat(num, time))
    print(tformat(num, time))

            print('{} {}'.format(id, time))

        print('{} {}'.format(id, time))


    print("%d %.2f" % (field[0][1], field[0][2]))
    print("%d %.2f" % (field[1][1], field[1][2]))
print("%d %.2f" % (top3[0][1], top3[0][2]))
print("%d %.2f" % (top3[1][1], top3[1][2]))

    

    print(data.number, data.time)
    print(data.number, data.time)

print(data.number, data.time)
print(data.number, data.time)


  print(int(p), t)

    print("%d %s"%(work[0].id,work[0].score))
    print("%d %s"%(work[1].id,work[1].score))

print("%d %s"%(rest[0].id,rest[0].score))
print("%d %s"%(rest[1].id,rest[1].score))

            print("A")
            print("NA")
            print("B")
            print("NA")
        print("NA")
        

    

            print("A")
            print("B")
            print("NA")


        print('A')
        print('B')
        print('NA')


        print("A")
        print("B")
        print("NA")


        print('A')
        print('B')
         print("A")
         print("B")
         print("NA")

        print('A')
        print('B')
        print('NA')





    print(ans)        



        print('A')
        print('B')
        print('NA')

    print(a)


        print("A")
        print("B")
        print("NA")

            print('A')
            print('B')
            print('NA')


        print(['NA','A'][set(s[0])==set(s[1])=={'='} and len(set(s))==1])
        print(['NA','B'][len(s)==2*s.count('Q=') and len(s)>0])
        print(result)


            print('A')
            print('B')
    print('NA')



    print("NA")
      print("A")
      print("B")
      print("NA")

            print('NA')
            print('A')
            print('NA')
            print('NA')
            print('B')
            print('NA')
        print('NA')

            print('A')
            print('B')
            print('NA')

            print("A")
            print("B")
            print("NA")
        
            print("A")
            print("B")
            print("NA")
        print("NA")

            print("A")
            print("B")

    print("NA")


                print("A")
                print("B")
        print("NA")





	print(ans)

            print("NA")
                    print("NA")
                print('A')
                print("NA")
            print("NA")
                print("NA")
    print(check(s))

        print('A')
        print('B')
        print('NA')


        print("NA")
            print("A")
            print("NA")
            print("B")
            print("NA")
        print("NA")


    print(checkSnakeType(S))






    print(checkSnakeType(S))

        print("A")
        print("B")
        print("NA")

            print("A")
            print("B")
            print("NA")
        print("NA")

        print('A')
        print('B')
        print('NA')

            print("A")
            print("NA")
            
             print("B")
             print("NA")
        print("NA")
            

        print(output)
        print("NA")


        print("A")
       print("B")
    print("NA")

        print('A')
        print('B')
        print('NA')

        print("A")
        print("B")
        print('NA')


        print('A')
        print('B')
        print('NA')

		print("B")
			print("A")
			print("NA")
		print("NA")

        print("A" if a.count("=") == b.count("=") else "NA")
        print("B")    
        print("NA")

        print("A")
        print("B")
        print("NA")


        print("A")
        print("B")
        print("NA")


        print('A')
        print('B')
        print('NA')

        print('A')
        print('B')
        print('NA')


            print(ans[i])
                print(*l)
                print(*r)
            print(*trip(bt, st, ed, False))


        print(*lst)

        print(*lst)

        print(result)






            print(ans[i], end="")
            print(" ", end="")
            print(ans[i], end="")
    print("")

  print(*dic[(s, g)])

	print(*a)

        print(" ".join(A[A.index(a):A.index(b,A.index(a))+1]))
        print(" ".join(B[B.index(a):B.index(b,B.index(a))+1]))


    print(' '.join(str(ans) for ans in anslist))

	print(' '.join([str(x) for x in result]))

    print(*a)

    print(line(*[int(j) for j in input().split(" ")]))


        print(*path)

    print(*ANS)


    print(' '.join([str(_) for _ in bus_line(a, b)]))

    print(" ".join([str(i) for i in ans]))


	print(" ".join(ans))
        print(''.join(g[i][1:-1]))


            print()
    print("".join(lst[y][2:-2]))

  print()
		print("".join(ms[i]))

        print(''.join(map(str, l)))


            print()


        print()
        print(*line, sep='')


        print(''.join(ANS[i]))
        print()


            print(c,end="")
        print("")
        
        print("")

                print(grid[y][x], end='')
            print()
            print()

print("\n\n".join(output))


    print(count[i + 1] + count[n - i - 1])


            print(C[i + 1] + C[n - i - 1])

        print(v[i])


            print(h)

	        print("OK")
	        print("NG")

        print("NG")
        print("OK")

        print("OK")
        print("NG")


            print('OK')
            print('NG')
	print("OK" if kin ^ sin else "NG")

        print("OK")
        print("NG")


            print('OK')
            print('NG')


        print("NA")
        print(DP[s][d])


        print(ans if ans != float('inf') else "NA")


        print(dist + 1)
        print("NA")
    print("NA")

                print(dist + 1)
                print("NA")
        print("NA")

            print(min_dist)
            print('NA')
	print(arr[s][d]+1 if arr[s][d] < v else "NA")

            print(g.M[s][d]+1)
            print('NA')



        print(cost)
        print("NA")


        print(t)
        print("NA")


    print(minimize_cost(cards))


print(dp[n - 1][0])



    print(dp[0][num_piles - 1])


print(getans(0,n,cards))


print(c[0][n-1])

print(dp[0][n - 1])

print(*reversed(ans[1]))

print(*[ids[i] for i in min([score(rest, i, 70, []) for i in range(n)])[1]])


    print(*min_cost_path)
        print(waiting_time[int(line)])


    print(score[int(input())])
        print(waiting_time_list[num_customers])

	print(ans[n])

            print("3C" + y)
    print(f"3C{an:02}")


        print("3" + "C" + str(num))
        print("3C" + s)
        print('3C{:02d}'.format(hit))



    print("3C{:02d}".format(tmp if tmp % 39 else 39))


    print("3C%02d" % result)


    print("3C", end="")
        print(39)
        print("0", end="")
        print(ans)
        print(ans)




	print("3C", format(a, "02d"), sep='')

    print("3C", str((int(input()) - 1) % 39 + 1).zfill(2), sep="")

    print("3C" + str(ans).zfill(2))


    print("3C{:02d}".format(n%39 if n%39 else 39))

    
  print("3C" + str(ans).zfill(2))

    print("3C",str((int(input())-1)%39+1).zfill(2),sep="")
        print("3C39")
      print("3C0",c,sep='')
      print("3C",c,sep='')

    print("3C"+ans)

        print("3C",format(S,"02d"),sep="")
        print("3C",format(S,"02d"),sep="")
    print("3C{:02}".format(s))
        

    print("3C"+a)

            print("3C0" + str(num1))
            print("3C" + str(num1))
        print("3C" + str(n if ans == 0 else ans))
        print("3C39")
        print("3C0%d" %(p))
        print("3C%d" %(p))

        print("3C" + str(stu).zfill(2), sep='')
        print(f'3C{c:02d}')

    print(A)

    print('3C' + id)


        print("3C" + "39")


        print("3C" + "0" + Acandy)


        print("3C" + Acandy)

    

    print(f"3C{a % 39 + 1:02}")


        print("3C"+str(x).zfill(2))
    print("3C{:02d}".format(n%39 if n%39 else 39))

        print(left_eye[i], right_eye[i])


    print(*re)


    print(l, r)


print(*A)
print(*B)
print(*C)
print(*D)

        print(al,ar)
        print(bl,br)
        print(cl,cr)
        print(dl,dr)
    print(cntL[i],cntR[i])


    print(*eyes[i])

    print(l, r)

    print(tbl[0][i], tbl[1][i])

  print(E[0][i], E[1][i])

    print(l, r)

    print(L[0][i], L[1][i])




print(lr[0],lr[1])
print(lr[2],lr[3])
print(lr[4],lr[5])
print(lr[6],lr[7])
    

print(str(al)+' '+str(ar))
print(str(bl)+' '+str(br))
print(str(cl)+' '+str(cr))
print(str(dl)+' '+str(dr))


print(l_A, r_A)
print(l_B, r_B)
print(l_C, r_C)
print(l_D, r_D)

    print(a1, a2)
    print(b1, b2)
    print(c1, c2)
    print(d1, d2)


print(LA,RA)
print(LB,RB)
print(LC,RC)
print(LD,RD)


    print(left_greater_than_one_point_one, right_greater_than_one_point_one)
    
    print(left_between_point_six_one_point_one, right_between_point_six_one_point_one)


    print(left_between_point_two_point_six, right_between_point_two_point_six)


    print(left_below_point_two, right_below_point_two)


print(judge[0], judge[1])
print(judge[2], judge[3])
print(judge[4], judge[5])
print(judge[6], judge[7])

    print(' '.join(map(str,a)))

        print(left_hist[i], right_hist[i])

    print(*S[i])

    print(*ANS[i])


    print(a,e)
    print(b,f)
    print(c,g)
    print(d,h)

	print(str(ls[i])+" "+str(rs[i]))

            print(ans)
    print("%d %d" % (rst[0][lv],rst[1][lv]))


    print('{} {}'.format(left_rank['A'], right_rank['A']))
    print('{} {}'.format(left_rank['B'], right_rank['B']))
    print('{} {}'.format(left_rank['C'], right_rank['C']))
    print('{} {}'.format(left_rank['D'], right_rank['D']))


    print(item1, item2)


	print(tbl[0][i], tbl[1][i])

  print(dicl[alpha], dicr[alpha])
    

    print(count[char]["left"], count[char]["right"])

        print(tp[i].x, tp[i].y)


    print(p - 2, p)


        print(str(twin_prime_list[r - 1] - 2) + ' ' + str(twin_prime_list[r - 1]))

        print(*twin_primes[r-1])


	print(tbl[n]-2, tbl[n])

    print(P1[idx], P2[idx])


            print(primes[idx - 1], primes[idx])

print("\n".join(output))


  print(a - 2, a)

    print(q-2, q)

                    print(i - 2,i)
            print("{} {}".format(i-2, i))
            print(i-2, i)
            print(i-2, i)
      print(i-2, i)
            print(f'{i - 2} {i}')
            print(dplist[i][1], dplist[i][0])
            print(*pre)
            print(i-2,i)
            print(a, b)
            print(i-2, i)
            print(ss[i+1], ss[i])
            print(i-2,i)
                    print(P[j+1],P[j])
    print(box-2,box)

        print(max_len)


            print(grid[y][x], end=' ')
        print('')


    print('')


        print(max_length)

    print(ans)

    print(grid_length(n, grid))

    
    print(max_score)

            print(data[0][0])

        print(max(N_max, W_max, NW_max, NE_max))




        
    print(ans)



    print(max_length)


    print(ans)


	print(ans)
            print(key, val)


        print(-num, s)


            print(i, -s)


    print("\n".join(output))


    print(*pair)

        print(*i)

        print(res[0], res[1])


        print(players[i].id, players[i].score)
        
        

        print(y, -x)

        print(a[0], a[1])


            print(str(result_score[0]) + ' ' + str(- (result_score[1] - max_score)))

        print(*ans)


		print(" ".join([str(-e[1]),str(e[0])]))

        print("b")
        print("c")
            print("c")
            print("a")
        print("c")
    print("d")

                print('a')
            print('b')
            print('c')

        print('d')

        print(dp[m][n])

		print(dp[m][int(input())])

        print(*ans, sep='\n')


        print(DP[m][c])


        print(dp[int(input())])

        print(dp[int(input())])

    print(dp[m][n])
    
        print(dp[m][n])




    print(an)


            print(v[int(input().strip())])


                print(*path)
                print("NA")


        	print(*ans)
    
    print("NA") 
    print(*an)


      print(*list(map(lambda x:x + 1, paths[g - 1])))
      print("NA")

				print(*ans[::-1])
	

                    print(*path1[1:])
                print('NA')

            print("NA")
            print(*ans)

            print("NA")
            print(" ".join([str(i+1) for i in ans]))

        print('NA')
        print(*[v + 1 for v in paths])

            print("NA")
            print(*ANS)


                print(s)
                print('NA')
                print('NA')
                print(' '.join(map(str, rev)))


            print('NA')


            print('NA')
            print(' '.join(map(str,ans[::-1])))

        print(p)
    print()
        print(p)
        print(ret)
    


    print(0)
          print(cost)
        print(ans)


    print(ans)

        print(0)
            print(cnt)

        print(min_cost)
        print(result)


    print(len(base))


	print(LIS(hr))


    print(dfs(0))


    print(max(table))


    print(max(t))

    print(LIS[0])


	print(ans)
	

        print(max_num_dolls)
  print(dp[1000])

        
    print(cnt)

        print(collatz(n))


    print(c)

            print(cnt)


        print(count)


            print(a)

    print(count)


    print(ans)


	print(k)

  print(coll(n))

    print(a)
        


    print(cnt)


    print(c)

      
  print(num)
      

    print(k)

    print(c)

        print(collatz(n))


    print(s)

                print(cnt)
    
    print(count)
    
    print(count)


    
    print(ans)

    print(count)

   print(c)
      


    print(c)

        print(i)

    print(count)


    print(a)

    print(c)


    
    print(i)

    print(c)
    



    print(c)
            

    print(c)
    print(sum)

        print(s)

   print(c)

    print(c)

    print(m)
    print(ans)

    print(korat(n))

    print(m)


    print(cnt)


    print(m)

    print(f(x,0))

    print(ans)

    
    print(c)

    print(count)


    print(i)


    print(count)

    print(x(n))

    print(count)

   print(c)

    print(coll(n))

                print(a)
	print(k)

    print(ans)

            print(cnt)
    print(cnt)

    print(ans)


  print(c)

    print(0 if _n == 1 else f(_n, 0))

  print(count) 

    print(ans)

    print(count)

    print(collatz(n,0))

    print(collatz(n))

            print(count)
    print(str(kaisu))

        print(kei)

    print(f(x,0))


        
    print(k)

    
    print(i)

    print(collatz(n))
    

    print(count)

    print(s)

            print(i)


    print(ans)

        print(scores[0].p)


    print(data[0][0])


	print(id)

  print(min(pairs, key=lambda x:abs(x[1] - 22))[0])



    print(ans)



    print(ans)


    print(L[0][0])


  print(ans)    

    print(L[0][1])


        print(min_diff_idx)

    print(sorted([[abs((i[2] / math.pow(i[1]/100, 2)) - 22), i[0]] for i in data])[0][1])
    print(L[0][1])


    print(best)
        

	print(sorted(ans)[0][1])


    print("%d"%(ans))

        print(amount)



        print(total)



    print(ans)

    print(v*100)

  print(c_sum)

    print(deliv_price)


    print(price)


    print(ans)


    print(s_m)

	print(fee)

  print(ans)

        
    print(sum)

    print(str(total_money))

        print(total_fee)

    print(r)

    print(fee)
        

    print(ans)


    print(sum)


    print(total)

	print(ans)

    print(sum(fee))

        print(teams[0][0])
        print(teams[1][0])
        print(teams[-2][0])


        print(a)


    print(A[0][1])
    print(A[1][1])
    print(A[-2][1])

    print(r[0][0])
    print(r[1][0])
    print(r[-2][0])


        print(data[0][1])
        print(data[1][1])
        print(data[-2][1])


  print(pairs[0][1])
  print(pairs[1][1])
  print(pairs[-2][1])


  print(A[0][1])
  print(A[1][1])
  print(A[n-2][1])

    print(Run[0][1])
    print(Run[1][1])
    print(Run[len(Run) - 2][1])

    print(L[0][1])
    print(L[1][1])
    print(L[-2][1])

        print(team_record_list[0][1])
        print(team_record_list[1][1])
        print(team_record_list[-2][1])

    print(teams[0][0])
    print(teams[1][0])
    print(teams[-2][0])

        print(ans[0][0])
        print(ans[1][0])
        print(ans[-2][0])

	print(ans[0][0], ans[1][0], ans[n-2][0], sep='\n')

    print(x[0][0])
    print(x[1][0])
    print(x[n-2][0])

    print(x[0][0])
    print(x[1][0])
    print(x[-2][0])

    print(*[team[0][1], team[1][1], team[-2][1]], sep='\n')

    print(L[0][0])
    print(L[1][0])
    print(L[-2][0])



    print(records[0][0])
    print(records[1][0])
    print(records[-2][0])


    print(score[0][1], score[1][1], score[-2][1], sep='\n')

    print(score[0][0])
    print(score[1][0])
    print(score[-2][0])


    print(L[0][1])
    print(L[1][1])
    print(L[-2][1])


    print(Teams[0].id)
    print(Teams[1].id)
    print(Teams[N-2].id)



    print(ri - li)



        print(t - s)


  print(under(n) - under(m - 1))


    print(rec(0, 1, M, N))

	print(sum(t[m:n+1]))


    print(count)


    print("%d"%(table[right]-table[left-1]))


    print(ans)





    print(sum(DP[M:N+1]))

            print(cnt)
			
	print(count)

    print(ans[n] - ans[m-1])

    print(c)


    print(ans)   
      

    print(cnt)


        print(num_hm_n - num_hm_m)

    print(a)

            print(toll[d][a])
                    print(t // 50 * 50 + 50)
                    print(t)
                print(toll[d][a])


    print((b[d][a]//2+b[d][a]%2)*50if b[a][d]<=40 and ((17*60+30<=t<=19*60+30)or(17*60+30<=_t<=19*60+30))else b[d][a]*50) 

        print(discount(tt))
        print(tt)
    


      


        print(price)
        print(price)


        print((A[a][d] // 2 + 49)//50*50)
        print(A[a][d])


        print(toll)

    print(ans)


    print(b)


    print(rate)


	print(fee)

                print(b)
                print(b)
        print(o)
        print(o)
        print(s)
        print(max(0,s))

        print(n)
        print(n)
        print(ohajiki)

            print(ohajiki)
            print(0)
	print(31)
		print(k)
		print(k)
	print(0)

    print(rest)
  print(num)
    print(num)
    print(num)
  print(0)

        print(noko)
        print(oha)
        print(oha)
            print(ohajiki)
            print(max(0, ohajiki))


            print(stone)
            print(0)
            print(stone)
            print(0)
        print(ohajiki)

        print(ohajiki)
            print(num)
                print(num)
                print(0)
            print(num_ohajiki)
            print(num_ohajiki)
        print(curr)


        print("%d"%(num_card))

        print("%d"%(num_card))
        print(billing_amount)


    print(pay)


  print(ans)

	print(ans)


    print(ans)

    print(ans)

    print(ans)


        print(0)
        print(2)
        print(1)

            print(1)
            print(2)
            print(0)

    print(0 if a==b else (1 if a>b else 2))

        print(SAME)
        print(ONE_BIGGER_TWO)
        print(TWO_BIGGER_ONE)


        print(0)
        print(1)
        print(2)


        print(bubble_sort(a, n))


  print(b_sort(alst))

  print(bubbleSort(A))

    
    print(ans)




    print(bs(v))

    print(bubble_sort(N, A))
 

    print(result)



        print(num_swap_count)


    print(count_bubble_sort_swap(arr))


		print(cnt)
    print(cou)


    print(cnt)


	print(cnt)



    print(cnt)


    print(solve(A))

    print(cnt)




    print(ct)

    print(cnt)


    print(ans)


    print(count)

    print(c)

  print(cnt)     

    print(count)



        print(solve(a))


        print(y)


    print( int(ceil(a[n]/3650)) )

    print(math.ceil(ans[-1] / 3650))
    print((3649+a[n])//3650)

  print( (ls[n] // 3650) + (ls[n] % 3650 != 0) )

    print((a[n] // 3650) + (a[n] % 3650 != 0))

    print((dp[N]-1) // 3650 + 1)



    print(step_list[step])


        print(math.ceil(a[n-1] / 10 / 365))



    print(math.ceil(ans[N]/3650))


	print((ans[n]-1)//3650 + 1)

  print(p // 365 + bool(p % 365))


        print(NtoY(1))
        print(NtoY(2))
        print(NtoY(lst[n]))



    print((stair[n]+3649) // 3650)


  print(p // 365 + bool(p % 365))
  


    print( int(dp[n] / 3650) if (dp[n] % 3650 == 0) else int(dp[n] / 3650 + 1) )



    print(-(-1*A[-1]//(10*365)))

    print(years)

    print(dp[n]//(365*10) + 1)


    print(q if r == 0 else q + 1)


        print(math.ceil(dp[n]/3650))

            print(dp[n]//3650)
            print(dp[n]//3650+1)

 
    print(math.ceil(ans[N]/3650))

  print(year)

    print(dp[n] // 3650)
    print(dp[n] // 3650 + 1)
  

  print(A[n-1]//3650+1)

    print(year(l[n]))  

    
    print(int(math.ceil(dp[n] / (365 * 10))))

        print(ceil(ceil(dp[-1]/10) / 365))
  print(math.ceil(days/365))
  
        print(int(math.ceil(dp[n-1]/10/365)))
        print(1)

	print((int((dp[ans]/10)//365))+1)


    print(ceil(DP[n + 1] / 3650))

    print(ans[input_line[i]])

    print(years)


        print(solve(i))
    
        print(math.ceil(dp[floor]/Y))

    print(ans)

        print(1)
        print(dp[-1] // (365 * 10) + 1)


		print(dp[-1] // (10*365) + r)
    print(math.ceil(dp[a[i]] / 3650))

  print(math.ceil(dp[n]/10/365))


    print(math.ceil(dp[n]/10/365))


    print(years)



        print(a[n]/3650)
        print(a[n]//3650 +1 )


        print(A[n]//3650 + 1)
    




    print(kannondou(a)) 

    print(ceil(dp[a]/10/365))

    print((dp[n]//3650)+1)

    print((dp[n]-1)//3650+1)

    print((A[n]//3650)+1)


    print((x[n]//3650)+1)

        
        
    print(math.ceil(A[n-1]/3650))

    print(A[n]//3650+1)

    print(a)


        print(A[n]//3650+1)

        print(A[n]//3650 + 1) 

            print(1)
            print(1)
            print((A[n])//3650+1)

            print(1)
            print(1)
            print((A[n]//3650)+1)

        print(black_jack(c))


    print(ans)

    print(0 if b>21 else b)


        print(total)



        print(total)
        print(0)



    print(score)


    print(S)
 

    print(A)


    print(score)


    print(ans)

    print(s)

        print(0)
        print(ans)


  print(point(lst))



    print(max(p))


    print(point)


            print(0)
            print(score)
            print(0)

    print(blackjack(hand))

            print(i)
        print(0)
        print(ans)
        print(0)
            print(tmp_sum)
                print(tmp_sum+10)
                print(tmp_sum)


            print(food.f)

            
    print(*ANS, sep='\n')


        print('\n'.join(result))


    print("\n".join(output))


            print(item_name)


  print(*score(2 ** n - 1, 0, 0)[1], sep="\n")

        print(f'You can go home in {len(op_list)} steps.')
            print(op)
        print('Help me!')
        print('You can not switch off all lights.')

            print('Help me!')
        print(n, int(a) + int(b), int(a) * 200 + int(b) * 300)


    
    print(name,a+b, a*200+b*300)

    print(s, a + b, a*200 + b*300)


print("\n".join(ans))

    print(a,b+c,b*200+c*300)

    print('%s %d %d' % (cla[i], num[i], fee[i]) )

    print(a, t, p)

        print('{} {} {}'.format(name, int(a)+int(b), int(a)*AM+int(b)*PM))


    print(a,e,m)

print("\n".join(output_data))


    print(name[l],num[l],money[l])


	print(name, int(a)+int(b), 200*int(a)+300*int(b))

  print(name, int(v1) + int(v2), int(v1) * 200 + int(v2) * 300)

    print(name, total, fee)

    print(name, int(a)+int(b), 200*int(a)+300*int(b))

    print(name, int(a)+int(b), 200*int(a)+300*int(b))

  print(name, int(v1) + int(v2), int(v1) * 200 + int(v2) * 300)

  print(n,p,fee)


  print(name, total, fee)

    print(a,b+c,b*200+c*300)

    print(a,b+c,b*200+c*300)

    print(name,int(a)+int(p),int(a)*200+int(p)*300)

  print(A[i][0],A[i][1], A[i][2])

    print(a,b+c,b*200+c*300)

    print(" ".join(map(str,l)))


    print(name,k[0],k[1])
    print(l[0], a + b, a*200 + b*300)


  print(f"{n} {x} {y}")

    print(e, a + b, a * 200 + b * 300)
    


    print(a + " " + str(num3) + " " + str(num4))

print(e1,int(a1)+int(b1),int(a1)*200+int(b1)*300)
print(e2,int(a2)+int(b2),int(a2)*200+int(b2)*300)
print(e3,int(a3)+int(b3),int(a3)*200+int(b3)*300)
print(e4,int(a4)+int(b4),int(a4)*200+int(b4)*300)
print(e5,int(a5)+int(b5),int(a5)*200+int(b5)*300)
print(e6,int(a6)+int(b6),int(a6)*200+int(b6)*300)
print(e7,int(a7)+int(b7),int(a7)*200+int(b7)*300)
print(e8,int(a8)+int(b8),int(a8)*200+int(b8)*300)
print(e9,int(a9)+int(b9),int(a9)*200+int(b9)*300)

    print(name, int(a)+int(b), 200*int(a)+300*int(b))

    
    
    print(namei,a+b,a*200+b*300)
    print(a[0],x,y)
    print(x,a+b,a*200+b*300)
    


    print(name,a+b,200*a+300*b)

    print(name, int(a)+int(b), int(a)*200+int(b)*300)
    
    print(name,int(a)+int(b),int(a)*200+int(b)*300)

    print(name, int(a)+int(b), int(a)*200+int(b)*300)
   print(cla, am + pm, am * 200 + pm * 300)


    print(str(n) , int(a)+int(b) , 200*int(a) + 300*int(b))

    print(name,A+B,A*200+B*300)

    print(namei,x,y)


print(name1, int(a1)+int(b1), 200*int(a1)+300*int(b1))
print(name2, int(a2)+int(b2), 200*int(a2)+300*int(b2))
print(name3, int(a3)+int(b3), 200*int(a3)+300*int(b3))
print(name4, int(a4)+int(b4), 200*int(a4)+300*int(b4))
print(name5, int(a5)+int(b5), 200*int(a5)+300*int(b5))
print(name6, int(a6)+int(b6), 200*int(a6)+300*int(b6))
print(name7, int(a7)+int(b7), 200*int(a7)+300*int(b7))
print(name8, int(a8)+int(b8), 200*int(a8)+300*int(b8))
print(name9, int(a9)+int(b9), 200*int(a9)+300*int(b9))

    print(name, a+b, a*200+b*300)

    print(x,int(a+b),int(a*200+(b*300)))
    print(name, a + b, 200*a + 300*b)

    print(n,j+p,j*200+p*300)


print(n1,c1,d1)
print(n2,c2,d2)
print(n3,c3,d3)
print(n4,c4,d4)
print(n5,c5,d5)
print(n6,c6,d6)
print(n7,c7,d7)
print(n8,c8,d8)
print(n9,c9,d9)



    print(date[n][0],t+s,(200*t)+(300*s))
    print(name,int(a)+int(b),int(a)*200+int(b)*300)

    print(name,a+b,a*200+b*300)


print(name1 , int(a1)+int(b1) , int(a1)*200+int(b1)*300)
print(name2 , int(a2)+int(b2) , int(a2)*200+int(b2)*300)
print(name3 , int(a3)+int(b3) , int(a3)*200+int(b3)*300)
print(name4 , int(a4)+int(b4) , int(a4)*200+int(b4)*300)
print(name5 , int(a5)+int(b5) , int(a5)*200+int(b5)*300)
print(name6 , int(a6)+int(b6) , int(a6)*200+int(b6)*300)
print(name7 , int(a7)+int(b7) , int(a7)*200+int(b7)*300)
print(name8 , int(a8)+int(b8) , int(a8)*200+int(b8)*300)
print(name9 , int(a9)+int(b9) , int(a9)*200+int(b9)*300)

    print(namei[i],sosu,ryokin)
    print(name_i,x,y)
    print(n,a+b,a*200+b*300)


print(name1,int(a1)+int(b1),int(a1)*200+int(b1)*300)
print(name2,int(a2)+int(b2),int(a2)*200+int(b2)*300)
print(name3,int(a3)+int(b3),int(a3)*200+int(b3)*300)
print(name4,int(a4)+int(b4),int(a4)*200+int(b4)*300)
print(name5,int(a5)+int(b5),int(a5)*200+int(b5)*300)
print(name6,int(a6)+int(b6),int(a6)*200+int(b6)*300)
print(name7,int(a7)+int(b7),int(a7)*200+int(b7)*300)
print(name8,int(a8)+int(b8),int(a8)*200+int(b8)*300)
print(name9,int(a9)+int(b9),int(a9)*200+int(b9)*300)

    print(f'{name} {x} {y}')
    print(a,int(b)+int(c),200*int(b)+300*int(c))

    print(f"{s} {v} {w}")
    print(str(n),int(a)+int(b),int(a)*200+int(b)*300)


    print(name,int(a)+int(b),int(a)*200+int(b)*300)

    print(name,int(a)+int(b),int(a)*200+int(b)*300)

    print(name,int(a)+int(b),int(a)*200+int(b)*300)
 print(name,a+b,a*200+b*300)
	print(name, int(b)+int(c), int(b)*200+int(c)*300)

    print(namei,int(ai)+int(bi),int(ai)*200+int(bi)*300)


    print(name, a+b, a*200+ b*300)


    print(name,a+b,a*200+b*300)

    print(name,int(a)+int(b),200*int(a)+300*int(b))
    print(name,int(a)+int(b),int(a)*200+int(b)*300)

    print(name,a+b,a*200+b*300)


   print(name,str(num),str(sal))

  print(name,a+b,a*200+b*300)

   print(cla, am + pm, am * 200 + pm * 300)

    
    print(name,int(a)+int(b),int(a)*200+int(b)*300)

        print(a[0],b+c,b*200+c*300)
        
    print(name,int(a)+int(b),int(a)*200+int(b)*300)
            print(p["A"], p["B"])
    print(an)


    print(d+b,e+c)

            print(A, B)
            print(A, B)


    print(A, B)

		print(a, b)
    print(pa, pb + 1)
    print(pa + 1, pb)
    print(point_a, point_b)


    print(d+b,e+c)

    print(d+b,e+c)

    print(A,B)

    
    print(*P)
    

    print(p1, q1)

    print(p2, q2)

        print(p3+1, q3)
        print(p3, q3+1)

        
        print(d1A, d1B)
        print(d2A, d2B)
        print(d3A, d3B)
        
        

        print(a+0, b+1)
        print(a+1, b+0)

  print(a,b)    

    print(A,B)

    print(d+b,e+c)


    
    print(A,B)
      
   print(s1A, s1B)
   print(s2A, s2B)
   print(s3A, s3B)


      
   print(s1A, s1B)
   print(s2A, s2B)
   print(s3A, s3B)


      
   print(s1A, s1B)
   print(s2A, s2B)
   print(s3A, s3B)



    print(A,B)

    
    print(KA,KB)

    print(a,b)

    print(r1a,r1b)
    print(r2a,r2b)
    print(r3a,r3b)

    print(r1a,r1b)
    print(r2a,r2b)
    print(r3a,r3b)

    
    print(a, b)

    print(score_a, score_b)

    print(b+d,c+e)

    print(Are,Bre)

    print(Are,Bre)

    print(x.count("A"),x.count("B"))


        print(Acount, Bcount+1)
        print(Acount+1, Bcount)

    print(A_t, B_t)

    print(c,d)

    print(a, b)

    print(A,B)

            
        print(a,end=' ')
        print(b)
        


    print(f'{a} {b}')

    print(ten[0],ten[1])

        print(a,b)
    print(A,B)

        print(a+1,b)
        print(a,b+1)

    print(Ap,Bp)

    
    print(a,b)

    print(a,b)

        print(a1,b1)
        
        print(a2,b2)
        
        print(a3,b3)
        

    print(m,n)

        print(A,B)
    
        print(A,B)
    
    print(a,b)

        print(a, b)
  print(a,b)

        print(a+0, b+1)
        print(a+1, b+0)

            print(a,b)        

    print(a+a1, b+b1)

  print(m+r, n+s)

    print(A,B)

  print(a,b)

    print(a,b)

    print(d+b,e+c)

    print(A,B)

   print(A_t, B_t)

    print(a,b)
        
        


        print(A,B)

    print(a,b)

        print(a, b)
    print(d+b,e+c)

		print(a, b)
    print(p1, q1)

    print(p2, q2)

        print(p3+1, q3)
        print(p3, q3+1)

    print(scoreA, scoreB)

    print(scoreA,scoreB)

		print(a, b)
    
    print(A,B)

    print(d+b,e+c)

		print(a, b)
    print(a,b)

    print(a+x,b+y)

    print(A.count("A"), A.count("B"))
    print(B.count("A"), B.count("B"))
    print(d,e)

    print(A,B)
        

   
    print(a,b)

    print(A, B)    

        print(y+0, z+1)
        print(y+1, z+0)

        print(dec2qua(n))


        print(0)
        
    print(ans)

    print(an)


        print(''.join(map(str, q)))


        print(cn)

                print(int(fuga))
                print(n)



  print(to_four(n))

    print(n4)


  print(f(n))

        print(0)
        print("".join(ans[::-1]))

    print(ans)


    print(result)


        print(0)
            print(ans[len(ans) - 1 - i], end="")
        print("")

		print(*ans[::-1], sep='')


    print(round(after_number))


    print(''.join(map(str, ANS)))


        print(0)
    print(*res[::-1], sep="")


        print(0)

        print(*l,sep="")


    print(int(S))

        print(0)

        print(*l,sep="")


        print(v)
        print(''.join(map(str, ans[::-1])))

    print(to_base(n, 4))

        print("0")
            print("%d"%(NUM//POW[i]),end="")
                print("0",end="")
    print()

                print(colors[i])
    print(an)



    print(COLOR[color_code])


	print(solve(line))

	print(j[0])


    print(COLOR[color])

    print(eval(r, g, b))


        print(min_dist_color)

        print(references[closest_color].name)



    print(ans)


        print(Color[D.index(d)])

        print("black")
        print("blue") 
        print("lime")
        print("aqua")
        print("red")
        print("fuchsia")
        print("yellow")
        print("white")
    

    print(near_color[0])


  print(lowest_name)


    print(name)


    print(get_color(cc))

    print(L[T[0][0]][1])


    print(sample2[index])

    print(V[ck][0])

    print(ans)



    print(c)

	print(k[dks.index(min(dks))])

    print(f(R*deg))


        print(int(distance + 0.5))


    print(round(6378.1*theta))

    print(int(6378.1*acos(sin(a)*sin(c) + cos(a)*cos(c)*cos(radians(d)-radians(b)))+0.5))

	print(int(6378.1*math.acos(a) + 0.5))


    print(round(6378.1 * angle))


    print(round(x))

    print(format(dist, '.0f'))

    print(round(ans))


        print(f'{(int(r * theta + 0.5))}')

    print(int(6378.1 * theta + 0.5))


    print(int(dist))

        
        print(sum(map(len, b)) - 5)

    print(ans)

    print(ans)


            print(grid[y][x], end='')
        print()
    print()

        print(num_cells)

  
  print(cnt)

            print(blocks[i][j], end='')
        print()


        print(cnt)
    print(an)



    print(ans)


        print(x)


        print(ans if ans != -1 else "NA")

        
    print(0)
          print(score)

  print("NA")

                    print(ans)
            print('NA')

            print('NA')
            print(num_step)

    print(cnt if len(ans)!=0 else "NA")
        print(0)
            print(score)
        print("NA")


            print(now_time)
            print("NA")
            print('NA')
            print(t)


    print(answer)


        print(total)


	print(kruskal(n, edge))

  print(ans)

    print(kruskal(n, edges))


    print(ans)

    print(ans)
    
    print(ans)

    print(*res, sep = "\n")

    print(*res, sep = "\n")

    print(ans)


    print(ans)


    print(cost)

    print(costs)

    print(result)

        print(result)


    print(right)



            print(max(books))
            print(right)


    print(s.solve())


    print(nibun(judge,0,1500009))

  print(right)

    print(minw)
    


        print(left)


    print(minw)


    print(minW)

            print(max(book_width_list))
            print(solve_bisect(num_books, num_shelves, book_width_list))

        print(q + 1)
        print(q)



			print(solve(lst,m))

    print(nibutan(s_num,1500000,m) )

        print(result)


    print(minwid)

        print(q + 1)
        print(q)


    print(right)

    print(ok)


		print(k)
	print(ans)

        print(sanmoku_narabe(board))


    print(f(a+input()+input()))

        print('b')
        print('w')
        print('b')
        print('w')
        print('b')
        print('w')
    print("NA")


    print(output)


    print(ans)



    print(ans)


                print('b')
                print('w')
                print('b')
                print('w')
            print('b')
            print('w')
            print('b')
            print('w')

        print('NA')

            print(L[i][0])
            print(L[0][i])
            print(L[0][0])
            print(L[0][2])
        print("NA")


        print(result)


      print("b")
      print("w")
    print("NA")

        print("b")
        print("w")
        print("NA")


            print(x)



        print(visitors['under10'])
        print(visitors['10s'])
        print(visitors['20s'])
        print(visitors['30s'])
        print(visitors['40s'])
        print(visitors['50s'])
        print(visitors['60s+'])




        print(sum(age[0:10]))
        print(sum(age[10:20]))
        print(sum(age[20:30]))
        print(sum(age[30:40]))
        print(sum(age[40:50]))
        print(sum(age[50:60]))
        print(sum(age[60:]))


            print(h)

        print(o[i])

    print("\n".join(counter))


        print(To_lis[k])

		print(a)

        print(cnt[i]-1)

	print(*f[0:7], sep='\n')

  print(a0)
  print(a1)                        
  print(a2)
  print(a3)
  print(a4)
  print(a5)
  print(a6)

    print(d0)
    print(d1)
    print(d2)
    print(d3)
    print(d4)
    print(d5)
    print(d6)
        

        print(h[i], sep='\n')
        


        print(ans[i])

        print(v)


            print(num_list[j])

    print(ans)
    print(ans1)
    print(ans2)
    print(ans3)
    print(ans4)
    print(ans5)
    print(ans6)

    print(*dic, sep="\n")

    
    print("\n".join(map(str,L)))


        print(i)


    print(x[i])

    print(*ANS, sep='\n')


    print(S)

        print(goldbach_conjecture(n, primes))


        print(goldbach_conjecture(n, primes))


  print(search_pair(n, prime_lst, len_prime))


    print(ans)


	print(ans)



    print(count)



        print(num_prime_pair)

        print(ans)



    print(ans)


    print(" ".join(s.solve()))

            print('NA')
            print(aizu, normal)


        print(result[0], result[1])
        print("NA")


    print("NA")
      print("NA")
      print(max_aizu, max_normal)
    print("NA")
  
  print(left, (b - left * c1) // c2)


        print("NA")
        print(x,y)


            print("NA")
            print(az_quantity, o_quantity)


        print("NA")
        print(*ANS)


        print("NA")
        print("%d %d"%(num_aizu,num_normal))

            print('NA')
            print('NA')

        print(n1, n2)

            print(i, normal)
        print("NA")


        print("kyo")
        print("kyo")
        print("syo-kichi")
        print("kichi")
        print("chu-kichi")
        print("dai-kichi")

            print('kyo')
            print('kyo')
            print('kyo')
            print('syo-kichi')
            print('kichi')
            print('chu-kichi')
            print('dai-kichi')

    print(stoning_fortune(coord1, coord2, coord3))

        print(cnt)
        

    print(c)

    print(search(n, A, s))

        print(result)




    print(result)


	print(cnt)

    print(cnt)


    print(ans)


        print(num_compare)

    print(ans)


    print(ans)

    print(m)

  print(search_num(k, alst))

        print(ans[0][1], ans[0][0])



    print(min_city, min_cost)


    print(city, time)
        


        print('{} {}'.format(town_live, min_dist))



    print(*sum_ans)

    print(min_index, min_time)


  print(best_city, min_total)

            print(a[0], a[1])

        print(mintown , ans)


    print(ansid,ans)



    print(answer_id, answer)

    print(total.index(min_dist), min_dist)


	print(f"{s.index(min(s))} {min(s)}")

    
    print(min_p, min_t)




        print(anstown, ansdis)

        print(str(path_cost_list[0][1]) + ' ' + str(path_cost_list[0][0]))



        print(thisi,mint)
            
    print(p, ans)


    print(*ans[::-1])

        print(ans_node,ans_score)
        print(ans[0][1], ans[0][0])


        print(count)
      print("NA")

            print(result)
            print('NA')

        print(f'{max_growth:.2f}')

  print(format(max(dp[m]), ".2f"))

	print(format(ans, ".2f"))


    print("%.2f" % max(growth[m-1]))


    print("%.2f"%(ans))

        print(*departure_indexes)


  print(*ans)



    print(ans)


    print(max_num_blocks)

        print(ans)


  
  print(ans)

        print(min_elapse_time)

        print(*v[0])


    print("ABCDE"[i], x)



        print('{} {}'.format(chr(ord('A')+shop), top))



  print(dic[lst.index(max(lst))], max(lst))


    print(*sorted(slist.items(), key=lambda x: x[1])[-1])



    print(s, ans)


    print(S[Shop], win)
  
  

    print(s[ans], mm)

   print(name[shop.index(m)],m)
        
        print(f"{shop} {cnt}")

        print(shop_name, max_s)

    print(*max(zip('ABCDE', abcde), key=operator.itemgetter(1)))

    print(chr(ord('A')+a.index(b)),b)

        print(ans,c)

    print(result[1], result[0])


	print(*ans[0])


        print(name[shop.index(m)], m)
        print(name[shop.index(m)], m)
    print(name[shop.index(m)],m)
    print(name[shop.index(m)], m)
    print("A",listsum[-1]) 
    print("B",listsum[-1]) 
    print("C",listsum[-1]) 
    print("D",listsum[-1]) 
    print("E",listsum[-1])


            print("A",A[i])
            print("B",A[i])
            print("C",A[i])
            print("D",A[i])
            print("E",A[i])
    print(name[shop.index(m)],m)
        print(name[shop.index(m)], m)
  print(dic[lst.index(max(lst))], max(lst))

      
  print(s, ans)

    print(chr(ord('A')+a.index(b)),b)

        print(name[shop.index(m)], m)
    print(m[Shop], top)

			
			print(A[number],max_num)

    print("ABCDEF"[num], T[num])





        print(n[0][1],n[0][0])
    print(ans,maxi)


    print(chr(ord('A')+sells.index(max(sells))),max(sells))


        print(chr(num_di[num_list[4]]) + " " + str(num_list[4]))

    print(S[s],m)


    print(an,ans)

        print(sales_result_list[0][1], sales_result_list[0][0])

    print(L[ck], M)

            print(chr(ord('A')+bango),sum)
            print('A ' + str(aaa))
            print('B ' + str(bbb))
            print('C ' + str(ccc))
            print('D ' + str(ddd))
            print('E ' + str(eee))



    print(x[-1][1],x[-1][0])


            print(N[z] + " " + m)
    
    
    
            
    


    

    



    print(ele, ans)


    print(shop, most)
            

            print(chr(t))


        print(sorted_teams[i].name)
    

        print(t)


            print(team_name)


    print(r[1])


        print(r[0])


				print(y[3])

        print(sets[i][3])
    

    
    print(ans, end='')

        print(i[0])

        print(r[0])

    
    print('\n'.join([t[0] for t in teams]))

    print('\n'.join(str(t[3]) for t in sorted([parse(_) for _ in range(n)])))
        print(a[0])

        print(team[1])

    print("\n".join(output))


        print(results[i].name)



        print(x[0])
    

        print(t)


        print(ls[i][2])


        print(s[0])


            print(s[0])

      print(item[1])


        print(T[i][-1])


        print(x, steps)


    print(*an)


        print(gcd, count)


    
    print(ans, end='')

        print(d, num_step)

    print(*euclidean_algorithm(a, b))

    print(x, step)

	print(*ans)


    print(x, cnt)


  print(a, cnt)

    print(a,c)
  
    
    print(x,c)

            
        print(Euc(X, Y, cnt)[0], Euc(X, Y, cnt)[1])



    print(*(gcd(x,y)))

    print(x,s)

    
    print(x, ans)
        

    
    print(x,count)


    print(x, z)


    print(a,i)

    print(x,i)

            print(a,i)
    print(a,p)

  
    print(x,k)
        
    print(a,sum)


    print(a, cnt)


    
    print(X,n)

    print(a,p)


    print(b, C)

    print(b,d)

    print(u[0],u[1])

        
    print(x,c)
        print(x,s)

    print(x,z)

   print(X, i)


    print(x, cnt)

    print(b,x)

    print(x,n)

    print(ans,step)

    print(x, count)

    print(*ans)

            print(y,num-1)
            print(x,num-1)
        
        
    print("{} {}".format(x,count))


    print(a, cnt)


    print(x,c)

    
    


    print(X, i)

	print(*ans)

    print(a,C)

	print(*ans)





    print(a, c)

   print(a, c)

    print(x,count)

            print(a,i)
    print(m,b)

            print(n,c)
    print(a,c)

    print(a,p)

    print(a,c)
  

    print(x,a)

    print(a,c)
        
    print(x,z)

            
        print(c(X, Y, s)[0], c(X, Y, s)[1])



    
    print(x,ans)

  print(*euclid_algo(a, b, 0))

    print(*gcd(x,y))

  print(i)

    
    print(x,cnt)


        print(x, cnt + 1)
    print(a,c)
 
    print(g, steps)


    print(x, count)


  print(*euclid_gcd(a, b, 0))


    print(a, cnt)


   print(a, c)
   


    print(a,count)


    print(X,c)
    


    print(x,cnt)
        

  
  print(ans)

    print(n - len(c))

    print(N-len(set1))

    print(ans)


    print(N - len(res))


        print(num_cubes - num_valid_cube)

    
    print('\n'.join(map(str, ans_list)))

        print(cnt)


	print(sum(f))


    print(n-len(dices))


        print(''.join(seats))


    print(''.join(bench))

  print("".join(chairs))


    print(*isu,sep='')


    
    print(ans, end='')

    print("".join(chair))



        print(*chair_list, sep='')

    print(*ans, sep='')


                print(dist[q])
                print(dist[q])


                print(dijkstra(n, C, a, b))
                print(dijkstra(n, T, a, b))

            print(dijkstra(num_vertexes, adjacency_list, start, goal, r))

          print(score)
            print(path_len)
            print(ans)

        print((edges_time if r else edges_cost)[p-1][q-1])

                print(solve(N,G,fare,p,q))
                print(solve(N,G,time,p,q))
            

            print(dist[(q,r)][p])
                print(dist[(p,r)][q])
                print(dist[(p,r)][q])

        print(dfs(items, recipe, t))


	print(calc(input()))


        print(solve(t))

    print(price(f.readline().strip(), item, recipe))

    print(tot(item, pr, rec))


  
  print(get_price(input()))


    print(get_price(input(), prices, recipe))


    print(index[q].minCost())
       

    print(saiki(Gui,zairyo))



	print(min(ans.get(item,maxm),hsm1[item]))
        print(items[target])


        print(findrecipe(recipe,item,t))
    print(wrought(cost_dict, ingredients_dict)[target])


    print(Item[t])


            print("ERROR: can't remove edge", node1, "->", node2)
            print(self.edges)
                print("ERROR: graph has cycle!", self.edges)
    print(prices[target])

        print("NA")
        print(p)
     
        print(ans)


        print(result)


  print(ans)

    print(sum(br[0]))



    print(sum(dp[-1]))

        print(field[i])


    print(sum(map(lambda x:getp(field,p,0,x,h,w,True), range(w))))

    print(ans)
        print(i)
    print(ans)

        print(result)

    print(solve(course))

  print(ans)


        print(result)

                print(1)
                print(2)
                print(3)


            print(r)
            print(3)
            print(r)
            print(3)
            print(r)
            print(3)
            print(r)
            print(3)
            print(3)
            print(3)
                print('1')
                print('2')
                print('1')
                print('2')
                print('1')
                print('2')

        print(rps[hands_set][h])

                print(o)
            print(3)
            print(1 if g == w else 2)

                print(3)
                print(3)
                    print(1)
                    print(2)


                print(i)
		print(*[3]*5, sep='\n')
	print(*ans, sep='\n')

    print(judge(h, hset))



        print(*([3]*5), sep="\n")
        print(*(result[n] for n in h), sep="\n")

            print(1)
            print(2)
            print(3)

        print(i)


            print(3)
                print(1)
                print(2)
                print(2)
                print(1)
                print(1)
                print(2)
        

                print(3)
                print(status[datas[i] - 1])
        print(*[3]*5, sep="\n")
        print([2, 1][(hi%3)+1 in h])

                print(DRAW)
            print(hand_dic[h])

                print(1)
                print(2)
                print(2)
                print(1)
                print(1)
                print(2)
            print(3)


        print(ans if ans > -1 else "NA")


            print(i)
        print("NA")


            print(i + 1)
        print('NA')

        print(ans)


                print(i + 1)
            print('NA')

            print(i)
        print("NA")


        print('NA' if total < budget else months)


    print(next_trip(L, cashflow))

            print(c)
    print("NA")
    print(ans)

        print(ans)
        print("NA")


        print(B)
        print("NA")
            

        print(f)
        print("NA")


            print(i+1)
        print("NA")

        print("NA")
        print(month)
        


        print("NA")
    print(i + 1)

    print(jug(l,income))


	print(k if k > 0 else "NA")

    print(c if c else "NA")


            print(i+1)
        print("NA")


    print(s) if s != 0 else print('NA')
    

            print(i + 1)
        print("NA")


        print("OK" if ok else "NG")


    print('OK' if is_reachable(size, start, goal, blocks) else 'NG')

        print(result)


            print('OK')
            print('NG')

            print("OK")
            print("NG")


    print(bfs(W, H, grid, xs, ys, xg, yg))
    
        print("OK")
    print("NG")


    print("NG")
            print("OK")
        print("NG")

        print(board[i])


        print(go_maze(board, s_w, s_h, g_w, g_h))


        print('OK')
        print('NG')


        print("OK")
        print("NG")


    print(an)


                print("OK")
      print(0)
      print(f'{x}', end='')
  print()


    print(new_room_num)

    print(str(oct(n))[2:].translate(str.maketrans('4567','5789')))


print(*[''.join('01235789'[int(i)]for i in oct(int(x))[2:])for x in open(0).read().split()[:-1]],sep='\n')

    print(convert(int(s)))

    print(str(oct(n)[2:]).translate(str.maketrans("4567", "5789")))

        print(ans)


    print(oct(n)[2:].replace('7','9').replace('6','8').replace('5','7').replace('4','5'))

  print(ans.translate(str.maketrans({"4":"5","5":"7","6":"8","7":"9"})))

    print(x.translate(str.maketrans('4567', '5789')))

    print(n)

  print(n.translate(str.maketrans('4567', '5789')))

  print(n.translate(str.maketrans('4567', '5789')))

        print(*ans, sep='')


    print("".join("01235789"[int(i)] for i in oct(n)[2:]))

    print(format(int(c),'o').translate(str.maketrans({"4":"5","5":"7","6":"8","7":"9"})))

    print("".join((a[int(n)] for n in oct(N)[2:])))

	print(ans) 


  print(trans(n))


  print(''.join('01235789'[int(i)] for i in oct(n)[2:]))

                print(5, end='')
                print(c + 2, end='')
                print(c, end='')
        print()

    print("".join(ge(list(oct(n))[2:])))


    print("".join(c))


        print(a[N[i]],end="")
    print()

            print(octD[N[i]], end = "")
        print()

    print(ans)


        print(out[i],end="")
    print()

        print(x(int(n[i])),end='')
    print()

        print(table[int(s[i])], end="")
    print("")



                print(j+a[0][1]+1,i+a[0][0]+1)
        print(x, y)
        print("NA")


            print(*min(found_coordinate_list)[::-1])
            print('NA')

        print('NA')
        print(*top_left)

        print("NA")
        print(*ANS)


    print(" ".join(map(str, ans[0][::-1])) if ans else "NA")

            print(1)
      print(time)
    print("NA")

        print(exit_t)
        print("NA")


        print(t)
        print("NA")


            print(i)
        print("NA")

                print('NA')
                print(t)
            print(l // s)

            print(lcm_d // d)

        print(mul_lcm // (v_lcm // students[i][1]) // students[i][0])


        print(v//vg*dl//d)


        print(v//vg*dl//d)


        print(lcm_ * v // v_prod // d)


        print(*ans, sep='\n')


    print("\n".join( str(lcmnu*r[1]//lcmde//r[0]) for r in s))


    print(*ANS, sep='\n')


        print(lcm*v[i]//(V*d[i]))


        print(time * ri.v / ri.d)

                print(f1)

        print(dijkstra(num_vertexes, adjacency_list, num_tickets, start, goal))

        print(min(d[destination]))



        print(min(dist[d - 1]))

    print(min(cost[d]))

        print(cheapest)


    print(ans)


  print(cost[d + n * c])



        print(bf(es, dist, c, s, d))

            print("NA")
            print("NA")


            print(len(component_set))

        print(solve())

            print("NA")
            print(Bi,B)

        print(4280 - this_month)


    print(4280 - an)


    print(4280-w)

    print(4280-a)

  print(4280 - fee(w))

print(*ans, sep='\n')


    print(4280 - price)


        print(-(temp-4280))
        print(-(temp-4280))
        print(-(temp-4280))
        print(-(temp-4280))


    print(a-b)
    print(a-(b+(n-10)*125))
    print(a-(b+1250+(n-20)*140))
    print(a-(b+1250+1400+(n-30)*160))

        print(ans)


    print(4280-s)

    print(last - a)

    
  print(4280 - price)

    
    print(4280-mon)

    print(4280-S)

    print(prev-cur)
        print(4280-w)

    print(4280-ans)


        print(4280-1150)
        print(4280-(1150+(w-10)*125))
        print(4280-(1150+10*125+(w-20)*140))
        print(4280-(1150+10*125+10*140+(w-30)*160))


    print(4280-fee)


    print(prev_m-fee(W))
        print(4280 - 1150)
        print(4280 - fee)
        print(4280 - fee)
        print(4280 - fee)


    print(4280-ans)

    print(4280-C)

        print(4280 - ans)


            print(pb - b)
            print(pb - b)
            print(pb - b)
        print(pb - b)

    print(4280-ans)


    print(d)

    


    


        



        







   print(ans[n],sep='')


    print(f(_w))

	print(4280-s)



    print(4280 - ans)


    print(4280-tm)

        print(kakin(w))

    print(4280 - res)

    print(last_water_charges - water_charges(w))

    print(water_bill(n))
        

    print(*an)


        print(p[0][1], p[0][0])



        print(max_id, max_dist)

    print(*max(patients, key=lambda x: x[1]))

    print(*pd[-1])

    print(*a[-1])

        print(presentnum,d)

  print(id,dmax)

    print(id, dmax)

  print(ansp,ansd)

    print(maxind,maxnum)

      
  print(number, large)

     
    print(a,km)

    print(p,ma)


    print(number, large)


    print(top,score)

    print(B,V)

	print(id, dmax)

    print(max_p, max_d)
    

    print(*ANS)


        print(str(hosuu[hosu[0]]) + " " + str(hosu[0]))

    print(ans1,ans2)

    print(mp,m)

    print(L[0][0],L[0][1])


    print(patient, high)
        

    print(P[-1][0],P[-1][1]+P[-1][2])


        print(*ans)


  print(lst[-1][1], lst[-1][0])

    print(s, d)

    print(walk[0][1],walk[0][0])

    print(f'{x[n-1][0]} {x[n-1][1]}')

    print("{} {}".format(arr[0][0], arr[0][1]))


    print(ls[0][1],ls[0][0])

    print(md[0],str(md[1]+md[2]))

        
        

    print(an)


            print(level(m, e, j))


                print('A')
                print('A')
                    print('A')
                    print('B')
                    print('B')
                    print('C')

        print(rank(pm, pe, pj))

            print("A")
            print("A")
            print("A")
            print("B")
            print("B")
            print("C")

        print(*ans, sep='\n')


            print("A")
            print("A")
            print("A")
            print("B")
            print("B")
            print("C")

    print(rank(m, e, j))


        print(ans)


      print('{}'.format('A'))
       print('{}'.format('A'))
       print('{}'.format('A'))
       print('{}'.format('B'))
          print('{}'.format('B'))
        print('{}'.format('C'))
      print('{}'.format('C'))

      print("A")
      print("B")
        print("B")
        print("C")
      print("C")

            print("A")
            print("A")
            print("A")
            print("B")
            print("B")
            print("B")
            print("C")
            

            print('A')
            print('A')
            print('A')
            print('B')
            print('B')
            print('C')

            print("A")
            print("B")
            print("C")

            print("A")
            print("A")
            print("A")
            print("B")
            print("B")
            print("C")

        print(isX(l))

            print(hantei(pm,pe,pj))
            print("A")
            print("B")
            print("C")

        print(b)

            print("A")
            print("A")
            print("A")
            print("B")
            print("B")
            print("C")


            print("A")
            print("B")
            print("C")

            print("A")
            print("A")
            print("A")
            print("B")
            print("B")
            print("C")
      print('A')
      print('A')
      print('A')
      print('B')
      print('B')
      print('C')


            print("A")
            print("B")
            print("C")

            print("A")
            print("A")
            print("A")
            print("B")
            print("B")
        print("C")

            print('A')
            print('B')
            print('C')

            print("A")
            print("A")
            print("A")
            print("B")
            print("B")
            print("C")

            print("A")
            print("A")
            print("A")
            print("B")
            print("B")
            print("C")


      print('A')
      print('B')
      print('C')

            print("A")
            print("B")
            print("C")

		print(f(a,b,c))

        print(grade(m, e, j))

                print("-")
                print("*" * x)


            print("-")
            print("*" * r)


                print('-')
                print('*' * hist[i])

        print('*' * counter[i] if 0 < counter[i] else '-')

        print('*' * counter[i] if 0 < counter[i] else '-')

            print("-")
            print("*" * d)

        print("*"*nums + "-"*(nums==0))

            print("*"*i)
            print("-")

            print("-")
    
            print("*"*x)

            print('*'*c)
            print('-')

            print('-')
            print(A*k)
        
    

                print("-")
                print("*"*x)

            print('-')
            print('*'*b)

            print("-")
            print("*"*x)

            print('*'*c[i])
            print('-')

            print('-')
            print('*'*y)

            print('-')
            print('*'*a)

            print('-')
            print('*'*x)

                print('-')
                print('*'*x)

		    print('-')
		    print('*'*a[i])


            print('-')
            print(count)

			print("-")
			print(count)

            print("-")
            print("*"*a[i])


            print("-")
            print("*"*c)

                print("-")
                print("*"*ice[i])

        print('*' * c if c > 0 else '-')

      print("-")
      print("*"*A[i])


            print("-")
            print("*"*ice)


            print('*'*c)
            print('-')

                print("-")
                print("*"*a)

      print("-")
      print(count)

            print('*'*klist[i])
            print('-')

            print("-")
            print("*"*a[i])
    

            print("-")
            print("*"*a[i])

            print('-')
            print('*'*c[j])

            print("-")
            print("*"*l[i])

            print('-')
            print('*'*x)

            print('-')
            print('*'*c)

                print("-")
                    
                print("*"*m)
            print('-')
            print('*'*y)

                print("-")
                print("*"*c[j])

            print('*'*a)
            print('-')

        print('*'*A)
        print('-')
        print('*'*B)
        print('-')
        print('*'*C)
        print('-')
        print('*'*D)
        print('-')
        print('*'*E)
        print('-')
        print('*'*F)
        print('-')
        print('*'*G)
        print('-')
        print('*'*H)
        print('-')
        print('*'*I)
        print('-')
        print('*'*J)
        print('-')

            print('*'*c)
            print('-')

            print('-')
            print('*'*D)

            print('*'*a[i])
            print('-')

            print('-')
            print('*'*count[k])


            print('-')
            print((int(p))*"*")
                print("-")
                print("*"*a)

                print("-")
                print("*"*x)

            print("*"*b)
            print("-")

      print('-')
      print('*'*f[i])

                print("-")
                print("*"*a)

                print("-")
                print("*"*date)
            print("-")
            print(a*"*")

            print('*'*c)
            print('-')



            print("-")
            print("*" * data[i])

            print("*"*a)
            print("-")
    


            print('-')
            print('*'*x)

            print("-")
            print("*" * data[i])

            print('-')
            print('*'*c[i])

            print('-')
            print('*'*y)

            print('*'*c)
            print('-')

            print("*"*a)
            print("-")

            print("-")
            print("*"*a[i])

            print('*'*c)
            print('-')

        print(a*'*')
        print('-')
        print(b*'*')
        print('-')
        print(c*'*')
        print('-')
        print(d*'*')
        print('-')  
        print(e*'*')
        print('-')    
        print(f*'*')
        print('-')    
         print(g*'*')
        print('-')    
         print(h*'*')
        print('-')    
        print(i*'*')
        print('-')  
        print(j*'*') 
        print('-') 
    
    

            print('-')
            print('*'*icecream[j])
            print("*" * a)
            print("-")

            print("-")
            print("*"*a[i])


      print(dic[i] * "*")
      print("-")

        print("*"*b if b else "-")

            print("-")
            print("*"*l[i])
            
    
    


    
    

                print("-")
                print("*"*T)
                
    


                print('-')
                print('*'*s)
            print("NA")
            print(sx + "." + sy)


        print(result)


        print('NA')
        print(output)

        print(s[:-4]+"."+s[-4:])

        print("NA")
        print("{:08b}".format(i),end="")
        print(".",end="")
        print(d[f])

    print(ans(INP))

            print('NA')
        print(ret)
        
    


                print(*ip_list, sep='', end='.')
                print(*dp_list, sep='')

        print('NA')

    print('NA' if m>1e-10 or 13<len(a) else a)

        print("NA")
        print("NA" if 1e-10 < b or len(a)> 13 else a)

        print("NA")
        print(res)
		print("NA")
    print("NA")
    print(us, ds, sep=".")

        print("NA")
        print("NA")
        print("NA")
    print('.'.join(ans))


        print(s1 + "." + s2)
        print("NA")
    
    

        print('NA')
        print('NA')
    print(r)
    

        print(*ans)


    print(*an)


        
    print(*member)


        print(*p_list)

    print(*[i+1 for i in range(M) if S[i]])

        print(*player)

        print(*result)


    print(*man)

    print(*L)


    print(' '.join(map(str,sorted(list(d)))))


        print(ret[:-1])
       
    print(" ".join(str(e) for e in a))

    print(*a)

  print(*plst)

                print()
    print(' '.join([str(p) for p in players]))
    
    
                print("%d"%(i),end="")
                print(" %d"%(i),end="")
    print()


    print(result)

    print(' '.join(ans))

            

                




    print(get_quad(n, prime))

  print(quad[br(quad, n) - 1])

                print(p[i])
    print(B[bisect(B, N)-1])


            print(i)
        print(ANS[idx - 1])

        print(quadruplet_primes[bisect_right(quadruplet_primes, n) - 1])


                print(i)
            print(i)
                print(n)
        print(ans if ans != -1 else "NA")


            print("NA")
            print(dist + 1)
    print("NA")

        print(ans)

        print(min_time if min_time < 100 else 'NA')

    print(bfs(tx,ty,kx,ky,depart))   

            print(d)
        print("NA")

    print(res)

  print(ans)

    print(min(calorie))


        print(dijkstra(m + n + 2, m, adjacency_list))

    print(min(dist[N+M+1]))


        print(ans)
        

            print("NG")
            print("OK" if ok else "NG")


            print('NG')
            print('OK')
            print('NG')

    print("OK" if ok else "NG")

      print("NG")
        print("NG")
      print("OK")

        print("NG")
        print("OK")
        print("NG")

    print("OK" if ec.is_eulerian_trail() else "NG")


        print("OK")
        print("NG")


        print("NG")
    print("OK" if len([1 for s in ss if s]) == searchnode(ord(s)-ord('a'),u,path) else "NG")
    


        print('NG')
 
    print('OK' if flg else 'NG')

        print("OK")
        print("NG")

        print(hits, blows)



        print(num_hit, num_blow)


    print(hit, blow)

        print(hit, blow)


    print(h,len(set(a)&set(b))-h)

 
  print(h, b)


    print(hit, blow)



  print(hit, blow)

    print(h,len(set(a)&set(b))-h)

    print(hit, blow)

	print(h, len(set(r) & set(a))-h)

    print(h, len(set(r) & set(a))-h)

	print(str(h)+" "+str(b))


    print(hit, blow)


    print(hit, blow)
        

    print(f"{hit} {blowPlusHit-hit}")

    print(count,end = " ")
    print(newcount - count)
    

    print(hit,blow)
        


    print(sum(1 for i, j in zip(r, a) if i==j), sum(1 for i in range(len(r)) for j in range(len(a)) if r[i]==a[j] and i!=j))

    print(str(hit)+' '+str(bur-hit))


    print(a1, a2-a1)


    print(hit, blow)


    print(hit, blow)

    
    print(hit, blow)
        
        
        

    print(hit, blow)

        print(ans)


        print(sum(arr))
  print(s)


    print(sum(p))
      print(pay)

        print(ans)



        print(sum(p_list))

    print(sum(price) - sum(price[m - 1::m]))

    print(sum(p)-sum(p[m-1::m]))

        print(str(sum([price[i] for i in range(len(price)) if (i+1)%m != 0])))
    print(ans)

    print(cst)

    print(ans)


        print(s)
    print(cost)

	print(ans)


    print(ans)



    print(sum(prices))


    print(ans)


        print(count)

                print(s, end='')
            print()
    
    print(seg)
    
        print(seg)

        print(bin(a^s[b])[2:].zfill(7))
            print(ans)


            print(f'{signal:07b}')
        print(bin(display ^ segment[i])[2:].zfill(7))
                print("0", end="")
                print("1", end="")

        print()

		print(ans)

    print(put)

        print(out)
        print(ans)

                print(0, end='')
                print(1, end='')
        print()
    print(('0'*(9-len(bin(x^a[y])))+bin(x^a[y])[2:])[::-1])
        print(''.join(map(str, ANS)))


        print(format(current ^ num,'b').zfill(7))
        print(''.join(tmp))
        print("{:07b}".format(a^e))
    print(100+b*95+r*63+g*7+c*2+s*3-t*3)


  print(100 + bonus_game * 16 + 15 * b + 15 * r + 7 * g + 2 * c + 3 * s - t * 3)


    print(medal)


  print(a)


    print(ans)

  print(ans)

        print(num_medals)

    print(ans)


    print(last_coin)

    

    print(100+(b+r)*15+g*7+c*2+(b*5+r*3)*13-(t-(s+b*5+r*3))*3)

    print(100 + 95 * b + 63 * r + 7 * g + 2 * c - 3 * (t - s))

  print(a)

  print(100+(b+r)*15+g*7+c*2+(b*5+r*3)*13-(t-(s+b*5+r*3))*3)

        print(solve(b, r, g, c, s, t))


    print(bfs([building(),building()]))

        print(result if result != math.inf else 'NA')

    print(0)
        print(total + 1)
  print("NA")


    print(str(count)if count>=0 else "NA")

        print("NA")
        print(ans)


            print('NG')
        print('OK')


            print('OK')
            print('NG')

            print('NG')
        print('OK')

    print(ans)

	print("OK" if sum+s <= 150 else "NG")

        print(ans)


            print('NG')
            print('OK')
      print("NG")
    print("OK")


    print(ans)



        print("OK")
        print("NG")


    print("OK" if ok else "NG")


        print("NG")
        print("OK")
        
        

    
    print(ans)
    




                print("NG")
        print("OK")


        print(int(expected_money))

    print(total // init)

    print(int(ans))


    print(int(s))

        print(*result_list, sep='')

    print(a[::-1])

    print(*R, sep='')


    print(ans)


    print(int(r))

    print(ans[::-1])

    print(ans)


    print(negdec)

        print(min_cost if min_cost <= max_cost else 'NA')

        print("NA")
        print(ans)


        print(ans)
        print('NA')
    

    print("NA")
    print("NA")
    print(ans)

    print(total_time - max_path)

        print(0)
    
    print(min(time_rec))

        print(calc_min_cost(node_list))


    print((total - dfs_max(1, 0)))

    
    print(ans)

    print(ans)



        print(sum(in_degree_list[i] == 0 for i in range(scc.num_components)))

            print("OK")
            print(t - times)


    print(an if an > 0 else "OK")


    print(a if a>0 else 'OK')

    print("OK" if t<= sf else t-sf)

        print("OK")
        print(t-b)

	print("OK" if sm >= t else t - sm)

    print("OK" if s >= t else t - s)

    print("OK")
    print(t - acc)

        print("OK")
        print(t - ans)


    print("OK")
    print(t-c)

        print(ans)


        print("OK")
        print(t - ans)

    print("OK" if sm >= t else t - sm)

        print(t - sum)
        print("OK")

    print("OK")
    print(t)

    print('OK')
    print(t - ans)

        print("OK")
        print(t-hour)


            print(t-M)
            print("OK")
		print("OK")
		print(t - total_time)


        print("OK")
        print(t - time)

        print("OK")
        print(T-t)

        print('OK' if dt <= 0 else dt)

        print(t if t>0 else "OK")

    print("OK" if T <= 0 else T)

    print(a if a>0 else 'OK')

        print("OK")
        print(t - ans)

        print("OK")
        print(a)

        print("OK")
        print(t-T)


        print("OK")
        print(t-time)

        print("OK")
        print(t - res)


        print("OK")
        print(t-a)





        print(md)

        print("OK")





    print('OK' if t<=0 else t)

    print('OK' if rest <= 0 else rest)

                print(x)
            print("NA")


        print(*res, sep="\n")
        print("NA")


            print(s)

            print('NA')


    

    print('\n'.join(map(str, allow)) if len(allow) else 'NA')

            print(l[0])
      print(s)
    print("NA")


      print(s)
    print("NA")

            print(i[0])
            print(s[i])
            print(spqr[i][0])
        print("NA")

            print(s)
        print("NA")


        print(*ans, sep='\n')


        print(*M, sep="\n")
        print("NA")
        
        

            print(L[i][0])
        print("NA")

        print("NA")
        print(ans)


			print(s[i])
        print('NA')
            print(i)

            print(d[0])

        print("NA")

        print("NA")
            print(num)

            print(L[i][0])
        print("NA")

                print(data[i][0])
            print("NA")
			print(s[i])
            print(i[0])

    print(an)


        print(ans)



        print(max(g_list)[1])

    print(max(b_ganri, key=operator.itemgetter(1))[0])
    

    print(d)

    print(sorted(dataset.items(), key=lambda x: x[1])[-1][0])

    print(best)

    print(b[p.index(max(p))][0])

    print(num_keep)

            
    print(ans)
            
            

    print(k)

    print(id)

    print(id)

    
    print(a)


    print(x)

	print(great_bank)


    print(ans)


    print(ban)

	print(id)

  print(max_n)


    print(num)


        print(ans)


    print(bmax)

        
        
        

    print(money[0][1])


    print(result)

    print(k)

    print(B[t][0])

    print(*ret)


    print(*an)


        print((x1*x2 - y1*y2 - z1*z2 - w1*w2), (x1*y2 + x2*y1 + z1*w2 - z2*w1), (x1*z2 - y1*w2 + x2*z1 + y2*w1), (x1*w2 + y1*z2 - y2*z1 + x2*w1))

        print(s+" "+i+" "+j+" "+k)
        print(x1 * x2 - y1 * y2 - z1 * z2 - w1 * w2, x1 * y2 + y1 * x2 + z1 * w2 - w1 * z2, x1 * z2 - y1 * w2 + z1 * x2 + w1 * y2, x1 * w2 + y1 * z2 - z1 * y2 + w1 *x2)

        print(p1, p2, p3, p4)

		print(x3, y3, z3, w3)


        print(*a)

    print(x3, y3, z3, w3)

        print(c, i, j, k)


        print(a*e-b*f-c*g-d*h,a*f+b*e+c*h-d*g,a*g-b*h+c*e+d*f,a*h+b*g-c*f+d*e)

        print(a1,a2,a3,a4)
    
        

        print(z, i, j, k)
        print(*Y)



        print(*y)



        print(*y)


        
        print(*A)

        print(x3, y3, z3, w3)



        print(' '.join(map(str,result)))

        print(*ret)

            print("NA")
            print(ans.rstrip())


    print(*an)


        print("NA")
        print(' '.join(out))

		print(*ans)


    print("NA")
  print(*[k for k, v, in ans][:5])


        print("NA")
        print(' '.join(d[0] for d in dic[:5]))

        print("NA")
            print(words[i].word, end = " ")
        print(words[-1].word)
            print(words[i].word, end = " ")
        print(words[4].word)
            
    


        print("NA")
        print(*sorted(c, key=lambda x: (-c[x], x))[:5])

        print("NA")
        print(' '.join(d[0] for d in dic[:5]))

        print("NA")
        print(" ".join([cand[0] for cand in candidates]))


            print('NA')
            print(sorted_list[0][0], end='')
                print('', sorted_list[i][0], end='')
            print()

        print("NA")
            print(ans[i][0],end="")
        print()

        print('NA')
        print(*ans)
        print(*ans[:5])

        print("NA")
        print(' '.join(ans))

    

        print("NA")
        print(*[x[0] for x in ANS][:5])


    print(res if res else 'NA')
    

        print('NA')
        print(' '.join(map(lambda x:x[0],sorted(dic[k].items(), key=lambda x: (-x[1],x[0]))[:5])))

        print("NA")
    print("%s"%(table[0].word),end = "")
        print(" %s"%(table[i].word),end="")
    print()


        print(*ans)


        print('NA')
        print(*candidate)

    print(bfs(p,graph))

    print(an)



        print(dijkstra(num_vertexes, adjacency_list, start, goal))

                print(f1)
  print(costs[2 * n - 1])


    print(min(result))


        print(search(w, h, inf, dx_dy_tuple, grid, time_sale_info, start_x, start_y, item_grid, discount_val))

        print(result0 + result1)

        print(dijkstra(w, h, grid))

            print(score)
	print("yes" if ans else "no")



        print('yes' if is_valid else 'no')

      print("no")
      print("yes")

        print(f'{max_h:.5f}')

            print(m - 1)

        print(result)

	print(ans)


  print(ans)

        print(ans)
print(sum([int(input()) for _ in range(10)]))

    
print(x)

print(x)

print(sum)

print(sum([int(input()) for _ in range(10)]))

print(a)

print(sum([int(input()) for _ in range(10)]))

print(ans)

print(sum([int(input()) for _ in range(10)]))

print(sum([int(input())for _ in"0"*10]))


print(total)

print( total )

print(n)

print(ans)

print(ans)

print(a)

print(total)

print(total)

    
print(sum)

print(sum([int(input()) for _ in range(10)]))


  
print(total)

print(sum)

print(sum(lit))

print(sum(int(input()) for i in range(10)))

print(sum([int(input()) for i in range(10)]))

print(a+b+c+d+e+f+g+h+i+j)

print(sum(x))

    
print(s)
    


print(s)

print(num)

    
print(sum)

print(a+b+c+d+e+f+g+h+i+j)


print(sum)
    

    
print(sum)


print(b)

print(a)



print(sum)

print(sum)

print(sum)

print(S)


print(sum)


    
print(x)

print(y)


print(s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10)


print(sum)

print(s)

    print(sum)

print(a+b+c+d+e+f+g+h+i+j)


print(b)


print(m)

        print(sum)
        print(sum)
print(s_date)
    

print(a)


print(x)


print(s1+s2+s3+s4+s5+s6+s7+s8+s9+s10)

print(i)


print(total)


print(sum((s1,s2,s3,s4,s5,s6,s7,s8,s9,s10)))

print(sum)


print(S)

    
print(T)

print(sum)

print(s)


print(S)


print(r)

print(t)

print(s)

 
print(sum)


print(s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10)

print(a)

print(ans)

print(sum)

print(sum([int(input()) for i in range(10)]))


print(a)

print(a)


print(sum)

    
print(b)

print(t)

    
print(s)

print(a)

    print("Open")
    print("Close")


print( ans )

   print("Open")
   print("Close")

    print("Open")
    print("Close")



    print("Open")
    print("Close")


    print("Close")
    print("Close")
    print("Close")
    print("Open")
    print("Open")



    print("Open")
    print("Close")

    print("Open")
    print("Close")


print("Open" if bl[2] or (bl[0] and bl[1]) else "Close")


    print( "Open" )
    print( "Close" )

    print("Open")
    print("Close")


    print("Open")
    print("Close")

    print("Open")
    print("Close")

    print("Open")
    print("Close")

    print('Open')
    print('Open')
    print('Close')

	print("Open")
	print("Open")
	print("Close")

        print('Close')
        print("Open")
    print("Close")

	print("Close")
	print("Open")
	print("Close")

    print('Open')
    print('Close')

    print('Open')
    print('Close')

    print("Open")
    print("Close")

print("Open" if status in [(1, 1, 0), (0, 0, 1)] else "Close")

print("Open" if status in [(1, 1, 0), (0, 0, 1)] else "Close")

print("Open" if input() in ("1 1 0", "0 0 1") else "Close")

print("Open" if b == 1 or b == 6 else "Close")

print(dic[input()])

print("Open" if input() in ("1 1 0","0 0 1") else "Close")

print('Open' if input() in ['1 1 0', '0 0 1'] else 'Close')

    print("Open")
    print("Close")

    print("Open")
    print("Close")

    print("Close")
    print("Close")
    print("Open")
    print("Open")
    print("Close")


print("Open" if b == 1 or b == 6 else "Close")

  print("Close")
  
  print("Close")
  
  print("Open")
  
  print("Open")
  
  print("Close")

  print("Open")
  print("Close")

  print("Open")
  print("Close")

    print("Open")
    print("Open")
    print("Close")

  print('Open')
  print('Close')

        print("Open")
        print("Close")
    
    

    print('Open')
    print("Close")


    print("Open")
    print("Close")

    print('Close')
    print('Open')


  print("Close")
  print("Open")

    print("Open")
    print("Close")


    print("Open")
    print("Open")
    print("Close")

    print("Open")
    print("Open")
    print("Close")

      print("Open")
      print("Close")
   print("Open")


    print('Close')

    
    print('Close')

    
    print('Open')

    
    print('Open')

    
    print('Close')


    print("Close")
    print("Close")
    print("Open")
    print("Open")
    print("Close")

    print("Close")
    print("Close")
    print("Close")
    print("Open")
    print("Open")

    print('Open')
    print('Open')
    print('Close')


    print("Close")
    print("Close")
    print("Open")
    print("Open")
    print("Close")

    print("Open")
    print("Close")

    print("Open")
        print("Open")
        print("Close")

    print("Open")
    print("Close")

    print('Open')
        print('Open')
        print('Close')

    print("Open")
    print("Open")
    print("Close")


    print('Open')
    print('Close')

        print("Close")
        print("Open")
        print("Close")
            print("Open")
            print("Close")


        print("Open")
        print("Close")
        print("Close")
        print("Open")
    print("Close")

       print("Open")
        print("Close")
        print("Close")
            print("Open")
            print("Close")

    print('Close')
    print('Close')
    print('Open')
    print('Open')
    print('Close')



     print('Open')
     print('Close')

     print("Open")
     print("Close")

    print("Open")
     print("Open")
    print("Close")

    print("Open")
    
    print("Open")

    print("Close")

    print('Close')
    print('Close')
    print('Open')
    print('Open')
    print('Close')


    print("Open")
    print("Open")
    print("Close")



    print("Open")
    
    print("Close")

    print("Open")
    print("Close")

    print("Open")
    print("Open")
    print("Close")

    print("Open")
    print("Open")
    print("Close")

    print("Open")
    print("Open")
    print("Close")

    print("Open")
    print("Close")

    print("Open")
    print("Open")
    print("Close")

    print('Open')
    print('Open')
    print('Close')


    print("Close")
    print("Close")
    print("Open")
    print("Open")
    print("Close")

    print("Open")
    print("Open")
    print("Close")

        print("Open")
        print("Close")
        print("Close")
            print("Open")
            print("Close")

    print("Open")
    print("Open")
    print("Close")

        print("Close")
        print("Open")
        print("Open")
        print("Close")


        print('Open')
        print('Close')
            print('Open')
            print('Close')
        print('Close')

    print("Open")
    print("Open")
    print("Close")


    print("Open")
    print("Close")



    print("Close")
    print("Close")
    print("Open")
    print("Open")
    print("Close")
    print("Again")

    print("Close")
    print("Close")
    print("Open")
    print("Open")
    print("Close")


                print(l[i+1])
        print(l[0])
        print(l[1])
        print(l[n])
        print(l[n-1])

                    print(h_list[idx0])
                    print(h_list[idx1])
                print(h_list[idx0])
                print(h_list[-1])
                print(h_list[idx0])
            print(h_list[min(idx0, idx1) + 1])

    print(an)


    print(get_weed(h))

            print(H[i])
            print(H[i])
            print(H[0])
            print(H[n])


                print(h[i])
                print(h[i+1])
            print(h[i+1])
                print(h[i])
            print(tmp)
            print(h[i])
            print(d)
      print(lst[i])
            print(H[i])
            print(h[i])
            print(kanade)
    print(an)


		print("NA")
	print(ans)



        print(ans)


            print('NA')
                print(i)
        print('NA')
    print(c)

        print("NA")
        print(0)
        print(ans)
    

		print("NA")
	print(ans)


                print(ans)
                    print("NA")
                print(count)
        print("NA")
    print(cnt)


        print("NA")
    print(ans)

        print("NA")
    print(cnt)

        print('NA')
    
    print(cnt)

        print("NA")
    print(cnt)



        print("NA")

    print(cnt)

        print("NA")
    print(cnt)


        print('NA')
    print(count)

            print("NA")
                print(n)
            print("NA")
            print(cnt)


        print('NA')
        print(cnt)

    print(count6174(n))

    print("NA")
  print(cnt)




        print("NA")
            print(cnt)
            print(ck)
            print("NA")
		print("NA")
		print(cnt)

        print("NA")

    print(cnt)

        print(cnt)


        print("NA")
        print(c)


        print(c)

            print("NA")
        print(ans)

    print("NA" if len(set(digits)) == 1 else solve(digits))

        print('NA')

    print(cnt)

            print(trial)
            print("NA")
        print("NA")
    print(ans)


        print("NA")

    print(cnt)


        print(ans)



    print(maxv)




            print(d[i - 1])

        print(max_s)

        print(ans)


    print(ans)


	print(ans)

  print(ans)

    print(ans)


    print(maxSalary)


    print(sarary)

    print(ans)


    print(maxv)



    print(ans)


        
    print(ans)

    
    print(max((num_of_pipe - i) * (total_length + ji) for i, ji in enumerate(accumulate(j))))


    print(maxv)




    print(maxv)

        print(".".join(map(str, maya)))
        print(".".join(map(str, sei)))

        print("%d.%d.%d.%d.%d" % (m[4], m[3], m[2], m[1], m[0]))
        print("%d.%d.%d" % (y, m, d))


        print("%d.%d.%d" % (y, m, d))
        print("%d.%d.%d.%d.%d" % (b, ka, t, w, ki))


            print(f"0.0.0.0.{d}")
        print('.'.join(map(str, ANS)))
            print(f"2012.12.{21 + d}")
                    print(f"{curr_year}.{month}.{d}")
                    print(f"{curr_year}.{month}.{d}")
                    print(f"{curr_year}.{month}.{d}")
                    print(f"{curr_year}.{month}.{d}")
            print(f'{result.year}.{result.month}.{result.day}')

            print(f'{b}.{ka}.{t}.{w}.{ki}')

        print('.'.join(map(str, ad2mayan(*t))))
        print('.'.join(map(str, mayan2ad(*t))))

        print('.'.join(map(str,[d,_k,t,w,k])))
        print('.'.join(map(str,[d.year,d.month,d.day])))

        print(".".join(ans))
        print(".".join(ans))

    print(f'{b}.{ka}.{t}.{w}.{ki}')


    print(f'{result_date.year}.{result_date.month}.{result_date.day}')


                print('NG')
            print('OK')

        print("NG")
      print("OK")

    print("OK" if u == z else "NG")


        print('NG')
        print('OK')

            print('NG')
        print('OK')

    print('OK' if sugoroku(m, d) else 'NG')

    print(ans)


        
        print(max(dp1.values()))

    print(solve(a, b))

    
    print(max(dp[n].values()))

            print('NG')
            print(*exp_list, sep='', end='')
            print(' = ', end='')
            print(v, end=' ')
            print( '(mod ', end='')
            print(p, end=')\n')

        print("NG")
        print("%s = %d (mod %d)" % (S, res, p))


        print(ans)
        print(f"{s} = {ans} (mod {mod})")


        print('%s = %s (mod %s)'%(s,n,p))
        print('NG')

        print('NG')
        print('{} = {} (mod {})'.format(exp, val, p))

            print("Yes")
            print("No")
        print("No")


        print("Yes")
        print("No")
                

    print("Yes" if cur ==5 else "No")

    print("Yes" if cur == 5 else "No" )


    print( "Yes" if cur == 5 else "No" )

            print("Yes")
            print("No")
            print("No")


        print('Yes')
        print('No')

        

	print("Yes" if ans else "No")



    print("Yes" if cur == 5 else "No") 


        print("Yes")
        print("No")




        print("Yes" if now == "B" else "No")


    print("Yes" if sta == 5 else "No")

        print('Yes')
        print('No')

	print("Yes" if ans else "No")

    print("Yes")
    print("No")

        print("Yes")
        print("No")
    


        print(ans)


        print('Yes')
        print('No')

    print("Yes" if cur == 5 else "No")
    

    print("Yes"if cur == 5 else "No")
    



        print('Yes' if v == 5 else 'No')

    print("Yes" if ans else "No")

    print("Yes" if beco == 5 else "No")

    print("Yes" if cur == 5 else "No")

    print("Yes"if cur == 5 else "No")
    




    print("Yes" if st == 5 else "No") 

        print('Yes')
        print('No')
        
        




        print("Yes")
        print("No")

        print("Yes")
        print("No")

    print("Yes" if cur == 5 else "No")


        print("Yes")
        print("No")

        print("Yes" if ans else "No")


        print("Yes")
        print("No")

        print("Yes")
        print("No")

        print("Yes")
        print("No") 

    print("Yes" if cur == 5 else "No")

        print("Yes")
        print("No")

    print("Yes" if ans else "No")

    print("Yes" if st == 5 else "No")

    print("Yes" if cur == 5 else "No")

        print("Yes")
        print("No")


    print("Yes" if cur == 5 else "No")




    print("Yes" if pt == 3 else "No")
        

    print(solve(inp))

        print('Yes')
        print('No')


    print('Yes' if a else 'No')

        print("Yes")
        print("No")    


            print(-1)
            print(0)
                print(i + 1)
            print(-1)

                print(count)
                print(-1)
        print(-1)




                print(count)
                print(-1)
        print(-1)



    print(ans)



        print(count)
        print(-1)


        print(0)
        print(-1)
            print(t+1)
        print(-1)


    print(-1)
      print(-1)
    print(cnt)

        print(-1)
            print(-1)
        print(ans)


        print(count)
        print(-1)




                print(count)
                print(-1)
        print(-1)

        print(-1)
            print(i)
        print(-1)

        print(-1)
    print(ans)


            print(-1)
            print(ans if ok else -1)


            print(operation_count)
        print(-1)

        print(makeTriangle(block_list))


        print(-1)
        
    print(result)

        print(-1)
            print(ans)
            print(-1)
    print(result)

    print(solve(n, heights))

        print(-1)
        
                print(count)
                print(-1)
        print(Answer)




        print(0)
        print(-1)
            print(t+1)
        print(-1)

        print(cnt)
        print(-1)


        print(count)
        print(-1)
            



        print(cnt)
        print(-1)

        print(0)
        print(-1)
            print(t+1)
        print(-1)


        print(count)
        print(-1)



        print(cnt)
        print(-1)




        print(cnt)
        print(-1)




        print(0)
        print(-1)
            print(t+1)
        print(-1)

        print(cnt)
        print(-1)

        

        print(cnt)
        print(-1)

            print(testnum)
        print(-1)

        print(-1)
            print(ans)
            print(-1)
        print("-",end="")
    print(num)


    print(p + str(a) + str(abs(k * 1.0 / (1 << 7) - a))[1:])


    print(pos*(up+low))


    print(t[:i])


    print(ans)


    print(tf + str(sumx) + "." + "0")
    print(tf + str(sumx + sumy))

            print('-0.0')
            print(f'{r:.01f}')
            print(r)

        print(ans)


    print(sign + str(float(integer + fraction)))


    print(ans)



    print(('-' if inp[0] == '1' else '') + str(res))

            print('NA')
            print(*result)

        print(*res)
        print("NA")



        print(max_r)

    print(maxv)



    print(m)


					print(k)
    print(ans)


    print(maxDiv)

    print(maxv)

    print(maxv)



    print(maxv)

    print(maxv)




    print(res)

    print(res)

    print(res)

    print(ans)

        
        print(cnt)

	print("NA" if ans == n else ans)


            print(result)
            print('NA')

                print(k)
        print("NA")

        print("NA")
        print("%d"%(ans))


        print(dijkstra(n, dual_graph.dual_graph, 0))

    print(max(D))


            print('Yes')
            print('No')

        print("Yes")
        print("No")



    print(a - b)


    print(a - b)

    print(a-b)

        print("{0}".format(temp[0] - temp[1]))
        

    print(a-b)

	print(data[0]-data[1])

    print(a)

    print(a - b)

	print(a-b)


  print(a - b)

    print(a-b)

    print(a-b)

        print(a-b)

print(a1-b1)
print(a2-b2)
print(a3-b3)
print(a4-b4)
print(a5-b5)
print(a6-b6)
print(a7-b7)


    print(a-b)

    print(a-b)

  print(a-b)

  print(a-b)

    print(a-b)

  print(a-b)

    print(a-b)

    print(a-b)
  print(a-b)

  print(a - b)

    print(a-b)


    print(abs(X[0]-X[1]))

    print(a-b)

print(a1-b1)
print(a2-b2)
print(a3-b3)
print(a4-b4)
print(a5-b5)
print(a6-b6)
print(a7-b7)

  print(a-b)

    print(a - b)
    



print(a1-b1)
print(a2-b2)
print(a3-b3)
print(a4-b4)
print(a5-b5)
print(a6-b6)
print(a7-b7)

    print(w)
    print(hi - low)

print(x-a)
print(y-b)
print(z-c)
print(r-d)
print(p-e)
print(q-f)
print(s-g)


    print(ai-bi)

        print(ai-bi)
        print(ai-bi)

    print(a-b)



    print(a-b)

    print(a - b)

        print(b-a)
        print(a-b)
    print(max(I)-min(I))

    print(a-b)
   print(a - b)


    print(y)

    print(a-b)
    


print(a1-b1)
print(a2-b2)
print(a3-b3)
print(a4-b4)
print(a5-b5)
print(a6-b6)
print(a7-b7)

    print(a - b)

    print(a - b)
    print(int(x-y))
    print(t-s)

print(c1)
print(c2)
print(c3)
print(c4)
print(c5)
print(c6)
print(c7)


    print(a-b)

    print(a-b)


    print(a - b)

        print(a[0]-a[1])
        
    print(a-b)

    print(a-b)


print(s1)
print(s2)
print(s3)
print(s4)
print(s5)
print(s6)
print(s7)

    print(ai[i]-bi[i])
    print(x)
    
    print(K)

    print(A[i]-B[i])


print(a1-b1)
print(a2-b2)
print(a3-b3)
print(a4-b4)
print(a5-b5)
print(a6-b6)
print(a7-b7)


    print(a-b)
    print(x)
    print(a-b)

    print(l[x])


    print(a-b)


    print(a-b)
    print(a-b)

    print("%d"%(a-b))
        
 print(a-b)


print(a1-b1)
print(a2-b2)
print(a3-b3)
print(a4-b4)
print(a5-b5)
print(a6-b6)
print(a7-b7)

    print(ai-bi)

    print(a-b)

    print(int(((a-b)**2)**(1/2)))
    

    print(a-b)
    
    print(a-b)

   print(str(a-b))

        print(b-a)
        print(a-b)
    print(H-L)

    print(a-b)
print(x[0]-y[0])
print(x[1]-y[1])
print(x[2]-y[2])
print(x[3]-y[3])
print(x[4]-y[4])
print(x[5]-y[5])
print(x[6]-y[6])


print(a1-b1)
print(a2-b2)
print(a3-b3)
print(a4-b4)
print(a5-b5)
print(a6-b6)
print(a7-b7)

    print(a-b)


        print(6000*n)
        print(4000*n)
        print(3000*n)
        print(2000*n)



    print(price * n)



print(tickets[0])
print(tickets[1])
print(tickets[2])
print(tickets[3])

	print(n*ticket[t])

    print(n*V[t])

    print(n*v[t])


    print( v[t] * n )

    print(toi[t]*n)

    print(tiket.get(t) * n)
    

    print(l[t]*n*1000)


	print(n*ticket[t])


    print(n * ticket[t])

        print(6000*n)
        print(4000*n)
        print(3000*n)
        print(2000*n)
        


    print(n*value[t])

    print(n * V[t])

    print(n*ckt[t])

  print(l[t - 1] * n)

        print(n*6000)
        print(n*4000)
        print(n*3000)
        print(n*2000)

    print(tickets[t]*n)

  print(p[t-1]*n*1000)

        print(6000*_in[1])
        print(4000*_in[1])
        print(3000*_in[1])
        print(2000*_in[1])

    print(a)

    print(p[a] * n)

	print(n*ticket[t])

    print(p[t]*n)

    print(n*V[t])





        print(6000*n)
        print(4000*n)
        print(3000*n)
        print(2000*n)
        

    print(n*ticket[t])

    print(n*V[t])

    print(s*6000)
    print(s*4000)
    print(s*3000)
    print(s*2000)

    print(price[t] * n)

    print(n*V[t])

    print(n*V[t])

    print(price[t] * n)

        print(n*6000)
        print(n*4000)
        print(n*3000)
        print(n*2000)
  print(p[t-1]*n*1000)

        print(6000*n)
        print(4000*n)
        print(3000*n)
        print(2000*n)


    print(price[t] * n)


    
    print(P[t-1]*num)

    print(pay[a-1]*b)

    print(d[t]*n)

  print(x)

    
print(W)
print(X)
print(Y)
print(Z)


print(change(t1) * n1)
print(change(t2) * n2)
print(change(t3) * n3)
print(change(t4) * n4)

    print(A*6000)
    print(A*4000)
    print(A*3000)
    print(A*2000)


    print(B*6000)
    print(B*4000)
    print(B*3000)
    print(B*2000)


    print(C*6000)
    print(C*4000)
    print(C*3000)
    print(C*2000)


    print(D*6000)
    print(D*4000)
    print(D*3000)
    print(D*2000)


    print(t)
    print(t)

    print(t)
    
    print(t)
    print(t)

    print(t)
    
    print(t)
    print(t)

    print(t)
    

    print(t)
    print(t)

    print(t)


    print(X)

        print(6000*ni)
        print(4000*ni)
        print(3000*ni)
        print(2000*ni)


    print(b*list[a])
    



        print(6000*n)
        
        print(4000*n)
        
        print(3000*n)
    
        print(2000*n)

        print(money)
        print(money)
        print(money)
        print(money)
      print(n * 6000)
      print(n * 4000)
      print(n * 3000)
      print(n * 2000)


        print(f'{6000*n}')
        print(f'{4000*n}')
        print(f'{3000*n}')
        print(f'{2000*n}')
    


print(keisan(t1,n1))
print(keisan(t2,n2))
print(keisan(t3,n3))
print(keisan(t4,n4))

        print(6000 * n)
        print(4000 * n)
        print(3000 * n)
        print(2000 * n)

        print(6000*n)
        print(4000*n)
        print(3000*n)
        print(2000*n)

       print(money)
       print(money)
       print(money)
       print(money)
        print(f"{S*n1}")
        print(f"{A*n1}")
        print(f"{B*n1}")
        print(f"{C*n1}")


        print(6000*s)
        print(4000*s)
        print(3000*s)
        print(2000*s)
        print(6000*b)
        print(4000*b)
        print(3000*b)
        print(2000*b)

        print(b*6000)
        print(b*4000)
        print(b*3000)
        print(b*2000)



print(c1)
print(c2)
print(c3)
print(c4)




    print(n)

            print(a[-1]*6000)
            print(a[-1]*4000)
            print(a[-1]*3000)
            print(a[-1]*2000)
        
        print(n*6000)
        print(n*4000)
        print(n*3000)
        print(n*2000)

   print(n*tic[t])

        print(6000*I[i+1])
        print(4000*I[i+1])
        print(3000*I[i+1])
        print(2000*I[i+1])
    print(n1*6000)
    print(n1*4000)
    print(n1*3000)
    print(n1*2000)

    print(n2*6000)
    print(n2*4000)
    print(n2*3000)
    print(n2*2000)

    print(n3*6000)
    print(n3*4000)
    print(n3*3000)
    print(n3*2000)

    print(n4*6000)
    print(n4*4000)
    print(n4*3000)
    print(n4*2000)    

        print(ni[i]*6000)
        print(ni[i]*4000)
        print(ni[i]*3000)
        print(ni[i]*2000)
     print(a)
    print(K)

        print(n1)
        print(n2)
        print(n3)
        print(n4)
    print(x)
    print(n*ticket[t])


print(l[0])
print(l[1])
print(l[2])
print(l[3])

    print(n*ticket[t])


    print(n*x[t])

        print(6000*b)
        print(4000*b)
        print(3000*b)
        print(2000*b)
    print(n*x[t])

        print(n1)
        print(n2)
        print(n3)
        print(n4)
        
    print(dic[t] * n)

      print(n * 6000)
      print(n * 4000)
      print(n * 3000)
      print(n * 2000)

    
print(t1*n1)
print(t2*n2)
print(t3*n3)
print(t4*n4)

        print(6000*ni)
        print(4000*ni)
        print(3000*ni)
        print(2000*ni)

        print(n*6000)
        print(n*4000)
        print(n*3000)
        print(n*2000)


    print(price)


        print(int(ans2))
        print(int(ans1))


    print(min(cost1, cost2))

	print(min(sm, ((x*b+y*p)*4)//5))


    print(int(min(x*b+y*p,(max(b,5)*x+max(p,2)*y)*0.8)))


    print(min(x*b+y*p, (x*max(b, 5)+y*max(p,2))*4//5))


    print( min( (x*b + y*p), ( x*max(b, 5) + y*max(p, 2) ) * 4 // 5 ) )

    print(int(min(x*b + y*p, (x*max(b, 5) + y*max(p, 2))*0.8)))

    print(an)


    print(min(x*b + y*p, (x*max(b,5) + y*max(p,2))* 4 // 5))


	print(min(sm, ((x*b+y*p)*4)//5))



        print(int((x*b + y*p)*0.8))
        print(min(keep, keep2))


	print(min(goukei, ((x*b+y*p)*4)//5))
    


    print(ans)



    print(min(x * b + y * p, (x * max(b , 5) + y * max (p, 2)) * 4 // 5))


  print(math.floor(min(ans, (max(5, b) * x + max(2, p) * y) * 0.8)))

    print(min(x * b + y * p, (x * max(b, 5) + y * max(p, 2)) * 4 // 5 ))

            print(int((x*5 + y*2)*0.8))
            print(total)
            print(int((b*x + y*2)*0.8))
            print(total)
            print(int((x*5 + p*y)*0.8))
            print(total)
        print(int(total*0.8))

    print(min(b*x+p*y,(x*max(b,5)+y*max(p,2))*4//5))

        print(int((x*b + y*p) * 0.8))
            print(regular_price)
            print(discount) 


        print((x*b + y*p)*4//5)
            print(normal)
            print(discounted)

    print(min(x * a + y * b, int(0.8 * (x * max(5, a) + y * max(2, b)))))

    print(cost * 4 // 5)
  print(min(cost, (x * max(5, b) + y * max(2, p)) * 4 // 5))

        print(int((x*b+y*p)*0.8))
        print(min(keep,keep2))

    print(min(x*b+y*p, (x*max(b,5)+y*max(p,2))*4//5))

    print(int(min(x*b + y*p, (x*max(b, 5) + y*max(p, 2))*0.8)))


    print(min(x*b+y*p, (x*max(b,5)+y*max(p,2))*4//5))


        print(int(normal_sum * 0.8))
        
        print(int(min(normal_sum, discounted_sum)))

        print(s)
        print(pr)

        print(ans*4//5)
        print(ans)



print('\n'.join(ans))

	print(min(A))

    print(ans[i])


        print(s)

        print(min(s,int(u * 0.8)))

    
    print(price)


    print(f)


    print(min(sa,(x*b+y*p)*4//5))
    

    print(int(min(x*b+y*p, (x*max(b, 5) + y*max(p, 2))*0.8)))
    


    print(min(x*b + y*p,int((x*max(b,5) + y*max(p,2))*0.8)))

        print((x*b+y*p)*8//10)
            print((x*5+y*2)*8//10)
            print(x*b+y*p)
            print(((x*b+y*2)*8//10))
            print(x*b+y*p)
            print(((x*5+y*p)*8//10))
            print(x*b+y*p)

	print(min(money, ((x*b+y*p)*4)//5))


        
    print(int(ans))

    print(min(b * x + p * y, (max(b, 5) * x + max(p, 2) * y) * 4 // 5))

        print(int(more_buy_price))
        print(int(only_use_price))

        print(yen1)
        print(yen2)


    print(ans)

    print(min(x*b+y*p,(x*max(b,5)+y*max(p,2))*4//5))

    print(min(x*b+y*p,(x*max(b,5)+y*max(p,2))*4//5))
    

    print(min(x * b + y * p,(x * max(b, 5)+y * max(p ,2)) * 4 // 5))
    

    print(min(x*b + y*p , (x * max(b,5) + y * max(p,2)) *4 // 5))

        print(min(total0, total1))

    print(min(x*b+y*p,(x * max(b,5) + y * max(p,2)) * 4//5))


    
  print(int(ans))

    print(min(l1,l2))

    print(ans)



    print(totalprice if totalprice <= d else d)
    


    print(l)

    print(calc_min_price(x,y,b,p))

        
    print(int(res))

	
	print(min(ans,ans2))	

        print(normal)
        print(discount)
        

    print(cost)


    print(min(x*b+y*p, (x*max(b,5)+y*max(p,2))*4//5))
    

    print(min(x*b+y*p,(x*max(b,5)+y*max(p,2))*4//5))


    print(min(x*b + y*p, (x*max(b,5) + y*max(p,2)) *4//5))

    print(min(b*x+p*y, (max(b, 5)*x+max(p, 2)*y)*8//10))


    print(min(pr, (x*b+y*p)*4//5)) 

    print(min(x * b + y * p,(x * max(b, 5) + y * max(p, 2)) * 4 // 5 ))

    print(min(x*b+y*p,(x*max(b,5)+y*max(p,2))*4//5))

    print(min(x * b + y * p,(x * max(b, 5) + y * max(p, 2)) * 4 // 5))

    print(min(x*b + y*p,(x * max(b,5) + y * max(p,2)) * 4//5))

	print(min(sm, ((x*b+y*p)*8)//10))

        print(int(sumA))
        print(int(min(sumB, sumC)))
        print(int(min(sumD, sumE)))
        print(int(min(sumF, sumG)))

            print(int(X*B+Y*P))
            print(min(old, new))


    print(int(min(f)))

	print(min(sm, ((x*b+y*p)*4)//5))


    print( ans )        



        print(count)
        print("NA")


    print(an)


        print("NA")
            print(2)
            print(N - count + 1)



    

        print("NA")
            print(2)
            print(n-count+1)

    print([1+len([i for i in a if i>0]),"NA"][max(a)<2])

        print("NA")
        print(co+1)

	print(one+many+1 if many > 0 else "NA")

	print(one+many+1 if many > 0 else "NA")


            print('NA')
            print(n + 1 - int(a.count(0)))

    print(tmp2 + 1)
    print("NA")

        print(ans)
        print("NA")



        print("NA")
    print(ko - line.count("0") + 1)

        print("NA")
        print(cnt + 1)



    print("NA")
    print(1+len([i for i in a if i>0]))

        print(N-K.count(0)+1)
        print("NA")

        print("NA")
        print(N - l.count(0) + 1)


        print("NA")
        print(N-cnt0+1)



        print("NA")
        print(N - l.count(0) + 1)

        print("NA")
    print(n - p.count(0) + 1)

    print("NA")
  print(len([x for x in a if x > 0]) + 1)

        print(2)
        print("NA")
        print(n - k.count(0) + 1)


    print("NA")

  print(sum(list(map(bool, klst))) + 1)

        print(2)
        print("NA")
        print(n-data.count(0)+1)


        print(ans)


    print(2)
    print('NA')
    print(n-data.count(0)+1)

        print(N - ki.count(0) + 1)
        print('NA')

        print(2)
        print("NA")
        print(n-data.count(0)+1)


        print("NA")
        print(n - Ko.count(0) + 1)

    print([1+len([i for i in a if i>0]),"NA"][max(a)<2])

        print('NA')
        print(n-t+1)


        print('NA')
        print("NA")
    print(sum(i>0 for i in remain) + 1)

        print("NA")
        print(len(K)+1)
    print(ans+1)

            print('NA')
            print(sum([1 for k in k_list if k > 0]) + 1)

    print("NA")
  print(len([x for x in a if x>0])+1)

        print("NA")
        print(N -t+1)

        print(N-K.count(0)+1)
        print("NA")

        print("NA")
        print(1 + len([i for i in t if i > 0]))

    print("NA")
  print(len([x for x in a if x>0])+1)

        print(k + 1 - s)
        print('NA')

    print(one + many + 1 if many > 0 else "NA")



    



        print("NA")
        print(N - count0 + 1)

    print(a+b+1 if b > 0 else "NA")

        print("NA")
        print(N-b+1)

        print("NA")
        print(N - zerocnt + 1)
    

        print("NA")
        print(sum([int(i != 0) for i in a]) + 1)

        print("NA")
        print(n + 1)



        print('NA')
        print(n - zeroItem + 1)


        print("NA")
        print(N-zeroCnt +1)              

        print("NA")
        print(N - cnt2 + 1)





        print('NA')
        print(N-lesszero+1)

        print('NA')
        print(N-b+1)


	print(one+many+1 if many > 0 else "NA")

        print("NA")

        print(ans + 1)

    print("NA")
  print(len([x for x in a if x>0])+1)

        print(count)

        print(len(k)+1)
        print('NA')

            print(f'{i} ', end='')
        print(table)


    print(B)

    print(*ans, end=" ")
    print(t)

    print(' '.join(map(str,sorted(a))),c)

    print(o)

    print(*p)

        print(cards[i], end=" ")
    print(yama)
    
            
            
            

        print(*ans, sep=' ')


    
    print(*sorted(L), F)
        
    

        print(p,end = " ")
    print(g)

        print(maisu[i], end=" ")
    print(ba)

  print(' '.join(map(lambda s: str(s), players)))

    print(*P)

        print(*player_cards)

    print(*ANS)


  print(" ".join(map(str,a+[b])))

    print(' '.join(map(str, hands)), field)

    print(' '.join(map(str, sorted([len(m) for m in mens]))), len(p))

  print(*lst)

    print(' '.join(str(h) for h in hand))


        print(e, end=" ")
    print(sum(F.values()))


    print(result)

    print(' '.join([str(p) for p in players]))

        print(ans)


	print(cnt1+cnt2+cnt3)

    print(b+d+c//3)

        print(ans)


    print(t)

	print(ans)

  print(solve(c, a, n))



    print(cnt)

    
    print(teams)


        print(num_teams)

    print(ans)


    print(can + cca + ccc)

        
    print(ans)
    
        
        
        


    print(res)

    print(count)

    print(ans)

    print(ans)

    print(team_time_list.index(max(team_time_list)) + 1)

    print(time.index(max(time)))
 

print(1 + appearance.index(max(appearance)))

print(T.index(max(T)) + 1)



print(ans)



    print(on_tv.index(max(on_tv)))


                    print('NA')
                    print(0)
                print('NA')
            print(right)

        print(r)

        print(' '.join(map(lambda x: str(M[x]), CP_points[q-3])))
        print("NA")

        print('NA')
        print(*[id[i] for i in min_space[qi][1]])

        print(p)
print(*ans, sep='\n')

        print(path)
        print(path) 
        print( path )
print(*ans, sep='\n')

        print(p)
        print(p)
        print(path)
        print(p)
        print(path)
        print(path)
        print(p)
print(*ans, sep='\n')

    print(*sorted(Ans), sep='\n')


        print(path)
        print(score)
        print(path)
        print(path)
        print(path)
        print(p)
        print(path)
        print(path)
        print(path)
        print(p)
        print(c)
        print(path)
        print(path)
print(*ANS, sep='\n')



        print(p)
        print(path)
        print(Patterns)
        print(score)
        print(p)
        print(path)
        print(route)
        print(path)
        print(path)
        print(path)
        print(c)
        print(path)
        print(path)
        print(path)
    print(s)

    print(game)

print(*sorted(dic[(j, y)]), sep="\n")

        print(combo)
        print(*c)

    print(*[sum([blst[t] * e for t, e in works[i]]) for i in range(1, n + 1)])
    print(*ANS)


    print(" ".join(map(str,r)))

        print(*ans, sep=' ')


    print(" ".join(str(x) for x in c[i]))

  print(res)


	print(ans)

	print(s)

    print(a)

        print(ans)


    print(ans)


	print(*ans[::-1], sep='')

  print(ans)

    print(a)

    print( res )


            print(ans[index], end="")
            print(keta[index], end="")
    print("")
    

    print(*ans, sep='')


  print(ans)

    print(''.join(ans[::-1]))
                print(ans[j], end='')
    print()
        

	print(ans)

    print(res)

    print(ans)

    print(''.join(ans[::-1]))
    print(s)

  print(res)

    print(ans)

            print(end='')
            print(A[i],end='')
            print(LIST[i],end='')
    
    print('')

    print(pow(m,n))


  print(ans)


        print(num_str)

    print(ans)
    




    

        
    


        print(ans + str(a if a != 0 else ""))


    print(ans)

    print(ans)


        print(score + 1)
  
  print("NA")
    print(solve(s,d))





	print(calc(s, d))

    print(solve(s,d))






        print(ans)


    print(ans)


    print(dist(s,d))

        print(solve(s, d))

    print(ans)



    print("%d"%(ans))


    print("%d"%(ans))


    print(-mcf.flow(0, M+W+1, min(M, W)))

        print(max(dp2))

  
    print(score(rest, min(m, w) - 1))
  
    print(max(DP[-1]))



    print("%d"%(ans))


        print(max(dp[-1]))

        print(*result)

        print(*map(lambda x: x+1, res))
    print(U[t])



        print(bfs(num_vertexes, adjacency_list, start, goal))

        print(idom_r if idom_r != 1 else r)


print(d*c)

print(d*c)

print(d*c)

print(d*c)

print(d*c)

print(d*c)

print(str(d * c))

print(d * c)

print(d*c)

print(d*c)

print(a*b)

print(a*b)

print(c * t)

    print(d * c)


print(b*c)

print(a * b)

print(d*c)

print(d * c)

print(a*b)

print(A*B)

print(d*c)

print(d*c)

print(d * c)

print(a*b)

print(d * c)

print(d * c)

print(d * c)

print(d*c)

print(A*B)

print(n)

print(d*c)

print(d*c)

print(d * c)

print(d * c)

print(a*b)

print(a*b)

print(o.mul(*map(int,input().split())))

print(a*b)

print(d*c)

print(a*b)

print(a*b)

print(d*c)

print(a*b)


print(a*b)

print(d*c)

print(b*c)

print(a*b)

print(d * c)

print(d*c)

print(d*c)

print(d * c)

    print(d * c)

print(w)

print(d*c)

print(d*c)


print(n)



print(a*b)

print(d * c)


print(d * c)

print(eval(input().replace(" ", "*")))

print(eval(input().replace(' ','*')))


print(d * c)

print(d * c)

print(a*b)

print(a * b)

print(d*c)

    print(1)
    print(0)

    print(1)
    print(0) 


print( ans )

    print(1)
    print(0)



    print(1)
    print(0)

    print(1)
    print(0) 

    print(1)
    print(0)

    
print(int(money>=1000))


    print(1)
print(0)

print(int(s >= 1000))


print(1 if sum >= 1000 else 0)

print(1 if s >= 1000 else 0)



    print('1')
    print('0')


print(res)

print(1 if s >= 1000 else 0)

    print(1)
    print(0)

    print(1)

    print(0)

    print(1)
    print(0)

	print("0")
	print("1")

print(int(a+b*5+c*10+d*50+e*100+f*500>=1000))

print(1 if sum([x*y for x,y in zip(list(map(int, input().split())),[1,5,10,50,100,500])])>=1000 else 0)

print(ans)

print(1 if a+5*b+10*c+50*d+100*e+500*f>=1000 else 0)

print(1 if s >= 1000 else 0)

print(1 if sum((i * j for i , j in zip((1, 5, 10, 50, 100, 500), map(int, input().split())))) >= 1000 else 0)

    print(1)
print(0)

    print('1')
    print('0')

    print(1)
    print(0)


print(1 if t>=1000 else 0)

print(1 if sum >= 1000 else 0)

    print("1")
    print("0")

print(1 if sum([x * y for (x, y) in zip(c, a)]) >= 1000 else 0)

  print("1")
  print("0")

print(1 if s >= 1000 else 0)

print(1 if sum >= 1000 else 0)

  print(1)
  print(0)

  print(1)
  print(0)

    print(1)
    print(0)

  print(0)
  print(1)

    print("0")
    print("1")

    print(1)
    print(0)

print(1 if sum >= 1000 else 0)

print(1 if s >= 1000 else 0)

print(1 if s>=1000 else 0)

    print(1)
    print(0)

    print(1)
    print(0)

    print(1)
    print(0)

    print('1')
    print('0')

    print(1)
    print(0)


    print(1)
    print(0)

	print(1)
	print(0)


print(1 if sumarry >= 1000 else 0)

print(1 if t >= 1000 else 0)


    print(1)
    print(0)


    print(1)
    print(0)

    print(1)
    print(0)


print(1 if c1*1+c5*5+c10*10+c50*50+c100*100+c500*500>=1000 else 0)

    print(1)
    print(0)

    print(1)
    print(0)

    print(1)
    print(0)

    print(1)
    print(0)

    print(1)
    print(0) 

    print(1)
    print(0)

    print("1")
    print("0")

    print(1)
    print(0)

    print('1')
    print('0')

    print(1)
    print(0)

print(result)

    print("1")
    print("0")

    print(1)
    print(0)


        print(1)
        print(0)

print(G)


            print(p)
            print(k % p)
        print(k)
    
        


    print( ans if ans > 0 else P )


    print(ans if ans != 0 else p)

    print((K - 1) % P + 1)

  print(k[i])

        print(K)
            print(P)
            print(K % P)



    print(ans)


    print(ans if ans != 0 else p)

        print(p)
        print(k % p)



    print(an)


    print(A)

	print(p if k == 0 else k)


    print(ans if ans != 0 else p)


    print((K - 1) % P + 1) 

  print((K-1) % P + 1)


        print(p)
        print(k%p)

    print(p if k%p==0 else k%p)

        print(P)
        print(K%P)

        print(ans)


    print((a-1)%b+1)

	print(p if k == 0 else k)

  print((k - 1) % p + 1)

    print(ans if ans != 0 else p)

        print(p)
        print(k % p)


    print((K-1)%P + 1)


    print(r if r != 0 else p)

    print(ans)

    print(b)
    print(a%b)

    print(ans if ans != 0 else P[i])


    print(b)
    print(a%b)

    print(P)
    print(K % P)

    print(k % p)
    print(p)

  print( p if (k % p)==0 else (k % p))

    print((K-1)%P + 1)


    

    print(p if k == 0 else k)

  print(answer[i])
    

    print(a%b)
    print(b)



    print((K-1)%P + 1)

    print(P)
    print(K%P) 
  print(V[i-1])

    print((K-1)%P + 1)

        print(k % p)
        print(p)

   
   
        

        print(k % p)
        print(p)

    print(k % p)
    print(p)

    print(p if k == 0 else k)

  print(winner)
  print(winner)
    print(ans)
    print(b)
    print(int(a%b))

    print(p if k==0 else k)

        print(P)
        print(ans)


  print((k - 1) % p + 1)

        print(b)
        print(a%b)

    print((a-1)%b+1)

    print(k % p) if k % p != 0 else print(p)


		print(P)
		print(tmp)


        print(p)
        print(k % p)


    print((K - 1) % P + 1)

    print(k%p if k%p != 0 else p)

    print((k-1) % p + 1)


        print(p)
        print(ans)

    print((K - 1) % P + 1)

        print(P)
        print(K)

    print((k - 1) % p + 1)

    print((K - 1) % P + 1)
    




        print(p)
        print(k%p)

    print((k-1)%p+1)

    print((K - 1) % P + 1)
    

    print((K-1) % P+1)


    print((K-1) % P+1)


        print(k if k != 0 else p)

        print(k if k != 0 else p)

    print(ans[i])

        print(games[1] if result == 0 else result)


        print(p)
        print(k % p)


	print(P if K == 0 else K)

    print((k-1)%p+1)

    print(ans)

    print(p if ans==0 else ans)

print(' '.join(['{0}:{1:02d}'.format(i // 60, i % 60) for i in sorted(set(bus))]))




print(*['%d:%02d'%(x//60,x%60)for x in sorted(set(t))])

    print(" ".join([timetable[key] for key in keys]))

print(*["{0}:{1:02d}".format(i[0],i[1]) for i in j])

print(*[("{}:{:02}".format(*i)) for i in sorted(tbl)])

print(*list(map(lambda t:str(t[0])+":"+str(t[1]).zfill(2), agg)))

print(" ".join(time))

print(' '.join(['{0}:{1:02d}'.format(i // 60, i % 60) for i in sorted(set(bus))]))






            print(times[i],end="")
            print(" " + str(times[i]),end="")
            

print("")
        
        
        


print(str(result[0][0])+":"+'{0:02d}'.format(result[0][1]),end="")
    print(" "+str(result[i][0])+":"+'{0:02d}'.format(result[i][1]),end="")
print()


print(*L)



    print(str(u[0][0])+":0"+str(u[0][1]),end = "")
    print(str(u[0][0])+":"+str(u[0][1]),end = "")

            print(" "+str(u[i][0])+":0"+str(u[i][1]),end = "")
            print(" "+str(u[i][0])+":"+str(u[i][1]),end = "")

        print()
        print(" "+str(u[len(u)-1][0])+":0"+str(u[len(u)-1][1]))
        print(" "+str(u[len(u)-1][0])+":"+str(u[len(u)-1][1]))


print(*M)

print(' '.join(ANS))


    print(time_table_list[0][0], end=':')
    print(f'{time_table_list[0][1]:02d}', end='')
        print('', t[0], end=':')
        print(f'{t[1]:02d}', end='')
    print()

print(out.rstrip(" "))


print(' '.join(['{0}:{1:02d}'.format(i // 60, i % 60) for i in sorted(set(v))]))


print(' '.join(ans))


print(*mixed)

print(results)


print(ans * 100)


print(ans*100)




    print(100*f)

    print(100 * min_cost)

print(min(a[-1], n - a[0], min([a[i] + n - a[i + 1] + min(a[i], n - a[i + 1]) for i in range(m - 1)])) * 100 if m > 1 else min(a[0], n - a[0]) * 100)

print(ans*100)


print(ans*100)


print(ans*100)




print(min(dist) * 100)

print(100*dist)
    


print(100 * dist)

print(ans)


        print(cache[c])
        print('not found')

        print(0)
            print(depth)
        print(8)


    print(numope)

        print(bfs(p_list))

            print(cnt)
            print(cnt)
        print(0)
    print(minimum)

        print(ans)

        print(score)
    print(s.step)
    


    print(search(p, 0))

    print(*map(lambda x: exemption[x], question), sep = '\n')

        print(ans)


print("\n".join("1" if n in students else "0" for n in map(int, sys.stdin.readline().split())))

print("\n".join("1" if q in st else "0" for q in map(int,input().split())))


        print(s[x])


        print(s[x])


        print(0)
        print(1)


        print(1)
        print(0)


    print('\n'.join(['1' if q in res_list else '0' for q in q_list]))


        print(1)
        print(0)


  print(int(q in lst))


        print(result)

    print(int(i in a))

        print("1")
        print("0")

        print(1)
        print(0)

        print(1)
        print(0)


    print(int(q in arr))

        print(1)
        print(0)
        

    print(int(q in exem))

    print(1 if i in s else 0)

    print(1 if qi in s else 0)

print(ans)



print(ans)


print(ans)

print(max_size)


    print(dp[-1])


print(dp[-1])


print(dp2[N])

print(dp[n])

print(max(distance))

    print(-1)
    print('inf')
    print(ans)


        print(H[r][t])
            print(H[r][t],H[r][T])
            print(H[r][t],H[R][t])
        print(H[r][t],H[R][t],H[r][T],H[R][T])

            print(p)
            print(p, p+5)
            print(p, p+1)
            print(p, p+1, p+5, p+6)

        print(calcID(r, t))
        print(str(calcID(r, t)) + ' ' + str(calcID(r, t + 1)))
        print(str(calcID(r, t)) + ' ' + str(calcID(r + 1, t)))
        print(str(calcID(r, t)) + ' ' + str(calcID(r + 1, t)) + ' ' + str(calcID(r, t + 1)) + ' ' + str(calcID(r + 1, t + 1)))

            print(p)
            print(p, p+1)
            print(p)
            print(p, p+5)
            print(p, p+1)
            print(p, p+1, p+5, p+6)    

        print(p1)
        print(p1, p3)
        print(p1, p2)
        print(p1, p2, p3, p4)


        print(a)
        print(a,b) 
        print(a,c)
        print(a,b,c,d)




        print(p1)
        print(p1, p3)
        print(p1, p2)
        print(p1, p2, p3, p4)


            print(point)
            print(point, point + 5)
            print(point, point + 1)
            print(point, point + 1, point + 5, point + 6)

        print(r // 100 + t // 30 * 5)
        print(r // 100 + t // 30 * 5, (r//100 + t //30 * 5) + 5)
        print(r // 100 + t // 30 * 5, ((r // 100 + 1) + t // 30 * 5))
        print(r // 100 + t // 30 * 5, ((r // 100 + 1) + t // 30 * 5), r // 100 + t // 30 * 5 + 5, (r//100 + t //30 * 5) + 6)

            print(t//30*5 + r//100)
            print(*res)
            print(*res)
            print(*res)


            print(ans[i], end="")
            print(ans[i], end=" ")


    print("")

            print(p)
            print(p, p+5)
            print(p, p+1)
            print(p, p+1, p+5, p+6)


                print(p)
                print(p, p + 5)
                print(p, p + 1)
                print(p, p + 1, p + 5, p + 6)

    print(ans)

        print(getID(r, t))
        print(getID(r, t), getID(r, t + 1))
        print(getID(r, t), getID(r + 1, t))
        print(getID(r, t), getID(r + 1, t), getID(r, t + 1), getID(r + 1 , t + 1))


        print(int(s+x))
        print(int(x+s),int(x+s+5))
        print(int(x+s),int(x+s+1))
        print(int(x+s),int(x+s+1),int(x+s+5),int(x+s+6))

            print(p)
                print(p,p+5)
                print(p,p+1)
                print(p,p+1,p+5,p+6)


            print(ans[i], end="")
            print(ans[i], end=" ")


    print("")


        print(a)
        print(a,b) 
        print(a,c)
        print(a,b,c,d)


            print(table[a][b])
            print(table[a][b], table[a+1][b])
            print(table[a][b], table[a][b+1])
            print(table[a][b],table[a][b+1],table[a+1][b],table[a+1][b+1])
            
        


        print(clc(rr, tt))
        print(clc(rr, tt), clc(rr, tt + 1))
        print(clc(rr, tt), clc(rr + 1, tt))
        print(clc(rr, tt), clc(rr + 1, tt), clc(rr, tt + 1), clc(rr + 1, tt + 1))



            print(p)
            print(p, p+5)
            print(p, p+1)
            print(p, p+1, p+5, p+6)


            print(position[r,t])
            print(position[r,t1], position[r,t2])
            print(position[r1,t], position[r2,t])
            print(position[r1,t1], position[r2,t1], position[r1,t2], position[r2,t2])



            print(p)
            print(p,p+5)
            print(p,p+1)
            print(p,p+1,p+5,p+6)

            print(point)
            print(point,point+5)
            print(point,point+1)
            print(point,point+1,point+5,point+6)

            print(p)
            print(p, p+5)
            
            print(p, p+1)
            print(p, p+1, p+5, p+6)



            print(f*5+l)
            print(f*5+l, (f+1)*5+l)
            print(f*5 + l, f*5 + l +1)
            print(f*5+l, f*5+l+1, (f+1)*5+l, (f+1)*5+l+1)

        print(num)
        print(num, num +1, end="")
        print()
        print(num, num + 5, end="")
        print()
        print(num, num + 1, num + 5, num + 6, end="")
        print()


            print(p)
            print(p, p+5)
            print(p, p+1)
            print(p, p+1, p+5, p+6)

            print(p)
            print(p,p+5)
            print(p,p+1)
            print(p,p+1,p+5,p+6)

            print(f * 5 + l)
            print(f * 5 + l, (f + 1) * 5 + l)
            print(f * 5 + l, f * 5 + l + 1)
            print(f * 5 + l, f * 5 + l + 1, (f + 1) * 5 + l , (f + 1) * 5 + l + 1)

            print(r_idx + 5 * t_idx)
            print(r_idx + 5 * t_idx, r_idx + 5 * (t_idx + 1))
            print(r_idx + 5 * t_idx, r_idx + 5 * t_idx + 1)
            print(r_idx + 5 * t_idx, r_idx + 5 * t_idx + 1, r_idx + 5 * (t_idx + 1), r_idx + 5 * (t_idx + 1) + 1)

            print(p)
            print(p,p+5)
            print(p,p+1)
            print(p,p+1,p+5,p+6)

        print(a)
        print(a,b)
        print(a,c)
        print(a,b,c,d)

            print(p)
            print(p,p+5)
            print(p,p+1)
            print(p,p+1,p+5,p+6)
    

            print(int((t / 30) * 5 + r / 100))
            print(int((t / 30) * 5 + 1 + int((r - 100) / 100)),int((t / 30) * 5 + int((r - 100) / 100) + 2))
            print(int(int(t / 30) * 5 + 1 + int((r - 100) / 100)),int(int(t / 30) * 5 + int((r - 100) / 100) + 6))
            print(int(int((t) / 30) * 5 + 1 + int((r - 100) / 100)),int(int((t) / 30) * 5 + int((r - 100) / 100) + 2),end = " ")
            print(int(int((t) / 30) * 5 + 6 + int((r - 100) / 100)),int(int((t) / 30)* 5 + int((r - 100) / 100) + 7))
            

  print(*ans)

            print(p)
            print(p,p+5)
            print(p,p+1)
            print(p,p+1,p+5,p+6)

            print(f * 5 + l)
            print(f * 5 + l, (f + 1) * 5 + l)
            print(f * 5 + l, f * 5 + l + 1)
            print(f * 5 + l, f * 5 + l + 1, (f + 1) * 5 + l, (f + 1) * 5 + l + 1)


            print(p)
            print(p, p + 5)
            print(p, p + 1)
            print(p, p + 1, p + 5, p + 6)

        print(5 * (a // 30) + d // 100)
        print(5 * (a // 30) + d // 100, 5 + 5 * (a // 30) + d // 100)
        print(5 * (a // 30) + d // 100, 5 * (a // 30) + d // 100 + 1)
print(ans[::-1])



print(result[::-1])

print(s)

    print("+", end="")
    print("-", end="")
    
        print("+", end="")
        print("0", end="")
        print("-", end="")
        
print("")


print(*map({-1: '-', 0: '0', 1: '+'}.__getitem__, reversed(calc(int(input())))), sep='')

print("".join(l))

print(ans)


print(''.join(ans[::-1]))

print(ans)


    print(''.join(result_list))

print(a[::-1])

print(ans[::-1])

print( res[::-1] )

print(s)


print(ans[::-1])

print("".join(r))

            print("0",end="")
        print("+",end="")
        print("-",end="")
print()



        print("".join(map(lambda x: "-0+"[x + 1], dropwhile(lambda x: x == 0, a))))
print(result)

print(ans)


print(res)

print(ans)



print( ans ) 



print(ans)

print(ans)



print(ans)




print(cunt)        





print(ans)



    print(total_num_bottles)


print(total)



print(res)


print(res)

print(res)

print(res)

print(res)                

print(res)

print(res)

print(res)


print(count)

print(ans)

print(cnt)

print(res)

print(res)

print(ans)


print(ans)

print(a)

print(res)

print(ans)


print(res)
        


print(total)


print(total)



print(sum(bottle))

print(sum(bottle))


print("%d"%(ans))




print(sum(bottle))


print(ans)


print("%d"%(ans))



            print(1)
      print(1)
  print(0)


    print(1 if is_there_cycle(200, adjacency_list) else 0)

        print(1)
    print(0)



print(score(0))  

print(dfs(0))


print(dfs(0))


    print(reduce_to_top(nodes).n % N)

    print(ans)

  
  print(dp(rest, dic))

print(max([a[i] for i in a]) + 1)

    print(ans)

                print(m)

    print(dp[(1 << n) - 1])


print(sum(A))

print(a+b+c)


print(sum(list(map(int, input().split()))))

print(sum(list(map(int, input().split()))))


print(p+m+c)

print(sum(list(map(int, input().split()))))

print(a+b+c)

print(p + m + c)

    print(p + m +c)

        print(a+b+c)
print(sum(map(int, input().split())))

print(sum(map(int, input().split())))

print(sum(list(map(int, input().split()))))

print(sum(map(int, input().split())))


print(sum(map(int,input().split())))

print(sum(list(map(int, input().split()))))

print(p+m+c)

print(a+b+c)

print(a+b+c)

print(sum(map(int, input().split())))

print(a+b+c)

print(p + m + c)

print(sum(list(map(int, input().split()))))

print(a+b+c)

print(n)

print(p+m+c)

print(sum(map(int, input().split())))

print(p+m+c)

print(sum(map(int, input().split())))

print(sum(map(int, input().split())))

print(p+m+c)

print(m+f+b)


print(a)

print(sum(map(int,input().split())))

print(sum(map(int,input().split())))

print(sum(a))

print(sum(map(int,input().split())))

print(p+m+c)

print(x + y + z)

print(total)


print(sum([p,m,c]))

print(x)


print(p + m + c)

print(p+m+c)

print(a+b+c)

print(b)

print(p + m + c)


print(p+m+c)


print(P+M+C)

print(int(p+c+m))

print(p+m+c)


print(p+m+c)

print(a+b+c)

print(p+m+c)


print(a+b+c)


print(a+b+c)

print(p+m+c)

print(p+m+c)


print(p+m+c)

print(a+b+c)


print(p+m+c)

print(p+m+c)

print(p+m+c)


print(x)


print(P+M+C)



print(x)


print(p+m+c)

print(p+m+c)

print(p+m+c)

print(a+b+c)

print(p + m + c)

print(p+m+c)


print(p+m+c)

print(s)


print( p + m + c )


print(p + m + c)


print(p+m+c)

print(all)

print(p+m+c)

print('hiroshi' if ph > pk else 'kenjiro' if ph < pk else 'even')

    print("hiroshi")
    print("kenjiro")
    print("even")

    print("hiroshi")
    print("kenjiro")
    print("even")

    print("even")
    print("kenjiro")
    print("hiroshi")

print('hiroshi' if ph > pk else 'kenjiro' if ph < pk else 'even')

print('hiroshi' if ph > pk else 'kenjiro' if ph < pk else 'even')


print(ans)


print(ans)


    print("hiroshi")
    print("kenjiro")
    print("even")


  print("hiroshi")
  print("kenjiro")
  print("even")

    print('even')
    print('hiroshi')
    print('kenjiro')

    print("even")
    print("hiroshi")
    print("kenjiro")

print("even" if v==w else ( "hiroshi" if v > w else "kenjiro" ))

    print('hiroshi')
    print('kenjiro')
    print('even')

print(ans)

  print("hiroshi")
  print("kenjiro")
  print("even" )

    print("hiroshi")
    print("kenjiro")
    print("even")

    print("hiroshi")
    print("kenjiro")
    print("even")


    print("hiroshi")
    print("kenjiro")
    print("even")
    

    print("hiroshi")
    print("kenjiro")
    print("even")


  print("even")
  print("kenjiro")
  print("hiroshi")

  print("hiroshi")
  print("kenjiro")
  print("even")

    print("hiroshi")
    print("kenjiro")
    print("even")

  print("hiroshi")
  print("kenjiro")
  print("even")

    print("kenjiro")
    print("hiroshi")
    print("even")

  print("hiroshi")
  print("even")
  print("kenjiro")

    print("hiroshi")
    print("kenjiro")
    print("even")

    print("hiroshi")
    print("even")
    print("kenjiro")

    print('hiroshi')
    print('even')
    print('kenjiro')

    print("kenjiro")
    print("hiroshi")
    print("even")

    print('hiroshi')
    print('kenjiro')
    print('even')


    print('hiroshi')
    print('kenjiro')
    print('even')


    print('hiroshi')
    print('kenjiro')
    print('even')

    print("hiroshi")
    print("even")
    print("kenjiro")


    print('hiroshi')
    print('kenjiro')
    print('even')

	print('hiroshi')
	print('kenjiro')
	print('even')


    print("hiroshi")
    print("kenjiro")
    print( "even" )

  print("hiroshi")
  print("kenjiro")
  print("even")


    print('even')
    print('hiroshi' if h_score > k_score else 'kenjiro')

    print('even')
    print('hiroshi')
    print('kenjiro')

    print("even")
        print("hiroshi")
        print("kenjiro")

    print("hiroshi")
    print("kenjiro")
    print("even")

    print("hiroshi")
    print("kenjiro")
    print("even")

    print("hiroshi")
    print("kenjiro")
    print("even")


    print("hiroshi")
    print("kenjiro")
    print("even")

    print("hiroshi")
    print("even")

    print("hiroshi")
    print("kenjiro")
    print("even")


    print("hiroshi")
    print("kenjiro")
    print("even")


    print("hiroshi")
    print("kenjiro")
    print("even")

    print("hiroshi")
    print("kenjiro")
    print("even")

    print("hiroshi")
    print("kenjiro")
    print("even")

    print("hiroshi")
    print("kenjiro")
    print("even")

    print("hiroshi")
    print("kenjiro")
    print("even")

    print("hiroshi")
    print("kenjiro")
    print("even")

print(sum(divmod(D,L)))

print(D // L + D % L)

print(int(D/L+D%L))

    print(D)
print(D // L + D % L)


print(D//L + D%L)

print(x)

print(min_jumps(D, L))


print(d//l + d%l)


print(sum(divmod(D, L)))


print(ans)

    print(D // L)
    print((D // L)+(D % L))



print(d//l+d%l)


print(D//L+D%L)


print(D//L + D%L)

print(d // l + d % l)


print(d // l + d % l)

print( D // L + D % L )

print(ans)


print(D//L+(D-(D//L)*L))


print(D//L + D%L)

    
print(ans)

print(D//L+D%L)

print(cnt)

print((D//L)+(D%L))

print(num_of_jumps(d, l))

print(D//L + D%L)

print(D//L+(D-(D//L)*L))

print(count)

print(d // l + d % l)

print(D//L + D%L)

    print(ins[0])
    print(int(ins[0]/ins[1])+int(ins[0]%ins[1]))

print(e)

print(a // b + a % b)

print(D//L + (D - D//L*L))


print(d // l + d % l)


print(D//L + D % L)


print(D//L+D%L)



print(D//L+D%L)

print(cnt)



print(a+b,sep="")

print(D//L+D%L)

print(bj+sj)

print(kaisuu1+kaisuu2)

print(D//L + D%L)

print((D // L) + (D % L))

print(ans)

print(d // l + d % l)

print(D//L+D%L)

print(ans)

print((d//l)+(d-(d//l)*l))



print(a + b)

print(A+B)


print(d // l + d % l)

print(d//l+d%l)

print(lar+sma)

print(a+b)


print(d//l+d%l)

print(a//b+a%b)

print(sum(divmod(*map(int,input().split()))))

    print(d//l)
    print(x+abs(y))

print(a+b)

print(ans)


print(d//l + (d - a))

print(s)


print(q + r)

print(bigJump + smallJump)



        print(D//L)
        print( D//L + D%L)
    print(D)

print(int(a/b+a%b))


print(a+b)

print(result)


print( len(Y&Z) + len(deff_Z) )

print(len(condition1 | condition2))


print(ans)

print(ans)



print(ans)

print(count)

print(len((ans1 | ans2)))     

print(ans)


print(count)


print(len(((S-A)&(C)) | (B&C)))


print(len(s))


print(ans)

print(len(s))




print(len(((set(U) - set(X)) & set(Z)) | (set(Y) & set(Z))))

print(len((c - a)|(b & c)))

print(ans)


    print(len(suspected))


print(len(z - x) + len(y & z) - len((z-x) & y))

print(len(ans))


print(ans)




print(count)

print(ans)


print(len(((S-A)&(C)) | (B&C)))



print(len(match1 | match2))

print(len(result))

print(x+y)

print(count)


print(len(s1) + len(s2) -len(s3))


print(S)



print(R.count(True))



print(len(((U - A) & C) | (B & C)))

print(len(setAns))


print(len((Z-X)|(Y&Z)))

print(ans)


print(ans)


print(cnt)

print(len(((S-A)&(C))| (B&C)))

print(ans)


print(ans)                    

print(ans)





print(an) 


print(ans)





print(cnt)

print(a)        
    

print(len((ans1 | ans2)))


print(ans)

print(len(((M-A)&C)|B&C))

print(ans)

print(ans)


print(ans)



print(count)


print(ans)

print(count)

print(ans)



print(len((Z-X)|(Y&Z)))

print(ans)


print(count)  

print(ans)

print(count)

print(count)


print(ans)


print(an)


    print(counter)


print(len((having_C - member_A) | (having_C & member_B)))



    print(len(OnlyC|BandC))

print(len(ans))



print(cnt)

print(len(d))


print(ans)


print(C - CA + ABC)


print(ans)        

        print(i)
        print(i)
print(max(i for i in range(101)if sum(Q[i:])>=i))

        print(i + 1)
    print(i)
            print(ctr-1)
        print(ctr-1)


        print(i)
        print(i)
        print(i)
        print(i)
        
print(ans)

        print(i)
print(result)

print(max)


print(ans)

        print(i)
    print(i+1)

		print(n)
print(ans)


print(score)



print(ans)

        print(i)
print(ans)




print(score(l))


        print(i)
        
print(p)


    print(left)

        
print(ans)

        print(i)
            print(A)
print(i-1)

            print(i)
    print(ans[0])



print("%d"%(ans))



print(ans)




    print(num_symmetric_images)

  print(ans)
  

print(answer)

print(ans)


print(ans)



print(ans)


print(ans)


                        print(i)
                print(i)
    print(0)


            print(i+1)
            print(i+1)

print(0)

            print(i+1)
            print(i+1)
    print(0)

      print(count)
      print(count)
  print(0)

                print(i + 1)
                    print(i + 1)
                print(i + 1)
        print(0)

		print(cnt[dk].get(h, 0))
		print(ret)

        print("yes")
print("no")


        print("yes")
        print("no")
    print("no")

print("yes" if a[0] == a[1] and a[2] == a[3] and a[4] == a[5] and a[0][0] == a[2][0] and a[0][1] == a[4][0] and a[2][1] == a[4][1] else "no")

    print("no")
      print("yes")
      print("no")
      print("yes")
      print("no")
      print("yes")
      print("no")


print("yes" if solve() else "no")



print("yes" if solve() else "no")

    print('yes')
    print('no')



print("yes" if solve() else "no")




    print("yes")
    print("no")

        print('no')
        print('yes')
        print('no')

    
print("yes" if solve() else "no")

        print("no")
        print("yes")
        print("yes")
        print("yes")
        print("yes")
        print("no")
        print("yes")
        print("no")
        print("yes")
        print("no")
    print("no")



print(len(ans))
    print(ans[i])
    

print(len(ans))
        print(a, b)

print(len(sl))
    print(i)


    print(len(related_product_list))
        print(item0, item1)

print(len(b))
print(len(lst))
  print(*k)



print(len(ans))
        print(*ans[i])

print(len(ANS))
    print(s, t)


print(len(ans))
        print(*ans[i])
            

print(len(f))
    print("{0:s} {1:s}".format(e[0],e[1]))


print("%d"%(len(ANS)))
    print("%s %s"%(ANS[i].item_A,ANS[i].item_B))


print(len(ans))
    print(x, y)


    print(a)
            print(*t)

print(ans)


print(a)

print(solve(lst, rest))


print(ans)

    print(num_valid_combinations)

print(dfs(0, len(deq)))

print(c)

print(cnt)

        print(i,0)



        print(i, 0)


    print(i, 0)
        print(i,0)

            print(i, 0)

        print(w, 0)
        print(w, 0)
    print(e, 0)


    print(max_length)

print(ans)


print(ans)



print(A)



print(ans)

    print(*t, sep="=")
  print("inf")

        print("%s=%d" % (k, vs[vn[k]]))
    print("inf")

        print('inf')
        print('\n'.join(ans))

    print('\n'.join(ans))

            print(v + 1)
        print(v + 1)
print(int(input())*32)


print(W*32)

print(int(input())*32)

print(W * 32)

print(32 * int(input()))


print(n*32)

print(a)

print(B)


print( int(input())*32 )

print(int(input())*32)

print(bit)

print(a*32)

print(32*w)

print(W * 32)


print(W*32)


print(int(input())*32)


print(W * 32)

print(W * 32)


print(w*32)

print(W*32)

print(int(input())*32)

print(int(w) * 32)


print(int(input()) * 32)

print(32*int(input()))


print( W*32 )

print(int(input())*32)

print(32*w)

print(32*w)

print(w * 32)

print(32*w)

print(32*W)

print(W*32)

print(32*W)

print(int(input())*32)

print(int(input())*32)


print(32*w)

print(32*w)

print(32*w)

print(int(input())*32)

print(32*W)

print(32*w)

print(W*32)


print(32*W)

print(w*32)

print(W*32)

print(32*w)

print(W*32)

print(int(input())*32)

print(int(input())*32)

print(b)

print(a)

print(int(input())*32)

print(int(input())*32)

print(X)

print(w*32)

print(W*32)

print(int(input())*32)


print(x*32)


print(int(input())*32)

print(W*32)

print(W)

print(int(input())*32)


print(w*32)

print(a)


print(32*w)

print(int(input())*32)

print(int(input())*32)


print(w*32)

print(a)

print(a)


print(W)

print(int(input()) * 32)




print(w*32)

print(int(input())*32)

print(int(input())*32)


print(32*w)

print(32*W)

    print(1)
        print(1)
        print(0)
        print(-1)



print( ans )



    print(0)
    print("-1")
    print("1")

    print(1)
    print(-1)
    print(0)


    print("1")
    print("0")
    print("-1")


print(0 if H+R == 0 else(1 if 0 <= H+R else -1))

    print(1)
    print(-1)
    print(0)

    

print(res)


    print("0")
    print("-1")
    print("1")



    print(1)
    print(0)
    print(-1)

    print(0)
    print(1)
    print(-1)

print(0 if H+R==0 else(1 if 0<=H+R else -1))

    print(0)
    print(1)
    print(-1)

    print(1)
    print(0)
    print(-1)

  print(0)
  print(1)
  print(-1)

print(int((h+r>0)-(h+r<0)))

    print(0)
    print(1)
    print(-1)


    print("1")
    print("-1")
    print("0")

    print(1)
        print(1)
        print(0)
        print(-1)
        


    print(-1 if h+r<0 else 0 if h+r==0 else 1)
    print(1)

    print("1")
    print("-1")
    print("0")


    print(0)
    print(-1)
    print(1)

    print(0)
    print(1)
    print(-1)

    print(1)
    print(0)
    print(-1)


    print('0')
    print('-1')
    print('1')

    print(1)
    print(0)
    print(-1)

    print(0)
    print(1)
    print(-1)


print(B)

    print(0)
    print(1)
    print(-1)

    print(1)
    print(0)
    print(-1)

    print(0)
    print(1)
    print(-1)

    print(0)
    print(-1)
    print(-1)
    print(0)
    print(1)

    print(0)
    print(-1)
    print(1)

    print(1)
    print(0)
    print(-1)


    print(1)
    print(-1)
    print(0)

    print(0)
    print(1)
    print(-1)


    print("0")
    print("1")
    print("-1")


print(ans)

    print(0)
    print(1)
    print(-1)
    


print(result)

    print(1)
    print(-1)

    print(1)
    print(0)
    print(-1)        
   
         

    print(0)
    print(1)
    print(-1)

print(0 if H+R==0 else(1 if 0<=H+R else -1))

    print(0)
    print(1)
    print(-1)

    print(1)
    print(-1)

    print("-1")
    print("1")
    print(s)

    print(0)
    print(1)
    print(-1)

print(ans)




    print(0)
    print(1)
    print(-1)


print(res)

  print(1)
  print(0)
  print(-1)

    print(0)
    print(1)
    print(-1)

    print(0)
    print(1)
    print(-1)

            print("%s%d" % (W[i], y-E[i]+1))
    print(E[e-1]+y-1)


        print("M" + str(Y - 1868 +1))
        print("T" + str(Y - 1912 +1))
        print("S" + str(Y - 1926 +1))
        print("H" + str(Y - 1989 +1))
        print(1868 + Y -1)
        print(1912 + Y -1)
        print(1926 + Y -1)
        print(1989 + Y -1)


        print('M' + str(Y - 1867))
        print('T' + str(Y - 1911))
        print('S' + str(Y - 1925))
        print('H' + str(Y - 1988))
    print(1867 + Y)
    print(1911 + Y)
    print(1925 + Y)
    print(1988 + Y)


print(res)


        print('M' + str(y-1867))
        print('T' + str(y-1911))
        print('S' + str(y-1925))
        print('H' + str(y-1988))
    print(y + 1867)
    print(y + 1911)
    print(y + 1925)
    print(y + 1988)

  print(wa(y))
  print(sei(e, y))

print([jp(Y), meiji(Y), taisho(Y), syowa(Y), heisei(Y)][E])



print(ans)

        print(f'H{y-1988}')
        print(f'S{y-1925}')
        print(f'T{y-1911}')
        print(f'M{y-1867}')
    print(ei[e]+y)

        print("M"+str(Y-1867))
        print("T"+str(Y-1911))
        print("S"+str(Y-1925))
        print("H"+str(Y-1988))
    print(1867+Y)
    print(1911+Y)
    print(1925+Y)
    print(1988+Y)


    print(1867+y)
    print(1911+y)
    print(1925+y)
    print(1988+y)

        print("M", a, sep = '')
        print("T", a, sep = '')
        print("S", a, sep = '')
        print("H", a, sep = '')
    print(a)
    print(a)
    print(a)
    print(a)

        print("M", a, sep = '')
        print("T", a, sep = '')
        print("S", a, sep = '')
        print("H", a, sep = '')
    print(a)
    print(a)
    print(a)
    print(a)

    print("M",y-1867,sep='')
    print("T",y-1911,sep='')
    print("S",y-1925,sep='')
    print("H",y-1988,sep='')
  print(y+1867)
  print(y+1911)
  print(y+1925)
  print(y+1988)

        print("T",y-1911,sep="")
        print("S",y-1925,sep="")
        print("H",y-1988,sep="")
    print(y+1867)
    print(y+1911)
    print(y+1925)
        print("M" + str(K))
        print("T" + str(K))
        print("S" + str(K))
        print("H" + str(K))
    print(K)
    print(K)
    print(K)
    print(K)



        print('M'+str(y-1867))
        print('T'+str(y-1911))
        print('S'+str(y-1925))
        print('H'+str(y-1988))
    print(1867+y)
    print(1911+y)
    print(1925+y)
    print(1988+y)

        print("H{}".format(b-1988))
        print("S{}".format(b-1925))
        print("T{}".format(b-1911))
        print("M{}".format(b-1867))
    print(b+1867)
    print(b+1911)
    print(b+1925)
    print(b+1988)

        print("M"+str(x))
        print("T"+str(x))
        print("S"+str(x))
        print("H"+str(x))

    print(1867 + y)

    print(1911 + y)

    print(1925 + y)

    print(1988 + y)


print(R)


        print('M', Y-1867, sep='')
        print('T', Y-1911, sep='')
        print('S', Y-1925, sep='')
        print('H', Y-1988, sep='')

    print(Y+1867)
    print(Y+1911)
    print(Y+1925)
    print(Y+1988)
    

        print("M",end="")
        print(Y - 1867)
        print("T",end="")
        print(Y - 1911)
        print("S",end="")
        print(Y - 1925)
        print("H",end="")
        print(Y - 1988)

    print(Y + 1867)
    print(Y + 1911)
    print(Y + 1925)
    print(Y + 1988)

        print("M"+str(y-1867))
        print("T" + str(y - 1911))
        print("S" + str(y - 1925))
    print(y+1867)
    print(y+1911)
    print(y+1925)

print(ans)

    print(1867 + y)
    print(1911 + y)
    print(1925 + y)
    print(1988 + y)

    print(x)
    print(x)
    print(x)
    print(x)
        print("M{0}".format(a))
        print("T{0}".format(a))
        print("S{0}".format(a))
        print("H{0}".format(a))

        print("M" + str(y - 1867))
        print("T" + str(y - 1911))
        print("S" + str(y - 1925))
        print("H" + str(y - 1988))
    print(y + 1867)
    print(y + 1911)
    print(y + 1925)
    print(y + 1988)


            print(f'M{meiji_dic[y]}')
            print(f'T{taisho_dic[y]}')
            print(f'S{showa_dic[y]}')
            print(f'H{heisei_dic[y]}')
        print(inv_meiji_dic[y])
        print(inv_taisho_dic[y])
        print(inv_showa_dic[y])
        print(inv_heisei_dic[y])

print(a)

            print("M"+str(Y-1867))
            print("T"+str(Y-1911))
            print("S"+str(Y-1925))
            print("H"+str(Y-1988))
        print(str(1867+Y))
        print(str(1911+Y))
        print(str(1925+Y))
        print(str(1988+Y))

            print("%s%d" % (W[i], y-E[i]+1))
    print(E[e-1]+y-1)

    print(c[e - 1] + y - 1)
        print('M{}'.format(y - c[0] + 1))
        print('T{}'.format(y - c[1] + 1))
        print('S{}'.format(y - c[2] + 1))
        print('H{}'.format(y - c[3] + 1))

    print(solve(E,Y))

        print(f'H{y-1988}')
        print(f'S{y-1925}')
        print(f'T{y-1911}')
        print(f'M{y-1867}')
    print(ei[e]+y)

        print('M' + str(y - 1867))
        print('T' + str(y - 1911))
        print('S' + str(y - 1925))
        print('H' + str(y - 1988))
    print(1867 + y)
    print(1911 + y)
    print(1925 + y)
    print(1988 + y)


        print("M",t-1867,sep="")
        print("T",t-1911,sep="")
        print("S",t-1925,sep="")
        print("H",t- 1988,sep="")
    print(t+1867)
    print(t+1911)
    print(t+1925)
    print(t+1988)

        print(f'H{y-1988}')
        print(f'S{y-1925}')
        print(f'T{y-1911}')
        print(f'M{y-1867}')
        print(ei[e]+y)



print(c*(w//g)*(h//g))

print(mini)


print(int((W/G) * (H/G) * C))

print(res)


        
print(int(W/d)*int(H/d)*C)

print((w // g) * (h // g) * c)

print((w // q) * (h // q) * c)

print(w * h // gcd(w, h) // gcd(w, h) * c)

print(W*H*C//(g*g))

print(cost)

print(int(w*h/math.gcd(w,h)**2*c))

print(C*(W*H)//(sikaku*sikaku))


print(h*w*c//g**2)

print(mini)

print((W // g) * (H // g) * C)

    print((w//d)*(h//d)*c)

print((w//gcd)*(h//gcd)*c)

print(w//t * h//t * c)

print((w//g) * (h//g) * c) 


print(a*b//(math.gcd(a,b)**2)*c)

print(int(c * n))


print((W // gcd(W, H)) * (H // gcd(W, H)) * C)



print(W*H//g//g*C)

print((w // g) * (h // g) * c)

print(cnt * c)

print((W // gcd(W, H)) * (H //gcd(W, H)) * C)

print((W // gcd(W, H)) * (H // gcd(W, H)) * C)




print(w // greatcommondiv * h // greatcommondiv * c)


print(W * H // (gcd(W, H) ** 2) * C)

print(int(A/i*C))

print(int(A / i * C))

print((W // gcd(W, H)) * (H //gcd(W,H)) * C)


    print(w //g * h // g * c)

print(mini)

print(int(((W/g) * (H/g))*C))





print(int((w/g)*(h/g)*c))

print((W // gcd(W, H)) * (H // gcd(W, H)) * C)


print(w * h // (g * g) * cost)

print(c * s)


print(N-len(S))


print(n - len(s))


print(count)

print(c)

print(n - len(save))

print(N-len(s))


print(n-len(a))

print(N-len(S))

print(len(l) - len(set(l)))

print(N - len(s))

    
print(N-len(id))


print(N-len(s))

print(ans)


print(N-len(face))

print(N - len(face))

print(n - len(s))



    print(n - len(triangle_set))

print(n)

print(count)


print(N-len(A))

print(ans)


print(count)

print(c)

print(cnt)

print(c)


print(N - len(ls))

		
print(n - len(points))


print(count)

    print(ans)



print(ans)



print(ans)


    
    print(ans)

print(ans)

print(min(dfs(0, P[0]-i)+i for i in range(P[0]+1)))

print(ans)

print(ans)

print(ans)


print(ans)



print(f_ans)

print(ans)



print(ans)



print(ans)

print(dp[n])



    print(table[len(b)-1][len(t)-1] % 1000000007)

        print(1)
        print(0)
        
    print(0)

print(cnts[-1])

    print(dp[-1][-1])

print(dp[lenb])

    print(DP[M][N]%mod)

print(ans%M)

print(DP[m])


print(dp[-1][-1])


    print(sum%MOD)

    print(val, ab,bc)
print(ans)

print(ans)

    print(cost)


print(l)


    print(solve(N, M, XYI, E))

print(ans)



    print(f'{total_d:.4f}')

        print(idx + 1, p)


        print(f' {n.key}', end='')

        print(f' {n.key}', end='')
            print(t + 1, p)

      print(ranking[m][-1] + 1, -ranking[m][0])
    print('\n'.join(ans))

    print('yes')
    print('no')

    print("yes")
    print("yes")
    print("no")



print( ans )


    print("yes")
    print("no")

    print("yes")
    print("no")

    print("yes")
    print("no")


    print("yes")
    print("yes")
    print("no")

    print("yes")
    print("no")



    print("yes")
    print("no")

    print("yes")
    print("no")


    print('yes')
    print('no')

    print("yes")
    print("no")

        print("yes")
        print("no")
        print("yes")
        print("no")
        print("yes")
        print("no")
        print("no")

        print('yes')
        print('yes' if yes else 'no')
        print('no')


    print("yes")
    print("no")

    print("yes")
    print("no")


    print("yes")
    print("no")

print("yes" if a == b and c == d else "no")

print(['no','yes'][a==b and c==d])

print("yes" if e[0] == e[1] and e[2] == e[3] else "no")

print("yes" if a[0] == a[1] and a[2] == a[3] else "no")

  print("yes")
  print("no")

print('yes' if len(set(input().split())) <= 2 else 'no')

    print("yes")
    print("no")



    print("yes")
    print("no") 
    


  print("yes")
  print("no")

  print("yes")

  print("yes")
  

  print("yes")
  
  print("no")

  print("yes")

  print("yes")
  

  print("yes")
  
  print("no")

  print("yes")
  print("no")

print(['no','yes'][a==b and c==d])

    print('yes')
    print('no')

    print("yes")
    print("no")

  print("yes")
  print("no") 

        print("yes")
        print("no")
    print("no")


    print("yes")
        print("yes")
        print("no")
        print("yes")
        print("no")
        print("yes")
        print("no")
        print("yes")
        print("no")
        print("yes")
        print("no")
        print("yes")
        print("no")
    print("no")

    print('yes')
    print('yes')
    print('yes')
    print('yes')
    print('no')


    print("yes")
    print("no")

    print("yes")
    print("no")

    print('yes')
    print('yes')
    print('yes')
    print('yes')
    print('no')

    print('yes')
    print('no')

    print("yes")
    print("yes")
    print("yes")
    print("no")

        print("yes")
        print("no")
        print("yes")
        print("no")
        print("yes")
        print("no")
    print("no")

    print('yes')
    print('yes')
    print('yes')
    print('no')


    print("yes")
    print("yes")
    print("yes")
    print("no")



        print("yes")
        print("no")
        print("yes")
        print("no")
        print("yes")
        print("no")
    print("no")

    print("yes")
    print("no")

    print("yes")
    print("no")

   print("yes")
   print("no")

    print('yes')
    print('yes')
    print('yes')
    print('yes')
    print('no')

    print('yes')
    print('yes')
    print('yes')
    print('yes')
    print('no')

    print('yes')
    print('no')

     print('yes')
     print('yes')
     print('yes')
     print('yes')
     print('no')

    print("yes")
    print("no")

    print("yes")
    print("yes")
    print("yes")
    print("no")

    print("yes")
    print("yes")
    print("yes")
    print("no")
    

    print("yes")
    print("yes")
    print("yes")
    print("no")

        print('yes')
        print('no')
        print('yes')
        print('no')
        print('yes')
        print('no')
    print('no')


    print("yes")
    print("no")

    print("yes")
    print("yes")
    print("yes")
    print("no")

    print("yes")
    print("yes")
    print("yes")
    print("no")

    print("yes")
    print("yes") 
    print("yes")
    print("no")

    print("yes")
    print("no")

    print('yes')
    print('no')

    print('yes')
    print('yes')
    print('yes')
    print('yes')
    print('no')

  print("yes")
  print("no")

    print('yes')
    print('yes')
    print('yes')
    print('yes')
    print('no')


    print('no')
    print('yes')
    print('yes')
    print('no')

    print("yes")
    print("yes")
    print("yes")
    print("no")

    print("yes")
    print("no")


    print("yes")
    print("yes")
    print("yes")
    print("no")

    print("yes")
    print("no")

    print("yes")
    print("no")

    print('yes')
    print('no')

      print("yes")
      print("no")
    print("yes")
    print("no")

    print("yes")
    print("yes")
    print("yes")
    print("no")

        print("yes")
        print("no")
        print("yes")
        print("no")
        print("yes")
        print("no")
    print("no")

    print('yes')
    print('yes')
    print('yes')
    print('no')

    print('yes')
    print('yes')
    print('yes')
    print('no')

    print("yes")
    print("yes")
    print("yes")
    print("no")

    print("yes")
    print("yes")
    print("yes")
    print("no")


        print('yes')
        print('no')
        print('yes')
        print('no')
        print('yes')
        print('no')
        print('yes')
        print('no')
    print('no')

    print("no")

    print("yes")
    print("yes")
    print("no")

    print('yes')
    print('yes')
    print('yes')
    print('no')

print("yes" if e[0] == e[3] and e[4] == e[7] and e[8] == e[11] else "no")





                print('no')
    print('yes')



print("yes" if frag else "no")

print('yes' if c==3 else 'no')

    print('yes')
    print('no')

print("yes" if len(set(e[:4])) == len(set(e[4:8])) == len(set(e[8:])) == 1 else "no")

print("yes" if a[0] == a[3] and a[4] == a[7] and a[8] == a[11] else "no")

  print("yes")
  print("no")

print(res)

print('yes' if all([x.count(x[i]) % 4 == 0 for i in range(len(x))]) else 'no')

    print("yes")
    print("no") 
    



print(ans)

print("yes" if e[0] == e[3] and e[4] == e[7] and e[8] == e[11] else "no")

    print('yes')
    print('no')


    print("yes")
    print("no")

print("yes" if e[0] == e[3] and e[4] == e[7] and e[8] == e[11] else "no")



print("yes" if e[0] == e[3] and e[4] == e[7] and e[8] == e[11] else "no")





    print("yes")
    print("no")


print(result)

        


        print("no")
print("yes")

    print("yes")
    print("no")


print(result)




  print('yes')
   print('no')

print("yes" if e[0] == e[3] and e[4] == e[7] and e[8] == e[11] else "no")




        print('no')
    print("yes")
    print("no")

        print('yes')
            print('yes')
            print('no')
                print('no')
            print('yes')

    print('no')


print(res)


print(ans)

        print(ma)

print(res)



print(res)


print(max)

print(res)


print(res)





print("{:.5f}".format(max(ans1, ans2, ans3)))



    print(f'{max_v:.5f}')

print(max(s,s2))
    

print('%.8f' % (ans))

print(max(ans_1, ans_2))


print(ans)


print(ans)

print(ans)


print(ans)

print(ans)


print("%.6f" % ans)

            print("no")
        print("yes")
    print(ans)
    print(["no", "yes"][dfs(7, 7, 1)])

    print("yes")
    print("no")

        print("yes")
        print("no")


            print('yes')
            print('no')

        print("yes")
        print("no")



print(sum(e == 2 for e in l))

print(cycles)

    print(str(x//g) + "/" +  str(y//g))

  print(deco // div, nume // div, sep="/")
  print(deco // div, nume // div, sep="/")

    print(p, q, sep="/")


    print(str(x//g) + "/" +  str(y//g))

    print(str(x//g) + "/" + str(y//g))

    print(str(x//g) + "/" +  str(y//g))

    print(str(dd) + "/" + str(nn))
    
        print(s1 + "/1")
        print(str(int(s1 + s2)) + "/" + str(10 ** len(s2)))

    print(f"{integer}/1")
    print(f"{int(integer + decimal_n)}/{10**(m + k)}")
print(f"{denom}/{numer}")


print("%d/%d" % res)

    print(f'{numerator // g}/{denominator // g}')

            print("no")
        print("yes")
    print(ans)
    print(str(a)+"/"+str(b))

print(str(numerator//alpha) + '/' + str(denominator//alpha))


    print(len(ok_set))
        print(v + 1)

print(len(ans))
    print(e+1)

print(len(ans))
    print(e+1)


    print(abs(score(0, 0, 1)))


print(abs(dfs(0, 0)))

    print('\n'.join(ans))

        print(0)

    print(f'{left:.6f}')

print(f"{abs(right):.8f}")


print((a+b)//2)

print(int(x/2))


print((a+b)//2)

print((a+b)//2)

print((a+b)//2)


print((a + b) // 2)


print((a+b)//2)

print((a+b)//2)

print(c)


print(int((a+b)/2))

print(int((a + b)/2))

print((a+b)//2)

    print(int((a + b) / 2))

print(sum(map(int, input().split())) // 2)

print((a+b)//2)

print(int(sum(map(int,input().split()))/2))

print((a+b)//2)

print((a + b)//2)

print(int((a+b)/2))



print((a + b) // 2)

print((a+b)//2)


print(sum(map(int,input().split()))//2)

print((a+b)//2)

print(sum(map(int,input().split()))>>1)

print((a + b) // 2)  

print((a+b)//2)

print(sum(map(int,input().split()))//2)

print((a+b)//2)

print((a+b) // 2)

print("%d" % ((a+b)/2))

print(int((a+b)/2))

print(int((a+b)/2))


print((a+b)>>1)

print((a+b) >> 1)

print((a+b)//2)

print((a+b)//2)



print((a+b)//2)

print((a+b)//2)

print(n)

print((a+b)//2)

print(sum(map(int,input().split()))//2)


print((a + b) // 2)

print((a+b)//2)

print(int((a+b)/2))

print((a+b)//2)

print(c)

print(int(d))

print(sum(map(int,input().split()))//2)

print((a + b)//2)

print((a+b)//2)

print((a+b)//2)

print((a+b)//2)

print(sum([int(s) for s in input().split()])//2)


print((a+b)//2)

print(int((a + b) / 2))

print((a+b)//2)

print(sum(map(int,input().split()))//2)

print((a+b)//2)

print((a+b)//2)

print((a + b)//2)

print(x)

print(int((a+b)/2))

    print("NA")
    print("0")
    print(b-m)

    print(0)
    print(b - m)
    print("NA")




    print(0)
        print(b-m)
        print("NA")



    print(0)

    print(f)
    print(0)
    print(b - m)
    print("NA")


print( ans )

    print(0)
    print(b - m)
    print("NA")

    print("0")
    print("NA")
    print(b - m)


     print("NA")
     print(0)
     print(b - m)

    print(0)
    print(b - m)
    print("NA")

    print(0)
    print(sum)
    print("NA")

    print(0)
    print(b - m)
    print("NA")

    print("NA")
    print(0)
    print(b-m)  

        print(b-m)
        print(0)
    print('NA')


    print(0)
        print(b - m)
        print("NA")

    print("NA")
    print(0) 
    print(b-m)

    print("NA")
    print(0)
    print(b-m)

    print(0)
    print(b-m)
    print("NA")

    print("NA")
    print(0)
    print(b - m)
        


print(ans)


    print("NA")
    print(0)
    print(b - m)

      print(m)
      print("NA")


    print(0)
    print(b-m)
    print("NA")


    print("NA")
    print(0)
    print(b - m)

    print("NA")
    print("0")
    print(b-m)

    print(0)
    print(b - m)
    print("NA")


    print(0)
    print("NA")
    print(b-m)

    print(0)
        print(ans)
        print("NA")

    print(0)
    print('NA')
    print(b-m)

    print(main())

print("NA"*(m+f < b) + (m+f >= b)*str(max(0, b-m)))


print(ans)

      print(m)
      print("NA")

    print(0)
        print(b - m)
        print("NA")

print(max(0, b - m) if b - m <= f else "NA")

        print("NA")
    print(0)
    print(b - m)


print("NA") if m < b - f else print(max(0, b - m))

    print(lending)
    print("NA")


    print("NA")
    print(0)
    print(b-m)


print(max(0, b - m) if m + f >= b else "NA")

    print(0)
    print("NA")
    print(b-m)

    print(max(0,b-m))
    print("NA")

print('NA' if m+f<b else max(0, b-m))

  print(0)
    print(S)
    print("NA")

    print(0)
    print(b-m)
    print("NA")

    print("NA")
    print(0)
    print(b - m)

    print("NA")
    print(0)
    print(b - m)

    print(0)
    print(ans)
    print("NA")


  print('0')
  print(b - m)  
  print('NA')

  print("0")

    print("NA")
    print(b-m)
  

  print("NA")
  print(0)
  print(b - m)

    print(b - m)
    print("NA")
  print("0")

    print(0)
        print(d)
        print("NA")


  print(0)
    print(d)
    print("NA")

  print(0)
  print("NA")
  print(b-m)

  print(0)
  print(b-m)
  print("NA")

 print("0")
 print(c-a)
 print("NA")

 print("0")
 print(c-a)
 print("NA")

  print(0)
    print(d)
    print("NA")

 print("0")
 print(c-a)
 print("NA")

  print("NA")
  print("0")
  print(b-m)

  print(0)
    print(d)
    print("NA")

  print("NA")
    print(0)
    print(b-m)

    print("NA")
    print(0)
    print(b - m)

    print(0)
        print(d)
        print("NA")


    print(0)
        print(d)
        print("NA")

  print(0)
    print(d)
    print("NA")

  print(0)
    print(a)
    print('NA')

   print(0)

   print(b-m)
   print("NA")

    print("NA")
    print(0)
    print(b - m)


    print("0")

    print(x)
    
    print("NA")


    print(b - m)
    print("NA")
  print("0")

  print('0')
  print(b-m)
  print('NA')

     print(a)
  print(0)
    print('NA')

  print(0)
    print(a)
    print('NA')

print(ans)

print( week_list[x] )

print(a[b])

print(ans)

    print("thu")
    print("fri")
    print("sat")
    print("sun")
    print("mon")
    print("tue")
    print("wed")

        print("fri")
        print("sat")
        print("sun")
        print("mon")
        print("tue")
        print("wed")
        print("thu")

print(wd[d % 7])

print(D[X % 7])

print(weekday[x%7])

print(you[(int(input())-4 ) % 7])

print(day[(int(input()) + 3) % 7])


print(w[(x - 9)%7])


print(D[x%7])



print(a[x%7])

print(day[x % 7])

print(youbi[int(input())%7])


print(D[X % 7])

print(["mon", "tue", "wed", "thu", "fri", "sat", "sun"][(X+3)%7])

    print('fri')
    print('sat')
    print('sun')
    print('mon')
    print('tue')
    print('wed')
    print('thu')

  print('sat')
  print('sun')
  print('mon')
  print('tue')
  print('wed')
  print('thu')
  print('fri')
  

    print(w[x%7])

print(d[int(input())])

    print("fri")
    print("sat")
    print("sun")
    print("mon")
    print("tue")
    print("wed")
    print("thu")

    print("thu")
    print("fri")
    print("sat")
    print("sun")
    print("mon")
    print("tue")
    print("wed")

print(("thu", "fri", "sat", "sun", "mon", "tue", "wed")[int(input()) % 7])

print(week[(int(input()) - 9) % 7])


    print("thu")
    print("fri")
    print("sat")
    print("sun")
    print("mon")
    print("tue")
    print("wed")

print(l[(x-4)%7])

print(lis[int(input()) % 7])

print(("thu","fri","sat","sun","mon","tue","wed")[int(input())%7])

print(day[x % 7])

print(D[x%7])



print(ans[i%7])

print(weeks[week])



print(table[(X+3)%7])


print(W[n+3])

print(Date[a + 3])

print(week[x%7])

print(day[abs(x - 1) % 7])

  print("sun")

  print("mon")

  print("tue")
  
  print("wed")

  print("thu")
  
  print("fri")
  
  print("sat")

print(W[n+3])

print(week[n%7])


  print("fri")
  print("sat")
  print("sun")
  print("mon")
  print("tue")
  print("wed")
  print("thu")

  print(Day[a+3])
  print(Day[a-4])
  print(Day[a+3])
  


  print("sat")
  print("fri")
  print("thu")
  print("wed")
  print("tue")
  print("mon")
  print("sun")

print(D[x%7])

print(D[x%7])

  print("sat")
  print("sun")
  print("mon")
  print("tue")
  print("wed")
  print("thu")
  print("fri")


  print('fri')
  print('sat')  
  print('sun')
  print('mon')
  print('tue')
  print('wed')


  print("fri")
  print("sat")
  print("sun")
  print("mon")
  print("tue")
  print("wed")
  print("thu")


print(D[x%7])

print(D[x%7])

    print("thu")
    print("fri")
    print("sat")
    print("sun")
    print("mon")
    print("tue")
    print("wed")

  print('sat')
  print('sun')
  print('mon')
  print('tue')
  print('wed')
  print('thu')
  print('fri')

print(D[x%7])

     print('thu')
    print('wed')
    print('tue')
    print('mon')
    print('sun')
    print('sat')
    print('fri')   


print(W[n+3])

  print('sat')
  
  print('sun')
  
  print('mon')
  
  print('tue')
  
  print('wed')
  
  print('thu')
  
  print('fri')


print(w[n%7])

print(day[abs(x-1) % 7])

print(weekdays[idx])

    print(w[x%7])
 

print(n[X%7])


        print(dayf[x%7])
        print(day[abs(x-9)%7])

print(youbi[(int(input())-4) % 7])

 print('fri')
 print('sat')
 print('sun')
 print('mon')
 print('tue')
 print('wed')
 print('thu')
 print('fri')

   print('sat')
   print('sun')
   print('mon')
   print('tue')
   print('wed')
   print('thu')
   print('fri')

    print(w[x%7])
  
    print(w[x%7])
   
print(D[x%7])

print(day[abs(x - 1) % 7])


    print("mon")
    print("tue")
    print("wed")
    print("thu")
    print("fri")
    print("sat")
    print("sun")

print(dic[now.weekday()])

print(days[a%7])


print(a[(x+3) % 7])

print(["thu","fri","sat","sun","mon","tue","wed"][int(input())%7])

    print(1)
    print(0) 
    

print(ok)


print(res)




print(count)


print( result )
    

print(kk)
    

        
print(ans)



        print(1)
print(0)




print(int(2 in l))


print(c)


print(ans)

print(res)

print(res)

print(ans)

print(1 if sum(i <= a for i in t) % 2 or sum(i >= b for i in t) % 2 or sum(a < i and i < b for i in t) else 0)


print(is_booked)


print(check(a, b, lst))

    print(1)
    print(0)

print(int(not(booking)))

    print("1")
print("0")

        print(1)
    print(0)


print(res)


print(h)



print(ans)

  print("0")
  print("1")


print(check())


print(check())

print(check())

print(c)

    print(1)
    print(0)

print(c)

print(ok)


       
 
print(ans)

print(res)

    print("1")
print("0")

    print("1")
print("0")

print(res)

    print(1)
print(judge)

            print(1)
        print(0)

print(t)


print(ans)



print(ans)

    print(1)
    print(0)

        print("1")
print("0")

print(R)



print(c)


    print(0)

        print(1)
    print(0)

print(c)

        print(1)
print(0)

        print(1)
print(0)


print(ans)


print(res)


print(res)

print(res)    


print(res)

print(c)


        print(1)
    print(0)

print(s)
    

            print(1)
        print(0)

print(res)


print(result)


print(flag)


print(ans)




print(res)

print(N)


print(ans)

print(res)

print(res)


print(res)

print(res)

print(x+y+1-gcd(x,y))




print(len(s))


print(x+y+1-gcd(x,y))


print(x + y - eu(x, y) + 1)

print(x + 1 + y + 1 - gcd(x, y) - 1)

print((lambda x:int(x[0])+int(x[1])+1-(lambda*x,f=lambda f,x,y:f(f,y,x%y) if y else x:f(f,*x))(int(x[0]),int(x[1])))(input().split()))


print(a + b - cnt + 2)

print(x+y-a+1)

print(intersection(*map(int, input().split())))

print(x+y-g+1)

print(x+y-math.gcd(x,y)+1)

    print(x+y)
    print(x+y+1-2*x//m)


print(ans)

print(((x // g - 1) + (y // g - 1) + 1) * g + 1)


print(x+y-gcd(x,y)+1)

print(a+b-(math.gcd(a,b))+1)

print(x+y - gc + 1)

print(int(x-1 + y-1 + 1) * gcd + 1)

print(int((a1-1+b1)*g+1))


print((x + 1) + (y + 1) - (gcd(x, y) - 1) - 2)


print(x + y - math.gcd(x, y) + 1)


print(ans)


print(A+B-n+1)

print(x + y - (math.gcd(x, y) - 1))

print((dx + dy - 2) * d + d + 1)


print(x+y+1-gcd(x,y))



print(int(ans))
    
    


print(x - 1 + y - 1 - (math.gcd(x, y) - 1) +2)

print(p - cnt)


    print(x + y - (g - 1))

print(x+y+1 - x//(x//gcd(x, y)))


print(x + y + 1 - c)


print(int(g*(x/g+y/g)-(g-1)))

print(a + b + 1 -fractions.gcd(a, b))

    print('yes')
    print('no')


    print("no")
    print("no")
print("yes")


print("yes" if ok else "no")

        print('no')
        print('no')

    print('yes')

print("yes" if ok else "no")


        print('yes')

print('no')

            print("yes")
            print("no")
        print("no")


        print("no")
        print("yes")
        print("no")

            print('no')
            print('no')

    print('yes')
    print('yes')
    print('no')

            print("no")
            print("no")
print("yes")


        print("yes")
        print("no")

    print("no")
    

    print("no")
    print("yes")

        print('no')
        print('no')
print('yes')

  print("no")
  print("yes")

print(count)


print(dfs(0, P[0]))

print(count)

print(dfs(0, S[0]))



print(max(dp[h]))




print(get_fn(H - 1, 0))


print(ans)


print(ans)



print(min([xs[i] + y_max[n - i] for i in range(n + 1)]))

print(ans)


    print(min_cost)

  print("".join(map(chr, used + s)))

    print(*ans,sep='')


print(''.join(ans))


print(''.join(ans))


        print(0)
    print(ans)

    print(0)
    print(max(IN.count(0), OUT.count(0)))


        print(0)

    print(max(source, sink))

    print(0)

    print(ans)




print(ans)






    print(0)
    print(max(IN.count(0), OUT.count(0)))

print("+" + "-" * (w-2) + "+")
        print("|" + "." * ((w-3) // 2) + c + "." * ((w-3) // 2) + "|")
        print("|" + "." * (w-2) + "|")
        
print("+" + "-" * (w-2) + "+")

            print("+", end ="")
            print("-", end ="")
            print("|", end ="")
            print(C, end ="")
            print(".",end ="")
    print("")



    print( line )

    
print('+', '-'*(W-2), '+', sep = '')
    
    print('|', '.'* (W-2), '|', sep = '')
    
print('|', '.'*((W+1)//2-2), c, '.'*((W+1)//2-2), '|',sep= '')
    
    print('|', '.'*(W-2), '|', sep = '')
        
print('+', '-'*(W-2), '+', sep = '')

        print('+' + '-' * (w - 2) + '+')
        print('|' + '.' * ((w - 2) // 2) + c + '.' * ((w - 2) // 2) + '|')
        print('|' + '.' * (w - 2) + '|')

print("+"+"-"*(new_W-2)+"+")
        print("|"+"."*(new_W-2)+"|")
    print("|"+c+"|")
    print("|"+"."*((new_W - 3)//2)+c+"."*((new_W - 3)//2)+"|")
        print("|"+"."*(new_W-2)+"|")
print("+"+"-"*(new_W-2)+"+")

print("+"+"-"*(new_W-2)+"+")
        print("|"+"."*(new_W-2)+"|")
    print("|"+c+"|")
    print("|"+"."*((new_W - 3)//2)+c+"."*((new_W - 3)//2)+"|")
        print("|"+"."*(new_W-2)+"|")
print("+"+"-"*(new_W-2)+"+")


    print("+" + "-" * (W - 2) + "+")
    
        print("|" + "." * (W - 2) + "|")
    
    print(mid_line)
    
        print("|" + "." * (W - 2) + "|")
    
    print("+" + "-" * (W - 2) + "+")

        print("+" + "-"*(w-2)+"+")
        print("|" + "."*((w-2)//2)+c+"."*((w-2)//2)+"|")
        print("|"+"."*(w-2)+"|")

                print("+",end="")
                print("-",end="")
                print("|",end="")
            print(c,end="")
            print(".",end="")
    print()


print("+" + "-" *(W-2) + "+")
    print("|" + "." *(W-2) + "|")
print("|" + "." *((W-3)//2) + c + "." *((W-3)//2) + "|")
    print("|" + "." *(W-2) + "|")
print("+" + "-" *(W-2) + "+")
   

            print("+", end="")
            print("-", end="")
            print("|", end="")
            print(c, end="")
            print(".",end="")
    print()




        print(lst[i][j],end = "")
    print()


        print("+" + "-"*(W-2)+"+")
        print("|"+ "."*((W-2)//2)+c+"."*((W-2)//2)+"|")
        print("|"+"."*(W-2)+"|")


            print("+", end="")
            print("-", end="")
            print("|", end="")
            print(c, end="")
            print(".", end="")
    print()



            print("+", end="")
            print("-", end="")
            print("|", end="")
            print(c, end="")
            print(".", end="")
    print("")


            print("+", end = "")
            print("-", end = "")
            print("|", end = "")
            print(c, end = "")
            print(".", end="")
    print()

        print(''.join(f))



print("+", "-" * (w - 2), "+", sep="")
    print("".join(l))
print("+", "-" * (w - 2), "+", sep="")


        print("+" + "-" * (W-2) + "+")
        print("".join(line))
        print("|" + "." * (W-2) + "|")


    print(end)
    print(center)
    print(common)

print("+"+"-"*(w-2)+"+")
        print("|"+"."*((w-3)//2)+c+"."*((w-3)//2)+"|")
        print("|"+"."*(w-2)+"|")
print("+"+"-"*(w-2)+"+")

        print("+"+"-"*(w-2)+"+")
        print("|"+"."*((w-2)//2)+s[2]+"."*((w-2)//2)+"|")
    print("|"+"."*(w-2)+"|")

print(flag)

    print(flag)

print(flag)


            print("+", end="")
            print("-", end="")
            print("|", end="")
            print(c, end="")
            print(".", end="")
    print()



    
print("+"+a+"+")

        print("|"+d+"|")
        print("|"+d_e+"|")
print("+"+a+"+")
        
        


            print("+", end="")
            print("-", end="")
            print("|", end="")
            print(c, end="")
            print(".", end="")
    print("")


print("+" + "-"*(W-2) + "+")
    print("|" + "."*(W-2) + "|")
print("|" + "."*((W-3)//2) + c + "."*((W-3)//2) + "|")
    print("|" + "."*(W-2) + "|")
print("+" + "-"*(W-2) + "+")

            print('+',end='')
            print('|',end='')
            print('-',end='')
            print(c,end='')
            print('.',end='')
    print()

                print("+", end="")
                print("-", end="")
                print(c, end="")
                print("|", end="")
                print(".", end="")
    print("")

        print('+' + '-' * (w - 2) + '+')
            print('|', end='')
            print('|')
            print(c, end='')
            print('.', end='')

            print('+', end='')
            print('-', end='')
            print('|', end='')
            print(c, end='')
            print('.', end='')
    print()

        print("+"+"-"*(W-2)+"+")
        print("|"+"."*j+c+"."*j+"|")
        print("|"+"."*(W-2)+"|")


print("+", end = '')
    print("-", end = '')
print("+")
    print("|", end = '')
        print(".", end = '')
    print("|")
print("|", end = '')
    print(".", end = '')
print(c, end = '')
    print(".", end = '')
print("|")
    print("|", end = '')
        print(".", end = '')
    print("|")
print("+", end = '')
    print("-", end = '')
print("+")


    print("".join(f[i]))

            print("+", end="")
            print("-", end="")
            print("|", end="")
            print(c, end="")
            print(".", end="")
    print()

    
    print(''.join(row))


    print("+"+"-"*Wi+"+")
    print("|"+"."*Wl+c+"."*Wl+"|")
    print("+"+"-"*Wi+"+")
    print("+"+"-"*Wi+"+")
        print("|"+"."*Wi+"|")
    print("|"+"."*Wl+c+"."*Wl+"|")
        print("|"+"."*Wi+"|")
    print("+"+"-"*Wi+"+")


            print('+', end ='')

            print('-', end='')

            print('|', end='')

            print(c, end='')

            print('.', end='')


    print()


print("+" + "-" * (W-2) + "+")

    print("|" + "." * (W-2) + "|")


print("|" + "." * ((W-2)//2) + c + "." * ((W-2)//2) + "|")

    print("|" + "." * (W-2) + "|")


print("+" + "-" * (W-2) + "+")


            print('+', end='')
            print('-', end='')
            print('|', end='')
            print(c, end='')
            print('.', end='')
    print()

            print("+",end="")
            print("-",end="")
            print("|",end="")
            print(c,end="")
            print(".",end="")
    print()

print("+",end="")
    print("-",end="")
print("+")
    print("|",end="")
        print(".",end="")
    print("|")
print("|",end="")
    print(".",end="")
print(c,end="")
    print(".",end="")   
print("|")
    print("|",end="")
        print(".",end="")
    print("|")
print("+",end="")
    print("-",end="")
print("+")

            print('+',end='')
            print('+',end='')
            print('+',end='')
            print('+',end='')
            print('-',end='')
            print('|',end='')
            print(c,end='')
            print('.',end='')
    print()
            

            print("+", end="")
            print("-", end="")
            print("|", end="")
            print(C, end="")
            print(".", end="")
    print()

    print(''.join(a))


print("+" + "-"*(W - 2) + "+")
    print("|" + "."*(W - 2) + "|")
print("|" + "."*((W - 2) // 2) + c + "."*((W - 2) // 2) + "|")
    print("|" + "."*(W - 2) + "|")
print("+" + "-"*(W - 2) + "+")



print('+' + '-' * (w - 2) + '+')
print('|' + '.' * ((w - 3) // 2) + c + '.' * ((w - 3) // 2) + '|')
print('+' + '-' * (w - 2) + '+')

                print("+", end = "")
                print("-", end = "")
        
                print("|", end = "")
                print(c, end = "")
                print(".", end = "")
        
    print()

    print("".join(flag[h]))

        print(cc, end='')
    print()


            print("+",end="")
            print("-",end="")
            print("|",end="")
            print(c,end="")
            print(".",end="")
    print("")

print("+" + "-" * W + "+")
        print("|" + "." * (W - W // 2 - 1) + c + "." * (W - W // 2 - 1) + "|")
        print("|" + "." * W + "|")
print("+" + "-" * W + "+")

            print('+',end='')
            print('-',end='')
            print('|',end='')
                print(c,end='')
                print('.',end='')
    print()
        

            print("+",end="")
            print("-",end="")
            print("|",end="")
            print(C,end="")
            print(".",end="")
    print()



            print("+", end ="")
            print("-", end ="")
           print("|",end = "")
            print(c, end ="")
            print("." , end ="")
    print()

            print("+",end="")
            print("-",end="")
            print("|",end="")
            print(c,end="")
            print(".",end="")
    print("")


            print("+",end="")
            print("-",end="")
            print("|",end="")
            print(c,end="")    
            print(".",end="")
    print()                    


            print("+", end="")
            print("-", end="")
            print("|", end="")
            print(c, end="")
            print(".", end="")
    print()

            print("+", end="")
            print("-", end="")
            print("|", end="")
            print(c, end="")
            print(".", end="")
    print()




            print(c,end="")
            print(".",end="")
                print("+",end="")
                print("-",end="")
            print("|",end="")
    print()


print("+" + "-"*(W-2) + "+")
    print("|" + "."*(W-2) + "|")
print("|" + "."*((W-3)//2) + c + "."*((W-3)//2) + "|")
    print("|" + "."*(W-2) + "|")
print("+" + "-"*(W-2) + "+")

        print('+' + '-' * (w - 2) + '+')
        print('|' + '.' * ((w - 2) // 2) + c + '.' * ((w - 2) // 2) + '|')
        print('|' + '.' * (w - 2) + '|')


                print("+",end="")
                print("-",end="")
            print("|",end="")
            print(c,end="")
            print(".",end="")
    print()

            print("+",end="")
            print("-",end="")
            print("|",end="")
            print(c,end="")
    print()

        print(n ,end = '') 
    print()




                print("+",end="")
                print("-",end="")
                print("|",end="")
                print(c,end="")
                print(".",end="")
    print()

        print(tb)
        print(center)
            
                print("+", end="")
        
        
        
            print("-", end="")    
            print("|", end="")
            print(c, end="")
            
            print(".", end="")
    print()        

            print("+", end="")
            print("-", end="")
            print("|", end="")
            print(c, end="")
            print(".", end="")
    print()

        print("+" + "-"*(W - 2) + "+")
        print("|" + "."*((W - 3)//2) + c + "."*((W - 3)//2) + "|")
        print("|" + "."*(W - 2) + "|")

print(ma*t)


print(ans)



print(ans)


print(max([a[i][1] / a[i][0] for i in range(n)]) * t)

print(min_height)

print(tan*t)

print(ans * t)

print(ans)

print(y)


print(x*max_slope)


print(t*tam)


print(ans)


print(result)


print(t*max_a)

print(max([a[i][1] / a[i][0] for i in range(n)]) * t)


print(ans)


print(maxslope * X)






print(a * t)


print(float(t)*r)

print(t * m)


print(t * maxSlope)


print(l * t)

    print(f'{h:.3f}')

print(ans)



print( (diff // 10000)*-1 )



print(diff)

print(ans)

print(sa)

print(ans)

    print(y2-y1+1)
print(answer)

print(ans)


    print(Y[1][0] - Y[0][0] + 1)
    print(Y[1][0] - Y[0][0])
        print(Y[1][0] - Y[0][0] + 1)
        print(Y[1][0] - Y[0][0])


    print(y2-y1+1)
    print(y2-y1)


print(year)

        print(y_2 - y_1 + 1)
            print(y_2 - y_1 + 1)
            print(y_2 - y_1)
        print(y_2 - y_1)
        print(0)
        print(1)
        print(y_1 - y_2 + 1)
            print(y_1 - y_2 + 1)
            print(y_1 - y_2)
        print(y_1 - y_2)


print(a[1][0] - a[0][0] + (1 if a[1][1] > a[0][1] or (a[1][1] == a[0][1] and a[1][2] > a[0][2]) else 0))

  print(abs(a-d))
  print(1)
  print(abs(a-d)+1)
  print(abs(a-d))

print(ans)


print(answer)

print(ans)


print(ans)

print(ans)


print(ans)    



print(ans) 


print(dif)


print(answer)


print(answer)


print(a[1][0] - a[0][0] + (1 if a[1][1] > a[0][1] or (a[1][1] == a[0][1] and a[1][2] > a[0][2]) else 0))


print(ans) 

print(age_difference)


print(ans)

print(ans)


    print(y)
    print(y+1)


    print(Y[1][0] - Y[0][0] + 1)
    print(Y[1][0] - Y[0][0])
        print(Y[1][0] - Y[0][0] + 1)
        print(Y[1][0] - Y[0][0])


print(ans)

    print(b[0] - a[0] + 1)
    print(b[0] - a[0])
    

        print(y2-y1+1)
        print(y2-y1)
            print(y2-y1+1)
            print(y2-y1)
        print(y1-y2)
        print(y1-y2+1)
            print(y1-y2)
            print(y1-y2+1)
        print(0)
        print(1)

    print(taku[0] - hatsumi[0] + 1)
    print(taku[0] - hatsumi[0])

    print(b[0] - a[0] + 1)
    print(b[0] - a[0])



print(ans)


print(ans)


print(ans)

    
print(ans)

print(ans)

print(ans)



    print(taku[0]-hatsu[0]+1)
    print(taku[0]-hatsu[0])    


    print(dy)

    print(b[0] - a[0] + 1)
    print(b[0] - a[0])

    print(dt2[0] - dt1[0] + 1)
    print(dt2[0] - dt1[0])

        print(abs(Y2-Y1)+1)
        print(abs(Y2-Y1))

print(ans)


    print(b[0] - a[0] + 1)
    print(b[0] - a[0])


print(ans)


    print(ta[0] - ha[0] + 1)
    print(ta[0] - ha[0])


print(age_diff_max)


print(ans)


print(ans)



    print(result)

print(ans)


print(ans)

print(ans)


print(ans)

print(ans)


    
print(ans)


print(di)



print(d)

print(adj)
    


print(ans)


print(ans)

print(ans)

print(ans)


print(d)



print(total)

print(ans)


print(diff)
    

print(di)

    print(ans)


print(ans) 

print(ma)


    print("yes")
    print("no")



print("yes" if solve() else "no")

        print("no")
            print("no")
    print("no")
    print("no")
        print("no")
print("yes")


print(min(checkEqual(S), check12(S)))
                                                                                                                        


print(ans)

print((int(input())-30)//2)


print((a-30)//2)

print((F - 30)//2)

print((F - 30)//2)

print( (int(input())-30) // 2 )

print((f - 30) // 2)


print(C)

print((f-30)//2)

print(int(input())//2-15)


print((int(input())-30)//2)

print((F - 30) // 2)


print((f - 30) // 2)


print((int(input())-30)//2)

print((F-30)//2)

print((F-30)//2)

print((f-30)//2)



print(ftoc(f))



print(C)

print(int(c))

print((int(input())-30)//2)

print(kotae//2)

print( (int(input())-30)//2 )



print(C)

print((f-30)//2)

print(sesshi)

print(c)

print((int(input())-30)//2)


print(int((int(input()) - 30) / 2))

print(int(C))

print((F-30)//2)

print(int(input())//2-15)

print((f - 30) // 2)


print((a-30)//2)

print(f'{(f-30)/2:.0f}')

print((F - 30) // 2)

print((F-30)//2)


print(int((int(input())-30) / 2))

print(int((int(input())-30)/2))

print((F - 30) // 2)

print(int((x-30)/2))

print((F-30)//2)


print((int(input())-30)//2)

     print(c)

print((int(input())-30)//2)

print(T)

print((int(input())-30)//2)

print((int(input())-30)//2)

print(C)

print((a-30)//2)

print(C)

print(int(C))

print((int(input())-30)//2)

print((int(input())-30)//2)

    print(int((int(input()) - 30) / 2))


print((int(input())-30)//2)

print((int(input())-30)//2)

print( (int(input())-30)// 2)


print((n-30)//2)

print((F-30)//2)

print((f-30)//2)

print((int(input())-30)//2)

print((f-30)//2)

print(int((f - 30) / 2))


print((F - 30) // 2)

print(int(input())-30>>1)

print(C)

print(int((F-30)/2))


print(C)

print(int((F - 30) / 2))

print(C)

print(int((F-30)/2))


print(int((F-30)/2))

print(int(C))


print('{:0.0f}'.format(C))

print(C)


print((a-30)//2)

    print(int(c))


    print(0)
    print(b-a)
    print(a-b)


print(abs(a-b))

print(abs(x1-x2))


print(abs(a - b))


print(d)

print(abs(a-b))

print(abs(a-b))


print(ans)

    print(x1 - x2)

    print(x2 - x1)



print(a)

    print(x-y)
    print(y-x)

print(abs(x1-x2))

    print(x[0] - x[1])
    print(x[1] - x[0])

print(dist)

print(abs(x1-x2))

print(abs(a-b))

print(abs(x1 - x2))

print(abs(a-b))

print(abs(a-b))

print(abs(int(x) - int(y)))

    print(x2-x1)
    print(x1-x2)

print(abs(x1-x2))

print(abs(x1 - x2))

print(abs(a-b))

    print(a - b)
    print(b - a)

     print(abs(x[0]-x[1]))

print(abs(x2-x1))

print(abs(x1 - x2))

print(abs(a-b))

print(abs(a - b))

    print(a-b)
    print(b-a)

  print(a-b)
  print(b-a)

print(abs(b - a))

    print(0)
    print(x-y)
    print(y-x)

print(abs(a-b))

print(abs(a-b))

print(abs(x1-x2))

print(abs(x-y))

print(abs(a-b))

    print(-y)
    print(y)

print(abs(a-b))

print(abs(a-b))

    print(y-x)
    print(x-y)

print(x)


print(abs(x1 - x2))

print(abs(a-b))

    print(int(x2-x1))
    print(int(x1-x2))

print(a - b)

   print(x1 - x2)
   print(x2 - x1)


print(c)


print(c)

    print(int(a-b))
    print(int(b-a))


print(x)

print(abs(x2-x1))

    print(b-a)
    print(a-b)

    print(x)
    print(y)
    print(z)

    print(a-b)
        print("0")
        print(b-a)


print(abs(x1-x2))

    print(x_1-x_2)
    print(x_2-x_1)
    print(x_1-x_2)

    print(b-a)
    print(a-b)

print(int(abs(x1-x2)))

        print(x1-x2)
        print(x2-x1)
    print(int(x1-x2))
    print(int(x2-x1))

print(abs(x1 - x2))


    print(x1-x2)
    print(x2-x1)

    print(int(x2-x1))
    print(int(x2-x1))
    print(int(x1-x2))

print(a-b)

    print((int)(x2-x1))
     print((int)(x1-x2))

print(abs(x1-x2))


    print(x1-x2)
    print(x2-x1)

    print(x2-x1)
    print(x1-x2)

print(math.floor(c))

    print(x1-x2)
    print(x2-x1)


print(y)

print(abs(x2-x1))

    
print(d)

    print(x1-x2)
    print(x2-x1)

    print(x1-x2)
    print(x2-x1)
    print("0")

print(c)

    print(b-a)
    print(a-b)

    print(s//(n+1))
    print((s//(n+1))+1)

    print(sum // (N + 1) + 1)




print( sum(p)//(N+1)+1 if (sum(p)%(N+1))>0 else (sum(p)//(N+1)) )

print(mine)


print(ans)

print(ans)

 

print(ans)


print((sum(P) + n) // (n + 1))

print((sum(p) + n)//(n + 1))

print(ans)


print(((cake-1) // (n + 1)) +1)


print(ans)

print(res)


print((sum(P)+N) // (N+1))


print(res)

print(ans)


    print(ps//(n+1))
    print((ps//(n + 1))+1)

print(math.ceil(P/(N+1)))


print(ans)


print(-(-sum(map(int, input().split())) // (N+1)))

    print(x)
    print(x+1)

    print(ans)
    print(ans + 1)

print(cake // (n + 1) + bool(cake % (n + 1)))

    print(result)
    print(result + 1)


print(one_person)

print(ans)

print((s - 1) // (n + 1) + 1)

print(mycake)


print(ans)


print(p)


print(hitori)


print(1 + int((c-1)/(n+1)))

print(s // (N + 1) + int(s % (N + 1) != 0))

print(ans)

    
print(ans)


print((sum(P)+N)//(N+1))

print(a[0] if a[1]==0 else a[0]+1)

  print(cake // (N + 1))
  print((cake // (N + 1)) + 1)

print((n+sm)//(n+1))

print(ans[0] if ans[1]==0 else ans[0]+1)


print(ans)

print(math.ceil(p_sum/(N+1)))

print(math.ceil(sum(p)/(N+1)))

print((s-1)//(n+1)+1)

print(s//n+bool(s%n))

print(ans)

    print(cake//n)
    print((cake//n)+1) 

    print(s//(n+1))

    print(s//(n+1)+1)


print(ANS)


print(ans)

    print(num // (N + 1))
    print(num // (N + 1) + 1)

print(int((sum+n)/(n+1)))

    print(int(sum(lst) / (n + 1)))
    print(int(sum(lst) / (n + 1) + 1))

print(ans)

print(ans)

    print(M//N)
    print(M//N + 1)

print((s - 1) // (n + 1) + 1)

        print(cake // (N + 1))
        print((cake // (N + 1)) + 1)
        
    print(total//(N+1))
    print(total//(N+1) + 1)

    print(total//(n+1) + int(total%(n+1) is not 0))


    print(sum//(n+1)+1)
    print(sum//(n+1))


print((sum(P) + n) // (n + 1))


            print(sum//(n+1)+1)
            print(sum//(n+1))
            

print(ans)

print(ans)

print(ans)    

print(ans)


print(ans)

    print(M//N)
    print(M//N + 1)


print(c)

print((sum(P)+N)//(N+1))


print(ans)

print(ans)

            


print( cost )


print(min(only_a, only_b, a_and_b))


print(ans)

print(A * a + B * b)




print(A * a + B * b)


print(ans)


print(A*a + B*b)


print(ans)

print(sum)


print(sum)


print(m)



print(A * a + B * b)

    print(((X-1)//500 + 1)*B)
    print(((X-1)//1000 + 1)*A)
    print(((X-1)//1000)*A+B)

    

    print(a * c)
    print(b * c)
    print(a*t + b*s)
    

print(ans)


print(min(A*C, B*C*2) + min(math.ceil(D/1000)*A, math.ceil(D/500)*B))

print(n // 2 * A + n % 2 * B)

        print(a * num_a)
        print(a * (num_a + 1))
        print(a * (num_a + 1))
        print(a * num_a + b)
        print(b * num_b)
        print(b * (num_b + 1))


        print(a*(x//1000))
            print(min(a*(x//1000 + 1), a*(x//1000) + b*2))
            print(min(a*(x//1000 + 1), a*(x//1000) + b))
        print(b*(x//500))
        print(b*(x//500 + 1))

print(ans)



print(A*a + B*b)


print(m)


    print((n//500)*b)
    print((n//1000)*a)
    print(((n//1000)*a)+((n%1000)//500)*b)


print(ans)

print(c)


print(wa)


print(min(ans1,ans2,ans3))

print(ans)

print(ans)


print(ans)

        
print(min_cost)


    print(((x-1)//500+1)*b)
    print(((x-1)//1000+1)*a)
    print(min(((x-1)//1000+1)*a, x//1000*a+b))

print(min(a * -(-x // 1000), b * -(-x // 500), t))

	print(A*(-(-X//1000)))
	print(C)
	print(B*(-(-X//500)))


print(pay)

print(ans)


print(ans)



print(A * a + B * b)


print(c1000 * A + c500 * B)

print(A * a + B * b)

            print(C)
            print(C)

print(ans)

    print(total)

    print(b*i)
    print(a)
    print((i//2)*a + (i % 2)*b)

        print(int(X/1000)*A)
       print(int(X/1000)*A+A)
        print(int(X/1000)*A+B)
    

        print(int(X/1000)*A)
        print(int(X/1000)*A+A)
    
        print(int(X/500)*B)
        print(int(X/500)*B+B)
    


print(a*ah+b*bh)



print(ans)



print(A*a + B*b)


print(A * a + B * b)




print(A*a + B*b)    

print(A*a + B*b)        


print(A *a + B *b)


print(A*a + B*b)



        print(int(c/1000)*a)
       print(int(c/1000)*a+a)
        print(int(c/1000)*a+b)
        print(int(c/1000)*a)
        print(int(c/1000)*a+a)
        print(int(c/500)*b)
        print(int(c/500)*b+b)
    

print(ans)


        print(A*(X//1000))
        print(A*(X//1000) + A)
        print(B*(X//500))
        print(B*(X//500) + B)
        print(A*(X//1000))
        print(A*(X//1000) + B)
        print(A*(X//1000) + A)

print(cost)



print(numL * A + num_ml * B)

    
print(A*a+B*b)

print(A*a+B*b)    

print(price)


print(A * a + B * b)


print(res)

print(int((A*a +B*b)))


print(ans)


print(cnt)


print(ans)



    print(ans)

print(ans)


print(cnt)

print(count)


    print(cnt)

print(ans)

print(ans)

    print(count)



print(ans)


print(cnt)


print(count)

print(ans)


print(ct)

print(ans)

print(ans)

print(ans)



print(cnt)


    
    
print(count)

    print(cnt)



    print(counter)


print(count)


print(count)



print(counts)

print(counts)

print(len(ans))

print(len(ans))

    print(0)
            print(i)

print(-1)



    print(0)
        print(i)
print(-1)


    print(0)
    print(ans)

    print(0)
        print(i+1)
    print(-1)

        print(0)
                print(i + 1)
            print(-1)


  print(0)
      print(i + 1)
    print(-1)

    print(0)
            print(i)

print(-1)


print(solve())



print(sort())

print(sort())

print(sort())

    print(0)
            print(q + 1)
        print(-1)

print(solve())


    print(0)
            print(i+1)
    print(-1)

    print(-1)
    print(count)

print(dp[ord(t[n - 1])])



print(dic[t[-1]])


print(dict[T[-1]])


print(D.get(s[0], 0))


print(dp[ord(t[n - 1])])


print(DP[ord(T[-1]) - ord('a')])


    print(ans)
    


    print(result)

  print(sum(que))
print(sum(Heap))


                print(1)
        print(0)

            print(1)
print(0)


print(ans)

    print(score(a, b, c))

    print(1)
    print(B // A)
    print((B // A) + 1)



print( (A+B-1)//A )

print((B + A - 1)// A)


print((b + a - 1) // a)

    print(B//A+1)
    print(B//A)


print((b+a-1)//a)

print((B+A-1)//A) 

print((B+A-1)//A)


print((B + A - 1)//A)


print((B+A-1)//A)

print((b+a-1)//a)

print(( B + A - 1) // A)

print(ans)



print(ans)

print(-(-b//a))


print(b // a + bool(b % a))

    print(1)
        print(b // a)
        print(b // a + 1)


print((b+a-1)//a)


print((B+A-1)//A)


print((b+a-1)//a)

print(kimawasi)

print(ans)


print(max(m//n+(m%n != 0),1))

print((B+A-1)//A)

print((b+a-1)//a)

print(math.ceil(b/a))

    print(B // A)
    print(B // A + 1)

print((B + A - 1) // A)

print(C)

print(int(b/a+(b%a!=0)))


print((A+B-1)//A)

print((B + A - 1) // A)

    print(b // a)
    print((b // a) + 1)

print((b + a - 1) // a)

    
print(ans)

print(-(-paty // dress))

    print(B // A)
    print(B // A + 1)


    print(int(B/A))
    print(int(B/A)+1)

print((A+B-1)//A)

print((a+b-1)//a)

print((A + B - 1)//A)

print((B + A - 1) // A)

print((A+B-1)//A)


print((B+A-1)//A)


print((B+A-1)//A)

print((b + a - 1) // a)


print((b+a-1)//a)



print((B+A-1)//A)


    print(1)
    print(B // A)
    print(B // A + 1)


print((B+A-1)//A)

print((A+B-1)//A)

    print(B//A+1)
    print(B//A)

    print(b // a)
    print(b // a + 1)


print(math.ceil(line[1]/line[0]))

print(count)


      print(b//a)
      print(b//a +1 )




print((b-1)//a+1)

    print(1)
    print(B // A)
    print(B // A + 1)

print((b+a-1)//a)

    print((B//A)+1)
    print((B//A))

print((B+A-1)//A)

print((A+B-1)//A)

    print(B//A)
    print(B//A+1)
    

print((B+A-1)//A)

print((B + A - 1) // A)

print((b + a -1)// a)

print((B+A-1)//A)
    

print((A + B -1) // A)

print((B+A-1)//A)

print((B+A-1)//A)

print((B+A-1)//A)


print((B+A-1)//A) 


print( ans )


print(ans)


print(count)

print(cnt)

print(count)

print(count)

print(ans)



print(ans)

print(ans)

print(ans)

print(cnt)

print(ans)


print(cnt)

print(count)

print(ans)


print(ans)

print(x)


print(len([i for i in range(a,b+1) if h%i==0]))


print(num)


print(count)

print(cnt)

print(count)

print(cnt)

print(count)

print(ans)

print(x)

print(count)

print(count)

    print(counter)

print(cnt)



  


print(cnt)


print(ans)


print(cnt)


print(c)

print(sum([h%i==0 for i in range(a, b+1)]))

print(ans)

print(ans)

print(c)
    

        
print(c)

print(a)

print(ans)

print(ans)

print(ans)


print(cnt)

print(cnt)



print(i)


print(ans)


print(cnt)

print(ans)

print(ans)    

print(sum)

print(cnt)



print(count)

print(c)

print(way)


print(a)

print(cnt)

print(cnt)

print(cnt)

        
print(result)

print(cnt)

print(i)



print(cnt)

print(ans)


print(kei)

print(cnt)


print(count)

print(cnt)

print(cnt)

print(count)    

print(cnt)

print(cut)

print(x)

print(s)


print(t)


print(t)

print(t)

print(t)


print(t)




print(ans)


print(res)


print(ans)

print(ans)

print(ans)



print(t)


print(ret)

        
print(ans)


print(res)

print(layers)

    print(calc_max_height(n, k))

    print(0)
    print(min(b[0]) + min(b[1]))



  print(min(right) + min(left))
  print(0)

print(ans)


    print(min(R) + min(L))
    print(0)


    print(0)

print(min(lia)+min(lib))

    print(0)
    print(rightMin + leftMin)
    
    

    print(0)
    print(l+r)


    print(0)
    print(min(b[0]) + min(b[1]))

    print(0)
    print(right_min + left_min)


    print(0)
print(R[0] + L[0])


    print(0)
print(R[0] + L[0])



    print(0)
print(R[0] + L[0])




print(res)

        print(0)
        print(ra_list[0][0] + la_list[0][0])

print(ans)

    



print(main())

    print(1)
    print(0)



  print(1)
  print(0)


print(ans)


    print(1)
    print(0)
    


    print(1)
    print(0)


    print(1)
    print(0)

    print(0)
        print(0)
print(1)


print(ok)


    print(0)
        print(0)
print(1)

print(int(not q))

print(int(not q))


      print(0)
    print(1)

print(ans)


print((pow[N] - dp[N] + MOD) % MOD)


print((pow(2, n, mod) - DP[n]) % mod)


print(0 if acc > 0 else 1)


    print(0 if ans else 1)
    print(1)
    print(0)

    print(1)
    print(0)

  print(1)
  print(0)

print(int(ans==0))

    print(1)
    print(0)


    print(1)
    print(0)

    print(1)
    print(0)


    print(0)
    print(1)

print(sum(list(map(int, input().split()))))

print(R + B + W + G)


print(sum(list(map(int, input().split()))))


print(r+b+w+g)

print(r + b + w +g)

print(R+B+W+G)

print(r+b+w+g)

print(sum(list(map(int,input().split()))))

print(r+b+w+g)


print(sum(map(int,input().split())))

print(sum(map(int,input().split())))

print(a+b+c+d)

print(a+b+c+d)

print(sum(n))

print(r+b+w+g)

print(sum(list(map(int,input().split()))))

print(sum(L))

print(R+B+W+G)

print(sum(A))                

print(sum(list(map(int,input().split()))))

print(sum(list(map(int,input().split()))))

print(sum(map(int,input().split())))

print(sum(a))

print(sum(map(int, input().split())))

print(r+b+w+g)

print(sum)


print(sum([int(i) for i in input().split()]))

print(sum(K))

print(sum(K))

print(r+b+w+g)

print(sum(list(map(int, input().split()))))


print(r + b + w + g)


print(sum(list(map(int, input().split()))))


	print(sum(A))


print(sum(lst))

print(a + b + c + d)



print(S)


print(r + b + w + g)

print(sum(map(int,input().split())))

print(R+B+W+G)

print(r+b+w+g)

print(sum(list(map(int,input().split()))))

print(R+B+W+G)


print(sum((R,B,W,G)))


print(r+b+w+g)

print(sum(a))



print(sum(shiba))

print(a+b+c+d)

print(sum(a))

print(a+b+c+d)

print(R+B+W+G)

print(R+B+W+G)

print(R+B+W+G)

print(a+b+c+d)

print(R+B+W+G)

print(R+B+W+G)

print(R+B+W+G)

print(R+B+W+G)

print(r+b+w+g)

print(sum(map(int,input().split())))

print(a+b+c+d)

print(inu(R,B,W,G))

print(inu(r,b,w,g))

print(inu(r,b,w,g))

print(inu(r,b,w,g))

print(inu(r,b,w,g))

print(R + B + W + G)


print(sum)



print(R + B + W + G)

print(r+b+w+g)

    print(1)
    print(2)
    print(0)

    print(1)
    print(2)
    print(0)


print(ans)


    print(1)
    print(2)
    print(0)

    print(1)
    print(2)
    print(0)

    print(1)
    print(2)
    print(0)

    print(1)
    print(2)
    print(0)

    print(1)
    print(2)
    print(0)

    print(1)
    print(2)
    print(0)

    print(1)
    print(2)
    print(0)

    print(1)
    print(2)
    print(0)

print(1 if n in range(65, 91) else 2 if n in range(97, 123) else 0)

    print(1)
    print(2)

print(0)



    print("1")
    print("2")
    print("0")

    print(0)
    print(1)
    print(2)

print(s)


print(1 if 65<=i<=90 else 2 if 97<=i<=122 else 0)


    print(1)
    print(2)
    print(0)

  print(1)
  print(2)
  print(0)

    print(int(char.islower())+1)
    print(0)


    print(1)
    print(2)
    print(0)

		print(1)
		print(2)
		print(0)



    print(1)
    print(2)
    print(0)

print(ans)

    print(1)
    print(2)
    print(0)


    print("1")
    print("2")
    print("0")

    print('1')
    print('2')
    print('0')


print(ans)

    print(1)
    print(2)
    print(0)

    print(1)
    print(2)
    print(0)

    print(1)
    print(2)
    print(0)



    print(1)
    print(2)
    print(0)

  print(1)
  print(2)
  print(0)

	print(1)
	print(2)
	print(0)

    print('1')
    print('2')
    print('0')

    print(1)
    print(2)
    print(0)

    print(1)
    print(2)
    print(0)

  print(1)
  print(2)
  print(0)

    print("1")
    print("2")
    print("0")

    print("1")
    print("2")
    print("0")

    print(1)
    print(2)
    print(0)

    print(1)
    print(2)
    print(0)


    print(1)
    print(2)
    print(0)

    print(1)
    print(2)
  print(0)


    print(1)
    print(2)
    print(0)


    print(1)
    print(2)
    print(0)

    print(1)
    print(2)
    print(0)

print(ans)
   

        print(1)
        print(2)
        print(0)
    print(1)
    print(2)
    print(0)


    print(1)
    print(2)
    print(0)

    print(1)

    print(2)

    print(0)


    print(1)
    print(2)
    print(0)

    print('1')
    print('2')
    print('0')

    print(1)
    print(2)
    print(0)

        print(1)
        print(2)
        print(0)

    print("1")
    print("2")
    print("0")


print(pow(2, int(log2(n))))

        print(2**(i - 1))

print( pw )
 


print(output)

print(ans // 2)

    print(power[i-1])
print(b)
    

print(ans)


print(x)

print(2 ** int(math.log2(N)))

print(ans)


    
print(x)

print(ans)



print(output)


print(x // 2)


print(ret // 2)


print(int(x))

        print(2**i)
print(ans)

print(ans)


print(b)

print(round(count/2))

        print(b)
        print(b)
print(s//2)

        print(2 ** (idx - 1))
print(pow(2,i-1))


print(2 ** int(math.log2(N)))


print(count)

print(s//2)


print(ret//2)

            print(2**i)
            print(2**(i-1))
    print(a)
print(2**int(log2(int(input()))))


    


print(int(num))

				print(1)
				print(pow(2,i-1))
			print(pow(2,i))
print(2 ** getNum(a))

    
print(ans // 2)



print(ans // 2)

        print(j)
    print(2**1)
    print(2**2)
    print(2**3)
    print(2**4)
    print(2**5)
    print(2**6)
    print(2**7)
    print(2**8)
    print(2**9)
    print(2**10)
    print(2**11)
    print(2**12)
    print(2**13)
    print(2**14)
    print(2**15)
    print(2**16)
    print(2**17)
    print(2**18)
    print(2**19)
    print(2**20)

print(x//2)

print(2 ** (l - int(bin(n).find("1"))))

        print(2 ** (i - 1))
print(i)


print(2**(n-1))


print(2**(math.floor(A)))

        print(2**i)
        print(a)
print(ans // 2)

print(maxim)


print(2 ** (n - 1 ))

        print(2**(i-1))
print(int(x / 2))


print(ans // 2)

print(2**ans)

        print(2**(i-1))
print(x // 2)


print(val)

    print(i)

print(ans)


print(ans//2)



print(ans // 2)

print(i)

print(ans // 2)

print(ans)


print(ans // 2)

print(ans)


print(max(m - min(x), max(x) - m))



    print(d2)
    print(d1)



print(math.ceil((max(lst) - min(lst)) / 2))


print(min([max(ma-m1,m1-mi),max(ma-m2,m2-mi)]))

print(math.ceil((max(lis)-min(lis))/2))

print((max(a) - min(a) + 1)//2)


print((m-n+1)//2)

    print((way+1)//2)
    print(way//2)

    print((max(a)-min(a))//2)
    print((max(a)-min(a))//2+1)

print(math.ceil((max(x) - min(x)) / 2))

print(max(l) - (min(l) + max(l))//2)

print(answer)


print(ans)


print(int(building))


	print(ans)



    
print((maxX-minX+1)//2)



    print(sub // 2)
    print(sub // 2 + 1)

    print((max(table)-min(table))//2)
    print(((max(table)-min(table))//2)+1)

    print(distance // 2)
    print(distance // 2 + 1)

    print((max(b)-min(b))//2)
    print((max(b)-min(b))//2+1)



print(min([max(max_x-m1,m1-min_x),max(max_x-m2,m2-min_x)]))

  print(m // 2)
  print(m // 2)

print(x_array[-1]-dif)





print((maxa-mina+1)//2)


   print("1")
      print(int(s / 2))
      print(int(s / 2) + 1)


print(max(x) - b)

    print(a//2)
    print(a//2)
    

print(y)

print(max(x)-mi)

    print((I[n-1]-I[0])//2)
    print((I[n-1]-I[0])//2+1)

    print((b - a)//2)
    print((b - a + 1)//2)

   print("1")
      print(int(s / 2))
      print(int(s / 2) + 1)

        print((a[N-1]-a[0])//2)
        print((a[N-1]-a[0]+1)//2)
    print(0)

    print(int(s/2))
    print(int((s+1)/2))



print(max(x)-((min(x)+max(x))//2))

        print(y)
        print(y)
    print(0)

    
print(y)


    print("1")
    print(x//2)
    print(x//2+1)

print(meet)

    print(w//2)
    print(w//2+1)


print(math.ceil((m + M) / 2) - m)


print((a-b+1)//2)


    print((max - min) // 2)
    print(((max - min) + 1) // 2)


print(int(math.ceil(c/2)))

    print(d//2)
    print((d+1)//2)

    print((m-n)//2)
    print(((m-n)//2)+1)

    print((max(a)-min(a))//2)
    print((max(a)-min(a))//2+1)

print(f'{k:1.0f}')


print(ans)


print((x_max - x_min+1)//2)

print(d//2)

print((t+1)//2)


print(max(x)-(min(x)+max(x))//2)

print((max(a)-min(a)+1)//2)

    print(time)

print(min(b))

    print(x)
    print(x+1)

    print((max(a)-min(a))//2)
    print((max(a)-min(a))//2+1)

print(max - p)

print(b)

    print((z-y)//2)
    print((z-y+1)//2)

    print((max(a)-min(a))//2)
    print((max(a)-min(a))//2+1)


print(int(c))


    print(d)
    print(d+1)

    print(int(s/2))
    print(int((s+1)/2))

print(max(x)-m)


print(abs(b-c))



    print(int((max(i)-min(i))/2))
    print(int((max(i)-min(i)+1)/2))

    


print(y)

    print(-(-c//2))
    print(c)


    print((max(x)-min(x))//2)
    print((max(x)-min(x))//2+1)

    print((max(a)-min(a))//2)
    print((max(a)-min(a))//2+1)

print(math.ceil((x+y)/2)-y)


print(a-min(i))

    print(b)
    print(c)

    print(b)
    print(b+1)


print(a-((a+b)//2))


print(math.ceil((m + M) / 2) - m)


    print((max(a)-min(a))//2)
    print((max(a)-min(a)+1)//2)

print(abs(b-c))

    print((c-d)//2)
    print((c-d+1)//2)

    print(int((a-b)/2))
    print(int((a-b+1)/2))


print(math.ceil((max(p)-min(p))/2))

print((max(x)-min(x)+1)//2)


    print(d)
    print(d+1)

            print(i + 1)
            print(i + 1)
            print(i + 1)
    print("OK")


            print(i)
            print(i)

print('OK')


print(ans)

      print(i+1)
        print(i+1)
      print(i+1)
print("OK" if isOK else i+1)


print(p)

            print(i+1)
            print(i+1)
    print('OK')

            print(i+1)
                print(i+1)
            print(i+1)
        print("OK")

            print(i)
            print(i)

print('OK')


    print('OK')
    print(ret)
            

    print("OK")
    print(ret)
    

            print(i+1)
            print(i+1)
    print("OK")


        print(i+1)

print("OK")


    print("OK")
    print(ans)


print(answer)

			print(i+1)
			print(i+1)
print('OK')

            print(i+1)
            print(i+1)
    print(ans)

            print(i)
            print(i)
print("OK")
    

            print(i + 1)
                print(i + 1)
            print(i + 1)
    print("OK")

            print(i+1)
            print(i+1)
            print(i+1)
    print("OK")

            print(i + 1)
            print(i + 1)
print("OK")


            print(i + 1)
            print(i + 1)

print("OK")
        

            print(i + 1)
            print(i + 1)
                print(i + 1)
print('OK')


            print(i+1)
            print(i+1)
    print('OK')
    

                print(i + 1)
                print(i + 1)
        print('OK')

print(ans)

            print(i+1)
            print(i+1)
    print("OK")


				print(i+1)
					print(i+1)
				print(i+1)
		print("OK")


    print("OK")
    print(ans + 1)

            print(i+1)
            print(i+1)
    print("OK")

print('OK' if ans else i+1)

print(search(x,y))

print(search(x, y))

print(n%3+1)

print( search( x, y ) )           


print(c % 3 + 1)

print(search(x, y))


print(n % 3 + 1)
print(search(x, y))



print(num % 3 + 1)


    
print(col)



print(search(x, y))

print(color[ans%3])

        print(n % 3 + 1)
print(ans%3 if ans%3 else 3)

    print(1)
        print(color)
print(search(x, y))



    print(cnt)
        print((cnt % 3) + 1)
        print(i%3+1)
print((dir % 3) + 1)


print(ans)

        print(c % 3 + 1)
    print(color)
        print(color)
print(search(x, y))

    print(1)

            print(3)
            print((i+1)%3)
print(search(x, y))

print(search(x,y))


        print(c % 3 + 1)
print(seach(x,y))            

print(search(x,y))

print(search(x, y))




        print(c % 3 + 1)
print(c % 3 + 1)


            print(1)
            print(2)
            print(3)
        print(colors[sq.color])
print(c % 3 + 1)



print(n%3 + 1)
print(num % 3 + 1)

print(checkFloorColor(x, y))

print(search(x, y))

print(search(x,y))
print(search(x,y))


print(search(x,y))


        print(count % 3 + 1)
print(c % 3 + 1)

        print(count % 3 + 1)
print(serch(x,y))   

print(c % 3 + 1)


        print(c % 3 + 1)
        print(k%3 + 1)

print(ans)


        print(color)
print(search(x, y))

    print(1)

    print(i%3+1)



print(n%3 +1)

    print(len(ans))

    print(len(ans))

print(ans)



print(max_point)


print(result)


print(round((t / a) * r,6))

print(elapse)


print( (t/a)*r )


print(t * r / a )

print(t / a * r)

print(t/a*r)

print(t*r/a)

print(r * t / a)


    print(f'{t * r / a:.3f}')

print( t / a * r ) 

print(t*r/a)

print(time)


print(ans)

print(T)

print(elapsed_time(a, t, r))

print(ans)


print((i[1]/i[0])*i[2])


print("{:.6f}".format(t*r/a))


print("{:.6f}".format(ans))


print(r / a * t)



print(t * r / a)


print((t*r)/a)


print((r/a)*t)

print(t/a*r)

print(elapse)

print(s)

print(t / a * r)

print((t * r) / a)


print(t/a*r)

print(t / a * r)

print((t/a)*r)



print(float(t / a * r))

print(r/(a/t))

print(r/(a/t))

print(t/a*r)

print(t*r/a)

print(t/a*r)


print(s)

print(t * r / a)

print(elapse)


print((r*t)/a)

print(T)

print(elapse)



print(t/a*r)

print(t/a*r)


print("{:.6f}".format(t*r/a))



print(r/a*t)


print(t/a*r)

print(elapse)

print(elapse)


print(radpersec * r)


print((t/a)*r)

print(elapse)

print(e)

print( t / a * r )

print(int(line[2])*(int(line[1])/int(line[0])))

print(r*(t/a))

print(r * second_per_radian)

print((int(jikan)/int(tanido))*int(kakudo))


print(ans)

print(A)

print(t/a*r)

print(t*r/a)

print(r*sec)

print(t*r/a)


print(t/a*r)


print(s)

print(t/a * r)

            print(lanes[lane].popleft())
        print(num)
        print(lane[x].popleft())
                print(lines[int(value)-1].pop(0))
        print(queue[num-1].pop(0))
        print(lanes[info[1]].popleft())
        print(rane[num][0])
print(*ans, sep='\n')

        print(L[a].popleft())
        print(car)
print(*ans, sep='\n')
    

        print(qs[num-1].popleft())
        print(lane[x].popleft())
        print("%d"%(Q[value].popleft()))
        print(table[num-1].pop(0))
        print(lst[q - 1].pop(0))
        print(finished)

print(ans)


print(w1*h1 + w2*h2 - overlapping_w*overlapping_h*2)



print(S1+S2-(2*S3))


print(ans)



print(A - 2 * h * w)



print(ans)

print(ans)


print(A - 2 * h * w)




print(S - 2 * W * H)

print(ans)


print(ans)




print(A - 2 * h * w)


print(ans)


print(S1+S2-(2*S3))



print((w1*h1)+(w2*h2)-S*2)


print(S - 2 * W * H)






print(S - 2*h*w)


print(A + B - 2*C)


print(S1+S2-(2*S3))


print(S1+S2-(2*S3))

print(A + B - 2 * C)


print(ans)


print(w1 * h1 + w2 * h2 - 2 * overlap_x * overlap_y)


print(S_1 + S_2 - 2 * s)



print(total - 2 * w * h)

    



print( area )

print(c)

print(c)

print(ans)


print(cnt)

    
    print(Answer)


print(ans)


print(c)

print(ans)


print(c)

print(c)

print(b)

print(c)


print(c)


print(c)


print(c)

print(area)

print(c)                        

            
print(c)

print(c)



print(c)  

print(c)

print(c)


print(ans)

print(ans)


print(a * 3 * (2 ** n - 1) + length)


print(l)


print(l)



print( A*3*(2**N - 1)+L )


print(L)


print(ans)



print(l)


print(L)

print(L)


print(3 * total +  L)

print(l)


print(l)


print(ans)

print(l)

print(L)

print(l)

print(3 * total + L)


print(count * 3 * (2 ** N - 1) + L)

print(l)

    print(L)

print(ans)


print(3 * num_of_double * (2**N - 1) + L)


print(ans)


print(ans)

print(3 * total + L)




print(3*total + L)

print(3* num_of_double *(2**N - 1) + L)


print(3 * total + L)        

print(3* total +L)


print(B)




print(L)


print(len_snake)

print(3*total+L)    








print(ans)


print(L)


print(length)

print(3 * total + L)



print(snakelength)

print(3* total + L)

print(3*total+L)


print(3 * total + L)

print(3 * num_of_double * (2 ** N - 1) + L)

print(3*total+L)

print(B)

print(3 * total + L)         


print(L)



print(cnt * 3 * (2**N - 1)  + L)

    
    print(Answer)



print(el + 3*cnt*(2**n - 1))


print(3 * total + L)


print(*ans, sep="")

print("".join(map(str, ANS)))



print(''.join(str(u) for u in ans))

    print("%d"%(info.num),end="")


print("")


print("%d"%(ans))

print(ans)


print(a, b)


print(a//3600, b//3600)

print(c,d)


print(La // 3600,Lo //3600)

print(a//3600,b//3600)

    print(la // 3600, lo // 3600)


print(latitude_degree, longitude_degree)


print(a//3600, o//3600)



print(b, p)

print(str(int(a / 3600)) + " " + str(int(b / 3600)))

print(f"{lati} {longi}")

print('{0} {1}'.format(int(a/3600),int(b/3600)))

print('%d %d'%(c,d))


print(a//3600,o//3600)

print(la // 3600, lo // 3600)

print(La // 3600, Lo // 3600)

print(a//3600,b//3600)

print(la//3600,lo//3600)

print(f'{math.floor(la / 3600)}',end=' ')
print(math.floor(lo / 3600))

print(*[int(x) // 3600 for x in input().split()])


print(La // 3600, Lo // 3600)


print(a//3600, b//3600)

print(la // 3600, lo // 3600)

print(a,b)

print(A,O)

print(la//3600, lo//3600)

print(math.floor(a/3600), math.floor(b/3600))

print(f"{La // 3600} {Lo // 3600}")

print(L1//3600,L2//3600)


print(a//3600, b//3600)


print('{0} {1}'.format(int(a/3600),int(b/3600)))


print(La//3600,Lo//3600)


print(La, Lo)

print(L1//3600,L2//3600)


print((La // 3600),(Lo // 3600))

print((La // 3600),(Lo // 3600))

print(a//3600,b//3600)

print(la // 3600, lo // 3600)

print(i//3600,k//3600)

print(*[int(x) // 3600 for x in input().split()])

print(f'{La//3600} {Lo//3600}')

print(a//3600,b//3600)


print(la//3600, lo//3600)

print(a // 3600, b // 3600)

print(la // 3600, lo // 3600)

print(int(La/3600),int(Lo/3600))

print(a//3600,o//3600)


print(La//3600,Lo//3600)

print(la//3600,lo//3600)


print(nLa,nLo)


print(la // 3600, lo // 3600)


print(b[0],b[1])

print(a//3600, b//3600)

print(La//3600, Lo//3600)


print(La,Lo)

print(la,end=" ")
print(lo)

print(a,b)


print(str(int(b[0])//3600)+" "+str(int(b[1])//3600))

print(A,B)


print(a,b)

print(a//3600,b//3600)

print(int(x / 3600), int(y / 3600))

print(str(la)+" "+str(lo))

    print(3)
    print(1)
    print(2)
    print(0)

    print(3) 
    print(1) 
    print(2) 
    print(0)

        print(3)
        print(1)
        print(2)
        print(0)


        print(0)
        print(1)
        print(2)
        print(3)

print(res)


    print(0)
    print(3)
    print(1)
    print(2)

    print(1)
    print(2)
    print(3)
    print(0)

    print(3)
    print(0)
    print(1)
    print(2)

        print(3)
        print(1)
    print(2)
    print(0)

		print(3)
		print(1)
		print(2)
		print(0)


    print("0")
    print("1")
    print("2")
    print("3")

    print(3)
    print(2)
    print(1)
    print(0)

print(ans)

print(a)

        print(3)
        print(1)
    print(2)
    print(0)

  print(3)
  print(1)
  print(2)
  print(0)


    print(3)
    print(1)
    print(2)
    print(0)

print(ans)

    print(0)
    print(2)
    print(1)
    print(3)

print(ans)

    print(3)
    print(1)
    print(2)
    print(0)


    print('3')
    print('1')
    print('2')
    print('0')


    print(3)
    print(2)
    print(1)
    print(0)

    print(3)
    print(1)
    print(2)
    print(0)

        print(3)
        print(1)
        print(2)
        print(0)


    print(3)
    print(1)
    print(2)
    print(0)

        print(0)
        print(2)
        print(1)
        print(3)

    print(3)
    print(1)
    print(2)
    print(0)



print(ans)


    print(3)
    print(1)
    print(2)
    print(0)

print(i)

    print(3)
    print(0)
    print(1)
    print(2)


    print(3)
    print(ans.index(1))
    print(0)

  print(3)
  print(1)
  print(2)
  print(0)

print(ans)

print(dis)


print(ans)

print(minV * 2 + maxV)

print(min(x[0]-minX,maxX-x[0])*2+ max(maxX-x[0],x[0]-minX))


print( min( max_x - m, m - min_x )*2 + max( max_x - m, m - min_x ) )

        print(x_max - x)
        print(x - x_min)
        print(x - x_min + x_max - x_min)
        print(x_max - x + x_max - x_min)

print(ans)


print(res)


print(dist)




print(min((X[0]-L)*2+R-X[0],(R-X[0])*2+X[0]-L))

    print(max_x - x)
    print(x - min_x)
    print(min(2 * (x - min_x)+(max_x - x), 2 * (max_x - x)+(x - min_x)))

print(minv * 2 + maxv)

print(minv * 2 + maxv)

    print(MAX-n)
    print(n-MIN)
    print(max(abs(MAX-n),abs(MIN-n))+min(abs(MAX-n),abs(MIN-n))*2)


print(ans)


    print(max(x) - s)
        print(s - max(x))
        print(s - min(x))
        print((max(x) - s) + (max(x) - min(x)))
        print((s - min(x)) + (max(x) - min(x)))

    print(d2)
    print(d1)
        print(2 * d1 + d2)
        print(2 * d2 + d1)

print(min(maxx-x[0],x[0]-minx)*2+max(maxx-x[0],x[0]-minx))

    print(max(lst) - m)
    print(m - min(lst))
        print((max(lst) - m) * 2 + m - min(lst))
        print((m - min(lst)) * 2 + max(lst) - m)


print(min(abs(start-X[0]), abs(start-X[-1]))+diff)

  print(max(X)-X1)
  print(X1-min(X))
  print(min( X1-min(X) + max(X)-min(X),max(X)-X1 + max(X)-min(X)))
print(ans)

print(dis)

print(k + (ma - mi))

print(max(li) - min(li) + min(abs(min(li) - x), abs(max(li) - x)))

    print(max_x - x)
    print(x - min_x)
    print(min(2 * (x - min_x) + (max_x - x), 2 * (max_x - x) + (x - min_x)))


print(minv*2+maxv)

print(ans)

print(minv * 2 + maxv)


print(k + (ma -mi))


print(minv * 2 + maxv)

print(minv * 2 + maxv)    

print(minv *2+ maxv)

  print(max(X)-X1)
  print(X1-min(X))
  print(min( X1-min(X) + max(X)-min(X),max(X)-X1 + max(X)-min(X)))
print(k + (b -s))




print(t + ma - mi)


print(min(w*2+e,e*2+w))


print(min(max(p) - p0, p0 - min(p)) * 2 + max(max(p) - p0, p0 - min(p)))

print(dist)


    print(a[n-1] - x)
        print(a[n-1] - a[0] * 2 + x)
        print(a[n-1] * 2 - a[0] - x)
    print(x - a[0])


print(min((x[0]-l)*2+r-x[0], (r-x[0])*2+x[0]-l))


print(ans)

print(calc_distance(position, min(X), max(X)))


print(min((x[0]-l)*2+r-x[0],(r-x[0])*2+x[0]-l))


print(min((x[0]-l)*2+r-x[0], (r-x[0])*2+x[0]-l))



    print(maxx-x)
    print(x-minx)
    print(min(2*(x-minx)+(maxx-x),2*(maxx-x)+(x-minx)))

print(min(2*(X[0]-L)+R-X[0], 2*(R-X[0])+X[0]-L))


    print(maxx-x)
    print(x-minx)
    print(min(2*(x-minx)+(maxx-x),2*(maxx-x)+(x-minx)))

print(min((x[0]-l)*2+r-x[0],(r-x[0])*2+x[0]-l))

print(k + (ma -mi))

print(k + (b - s))

    print(maxx - x)
    print(x - minx)
    print(min(2*(x-minx)+(maxx-x),2*(maxx-x)+(x-minx)))


print(s)

print(min(abs(x-l),abs(x-r))+r-l)

    print(c-a)
    print(a-b)
    print(d)
    print(d)

    print(abs(l_pos[0] - cur))
    print(short_length*2 + long_length)

    print(left * 2 + right)
    print(left + right * 2)

  print(max(X)-X1)
  print(X1-min(X))
  print(min( X1-min(X) + max(X)-min(X),max(X)-X1 + max(X)-min(X)))
    print(east*2+west)
    print(east+west*2)

    print(R - L)
        print((x[0] - L) * 2 + R - x[0])
        print(x[0] - L + (R - x[0]) * 2)

print(min((x[0]-l)*2+r-x[0],(r-x[0])*2+x[0]-l))

print(min((X[0] - L) * 2 + R - X[0], (R - X[0]) * 2 + X[0] - L))

print(count)
    




print( point )

print(point)


print(cnt)

print(count)

print(score)

print(c)


    print(num_visible_disks)

print(ans)  



print(point)

print(ans)

print(ans)



print(ans)


print(ans)



print(ans)


print(score)

print(count)

print(c)

print(count)

print(p)



print(ten)

print(cnt)

print(cnt)

print(ans)


print(count)


print(cnt)


print(count)


print(x)

print(ans)

print(cnt)

print(cnt)


print(ct)

print(c)


print(cnt)

print(ans)


print(ans)

print(cnt)


print(count)

print(ans)


print(cnt)

print(count)

print(cnt)

print(count)        

print(ans)


print(cnt)

print(cnt)


print(a)


print(count)

print(cnt)

print(cnt)

print(c)        


print(cnt)

print(ans)

print(p)


print(n)

print(sum1)

print(cnt)

print(ans)


print(count)



print(count)


        
print(ans)

print(count)

    
print(count)

print(cnt)

print(ans)



print(cnt)

print(count)

    print("".join(x))


        print(''.join(grid[i]))

    print(''.join(it))


    print(''.join(ANS[i]))



            print(R[i][j], end="")
        print("")
            print(R[N-1-j][i], end="")
        print("")
            print(R[N-1-i][N-1-j], end="")
        print("")
            print(R[j][N-1-i], end="")
        print("")



    print("".join(ans[i]))

    print("".join(res[i]))

    print("".join(photo_after[i]))

    print(''.join(ANS[i]))


    print(J)
    print(TT[i])
    print(TT[i])
    print(TT[i])

        print("".join(a[i]))

    print("".join(row))

    print(''.join(ANS[i]))



    print(arr[0][0])
        print(''.join(i))

    print(''.join(i))


    print(*rows[i], sep='')

    print(*mp[i],sep="")

            print(p[i][j], end='')
        print()


            print(p[j][i], end='')
        print()


    print(pic_list[i][j], sep="", end="")
  print(end="\n")

    print("".join(l[i]))

        print(words[P[i][j]], end="")
    print()

    print()

    print()

    print()


            print(p[x])
    print(base_color_list[x%4][y%2])

        print(S[x%4])
        print(Srev[x%4])

        print(color[narabi[::-1][x % 4]])
        print(color[narabi[x % 4]])

    print(D[N1])

    print(C[x % 4][y % 2])


        print(color[narabi[::-1][x % 4]])
        print(color[narabi[x % 4]])


    print(ans)


                        print(j[x2])
                        print(j[::-1][x2])


    print(wall[x][y])


      print(color[lis[x%4]])
      print(color[lis[3-x%4]])


print(surface)



print(surface)


print(surface_area)


print(ans)


print(ans)


    print(v1 * c2 + v2 * c1)


    print(dp[i][n-1][1])


  print(answer)


print(p_in - p_out)


    print(int(p * 0.02))

print(result)

print(int(input())//50)

print(int(input())//50)

print(difference)


print(int(input()) // 50)

print(int(input()) // 50)


print(int(N*0.02))

print(int(n / 50))

print(p//50)

print(a//50)

print(f"{ans:.0f}")


print(int(p * 0.02))



print(a - b)

print(int(input())//50)

print(int(input()) * 2 // 100)

print(int(input()) // 50)

print(p * 110 // 100 - p * 108 // 100)


print(x)

print(d//3600,(d % 3600)//60,(d % 3600)%60)

print(d //3600, end = " ")
print(d % 3600 // 60, end = " ")
print(d % 60)


print(d//3600,(d%3600)//60,d%60)

print(n//3600, (n//60)%60, n%60)

print(a, m, s)


print(d//3600, d%3600//60, d%60)

print(n//3600, n%3600//60, n%60)


print(d // 3600, d // 60 % 60, d % 60)



print(d, m, s)


    print(do, fun, d)

print(d//3600,d%3600//60,d%60)
print(d//3600,d%3600//60,d%60)

print(*result)

print(d // 3600, d % 3600 // 60, d % 60)

print(d, f, b)



print(ans_d,ans_m,ans_s)

print(a, b, d)


print(n//3600, n%3600//60, n%60)

print(d // 3600, d // 60 % 60, d % 60)


print(d // 3600, d // 60 % 60, d % 60)


print(degree, minute, second)

print(do, bu, byo)


print(deg,min,sec)

print(int(n / 3600), int(n % 3600 / 60), int(n % 3600 % 60))

print("{0} {1} {2}".format(D, M, S))


print(a, b, c)

print(x,y,z)

print(d, m, s)

print(d // 3600, (d%3600) // 60, (d%3600) % 60)


print(f"{a} {b} {c}")

print(angle, min, sec)

print(d // (60*60), d // 60 % 60, d % 60)

print(C // 3600, C % 3600 // 60, C % 3600 % 60)

print(d//3600,d%3600//60,d%60)

print(f"{a} {b} {c}")


print(d, m, s)



print(r2,r//60,r%60)

print(d // 3600, end= " ")
print(d % 3600 // 60,end=" ")
print(d % 60)

print(d//3600,(d%3600) // 60,(d%3600) % 60)


print(r,m,s)

print(a,b,c)

print(n//3600, n%3600//60, n%60)


print(n//3600, n%3600//60, n%60)

print(d//3600, d//60%60, d%60)

print(k,f,b)

print(a, b, c)


print(d//3600,end=" ")
print(d%3600//60,end=" ")
print(d%60)

print(d//3600,d%3600//60,d%60)

print(d//3600,end=" ")
print(d%3600//60,end=" ")
print(d%3600%60)


print(D,m,s)

print(d // 60**2 , (d % (60**2)) // 60 , d % 60)

print(a, b, c)


print('%d %d %d' % (d,m,s))

print(rad, minute, second)

print(b, end=' ')
print(c, end=' ')
print(d)


print(num//3600,end=' ')
print((num%3600)//60,end=' ')
print(num%60)

print(d//3600, d%3600//60, d%60)

print(d//3600,(d % 3600)//60,d%60)

print(d//3600, d%3600//60, d%60)


print(D,m,s)

print(d//3600,d%3600//60,d%60)

print(n//3600, n%3600//60, n%60)

print(d//(60*60), (d%(60*60)//60), d%60)

print(d,m,s)

print(d//3600,d%3600//60, d%60)

print(d // 3600, d % 3600 // 60, d % 60)

print(d//3600,d%3600//60,d%60)

print(d // 3600, d % 3600 // 60, d % 3600 % 60)


print(f'{deg} {minute} {second}')

print(d // 3600, d% 3600 //60, d % 3600 % 60)

print(d//3600, d%3600//60, d%60)

print(d // 3600, d % 3600 // 60, d % 60)


print(d//3600,(d%3600)//60,(d%3600) % 60)

print(angle, m, d)


print(x//3600,x%3600//60,x%60)

print(d ,end = " ")
print(h ,end = " ")
print(i % 60)

    print(2)
    print(N // 3 * 2 + N % 3)

print(ans)


        print(n // 3 + (1 if n % 3 > 0 else 0))
        print(2)


print(total_time)

    print(2)
    print(-(-2*n//3))


print(max([2, (int(input())*2+2)//3]))

print(max(2, (int(input()) * 2 + 2) // 3))

print(ans)

    print(sum + 3)
    print(sum + 2)

    print(2)
    print(-((-n*2)//3))

    print(2)
        print(q + 1)
        print(q)


    print(2)
    print(N // 3 * 2)
    print((N // 3 * 2) + 1)
    print((N // 3 * 2) + 2)

print(max(2,(int(input())*2+2)//3))

    print(2)
    print(n // 3 * 2 + n % 3)





print(time)

print(ans)



print(c * (l + 1))


print(c * (max(b) + 1))


print(minS * (ans + 1))



    print(cmax * (size + 1))


        print(key*(alphabet[key]+1))

print(ans)


print(ans)

print(ans)


print(ans % mod)


    
    print(rec / 2)

print(int(rr, 8)-int(ll, 8))

    
    print(ans)


print(base_10_to_8(q) - base_10_to_8(p))


print(int(res.lstrip('0'), 8))




print(qn - pn)


    
    print('\n'.join(map(str, ans)))
                        
        print(-1)
        print(ans)

    print(-1)
    print(ans)



print(area)

print(int(input()) // 4)

print(int(int(input())*0.25))


print(int(0.25*d))


print(d//4)



print(d//4)




print(int(input())//4)

print(int(N/4))

    print(d // 4)

print(e//4)


print(int(millimeters))

print(d // 4)

print(d//4)

print(d // 4)

print(d//4)

print(d//4)

print(int(input())//4)

print(d//4)

print(d//4)

print(int(input())//4)

print(d//4)

print(d//4)

print(d//4)

print(d//4)

print(d // 4)

print(d//4)

print(d//4)

print(d//4)

print(d//4)

print(int(int(input())/4))

print(d//4)

print(x//4)

print(d//4)

print(b)

print(int(input())//4)

print(int(input())// 4)

print(d//4)

print(int(input())//4)

print(d//4)

print(d//4)

print(d // 4)

print(a)

print(X)

print(d//4)

print(x//4)

print(int(input()) // 4)

print(d//4)

print(d//4)

print(int(input())//4)

print(d//4)

print(d//4)

print(d//4)

print(d//4)








print(d//4)

print(d//4)

print(w//4)

print(int(input()) // 4)

print(int(a/4))

print(int(d/4))

print(a)

print(d//4)

print(int(a))

print(int(input())//4)

print(a//4)

print(x)

print(d//4)

print(d//4)

print(A//4)

print(int(d*0.25))

print(int(B))

print(int(mm))

print(int(input())//4)


print(d//4)

print(d//4)

print(int(input()) // 4)



print(d//4)

print(d//4)

print(X//4)

print(n//4)

print(d//4)

print(int(input())//4)

print(d//4)


print(d//4)

print(d//4)

print(int(input())//4)

print(d // 4)

print(int(d*0.25))

print(d//4)

print(d//4)

print(int(d/4))

print(int((a[0]==a[1]) & (a[2]==a[3])))

    print(1)
    print(0)

    print(1)
    print(1)
    print(1)
    print(0)

    print(1)
    print(0)


    print(1)
    print(0)


        print(1)
        print(0)

print(result)


print(int(len(set(l)) == 2))


    print(1)

print(0)

   print(1)
   print(0)

    print(1)
    print(0)

    print(1)
    print(0)

    print(1)
    print(0)

    print(1)
    print(0)
 



    print(1)
    print(0)


    print(1)
    print(0)

    print(1)
    print(0)

    print("1")
    print(1)
    print(0)                  

    print(1)
    print(1)
    print(0)


    print("1")
    print("1")
    print("0")

    print(1)
    print(0)

    print(1)
        print(0)



    print(1)
    print(0)

    print(1)
    print(0)

     print("1")
     print("1")
     print("1")
     print("0")

    print(1)
    print(0)

    print(1)
    print(0)

    print("1")
    print("0")

    print(1)
    print(1)
    print(1)
    print(0)

    print(1)
    print(0)

    print(1)
    print(0)

    print(1)
    print(0)

    print(1)
    print(0)

print('1' if s_l*2==cnt else '0')

    print(1)
    print(0)

    print(1)
    print(0)

    print(1)

print(0)


    print(1)
    print(0)

print(int(a==b and c==d))

  print(1)
  print(0)

    print(0)
    print(1)

    print(1)

print(0)


    print(1)
    print(0)

    print(1)
    print(0)

    print(1)
    print(0)

print(1 if len(set(list(map(int,input().split()))))==2 else 0)

  print('1')
  print('0')

    print(1)
    print(0)

print(int((abs(a-b)+abs(c-d))*(abs(a-c)+abs(b-d))*(abs(a-d)+abs(b-c))==0))

  print(1)
  print(1 if a[0] == a[1] and a[2] == a[3] else 0)

    print("1")
    print(1)
    print(0)

    print(1)
    print(1)
    print(1)
    print(0)

    print(1)
    print(0)

    print(1)
    print(0)
    

    print(1)

    print(0)

    print(1)
    print(0)

    print('1')
    print('0')

    print(1)
    print(0)


    print(1)
    print(0)

    print(1)
    print(0)

    print(1)
    print(0)

    print(1)
    print(0)

    print(1)
    print(1)
    print(1)
    print(0)

    print('1')
    print("0")

  print("1")
  print("0")


        print(0)
print(1)


print(ans)


print(count)


print(ans)

print(ans)


print(ans)

print(count)

print(score)


print(count)


print(re)


print(ans)

print(count)



print(S)

    
print(x)

print(ans)


print(ans)

print(sum(min((A[i+1]+10-A[i])%10,(A[i]+10-A[i+1])%10) for i in range(len(A)-1)))

print(ans)


print(ans)


print(s)


print(ct)

print(ans)



print(result)


    
print(u)


print(ans)

print(ans)

print(ans)


print(num) 

print(ans)


print(cnt)


print(count)

print(count)


print(ans)
    
    

print(count)

print(ans)

print(cnt) 


print(result)

    
print(min_step)

print(min_click)

print(sumg)

print(int(ans))

    print(1)
    print(0)


        print(1)
print(0)



print(ans)


print(int(ok and now<=T))


print(1 if in_time else 0)

    print(1)
    print(0)

        print(1)
print(0)


        print(0)
        print(1)
    print(1)
    print(0)


    print(1)
    print(0)

	print(0)
	print(1)
	print(0)

    print("0")
    print("0")
    print("1")

    print(1)
    print(0)


print(cnt)

print(ans)



print(ans)

print(ans)

print(ct)


print(ans)


print(ans)

print(cnt)



print(ans)


print(total_power_consumption())


print(power_consume)

print(l * sum(x))

        
print(ans)

        print(sum(xl) * (k - 1))
print(ans)

print(ans)


print(M)

print(l*sum(x))

                print(ans)
print(ans)

	
print(cnt)

print(l * sum(x))

print(ansi*Sx)




print(left * sum(xl))


print(Ans)

print(left * sum(X))


print(l*sum(x))

print(ans)

	
print(cnt)

print(final_ans)

        print(max(ans, res))
print(max(ans, res))


    print("No")
    print("Yes")



print((n+d-1)//d)

    print(result)

print((n + d - 1) // d)


        print(q + 1)
        print(q)

print((n + d - 1) // d)

print(math.ceil(float(a/b)))

print((n + d - 1) // d)



print((n+d-1)//d)

print((n+d-1) // d)

print((n+d-1)//d)

print((n + d - 1) // d)

print(math.ceil(a / b))


print(ans)

    print((n + d - 1) // d)

    print("%d" %ans)
    print(int(ans+1))

print((n + d - 1) // d)


print(result)


print(a9)


        print(a0 + 9 * d1)
        print(a0 * (r ** 9))

    print(a*x)
    print(a+d*9)


	print(a0+9*(a1-a0))
	print(a0*pow(a1//a0,9))

    print(a0 + 9 * (a1 - a0))
    print(a0 * (a1 // a0) ** 9)


    print(a9)
    print(a9)

    print(a + d * 9)
    print(a * r**9)


    print(a0 + (a1 - a0) * 9)
    print(a0 * ((a1 // a0) ** 9))

print(a2)

print(a2)

print(int(ans))

    
print(n)

print(result)


print(len(set(["".join(p) for p in permutations(s)])))


    print(ans)

    
print(int(ans))


print(ans)

print(ans)


print(ans)



print(ans)


print(len(st))


print(len(p))


print(solve())

        print(i + 1)
    
    print(pos)


print(ans)

print(cnt)


print(bisect_left(L, r) + 1)


    print(*arg, sep=sep, end=end, file=sys.stderr)



    print(n - match.solve())


        
print(ans)

    
    print(ans)

print(int(input())-2002)


print(Y-2002)


print(a-2002)


print(Y-2002)
    

print(int(input()) - 2002)

    


print(y-2002)

print(y - 2002)

print(y - 2003 + 1)

print(y-2002)

print(a-2003+1)


print(y-2002)

print(int(input()) - 2002)

print(y - 2002)

print(Y - 2002)


print(y - 2002)


print(int(input()) - 2002)

print(anniversary)

print(y - 2002)


print(Y - 2002)

print(int(input())-2002)

print(int(input()) - 2002)

print(a-2002)

print(Y-2002)

print(int(input())-2002)

print(int(input()) - 2002)

print(y-2003+1)

print(output)


print(Y-2002)


print(y - 2002)

print(ans)

print(times)


print(S - 2002)

print(int(input())-2002)


print(x)

print(str(Y-2002))


print(y - 2002)



print(int(input()) - 2002)

print(a)

print(y-2002)

print(int(input())-2002)

print(y-2002)

print(int(input()) - 2002)


print(Y-2002)

print(Y - 2002)

print(count)


print(y-2002)

print(int(input()) - 2002)


print(x-2002)

print(i-2002)

print((x%2001)-1)

    print(y - 2002)

print(Y-2002)

print(int(input()) - 2002)

print(int(input())-2002)

print(eval(input())-2002)

print(y-2002)


print(i - 2002)

    print(2)
    print(1)
    print(0)

    print("2")
    print("0")
    print("1")

    print(2)
    print(1)
    print(0)



    print(2)
    print(1)
    print(0)



    


    print(2) 
    print(0) 
    print(1)

print(res)


    print(2)
    print(1)
    print(0)

    print('2')
    print('1')
    print('0')

    print(2)
    print(1)
    print(0)

    print(2)
    print(1)
    print(0)

    print(0)
    print(1)
    print(2)
    

    print(2)
    print(1)
    print(0)


print(a)

    print(0)
    print(1)
    print(2)
    

    print(2)
    print(1)
    print(0)


    print(2)
    print(0)
    print(1)

    print(2)
    print(1)
    print(0)


    print(2)
    print(1)
    print(0)
    

    print(2)
    print(1)
    print(0)
    print(2)
    print(1)
    print(0)

  print('0')
  print('2')
  print('1')

    print(2)
    print(1)
    print(0)

    print(2)
    print(0)
    print(1)

    print(2)
    print(1)
    print(0)

    print(2)
    print(1)
    print(0)


    print(2)
    print(1)
    print(0)

    print(2)
    print(1)
    print(0)

    print(2)
    print(1)
    print(0)

    print(2)
    print(1)
    print(0)

    print(2)
    print(1)
    print(0)

    print(2)
    print(1)
    print(0)

    print("2")
    print("1")
    print("1")
    print("0")

    print("2")
    print("1")
    print("0")

        print(2)
        print(1)
        print(0)

    print(2)
    print(1)
    print(0)

    print("2")
    print("1")
    print("0")

    print(2)
    print(1)
    print(0)

    print(2)
        print(2)
        print(1)
        print(1)
            print(1)
            print(0)
        print(0)

    print("2")
    print("1")
    print("0")

    print(2)
    print(1)
    print(0)

    print("2")
    print("1")
    print("0")

    print(-1)
    print(0)
    print(1)



    print(-1)
    print(0)
    print(1)




print(ans)

    print(0)
    print(-1)
    print(1)


    print(1)
    print(0)
    print(-1)

    print(-1)
    print(0)
    print(1)

    print(0)
    print(1)
    print(-1)

    print(0)
    print(1)
    print(-1)


    print(0)
    print(-1)
    print(1)


        print(0)
        print(1)

        print(-1)


    print(0)
    print(1)
    print(-1)


    print(0)
    print(-1)
    print(1)


    print(-1)
    print(0)
    print(1)

    print(0)
    print(1)
    print(-1)
            
            
        

  print('0')
  print('1')
  print('-1')

    print(0)
    print(1)
    print(-1)

    print(0)
    print(1)
    print(-1)




    print(0)
    print(1)
    print(-1)

        print(1)
        print(0)
        print(-1)

    print(0)
    print(1)
    print(-1)

    print("0")
    print("1")
    print("-1")


    print("1")
    print("-1")
    print("0")

    print(0)
    print(1)
    print(-1)


    print(0)
    print(-1)
    print(1)

        print(0)
        print(1)
        print(-1)


    print('1')
    print('0')
    print('-1')
    



print(uf.group_size())


print(group)


    print(1)
    print(c)

print(group)

print(count if count != 0 else 1)


print(g if g != 0 else 1)

    print(count)
    print(count)


print(group_num)

    print(1)
    print(count)

print(cnt)


print(cnt)


    print(len(groups))


print(ans)





    print(l.count(0))
    print("1")

    print(1)
    print(N)



print(res if res > 0 else 1)

print(cnt)

print(UF.group_count())



print(len(dsu.group_members()))


    print(a)
    print("1")

    print(res)


            print(0)
            print(1)
            print(2)
            print(-1) 

        print(0)
        print(2)
            print(-1)
                print(1)
                print(-1)    


        print(0)
        print(1)
        print(2)
        print(-1)


        print(0)
        print(1)
        print(2)
        print(-1)
        

        

        print(0)
        print(2)
            print(-1)
            print(1)
            print(-1)
    

        print(0)
        print(1)
        print(2)
        print(-1)

        print("0")
        print("1")
        print("2")
        print("-1")
        print(0)
        print(1)
        print(2)
        print(-1)

            print(0)
            print(1)
            print(2)
            print(-1)

        print(0)
        print(2)
        print(1)
        print(-1)

        print(0)
        print(1)
        print(2)
        print(-1)

            print(vec[pos].quality)
                print(0)
                print(-1)
            print(2)
            print(-1)
            print(vec[pos].quality)
            print(vec[pos].quality)
            print(-1)


        print(0)
        print(2)
            print(-1)
                print(1)
                print(-1)
    



print(ans)


print(record)


print(points)
            

    print(count)
    
    

print(ans)


print(points)



print(recode)

		
print(cnt)


print(count)    

            print(ans)

print(ans)


        print(ans)

print(ans)
    


    print(result)

print(res)

print(a)

print(count)


print(res)

print(ans)


print(sum(DP))


print(ans)
        
    
    



print(amount)



print(ans)

print(tax)


print(ans)

    






print(total)

print(-1 if res == INF else res)


print(ans)


print(-1 if n == float("inf") else n)

    print(-1)
        print(max(color[goal],color[goal+M]))
        print(min(color[goal],color[goal+M]))


        print(cost)
    print(-1)


print(ans)
    print(password)


    print(cnt)
        print(passwords[0])


print(cnt)
	print(abcd)

print(count)
    print(''.join(map(str, password)))



print(ans)
    print(now)

        print(cost)
    print(-1)


        
        
print(cost_list[1])


print(dp[N] if dp[N] != float("inf") else -1)

    print(suma,sumb)
            

    print(sa,sb)

        print(A,B)
    

    print(A,B)

    print(a, b)


    print(S1,S2)

    
    print(f'{p_a} {p_b}')
    print(a_score,b_score)

    print(a,b)


    print("{0} {1}".format(p1, p2))


        print("{0} {1}".format(player1, player2) )


		print(str(a) + " " + str(b))

    print(A,B)

    print(A, B)

 print("{0} {1}".format(A, B))
	print(acnt, bcnt)

    print(A, B)

	print(sa, sb)


        print(sum_a, sum_b)


    print("%s %s" %(sum_a,sum_b))

        


    print("{0} {1}".format(pl_l,pl_r))


        print(ap, bp)


    print(a_point, b_point, sep=' ')


    print(scoreA,scoreB)

    print(a,b)    

    print(a,b)

    print(a, b)

    print(a, b)

    print(Pa, Pb)

    print(s1, s2)

    print(pointA, pointB)      

	print(str(a)+" "+str(b))

        print('{0} {1}'.format(a_scores, b_scores))

            print(aa,ba)
    print(a,b)

    print("{} {}".format(score_a, score_b))

    print("%d %d"%(a,b))
    print(A,B,sep=" ")

    print(win[True], win[False])
    print('{} {}'.format(A_result, B_result))
    
    print(str(a)+' '+ str(b))

    print(a, b)

    print(A_sum, B_sum)

            print(a, b)


    print(str(Score[i][0]) + " " + str(Score[i][1]))

    print(*score)

    print(a_score,b_score)

  print(a,b)


  print(f"{ascore} {bscore}") 

    print("{} {}".format(A,B))
	print(ap,bp)

    print(*i)

    print(Ascore,Bscore)

    print(a,b)

    print(*score)

	print(A, B)


        print(ans)

        
        

        
    print("".join(s))


    print(ans)


    print(r)
 print(''.join(d.get(*[s()[0]]*2)for _ in[0]*int(s())))


print(result, end="")

    print(''.join(y))

    print(ans)

    print(''.join(ret))

        print(T.get(x,x),end='')
    print('')

        print(converter[c] if c in converter else c, end='')
    print()

    print("".join(ans))

    print(ans)

        print('{0}'.format(''.join(map(str, converted_txt))))

    print(converted)

        print(s[0], end="")
    print("")
    

    print(oSt.translate(str.maketrans(org, dist)))

    print(data.translate(str.maketrans(pre, post)))


    print(''.join(outdata))


	print(s)

    print(sum)
    print(d)


    print(''.join(a))



    print(s.translate(str.maketrans(word1, word2)))

	print(ans)

    print(s)


    print(ans)


    print(ans_data)

  print(ans)

	print(ans)


	print(s)

  
  print(converted_string)


    print(ans)


    print(result)

    
    print(ans)


    print(out)
    print(s)


    print(ret)

    print("".join(after_string_list))

    print(ans)


    print(s)

        print(conv[s] if s in conv else s, end = '')
    
    print('')



    print(ans)


    print(a)

    print(W)

    print()

    print()
        

  print(s)

        print(a)
        
                
    
    print(ans)


    print(ans)


 print(a)


    print(dice.total)

  
    print(ans)

    print(up)   
 print(s)

    
    print(ret)
        

	print(value)
      
    print(result)

    print(top)

    print(sum)
        print(result)

       
    print(result)

    print(ans)

    print(ans)


        
    print(ans)

    print(result)


        print(ans)


    print(count)

  print(a)

		print('t={0}, s={1}, e={2}, w={3}, n={4}, b={5}'.format(self.t, self.s, self.e, self.w, self.n, self.b))

	print(tsum)


    
    print(count)


   
    print(ans)

    print(ans)

        
    print(ans)


    print(count)

  print(a)


    print(total_score)
    print(cnt)

    print(retval)


    print(ans)


    print(ans)


	print(ans)

    print(score)

    print(sum)



        print(ret)

        print(ans if ans <= m else -1)


    print(ans if ans <= m else -1)

      print(ans)
      print(-1)
      print(ans)
      print(-1)

	print(ans if ans <= m else -1)


            print(ans)
            print(-1)

    print(ans if ans <= M else -1)

  print(a)


	print(i)


        print(a if a <= m else -1)

            print(-1)
            print(d)
            print(-1)
            print(d)
            print(-1)
            print(d)
                print(-1)
                print(t)
  print(cnt if cnt <= m else -1)

            print(-1)
            print(d)
            print(a)
            print(b)
            print(c)
            print('=======')
                print(-1)
                print(d)
            print(a)
            print(b)
            print(c)
            print('=======')
                print(-1)
                print(d)
            print(a)
            print(b)
            print(c)
            print('=======')
                print(-1)
                print(d)
                print(-1)
                print(d)
            

        print(res)

            print(0)
                print(-1)
                    print(ans)
            print(-1)


        print(a)

            print(-1)
            print(d)
            print(-1)
            print(cnt)
            print(-1)
            print(count)
                print(cnt)
                print(-1)
            print(-1)
            print(d)
            print(-1)
            print(d)
            print(-1)
            print(d)
            print(-1)
            print(d)
            print(-1)
            print(cnt)
    print(ans)

            
    print(ans)

        print(-1)
        print(ans)
        

print(*ans, sep='\n')

			print(-1)
			print(ans)


            print(-1)
            print(cnt)
        print(ans)
        print(-1)


            print(cnt)
    print(main())






        print(solve_optimized(tuple(s), m))


        print(solve(stacks, m))

        print(score)
        print(-1)

                    print(-1)
                    print(dist_c)
    print(solve(n, m, tuple(cup)))



    print(ls_ans[i])

      print(i)
        print(i)
      print('-1')

        print(ans)
        print(-1)
            print(d[s])
        print(-1)


    print(a)


        print(ans)
        

	print(ans)

    print('{{:.{}f}}'.format(r + 1).format(ans)[:-1])

        print(to_str(tmp, one, r))
        print(to_str(tmp, one, r))

        print(to_str(tmp, one, r))
        print(to_str(tmp, one, r))

        print(to_str(tmp, one, r))
        print(to_str(tmp, one, r))

    print(str(ans[0]) + '.' + ''.join(map(lambda i: ('0' * 9 + str(i))[-10:], ans[1:]))[:r])
        
        print(*a)



    print(*an)


        print(sorted_teams[i].name, end=" ")
    print(sorted_teams[m-1].name)


    
    print(" ".join(map(str,[t[1] for t in lst])))
  
        print(*result_list)

    print(" ".join(list(map(lambda y: str(y[0]), x))))
    


    print(*ans)


    print(' '.join(map(str,[k for k,_ in C(d).most_common()])))

	print(*[ans[i][1] for i in range(m)])

    print(' '.join([str(t[1]) for t in B]))
    print(*index_ans)

    print(*[t[1] for t in sorted((-sum(s), i + 1) for i, s in enumerate(votes))])

    print( *[ x for x, y in M] )


        

            print("{} ".format(vote[i][1]+1), end="")
            print("{}".format(vote[i][1]+1), end="")
    print()
    print(*result)


        print('{0}'.format(' '.join(t)))

    print(' '.join(map(str, ans2)))

        print(C[i][1], end=" ")
    print(C[M-1][1])

    print(" ".join([str(e) for e in res]))


    print(*l)

	print(ans)


    print("%d"%(info[0].loc),end="")
        print(" %d"%(info[i].loc),end="")
    print()




        
        print(S)
            

    print(s)

    print("".join([a for a in an]))


        print(t[i], end="")
    print("")


    print(word)

    print("".join(new))


    print(s)


    print(s)
    

    print(s)

    print(apply(f, n, s))


        print(c_num_str[:len(c_num_str) - 1])

    print(s)

    print(s)

    
    print(s)


        print(s)
    print(s)


        print(ans)


  print(digits)

    print(S)

        print(x, end='')
    print() 

    print(output_num)

    print(s)

	print(s[1-(i&1)])


    
    print(t)

    print(*lst, sep='')

        print(*a[:k])
            print(t[i], end=" ")
        print(t[-1])
    print(" ".join(map(str, l)))

    
    print('\n'.join(answers))

        print(" ".join((map(str, reversed(l[i])))))

        print(*L)


    print(" ".join(list(map(str,list_p))))
            print(*partition)

        print(*result)

		print(*a[:k])
            print(*row, sep=' ')


    print(n)
            print(*l_i)

        print(' '.join(map(str, pattern)))


    print(" ".join(map(str, x[1:])))                         
                                                             
                                                             

        print((" ").join([str(num) for num in leaf]))

        print(*ansChild)

        print(' '.join(map(str,ANS[i])))


        
        print(max(len_rec))

        
        print(max(len_rec))


    print(max_)



    print(max(sum(A),sum(B)))


print(max(Sa,Sb))

print(max(sum(a), sum(b)))


print(max(sum(A),sum(B)))

    print(s)
    print(t)

print(max(A,B))

print(max(s, t))

    print('{0}'.format(max(sum(scores_a), sum(scores_b))))

print(max(sum(map(int,input().split())),sum(map(int,input().split()))))

    print(suma)
    print(sumb)

print(max([sum(A), sum(B)]))

print(max(sum(map(int, input().split())), sum(map(int, input().split()))))

        print(aa)
        print(bb)


print(max(sum(a),sum(b)))

    print(sum(B_points))

    print(sum(A_points))

print(max(sum(map(int, input().split())) for _ in range(2)))


print(max(sum(list(map(int,input().split()))),sum(list(map(int,input().split())))))

print(max(sum(map(int,input().split()))for _ in'12'))

print(sa if sa >= sb else sb)

    print(S)
    print(T)

print(max(S,T))

print(max(sum(alist), sum(blist)))

print(max(sum(n),sum(m)))

  print(sum(a))
  print(sum(b))

    print(S)
    print(T)

print(max(sum(list(map(int, input().split()))), a))

  print(a+b+c+d)
  print(e+f+g+h)


print(max(s, t))

    print(A)
    print(B)

print(max(sum(list(map(int,input().split()))),sum(list(map(int,input().split())))))

	print(sum(b))
	print(sum(a))

print(max(sum(map(int,input().split())),sum(map(int,input().split()))))

    print(max(sum([int(x) for x in input().split()]), sum([int(y) for y in input().split()])))




print(max(sum(A),sum(B)))


print(max(s1,s2))

    print(d)
    print(c)

print(max(sum(A),sum(B)))

print(max(sum(list(map(int, input().split()))),sum(list(map(int, input().split())))))


print(s) if s >= t else print(t)


print(max(sum(list(map(int, input().split()))), sum(list(map(int, input().split())))))

print(max(sum(A),sum(B)))

    print(sum_a)
    print(sum_b)


print(num_list[1])


print(T)



	print(t)
	print(s)


print(max(A,B))



print(max(sum(a), sum(b)))


print(max_score)


    print(A_sum)
    print(B_sum)


    print(max(sum(a_list), sum(b_list)))


    print(Ap)
    print(Bp)

print(max(s, t))

print(M)

    print(a)
    print(b)

print(max(f(),f()))

print(max([sum(S), sum(T)]))


print(max(sum(A),sum(B)))

    print(s)
    print(t)


print(max(ss,tt))

            print(i+1)

        print(i+1)
        

    print(v)



print(f'{l[0]}\n{l[1]}')

        print(j)

    print(i)

    print('{0}\n{1}'.format(yet_to_submits[0], yet_to_submits[1]))

        print(i + 1)

    print(i)


print("{}\n{}".format(sort_absent[0], sort_absent[1]))

print('\n'.join(map(str, sorted(list(set(range(1, 31)) - set(map(int, stdin)))))))

print(*sorted(set(range(1,31))-set(map(int,sys.stdin))),sep='\n')

print(c[0], c[1], sep='\n') 

    print(i)

        print(i)

print(n[0])
print(n[1])

        print(i)
        

		print(nnn+1)

        print(i)


            print(i + 1)


        print(i)

print(joi[0])
print(joi[1])

print(min(list(t-s)))
print(max(list(t-s)))


print(*sorted(list(filter(lambda x: x!=0, l))), sep='\n')

print(*[i for i in range(1, 31) if i not in x], sep="\n")


print(min(R))
print(max(R))

        print(i)

print(min(line))
print(max(line))

        print(i)


        print(j)

        print(j)

        print(j)

        print(i)

print(n[0])
print(n[1])


print(a[0])
print(a[1])


print(flist[0])
print(flist[1])

        print(i)

         print(i)

    print("1")
    print("2")
    print("29")
    print("30")
        print(a)
        print(a)
        print(b)

print(min(result))
print(max(result))

print(K[0])
print(K[1])

        print(i+1)

    print(30)

    print(lst3[i])


        print(i)

        print(j)


        print(i)


print(c[0])
print(c[1])

            
print(result[0])
print(result[1])

print(ee[0])
print(ee[1])


print(c[0])
print(c[1])

print(member[0])
print(member[1])


print(min(list(set(data2) - set(data1))))
print(max(list(set(data2) - set(data1))))

	print(j)

   print(list[j])


print(a[0])
print(a[1])

        print(h)

print(re[0])
print(re[1])


print(list(z)[0])
print(list(z)[1])


print(b[0])
print(b[1])


print(a[0], a[1],sep='\n') 

print(min(result))
print(max(result))

    print(1)
    print(30)
        print(m)


        
print(ab[0])
print(ab[1])

        print(i)

        
print(ans[0])
print(ans[1])

    print(T[1])
    print(T[0])
    print(T[0])
    print(T[1])


print(min(R))
print(max(R))

        
print(min(line))
print(max(line))

        print(i)

        print(i+1)

print(min(y))
print(max(y))


print(lst[0])
print(lst[1])


        print(i)

print(l[0])
print(l[1])


print(s[0],s[1],sep='\n')

          print(a[j]+1)
    print(a+1)
print(ans)


        print(chr(ord(line[i])-3+26), end="")
        print(chr(ord(line[i])-3), end="")
print("")

print("".join(t))


    print(ans)


print(ans)

    print('{0}'.format(''.join(result)))

    print(a[a.index(x)-3],end='')
print()


print(ans)

    print(rot(input().strip(), -3))


    print(ans, end='')
print()

print(ans)


print(''.join(chr((ord(x)-42)%26+65)for x in input()))

print(ans)

    print(dict_.get(a) , end = "")
print()

print(''.join(chr((ord(c)-3-base)%26+base) for c in s))

print(s2)

print(ans)


    print(''.join(ans))
    

    
print("".join(L))

print(S.upper())

    print(chr(a), end='')
print()


print(str2)


print("".join(n))

        print(ANS[i])
        print(ANS[i], end = "")

print(''.join(clist))

	print(dict[s], end='')
print()

print(*n, sep="")    

    
print(derot_n(input(), 3))

print(ans)


print(a)  

         print(s[i], end = "")
print("")


        print("X",end="")
        print("Y",end="")
        print("Z",end="")
        print(chr(ord(i)-3),end="")
        print()

print(''.join(l))

print(D)

print(s2)

print(s)

    print(L[c-3],end="")
print()

            print(caesar[i],end='')
print('')

print("".join(n))



print(l)
    

    
print(*ans,sep="")
    


         print(s[j], end='')
print()

print(ans)


    print(a[c],end="")
print("")

print(''.join(s))

print(*ans,sep="")

print(*ans, sep = "")

print(''.join(l))
    


    print(chr(a), end='')
print()

  print(a[a.index(x)-3],end='')
print()

print(''.join(z))

    print(chr(k), end="")


print("")

print(d)


print(ans)

            print(n[i],end="")
print()


print(ans)


print(ans)


print(C)

    print(convert_str)

    print(chr(m),end="")
print()

print(encrypt(plain, s))


print(converted)

  print(A[s],end='')
print()


print(ans)


print(plaintext)


    print(decode[j], end='')
print()



print(ret)

print("".join([chr((ord(i)-42)%26+65)for i in input()]))

print(line)

    print(ans)


print(ans)


print(ans)


print(''.join(Z))

        print(ans)


    print(cards[i])

    print(c)


    print(c)

    print(c)

    print(i)


    print('\n'.join(map(str, cards)))


    print(card)


    print(card[i])

    print(k)

    print(i)


print(*cards, sep='\n')

    print(c)


    print(i)

  print(i)

    print(c)

print("\n".join(cards))

print('\n'.join(map(str, card)))

print(*c, sep='\n')

        print(n)

print('\n'.join(map(str, ANS)))


    print(c_i)


print(*s,sep='\n')

	print(a)


print(*cards, sep = '\n')

    print(card)

    print(num)

    print(c)

    print(no)




    print(a[i])


    print(card[i])
    

    print(L[i])

    print(i)

            print(ans)




        print(check[i])

        print(x)

        print(p)
        print(m)
        print(c)


    print(i)

            print(parts_state)

        print(pw[i])
        print(mt[i])
        print(cb[i])



    print('\n'.join(str(x) for x in fixed))

                print(1)
                print(0)
                print(2)


	print(*p, sep='\n')

        print(part)

            print(i)
        print(reslist[i])

        print(ans[i])


        print(A[i+1])

	print(*p, sep='\n')


        print(c)


            print(0)
    
            print(1)
    
            print(2)


                print("1")
                print("0")
                print("2")
               

        print(val)


        print(ans)


        print(r)

            print("1")
            print("0")
            print("2")

    		print(2)
    		print(i)

        
        print(dp[b][a])


        
    print(table[a][b])    



    print(dp[b-1][a-1])
    print(dp[a][b])

    print(an)


    print(patterns[-1][-1])

		print(dp[h-1][w-1])

    print(0)
 print(m[~-a][~-b])

	print(p[a][b])


    print(dp[a][b])

        
        print(str(roads[a][b]))
        
    print(int(coo[wid-1][ver-1]))

    print(cross[b][a])
 
    print(dp[a][b])


        print(root[b - 1][a - 1])


    print(mat[b-1][a-1])

    print(memo[b][a])

    print(lst[b][a])


    print(dp[a][b])

    
    print(p[a-1][b-1])
    


  print(an[i][j])

    print(line)

	print(dp[a - 1][b - 1])


    print(dp[a-1][b-1])




    print(dp[a][b])

    print(l1[a][b])

        print(dp[b - 1][a - 1])

    print(0)
    print(dp[b][a])


        print(dp[height - 1][width - 1])

	print(dp[a - 1][b - 1])

    print(p[a][b])


    print(dp[a][b])


    
    print(dp[-1][-1])


    print(road[a-1][b-1])

        
    print(com(n,s))
        print(result)



    print(memo[b][a])



    print(dp[y][x])

        print(root[-1][-1])

		print(int(road[-1][-1]))
    print(table[b-1][a-1])

    print(r[a-1][b-1])

        print(dp[h][w])
        print(0)


    print(dp[0][w-1])

    print(DP[M][N])


    print(L[-1][-1])

    print(DP[-1][-1])



        print(route(W, H))


        print(dp[a-1][b-1])

        print(check(0,0))
    

        print(rec(a, b))
        
    print(Map[a-1][b-1])


        print(ans)


		
	print(ans)

    print(max(csum[i+k]-csum[i] for i in range(n-k)))

	print(e)

        
        print(ans)
        

    print(an)


    print(ans)


    print(max(results))


    print(ans)

  print(res)

    print(ans)

  print(max(z))


        print(maximum_sum)


    print(ans)


        print(ans)


	print(res)


        print(max(subsum))


        print(max_sum)

    
    
    print(max_s)
            print(val)

        print(ans)

    print(ret)

    
        print(ans)

    print(ans)


		print(sum(a[maxi:maxi + k]))
    print(maxval)

    print(N_max)

    print(max)


  print(max(d))


    print(max)



    print(ma)


        print(max)

    print(max(ss))    

    print(max(ss))

    print(max)


    print(ans)

    print(ans)

    print(ans)

    print(ans)

    print(ans)

    print(max)

        print(m)

            
    print(M)

    print(ans) 
    print(max(c))

    print(max(c))
        

 
 print(max)

            
        
    print(mx)

            
        
    print(mx)

            print(max(y))

            print(max(y))

    print(ans)

    print(max(ss))

    print(max(ss))    

    print(max(ss))

        print(max(ss))

    print(max(ss))    

    print(max(l))

    print(max(ss))

    print(max(ss))
    

    print(max(ss))

    print(max(ss))

    print(max(ss))

    print(max(ss))

        
    print(max(ss))

  print(max(ss))

    print(max(ss))

            
        

      print(max(ss))

    print(max)

    print(max(ss))

            print(max(y))
            

 
 print(max)


    print(max)


    print(max(ss))

    print(max)

    print(max(c))

    print(max)


    print(max(ss))


    print(max(ss))

    print(max(l))

    print(max(ss))

    print(max(ss))

    print(max(ss))

    print(max)

    print(max(ss))

    print(max(c))

            print(max(y))

    print(max(ss))

    print(max(ss))

    print(max(ss))

        print(max(ss))

    print(max(ss))

        print(anser)
        
    print(max)


        print(m)
        

    print(m)

            print(1)
            print(ans)
            print(ans)


    print(an)


        print(ans)
        print(ans)

            print(max_length)
            print(max_length)

		print(ans)
		print(ans)


      print(ans)
	print(ans)

        print(ans)


        print(1)

    print(ans)

    print(a)

    
    print(max_count)



        print(l)

        print(ans)
        print(best + 1)
        print(max(seq))


    print(max_len)



    print(ans + 1)


    print(ans)

        
        print(ans)



        print(max_area)

    
    print(ans)

    

    print(ans)
    print(ans)

    print(max_square)

        print(a+1)
    print(ans)

        print(v + 1)
        print(1)
        print(0)


print(*ans, sep = '\n')

        print(1)
    print(0)

print(*G.rank[::-1], sep='\n')
print(G.choice)


        print(d)
        print(0)
        print(1)



  print(temp + 1)
    print(v + 1)
  print(flag)
        print(i+1)
            print(1)
        print(0)
    
    print(i+1)

print(isnotunique)

    print(ans+1)


print(1 if isMultiWay else 0)

print('\n'.join(map(str, ranking)))
print(0 if definite else 1)


print(1 if topological_sort(n, to) else 0)



print('\n'.join(str(s + 1) for s in result))
print(int(not unique))

    print(ans)


    print(min_weight(root_bar.pop()))

    print(max(weight))

	print(calc(i))


    print(solve(*a[root-1]))

        
        print(traversal(root_id))

        print(self.left, self.right)


    print(maxi)

        print(lm.solve(rt))
    print(*ans, sep='\n')


        print(lcm)

        
        print(ans)


    print(ans)

    print(ans)


    print(ans)

    print(ans)

            print(solve(n))


    print(cnt)

    print(m)

    print(c+o)

        
        print(count)

  print(sum)


    print(change_coin)

    print(ans)

  print(ans)

 print(a+b)

	print(ans)

    print(ans)


    print(cnt)


        print(ans)
    print(ans)


  print(ans)

    
    print(count)
    
    

  print(b+c+d+e+f+g)

	print(go+gohyaku+gojuu+hyaku+iti+juu)

		


        print(ans)


    print(cnt)

        print(ans)
        
    print(c)
        
    

        print(cnt)

    print(c//500 + c%500//100 + c%100//50 + c%50//10 + c%10//5 + c%5)


    print(count)
    


    print(c)

    print(cnt)

    
    print(s)

    print(kei)

        print(z)

    
        print(sum_coin)

            
    
            
     
    print(int(sum))
    

    print(b+c+d+e+f+g)
    


    print(ans)

    print(n)

   
   print(z)
   


    print(a+b+c+d+e+f)


	print(f)

    print(ans)


    print(sum)

    
    print(a+b+c+d+e+f)
    
    print(a+c+e+g+i+k)

    print(x)

            print(x+y+z+u+w+g)
    print(a+b+c+d+e+f)

    print(f+h+i+t+v+o)

            print(x) 

        print(a+b+c+d+e+f)


        print(a+b+c+d+e+f)

    print(c_1+c_2+c_3+c_4+c_5+c_6)

        print(y)


    print(b+c+d+e+f+g)

    print(sum)
    print(b+d+f+h+j+k)

    print(a+b+c+d+e+f)

    print(b+d+f+h+j+k)

    print(ans)

    
    print(a+b+c+d+e+f)

    print(int(a))

   print(str(sum))
     


    print(count)

    
    print(a)

        print(i)
     print(ans)

    print(b)

        print(ans)

    print(a+b+c+d+e+f)
    print(a+b+c+d+e+f)
   

    print(i+j2+h)

    print(cnt + x)

    print(a+b+c+d+e+f)

    print(b+d+f+h+j+k)    

    print(s)

    print(g+h+d+z+f+i)

    print(s)

        
        print(j_ans)
        print(i_ans)


    
    print(ans1)
    print(ans2)

        print(c)


    print(f'{joi}\n{ioi}')

  print(J)
  print(I)

    print(c.count('JOI'))
    print(c.count('IOI'))

    print(j)
    print(i)


            print(s)
            print(t)
        print(JOI)
        print(IOI)
        print(m.count('JOI'))
        print(m.count('IOI')+m.count('IOIOI'))
    print(ans1)
    print(ans2)
            print(s)
            print(t)
        print(JOI)
        print(IOI)
    
    print(Jcount)
    print(Icount)


        print(joi_counter)
        print(ioi_counter)

    
    print(JOI)
    print(IOI)


        print(joi)
        print(ioi)

    print(n_joi)
    print(n_ioi)

    print(joi)
    print(ioi)

    print("\n".join(map(str, [j, i])))

    print(cnt_joi)
    print(cnt_ioi)


        print(joi)
        print(ioi)

        print(find_pattern(line, 'JOI'))
        print(find_pattern(line, 'IOI'))


    print(how_in(pattern, 'JOI'))
    print(how_in(pattern, 'IOI'))

    print(ans1)
    print(ans2)
	print(*[c.count(a) for a in ["JOI", "IOI"]], sep='\n')

        print(joi)
        print(ioi)
            print(0)
            print(0)

        print(cnt1)
        print(cnt2)


    print(joi)
    print(ioi)

    print(joi)
    print(ioi)

	print(a)
	print(b)

  print(countJOI)
  print(countIOI)


    print(A[k])


    print(cnt_j)
    print(cnt_i)

    print(joi)
    print(ioi)
        

    print(b)
    print(c)

        
        print(J)
        print(I)
        
	print(countDuplicate(S, 'JOI'))
	print(countDuplicate(S, 'IOI'))


    print(a)
    print(b)

            
    print(ans1)
    print(ans2)

        print(cj)
        print(ci)
        print(J)
        print(I)
      print(Jc)
      print(Ic)

    print(x)
    print(z)

    print(J)
    print(I)

        print(J)
        print(I)

                
        print(A)
        print(B)
        
        print(a)
        print(b)
    print(b)
    print(c)

        
    print(joi,ioi,sep="\n")
        

    print(*[c.count(a) for a in ["JOI","IOI"]],sep="\n")

    print(B)
    print(C)

      print(p)
      print(q)
        print(s)
        print(t)
        print(j)
        print(i)
        print(JOI)
        print(IOI)
        
                
        print(joi)
        print(ioi)
    
    
        print(b)
        print(c)
      print(Jc)
      print(Ic)

        print(a)
        print(b)
    print(*[c.count(a) for a in ["JOI","IOI"]], sep="\n")

    print(joi)
    print(ioi)

    
    print(count[0])
    print(count[1])

    print(b)
    print(c)

  print(n)
  print(m)

    print(c_joi)
    print(c_ioi)


    print(cnt_j)
    print(cnt_i)


    print(joi)
    print(ioi)
    
        print(JOI)
        print(IOI)
            
        print(J)
        print(I)
        print(a)

        print(len(Hanako))
        print(len(Taro))
       

        
    print(len(hanako))
    print(len(taro))
        
            

   
   print(f'{len(h)}\n{len(t)}')

    print(an[0])
    print(an[1])


        print(*ans, sep='\n')


                print(len(h_card_list))
                print(0)
                print(0)
                print(len(t_card_list))
    
    print(T)
    print(H)


    print(len(hanako),len(taro),sep="\n")

    print(len(cards[1]))
    print(len(cards[0]))

            print(len(hhand))
            print(0)
            print(0)
            print(len(thand))
    print(*[len(cet) for cet in card_set[::-1]], sep='\n')

    print(len(card_h))
    print(len(card_t))

  print(len(H))
  print(len(T))




	print(m[1], m[0], sep='\n')


    print(len(hanako))
    print(len(taro))


    print(tarop)
    print(hanap)

    
        print(hanako.length)
        print(taro.length)


	print(len(hanako))
	print(len(taro))



    print(len(h))
    print(len(t))

    
    print(sum(cards[1]))
    print(sum(cards[0]))



    print(len(Hanako))
    print(len(Taro))
    

    
    print(C.count("H"))
    print(C.count("T"))


    print(len(hanako))
    print(len(taro))


            print(len(hanako))
            print(0)
            print(0)
            print(len(taro))
	print(dx, dy)


            print(dx, dy)
            print(x - bx, y - by)
            print(x-x1,y-y1)
        print(dx,dy)
	print(dx, dy)

                print(dx, dy)

            print(x, y)
            print(x - sx, y - sy)
            print(dx, dy)
            print(x,y)
            print(x,y)
   print(*ans)

    print(s0-z00,s1-z01)

            print(star[i][0] - x1, star[i][1] - y1)
            print(off_x, off_y)
    print(max_n)



  print(a)
    print(ans)
        
        print(max(ans))
        
    print(max_ans)

    print(ans)



        print(ans)

    print(a)


    print(maxx)


    print(ans)


        print(ans)


                print(dijkstra(a - 1, b - 1))
            print(ans)
         print(ans)
                    print(-1)
                    print(money)
            print(dijkstra(a - 1, b - 1, links))

            print(ans)
    print(an)


            print(-1 if d[b]==inf else d[b])

                    print(-1)
                    print(costs[f][t])
    print(*ans, sep='\n')


            print(dist[t] if dist[t] != INF else -1)
			print(e)

                print(-1)
                print(rp[e])

                print(-1)
                print(v[0])
        print(-1)
        print(sum(stack[1::2]) - sum(stack[::2]))


                
    print(an)


        print(counter)

    print(total)


    print(answer)

    print(ans)

    print(sum(a[2*i+1] for i,x in enumerate(a[::2])if x==0))

    print(ans)

	print(ans)

    print(ans)

    print(cnt)

    print("%d"%(ans))




    print(left)

    print(right if check(right) else left)


        print(ans)

    print(b)

	print(ans)

        
        print(ans)


    print(max(A))
    print(ans)

		print(max(i+s[bisect.bisect_right(s,m-i)-1] for i in s))

      print(max(ans))

    print(ans)


        print(max(i + point[bisect.bisect_left(point, m - i) - 1] for i in point))
            
        print(ans)


        print(max_score)



    print(ans)


print("\n".join(map(str, ans)))


    print(max(ans))
        print(ans)


        print(ans)



  print(res)


	print(ans)



    print(max(pi + p2[bisect_right(p2, m - pi) - 1] for pi in p2))


        print(max_point)


    print('max_combi: {0}'.format(max_combi))
        print(ans)

      print(m)
  print(max_S)


            print(m)

    print(max_S)


    print(max(i+s[bisect.bisect_right(s,m-i)-1]for i in s))

    print(s)

      print(m)
  print(max_S)

 
    print(ans)

        print(ans)


        print(m)
    
        print(cost)

            print(total_risk)
    print(ans)


            print(new_total)
    print(ans)

        print(counter)



    print(cnt)


    
    print(ans)

    print(mx-1)

    
    print(ans)

        print(ans)

  print(ans)

    print(cnt)


    print(ans)



    print(ans)


    print(bfs(board, w - 1, h - 1))



        print(ans)


    print(a_h,a_m,a_s)
    print(b_h,b_m,b_s)
    print(c_h,c_m,c_s)


    print(h,m,s)

    
    print(h,m,t)

    print(h, m, s)


    print(*tmp)


    print(dH,dM,dS)

  print('%d'%h2,'%d'%m2,'%d'%s2)

print('0 0 1')
print('0 0 59')
print('15 59 59')

    print(h, m, s)

print(A)
print(B)
print(C)

  print(h,m,s)
 print(t//3600,t//60%60,t%60)

	print(t//3600, (t%3600)//60, t%60)

    print(hour, minute, second)


    print(ha,hb,hc)

  print(h,m,s)

    print(h,m,s)

    
    print(h3, m3, s3)
        

	print(hms(sec(H,M,S)-sec(h,m,s)))


    print(h, m, t)


    print(t//3600, (t%3600)//60, t%60)

  print(X//3600,(X//60)%60,X%60)

print(str(ha)+' '+str(ma)+' '+str(sa))
print(str(hb)+' '+str(mb)+' '+str(sb))
print(str(hc)+' '+str(mc)+' '+str(sc))

    print(h_a, m_a, s_a)

	print('{0} {1} {2}'.format(wt//3600, wt%3600//60, wt%3600%60))


    print(h,m,s)


    
    print(h,m,s)

        print(wh, wm, ws)

    print(int(Time/3600), int((Time%3600)/60), int((Time%3600)%60))

    print(h, m, s)

  print(x//3600, x%3600//60, x%60)

    print(g,i,j)

	print(h, m, s)


    print(h, m, s)

    print(h, m, s)


    print(h,m,s)


    print(hours, minutes, seconds)

        print(h,m,s)

    print(h,m,s)

    print(time//3600,(time//60)%60,time%60)

        print(diff.seconds//3600, diff.seconds%3600//60, diff.seconds%60)


print(jikan(A))
print(jikan(B))
print(jikan(C))


print(A//3600,A%3600//60,A%3600%60)
print(B//3600,B%3600//60,B%3600%60)
print(C//3600,C%3600//60,C%3600%60)

    print(str(h) + " " + str(m) + " " + str(s)) 

    print(lst[3] - lst[0], lst[4] - lst[1], lst[5] - lst[2])

    
    print((row2-row)//3600, (row2-row)%3600//60, (row2-row)%3600%60)


    print(*ans)


        print(a, end=' ')
    print(ans[-1])

print(while_in_time(A_time))
print(while_in_time(B_time))
print(while_in_time(C_time))


        print(elapsed_hours, elapsed_minutes, elapsed_seconds)

    print(" ".join([str(e)for e in [h,m,dur]]))

    print(w_ans,k_ans)



print(W[7]+W[8]+W[9], K[7]+K[8]+K[9])

print(a, b)


print(total1,total2)

print(*(sum(sorted(int(input()) for _ in range(10))[-3:]) for _ in (0, 0)))


print(w_score,k_score)

print(a1,a2)

print(*(sum(sorted([int(input()) for _ in range(10)])[-3:]) for _ in range(2)))

print(sum(sorted(wk[:10])[7:]), sum(sorted(wk[10:])[7:]))

    print(W_sum, K_sum)



    print(aa, bb)

print(" ".join(pt))


print("{} {}".format(W_top_three, K_top_three))

    print(sum(sorted(w, reverse=True)[:3]), sum(sorted(k, reverse=True)[:3]))
        

print(func(),func())


print(*[sum(sorted(int(input())for _ in[0]*10)[7:])for _ in'12'])

print(s[0], s[1])


print(score_w, score_k)


print(sumW, sumK)

print(sum(w[-3:]),sum(k[-3:]))

print(W[7]+W[8]+W[9],K[7]+K[8]+K[9])


print(W[0] + W[1] + W[2] , K[0] + K[1] + K[2])

print(str(souhei())+' '+str(souhei()))

   
print(W[0]+W[1]+W[2],K[0]+K[1]+K[2])


print(f"{W[7]+W[8]+W[9]} {K[7]+K[8]+K[9]}")




print(str(arr1[9] + arr1[8] + arr1[7]) + " " + str(arr2[9] + arr2[8] + arr2[7]))



    print(W[0] + W[1] + W[2], S[0] + S[1] + S[2])


print(sum(W[7:10]),sum(K[7:10]))

print(sum(sorted(w)[7:]), sum(sorted(k)[7:]))


print(sum(a[:3]),sum(b[:3]))

print(sum(W[-3:]),sum(K[-3:]))

    
print(w, k)

print(str(k[0]) + " " + str(k[1]))


print(wm[0]+wm[1]+wm[2],km[0]+km[1]+km[2])

print(sum(b[7:10]),sum(c[7:10]))



print(A,B)


print(sum1,sum2)



print(W,K)

print(sum(w[:3]) , sum(k[:3]))


print(sum(W[0:3]), sum(K[0:3]))



print(f'{W} {K}')


print(sum(a), sum(b))


print(W,K)


print(tenw, tenk)

print(a[7]+a[8]+a[9],b[7]+b[8]+b[9])

print(ave1,end=" ")
print(ave2)


print(a,b)


print(sum(w[7:]),sum(k[7:]))

print(x[7]+x[8]+x[9],y[7]+y[8]+y[9])

print(sum(W[:3]),sum(K[:3]))


print(W[7]+W[8]+W[9],K[7]+K[8]+K[9])


print(x,y)

print(sum_W, sum_K)

print(sum(b),sum(c))


print(W[7]+W[8]+W[9],K[7]+K[8]+K[9])


print(x,y)


print(sum(wa), sum(ke))

print(b[0]+b[1]+b[2],end=' ')
print(d[0]+d[1]+d[2])


print(pointW, pointK)



print(a, b)


print(sum_W, sum_K)


print(x,y)

print(f'{sum1} {sum2}')

print(W,K)

print(sum(C[7:10]),sum(D[7:10]))

print(W,end=' ')
print(K)

print(sum(w[0:3]),sum(k[0:3]))

        print(sum(u))
        print(sum(u),end=' ')

print(sum(a[:3]), sum(b[:3]))

print(sum(w[0:3]),sum(k[0:3]))


print(sum(heapq.nlargest(3,a)),sum(heapq.nlargest(3,c)))

print('{0} {1}'.format(sum(W[0:3]), sum(K[0:3])))



print(sum(W1), sum(K1))


print(str(k)+' '+str(l))



print(W,K)

print(w, k)


print( A , end = " ")
print( B )


print(sum(w[7:]),sum(k[7:]))

print(W[1]+W[2]+W[0],end=" ")
print(K[1]+K[2]+K[0])


print(wsum,ksum)

print(A,C)


print(sum(W[0:3]), sum(K[0:3]))

print(sum(w[:3]),sum(k[:3]))

print(w1,k1)

print(sum(sorted(lstW)[7:]),sum(sorted(lstK)[7:]))


print(w,k)





print(f'{a:.3g} {b:.3g}')

        print(min_puyo)


    print(min_num)


    print(min_puyo)

	print(n - solve(C,L))



        print(min_erased)


    print(ans)

	print(minvalue)


				print(n)
	print(kes(ilo,kazu))

    
    print(ans)


    
    print(ans)

    print(an)


  print(a)

    print(res)


  print(res)

    print(ans)


    print(ans)


        print(num_cells)

        print(printer[i])

    
    print(ans)

        print(ans)

    print(ma)

        
        print(dp[N*N][S])


        
        print(dp[-1])

        print(ans)


    print(listrep(n,m,s))

 print(d[N][S]%10**5)

    print(dpp[s])


    print(dpp[s])


    print(dp[N][S])


    print(dp[n*n][s])

    print(an)


        
        print(ans)
        

    print(ans)
        print(ans)

print(*ans, sep="\n")


        print(num_pn)

    print(count)


    print(count)


	print(ans)


    print(sum(1 for i in range(m-n+1) if s[i:i+n]==ioi))

    print(sum(1 for i in range(b-len(a)) if s[i:i+len(a)]==a))

    print(*ans, sep='\n')


    print(ans)

    print(sum(1 for i in range(b - len(a)) if s[i:i + len(a)] == a))

    print(count)

    print(ct)

    print(ans)

    print(ans)




    print(cnt)

        print(ans)


            print(c)
        
        print(ans)

        

        print(s)

	print(ans)


        print(total_distance)


print("\n".join(map(str, ans)))


    print(ans)
  print(ans)

    
    print(ans)

    print(ans)



    print(d)

        
        print(sum(dist(s, int(input())) for i in range(m)))

    print(total_dist)

		print(ans)

    print(ans)


    print(ans)


    print(ans)



    print(ans)

    print(cost)


    print(ans)

		print(search_min_route(data[0],data[3],data[4]))
		
		

  print(res)



        print(ans)



        print(sum(s_list[:k]) + min_d)

    print(*ans, sep='\n')



    print(sum(points[x] for x in swap[:k]) + min_score_d)

  print(ans - max_dec)


    print(ans + tmpdif)

    print(minsc+hosei)

        print(h+1,w+1)
        



    print(x + 1,y + 1)

        print(ny + 1, nx + 1)

        print(i,j)
    
    print(*func(h, w, n))


        print(i + 1, j + 1)


    print(i+1,j+1)

    print(i+1, j+1)


    print(*start)

        print(ans)


    print(ans)
 
        print(min_l)


        print(tot-nine)

    
    print(N)

    print(s - t)


    print(N)

    print(su)

    print(n-sum([int(input()) for _ in range(9)]))

    print(s)

    print(p_sum)

    print(s - sum(price))

 print(int(e)-sum(int(input())for _ in[0]*9))

  print(n - sum([int(input()) for _ in range(9)]))

	print(s-sum([int(input()) for i in range(9)]))


    print(total - tmp)


    print(ans)

    print(x)

        print(c - sum([int(input()) for _ in range(9)]))


	print(n)



    print(sm - sum(l))


        print(k)


  print(total-others)


            print(J[k])
    print(sum_val - tmp)


    print(s)

            print(ans)
    print(t-sum(b))

        print(n)

    print(n)


        print(int(input())-sum([int(input()) for i in range(9)]))
  print(N)

        print(kei)

	print(total-sum([int(input()) for _ in range(9)]))


    print(t)


    print(n - S)

    print(s-sum(t))
        print(x)

        print(value)
    print(s - sum(l))

        print(price)

    print(goukei-a)

    print(x)

        print(n - sum(int(input()) for _ in range(9)))


  print(total)

    print(total)

            

        print(S)
    print(amount - sum(price))


    print(t-s)

    print(t-s)

    print(total - sum(prices))

    print(ans)


        print(total - sum(books))


        
        print(cnt+1)



            print(i+1)
            print(i+1)
    print(i + 1)


    print(i + 1)


            print(i + 1)
        print(turn)


	print(i-1)

                print(i + 1)
                print(i + 1)

    print(i)

    print(c)

    print(ans)

            print(i+1)
        print(cnt)
          print(cnt)

    print(i+1)



        print(ans)


            print(cnt)
            print(cnt)
	print(i+1)


    print(ans)

            print(i + 1)
            print(i + 1)
    print(i+1)
            print(i + 1)
            print(i + 1)
	print(ans)

    print(ans)

            print(i+1)
                print(i+1)
            print(i+1)
            print(i+1)
            print(turn)
                print(turn)
            print(0)
            print(sum(p)-1)
        
          
    print(ans)


            
    print(cnt)

  print(len({*R[1]}-{1}))

        print(len(invitation_set - {0}))

        print(len(invitees))


	print(ans)

    print(len(set(ans))-1)

    print(len(ans))

    print(len((ans|foff)-{0}))

    print(ans)
    print(len(ans))


    print(len(ans))


        print(no)


	print(len(B|C))


    print(ans-1 if 0 in s else ans)
	print(len(g))

    print(inv.count(True))

    print(len(friend))

    print(ct)

    print(len(f1) + len(f2))

    print(sum(invitation))



    print(len(s))



    print(len(s))



	print(len(st))

        print(len(ans))
        print(len(ans))
        print(len(ans))





    print(len(set([''.join(s) for s in P(card, k)])))

 print(len(set(''.join(s)for s in P(C,k))))

        print(ans)


        
        print(len(nums))

    print(len(set([''.join(x) for x in permutations(a, k)])))

    print(len(ans))

  
  print(len(set(word_list)))

    print(len(c))

	print(i)

    print(len(a))


    print(len(ans))


        print(len(set(p)))
        print(len(set(p)))
        print(len(set(p)))

	print(ans)

    print(len(s))

    print(len(s))


	print(len(nums))

    print(len(ans))

    print(len(s))

    print(len(d))



        print(len(num_set))


  print(len(dic))
    
   

    print("\n".join(map(str, ans)))


    print(len(dic))


    print(len(b))


	print(len(kind))

        print(len(answers))



    print(len(ANS))


    print(len(s))


    print(len(ans))


    print(len(s))
        
        print(len(nums))


 print(ans)
	
	print(len(set(nums)))



    print(len(s))

    print(len(S))

  print((sum(M[w-2][h-1][:2])+sum(M[w-1][h-2][2:]))%10**5)
        print(result)


        
        print(ans)
                    

    print(m%100000)

        print(sum(dp[h-1][w-1])%mod)

    print((L[H-2][W-1][0]+L[H-1][W-2][1])%100000)


    print(sum(dp[-1][-1]) % mod)
        print(d)

    print(sum(district[-1][-1]) % 100000)


    print(sum(mapp[h-1][w-1]+mapp[h][w-1]+mapp[h-1][w])%100000)

        
    print(sum(dp[h-1][w-1]) % MOD)

        print(counter)
	print((p[w][h][S][S]+p[w][h][W][W]) % 100000)

  print((mp[(h, w, 'UU')] + mp[(h, w, 'UR')] + mp[(h, w, 'RU')] + mp[(h, w, 'RR')]) % 100000)




    print(count)
    

    print(ans)

        print(num_paths)
    
    print(ans % mod)

print(ans)



    print(sum_dist)


    print(total_distance % 100000)


print(ans % M)

print(ans % 100000)


  print(ans % 100000)
    print(ans%10**5)

print(ans%10**5)

print(ans % 100000)


print(res%MOD)


print(ans % MOD)



print(ans)


print(total % MOD)



print(ans % mod)


print(L % 100000)


print(ans%10**5)
 

print(sm)


print(d)

print(TD)



    print(search(dis, ryotei) % 100000)


print(result % 100000)

    
    print(dp[N>>1])
    


print(dp[n>>1])

print(dp[n//2])


print(dp[n//2])

print(dp[n//2])

    
    print(max(dp))


  print(ans)

print(max(time))


print(max(time))


    print(c_time)

print(t)


    print(min(ans1, ans2))
    


    print(min(result0, result1))

print(min(ans1, ans2))

    print(ans)



    print(total_num_heal)

print(s//60,s%60,sep='\n')

print(X)
print(Y)


    print(x)
    print(y)

print(m, s, sep="\n")

print(s//60)
print(s%60)


print(total // 60)
print(total % 60)


print(s // 60)
print(s % 60)


print(sec//60)
print(sec%60)


print(x)
print(y)

print("\n".join(map(str, t)))

print(t//60,t%60,sep='\n')


print(minutes)
print(seconds)

print(str(t_sum//60)+"\n"+str(t_sum%60))

print(t//60)
print(t%60)


print(sum(time) // 60)
print(sum(time) % 60)


print(s//60, s%60, sep='\n')

    print(i)

    print(t//60)
    print(t%60)

print("{0}\n{1}".format(S//60, S%60))





print(minute)
print(second)


print(int(time/60))
print(int(time%60))

print((a+b+c+d)//60)
print((a+b+c+d)%60)

print(m)
print(s)

print(int(m))
print(int(s))

print(s//60, s%60, sep='\n')

print((a + b + c + d) // 60)
print((a + b + c + d) % 60)

print(x)
print(y)

print(t//60)
print(t%60)

print(t//60)
print(t%60)

print((a+b+c+d)//60)
print((a+b+c+d)%60)

print(x)
print(y)


    print(s // 60)
    print(s % 60)


print(e//60)
print(e-60*(e//60))


print(m)
print(s)


print(sum//60)
print(sum%60)

print(sum(a)//60)
print(sum(a)%60)

print(total//60)
print(total%60)

print(Total//60)
print(Total%60)

print(total // 60, total % 60, sep='\n')


print(m)
print(s)

print(N//60)
print(N%60)

print(x)
print(y)

print(i // 60)
print(i % 60)


print(seconds // 60)
print(seconds % 60)

print(s // 60)
print(s % 60)

print(total//60)
print(total%60)


print(T//60)
print(T%60)


print(t//60);print(t%60)



print(x)
print(y)

print("{}\n{}".format(S//60,S%60))


print(seconds // 60)
print(seconds % 60)

    print(min)
    print(sec)
print(x//60)
print(x%60)

print(m)
print(s)



print(sum//60)
print(sum % 60)

print(e)
print(f)


print(int(sum/60), int(sum%60), sep="\n")


print(x//60)
print(x % 60)


print(int(e/60))
print(e%60)

print(sum // 60)
print(sum % 60)


print((a+b+c+d)//60)
print((a+b+c+d)%60)

print(T//60)
print(T%60)

    print(m)
    print(s)


print("{}\n{}".format(minute, second))


print(M)
print(S)

print(time // 60)
print(time % 60)

print((t+y+u+i)//60,(t+y+u+i)%60,sep='\n')

    
print(all_seconds // 60)
print(all_seconds % 60)


print(resultTime // 60)
print(resultTime % 60)

    print(ans)

print(ans)



print(count)

print(sum(s in 2*input()for _ in range(int(input()))))

    print(found)


print(sum(t in 2*input()for _ in[0]*int(input())))

print(sum([s in input() * 2 for _ in range(int(input()))]))

    print(ans)
        
    

print(count)


print(cnt)


print(cnt)

print(cnt)

print(count)

print(ans)

print(num2)

print(ans)


print(c)


print(c)


print(c)


print(c)


print(count)


print(ans)



print(total)



    print(counter)


print(counter)


print(ans)

print(cnt)

    print(ans)

print(ans)



print(ans)



print(cnt)

print(count)

print(count)


print(contain.count(True))

print(ans)

print(ans)


print(cnt)



print(cnt)

print(ans)


print(find)

                print(1)
                print(2)
                print(3)
        
                print(1)
                print(2)
                print(3)


    print(find_color(n, ai, bi))

 print(min(a-1,N-a,b-1,N-b)%3+1)

  print((min(x, y) - 1) % 3 + 1)

	print(a%3+1)

    print(c)

    print(solve(n, pos))

    print((mod + 2) % 3 + 1)


        print(i)
        print(3)

        print(3)
        print(1)
        print(2)

	print(r)


        print(v % 3 + 1)


    print(mi)

    print(ans % 3 + 1)


    print((min(min(a,n-a),min(b,n-b))-1)%3+1)

    print((min(a,b)-1)%3+1)

        print('_RBY'.index(ans))


    print(min(y, x)%3+1)


        print(1)
        print(2)
        print(3)

        print(1)
        print(2)
        print(3)


        print(d%3+1)
        print(d%3+1)

            print(1)
            print(2)
            print(3)
            print(1)
            print(2)
            print(3)
    

        print(ans)
        print(judge_color(target))
        print(judge_color(target))

		print(x%3+1)
		print(y%3+1)

    
    print(dp[-1][nums[-1]])
    

print(dp[n][res])


        
print(dp[N-2][a[N-1]])

print(dp[n - 2][a[n - 1]])


print(dp[len(A) - 1][m])


print(d[N-2][a[N-1]])

print(p[n&1][s])

print(kazu[num[n-1]][n-2])


print(table[-1][num[-1]])


print(dp[n - 2][nums[n - 1]])


  print(dp[-1][n_last])
      
print(dp[n-1][a[-1]])


print(DP[-1][S[-1]])


print(dp[N-2][li[-1]])


    print(dp[-1][num_list[-1]])

print(dp[n - 1][x[-1]])


print(dp[-1][a[-1]])


print(dp[s[-1]])


print(DP[N-2][X[N-1]])


print(str(calc_table[rhs]))

    print(frame[series[-1]])

print(dp[N-1][a])




print(dp[n - 1][last])

    print(ans)



print(dp[-1][lst[-1]])



print(dp[total][-1])


        print(pre_c[n])


print(dp[N-2][A[-1]])



print("%d"%(dp[N-2][table[N-1]]))


print(st)



 print(a)
    print(time)

print(ans)


        
    print(ans)

  
  print(ans)


    print(ans)


print(res)

    print(total)
 
 

    print(total)


print(time)

    print(min_time)
 
 
    print(result)

print(ans)

    print(ans)

            print('Error')
    
    print(cnt)


	print(solve(field,locations))

print(steps)


print(ans)


print(res)




    print(result)


    print(ans)

    print(str(moves))


print(answer)


print(ans)


print(ans)


            print(step)
            print(step)
    print(ans)

print(cnt)

print(ans)

print(ans)

print(cost)


print(res)


print(time)

print(ans)

            print(d)

print("%d"%(ans))



print(ans)



print(DP[ey][ex][0])

print(count)

print(ans)    


print(res)


print(res)

print(count)

print(count)

                
                

print(step)


    print(count)



    print(cnt)



print(cnt)


print((pow(3,Q,mod)-sum(DP.values()))%mod)




        print(res_j, res_o, res_i)

        print(*a)
    


print(*ans, sep="\n")

print(*ans, sep="\n")

        print(' '.join(map(str, result)))


        print(' '.join(map(str, result)))


    print('\n'.join(ans))


        print(num_j, num_o, num_i)

    print(sj,so,si)

    print( fcheck(J,a,b,c,d), fcheck(O,a,b,c,d), fcheck(I, a, b, c,d))


  print(ans)



   print(str(j_cnt) + ' ' + str(o_cnt) + ' ' + str(i_cnt))

    print(j, o, i)


    print(j_c,o_c,i_c)

  print(*ans)
  

    print(aj, ao, ai)


    print(J,O,I)


            
    print(*ans)

        print(v0, v1, v2)


    print(j_cnt, o_cnt, i_cnt)
    

    print(ans_J,ans_O,ans_I)


    print(*c)


    print(j, o, i) 


  print(*[x,y,z])
   

  print(*ans)

  print(j,o,i)


    print(get_sum(inp, J), get_sum(inp, O), get_sum(inp, I))

    print(*ans)


        print(J, O, I)


    print(C[0])

  
  print(dp[group_num][k])

    print(max(dp))




    print(dp[-1][-1])

    


print(combi(0, k))


    print(dp[-1][k])

    print(max(dp))

print(dp[K])


print(dp[10][k])


print(ans)

print(DP[-1][-1])

    
    print(ans)

    
    print(dijkstra(n, adjacency_list, s_list))

  
  print(max(anss))

    print(ans)


    
    print(MAX)
    print(ans_x, ans_y)


  
  print(ans)
  print(ansx, ansy)

    print(ansd)
    print(ansx, ansy)

    print(ans)


print(ans)


    print(left)


print(min([p1+j1,p1+j2,p2+j1,p2+j2,p3+j1,p3+j2])-50)


    print(ans)

print(p + q - 50)


print(min(menu[0:3])+min(menu[3:])-50)

print(min(a[:3])+min(a[3:5])-50)

print(min(pz[:3])+min(pz[3:])-50)

    print(ans)
    

    print(ans)
    

print(min(pasta) + min(juice) - 50)

print(min(int(input()),int(input()),int(input())) + min(int(input()),int(input())) - 50)



print(min(a[:3])+min(a[3:])-50)

print(min(p[:3])+min(p[3:])-50)


print(min(pasta) + min(drink) - 50)

print(min(a,b,c)+min(d,e)-50)

print(a[0]+b[0]-50)

print(min(p)+min(d)-50)

print(p[0]+j[0]-50)
  

    print(p + j - 50)

print(min(a,b,c)+min(d,e)-50)

print(ans)


print(min(P_1,P_2,P_3)+min(J_1,J_2)-50)

print(min(a[0:3])+min(a[3:])-50)

print(pasta[0]+juice[0]-50)


print(min(p)+min(j)-50)



print(min(p) + min(j) - 50)


print(min(int(input()) for _ in range(3)) + min(int(input()) for _ in range(2)) - 50)

print(N+M-50)

print(min_sum)


print(daikin)

print(min(p1, p2, p3)+min(j1, j2)-50)


print( min(L[0],L[1],L[2])+ min(L[3],L[4])-50)


print(min(pasta) + min(juice) - 50)


print(min(p)+min(j)-50)



print(price_to_pay)


print(min(p) + min(j) - 50)


print(min(pasta) + min(juice) - 50)



print(setV - 50)

print(min(pastas) + min(juices) - 50)

print(pasta + drink - 50)

print(min(a,b,c)+min(d,e)-50)

    
    print(min(pasta) + min(juice) - 50)



print(mini + mini2 - 50)



print(min(P)+min(J)-50)


print(min(a)+min(b)-50)

print(min(pasta) + min(juice) - 50)


print(sum)



print(min(P1, P2, P3) + min(J1, J2) - 50)


print(min(P1, P2, P3) + min(J1, J2) - 50)

print(price)


print(min(p) + min(j) - 50)

print(a)	

    print(total)


print(min(p1, p2, p3) + min(j1, j2) - 50)


    print(min_pasta_price + min_juice_price - 50)

print(min(a) + min(b) - 50)

        print(i)


    print(an)


        print(r)



 print(*s,sep='\n')
		print(i)


    print(r)




print(*[n-comp[x] for x in score], sep="\n")


  print(ans[i])

    print(r[pt])

    print(point_s.index(i)+1)

    print(i)

        print(order)

    print(kek[i][2])


    print(l)

    print(point_sorted.index(point[i]) + 1)


    print(s[i])

    print(sorted_score.index(score[i])+1)

    


	print(i[1])


    print(f'{scores_srt.index(s)+1}')

            print(j+1)
    print(ranking.index(d_i) + 1)


	print(Order.index(s)+1)

    print(team[1])

  print(r)

    print(g)

		print(result_list[i])
		
	

    print(p[i][2])


    print(standing[p])


    
    print(ans)

print(ans)



print(int(ratio))

print(e)


print(ans)


print(E)

print(ans)


print(ans)


print(int(ans))


    print(int(cal_sum / price_sum))


print(c//a)


print( sorted(C,reverse=True)[0] )

        
print(max_total_cal_par_doll)
    

print(int(r))


print(ans)



print(ans)


print(ans)


    print(int(max_c))

print(calorie)


	
print(int(ans))

print(int(c/p))

    print(int(ub))


print(int(ans))

        
print(cal//cost)




print(Cal[0])


print(ans)


    
    print(ans)



print(sum([sum(dp[n][i]) for i in range(3)]) % mod)


print(sum([dp[i][j] for i in range(3) for j in range(3)]) % 10000)

print(sum(dp)%10000)


print(sum(ans[n]) % 10000)


print(ans)


  print(sum(map(sum, dp[-1]))%10000)
print(ans)


print(sum(dp) % mod)



    print(sum([dp[-1][j][k] for k in range(2) for j in range(3)]) % mod)


print((DP[N-1][0][0]+DP[N-1][1][0]+DP[N-1][2][0]) % 10000)

print(ans)


print(sum(number) % 10000)

    print(ans)


print(total)


print(sum(map(lambda a: sum(a) % MOD, dp[n])) % MOD)


                

print( sum(map(sum, DP[N])) %10000)


print("%d"%(ans))


print(ans)


    print(counter)

print(n)


    print(result)


    print(ans)


    print(ans)

print(cnt)


print(ans)


    
    print(ans)

          

print(ans)


  print(ans)

    print(max_k)

print(ans)

print(ans)


    print(ans)


            
print(ans)

print(maxlv)

    
    print(max(dp[A]))

        

    print(max_length)

print(e)


print(ans)


    
print(ans)

print(ans)


    print(result)



print(max(max(d) for d in dp))


print(max_len)



    print(max(dp))


    
    print(dp[-1][-1])



   
  print(dp[n][t])
 
 
print(dp[N][T])


    print(max_m)

    print(ans)

    
    print(ans)
        
            
print(ans)



print(icnt)
        
    

            
print(ans)


print(res)

print(*ans, sep="\n")


    
print(*ans, sep = "\n")
        
    



print(L-day)
    

    print(L-days)


print(ans)


print(L-max(ceil(A/C), ceil(B/D)))

print(L - max((A - 1) // C,(B - 1) // D) - 1)

print(a)

    print(L - max(days_to_finish_A, days_to_finish_B))


        print(L - hoge)
        print(L - fuga)


print(L-days)


print(l - max(a // c + 1 if a % c else a // c, b // d + 1 if b % d else b // d))

print(L-a)


print(l - max(kokugo, sansu))

print(L - max(math.ceil(A/C), math.ceil(B/D)))

    print(l-(a//c))
    print(l-(b//d))
    print(l-x)
    print(l-y)

  print(a-x)
  print(a-y)


print(L - max(day_k, day_s))


print(l-max(math.ceil(a/c),math.ceil(b/d)))

print(ans)


        print(L-A//C)
        print(L-A//C-1)
        print(L-B//D)
        print(L-B//D-1)


print(L - max(math.ceil(a/c), math.ceil(b/d)))


print(L - max((A+C-1) // C, (B+D-1) // D))



print(L-max(math.ceil(A/C),math.ceil(B/D)))




print(l - max(math.ceil(a/c), math.ceil(b/d)))

print(a[0]-b[-1])

print(L-max((A+C-1)//C,(B+D-1)//D))

print(day)

print(i)

    print(L-Y)
    print(L-Y)
    print(int(L-Y))

print(L - max(-(-A // C), -(-B // D)))


    print(l-aa)
    print(l-bb)


print(l - max(-(-a//c), -(-b//d)))


print(days_played)


print(L - max(ja_day, math_day))

        print(l - int(a / c))
        print(l - int(a / c) - 1)
        print(l - int(b / d))
        print(l - int(b / d) - 1)


    print(num_vacation_days - num_days_homework)


print(s[0] - max(day))

    print(L - day1)
    print(L - day2)

print(l - max(ceil(a / c), ceil(b / d)))

    
print(L-max(ling,maths))


print(holiday - max(math.ceil(jap_page/jap_pday), math.ceil(math_page/math_pday)))


print(l-max(f(a,c),f(b,d)))


print(L-max(-(-(A)//C), -(-(B)//D)))

    print(L-japa)
    print(L-math)

    print(L-japa)
    
    print(L-math)


  print(D-a)
  print(D-b)


print(L - max(-(-A // C), -(-B // D)))



print(L - max(-(-A // C), -(-B // D)))


print(a-max((b+d-1)//d,(c+e-1)//e))


print(max(0, L - max(ceil_div(A, C), ceil_div(B, D))))


    print(a-j)
    print(a-m)



print(L - max(int(math.ceil(A/C)), int(math.ceil(B/D))))

print(L - max((A + C - 1) // C, (B + D - 1) // D))

print(L - max(x, y))


print(l-n)

print(re_day - math.ceil(max(ko_hom/ko_sp,ma_hom/ma_sp)))

print(int(n-max(a/c,b/d)))

print(L - max(Kokugo, Math))

print(l[0]-d)

print(int(L-max([jp/j,mp/m]))//1)


print(l-max(r1,r2))

        print(a)

    print(p)


    print(i)


print(*players, sep='\n')

  print(i)

	print(s)

    print(ans[i])

	print(ans[i])
	



    print(point)


    print(line)

    print(sum)


    print(i)

    print(score)

        
    print(ans[i])





    print(sum(x))

print(*ans, sep="\n")


        print(score)

  print(i)

print(*v,sep='\n')

  print(ans[i],sep='')


    print(player[i])


    print(ans_i)


	print(score)

    print(s[i])

        print(s)


        print(b[x])


    print(s)


    
    print(ten[i])

    print(p[i])

  print(score)

    print(s)

    print(res[i])

  print(S[i])

    print(points)


    print(data[0][p] + data[1][p] + data[2][p])

    print(point[i])

    print(i)

print(ans)


    print(ans)



    print(num_valid_signboard)

    
    print(ans)

    

print(cnt)


print(cnt)

print(ans)

  
  print(sum([check(input()) for _ in range(n)]))

print(cnt)


print(count)



print(ans)


print(ans)

print(sum(cnt))

print(c)


print(ans)


print(ans)



print(max(dp))



print(max(dp[d - 1][0], dp[d - 1][1]))



print(max(dp[-1][0],dp[-1][1]))

    print(ans)



print(max(dp[D-1]))


    
    print(max(dp))
    
    
print(max(memo))

    
    print(max(dp[-1]))


print(ans)



  print(max(dp[d]))

print(ans)

  print(max(dp[-1])-1) 
    

    print(max(dp[-1]))


print(max(dp[D-1]))



print(max(dp[D]))


print(max(dp[-1]))


print(max(DP_2[-1]))

print(ans)



print(max(dp[-1]))


    print(total_area)

  print(ans)

    print(volume)

print(ans)


    
    print(ans)



print(ans)


    print(ans)
        print(0)
        print(res)

    
print(sa + sb + sc, sa, sb, sc)


    
    print(s_cnt,t_cnt,e_cnt,d_cnt)



print(triangle, right_triangle, acute_triangle, obtuse_triangle)



print(triangle, right_triangle, acute_triangle, obtuse_triangle)


        print(cnt[0],cnt[1],cnt[2],cnt[3])
        print(T,C,E,D)
print(sa+sb+sc, sa, sb, sc)

print(*ans)


        print(*ans)
print(t, t1, t2, t3)

print(sum([a,o,r]),r,a,o)


    print(triangle, right_triangle, acute_triangle, obtuse_triangle)


print(t, t1, t2, t3)

        print(acute + right + obtuse, right, acute, obtuse)
print(tri, rig, small, large)


    
print(sum(counter),counter[0], counter[1], counter[2])

    print(ans[0], ans[1], ans[2], ans[3])
    print(count[i],end = " ")
print(count[3])

        print(sum(result),*result)
print("{0} {1} {2} {3}".format(sum(t), t[0], t[1], t[2]))


print(cho+ei+don,cho,ei,don)



print("{0[0]} {0[1]} {0[2]} {0[3]}".format(triangle_list))


print(r+a+o,r,a,o)

		print('%d %d %d %d' % (a,b,c,d))
    print(" ".join(map(str,dic)))

print(str(sank)+" "+str(tyok)+" "+str(eik)+" "+str(donk))

        print(' '.join(list(map(str, ans))))
            print(num)
            print(num, end=' ')

print(str(ans_n) + " " + str(ans_r) + " " + str(ans_a) + " " + str(ans_o))

print(acute+right+obtuse, right, acute, obtuse)

        print(tri, right, acute, dull)

    print(' '.join(map(str, counter)))


print(answer_str)

            print(' '.join(map(str, judge)))
print(sa+sb+sc, sa, sb, sc)

        print('{} {} {} {}'.format(t, n, s, w))
            print("{} {} {} {}".format(num_of_normal,num_of_right,num_of_acute,num_of_obtuse))
    
    print(solve(sides))



print(i, j, k, l)

            
print(sum(tri.values()), tri[1], tri[2], tri[3])

print(t,ch,e,d)

        print(str(count) + " " + str(right) + " " + str(acute) + " " + str(obtuse))
        print(str(count) + " " + str(right) + " " + str(acute) + " " + str(obtuse))
print(*ans)

            print( t, x, y, z )
print( t, x, y, z )

print(num,t,e,d)

print(sum(ans), *ans)


        print(eikaku+tyokkaku+donnkaku, tyokkaku, eikaku, donnkaku)
        print(*ans)

print(tri, right, acute, obtuse)



print(tri, right, acute, obtuse)


        print(' '.join(str(a) for a in ans))
print(sum(l),l[1],l[0],l[2])
    

print(t1+t2+t3,t1,t2,t3)

        print(tri,rec,sh,dul)
print(ans[0],ans[1],ans[2],ans[3])
    
    

        print(a+b+c, b, a, c)

print(sankaku, chokkaku, eikaku, donkaku)


        print(chokkaku+eikaku+donkaku,chokkaku,eikaku,donkaku)

print('{0} {1} {2} {3}'.format(A + B + C, A, B, C))



    print(answer)
        print(countTri, countTriCho, countTriSma, countTriLar)
print(c0,c1,c2,c3)


print(p, r, a, o)

        
print(C+E+D, C, E, D)

        print(sa, tyo, e, do)
        print(*sankaku)
        print(*tri)
print(i+j+k,i,j,k)

        print(i)


    print(v)


    print(y)


            print(x)


        print(i)



        print(a)




        print(divs[i])

  print(i)

    print(i)

            print(i)
    print(i)


print(*sorted(set(divisors)), sep="\n")

    print(i)


    print(divisor)


    print(a)


    print(i)

    print(Common[j])


    print(a)

    print(k)

      print(factor)
  
    print(i)

    print(i)
    print(i)

    print(n)

      print(i)
      print(i)
    print(element)


        print(i)
        print(i)


  print(d)


    print(ans)
    


print(*ans, sep="\n")

    print(num)


    print(i)

    print(a)

        print(i)

            print(i)
            print(i)


            print(i)
            print(i)

	print(a)




            print(i)

            print(i)

    print(a)

        print(i)


		print(i)

print(*sorted_divisors(g), sep="\n")


                print(base[j])
            print(base[j])

    print(ans)

        print(i)


        print(a)


  print(i)

print(1)
        print(x)


print("\n".join(map(str, make_divisors(gcd_num))))


        print(ls[i])
        print(ls[i])

    print(l)


    print(i)


print(g)


    print(1)
        print(i)
    print(a[1])

            print(di)
            print(di)


        print(i)


    print('\n'.join(map(str, result)))


        print(i)

    print(d)

        print(i)

            print(i)
            print(i)


    print(A)


            print(i)



                print(i)
                print(i)

    print(i)

            print(i)

            print(i)


        print(i)

    print(ans[2])


print(sorted(b)[2])

print(sorted(p)[2])

print(sorted(b)[2])

print(b[2])


print(sorted(int(f'{a}{b}')for a,b in itertools.permutations(sorted(int(input())for _ in[0]*int(input()))[:4],2))[2])

  print(save[2])
  
    print(sorted(ans)[2])

print(sorted(pers)[2])

print(l3[2])

print(ans[2])


print(ans[2])

print(b[2])

print(p[2])


print(s[2])

print(l[2])


print(sorted(ans)[2])


print(b[2])

print(kl[2])


                    print(a[i][1] + a[i][0])
                    print(a[i][0] + a[i][3])
                        print(e[2])
                        print(e[2])
                    print(min(int(a[j][0] + a[i][0]), int(a[i][0] + a[j][0])))
            print(min(int(a[j][0] + a[i][0]), int(a[i][0] + a[j][0])))
print(b[2])


print(listC[x])

print(ans[2])


print(c[2])



print(L[2])


print(lst2[2])

print(B[2])


print(a[2])


    print(top3[2])






print(sorted(B)[2])

print(list(sorted(int(str(c) + str(d)) for c, d in permutations(a[:4], 2)))[2])


print(A[2])


    print(combi[2])


print(ans[2])



print(b[2])

print(S3)

           
print(n3)


print(ans)

    
print(ans)

print(dist)


print(L)


print(SS)


print(min_dsq)



print(round(closest_pair(p) ** 2))


print(closest_pair(P, N))




    print(result)



    print(closest_pair(points, n))

print(closest_pair_square([Point(*tuple(map(int, input().split()))) for _ in range(n)]))

            print(11)
            print("9"*2*a)
                print(num)
        print("9"*a + str(b) + "9"*a)


        print(11)
        print('9' * (2 * n))
print(f())

			print(x)
        print(11)
        print("9"*2*a)
            print(num)
    print("9"*a + str(b) + "9"*a)


        print(11)
        print("".join(["9"] * (2 * n)))
            print(num)
            print(11)
            print(10**(2 * n) - 1)
                    print(x)
            print(11)
                print(9,end='')
            print()
            print(w)
        print(9,end='')
    print(y,end='')
    
        print(9,end='')
    print()
    
    print(result)


            print(11)
            print('9' * (n * 2))
            print(upper)
            print(0)
    
    print(ans)
    

print(max)


print(mx)

        
print(ans)

print(ans)


print(S)

print(a)


print(s)

        print(0)
        print(max(ans))
            print(0)
        print(max_m)

print(a)

print(ans)

print(S_max)

        print(0)
print(max(s))

print(maxd)

    print(0)
    print(max(s))

print(ans)

        print(0)

print(S)

        print(0)

print(ans)

print(ans)

    print(adds)
    print(max(subs))
    print(0)
    print(max(car_list))

print(M)


print(ans)


print(S_max)

print(f"{ans}")



print(max(S))

        print(0)
    print(S)




print(ans)


print(maximum)


    print(max(l))
    print(0)

        print(0)
    print(result)


            print(0)
        print(max(buffer))
        

print(ans)


        print(0)
print(max(s))


        print(max_cars)
        print(0)

            print(0)
        print(S)


print(ans)

    print(0)
    print(max_cars_in)
    

        print(0)
    print(max(S))

    print(0)
    print(S[-1])

print(max_m)



print(ans)


print(s)

        
print(ans)
    

print(ans)


print(max)

print(ans)


    
print(ans)

        print(0)
print(ma)

        print(0)

print(ans)


    print(0)
    print(max(num_cars))


    print(int(0))
    print(max_count)

    print(ans)
    print(0)


        print(0)
print(max(s))

print(mmax)


print(count)


    print(max)

    print(0)

        print(0)
print(S_max)

        print(0)
print(sm)

print(ans)

print(0 if B else S)

print(a)

    print(prev)

        print(result)
        print(a)
print(a)


print(ans)

print(a)


print(a)


print(S)

        print(inp)
print(a)

            print(eval(e))
    print('{0}'.format(operand.pop()))

        print(ans)

    print(a[cs_i[-1]])


        print(ans)
print(ans)

print(s)

        print(n)
      print(acc)

print(record)


            print(S)
print(a)

        print(tot)

print(a)


        print(n)
print(a)

print(a)

        print(ans)

        print(a)
        print(ans)
            print(kei)
		print(m)

print(first)

        print(ans)
print(x)

print(a)


print(ans)

        print(x)

print(a)

        print(ans)


print(int(result))

print(ans)


print(a)



print(eq)


        print(ans)
        print(x)
    
print(ans)


    print(c_num)

    print(l)
    print(list_2[len(list_2) - 1])

    

    
    

        
print(m)

        print(ans)
print(ans)
        


print(ans)

            print(ans)
print(a)

            print(curr)
    print(ans)
print(a)

print(ans)

        print(x)
        print(total)

print(ans)


print(total)



print(ans)


print(acc)


        print(ans)
print(a)

print(sum)

print(x)

            print(name,nums)
            

            print(table[i][0], table[i][1])

    print(k, d[k])


    print(a,b)

        print(*product)

    print(i,p[i])

 print(k,d[k])

    print(i[0], i[1])


    print(i[0],i[1])

    print(i[0],i[1])

        print('{0} {1}'.format(r[0], r[1]))

        print(a, d[a])

    print(name, num)

    print("{0} {1}".format(i[0], i[1]))

  print(d[0][1], d[1])

    print(line[0], line[1])


    print(i, pdict[i])

    print(l[0], l[1])

    print(*sorted_product[i])

  print(value + " " + str(values_copy[value]))


    print(key, val)


    print(ANS[i][0][1], ANS[i][1])


    print(item[0],item[1])

	print('{0} {1}'.format(i[0].replace('0', ''), i[1]))

    print(l[i][0],l[i][1])

    print(j,k)

    print(d[0], d[1])


    print(s[i][0],s[i][1])

    print(*L[i])

print(c)

        
print(ans)

print(sum(p(int(input()))for _ in[0]*int(input())))

print(ans)

print(count)                                      

print(S)

print(count)


print(cnt)



print(suma)


    
print(ng)

    print(ans)


print(ans)

print(a)


    print(counter)

print(ans)


print(ans)



    print(invalid_room)


        print(0)
    print(ans)

print(comb(r + n - 1, r) if 0 <= r else 0)

    print(0)
print(ans)


print(combination(c + a - 1, c))

  print(factorial(x) // factorial(rest) // factorial(n - 1))  
  print(0)                                                    
                                                              

    print(result)


    print(0)
    print(math.factorial(n+r-m*n-1)//(math.factorial(n-1)*math.factorial(r-m*n)))

print(factorial(n+r-1)//factorial(r)//factorial(n-1))

print(0 if r<0 else factorial(n-1+r)//factorial(n-1)//factorial(r))

print(sum)

 print(f(n+r-1)//f(r)//f(n-1))

    print(0)
    print(int(combination(a + n - 1, a)))

    print(0)
    print(factorial(n + k - 1) // factorial(n - 1) // factorial(k))


    print(0)
    print(math.factorial(c + a - 1) // math.factorial(c) // math.factorial(a-1))

print(ans)

print(s)

    print(0)
print(ans)


    print(0)
print(solve(n,r))



print(combination(r - n*m + n - 1, n-1))

    print(0)
print(int(res))

        print(0)
            
            
    print(int(ans))
    
    
    print(tot//5)

print(sum(l) // 5)


print(S//5)

print(int(sum(point)/len(point)))

print(ans)

    print('{0}'.format(sum(final_scores)//len(final_scores)))

print(sum([max(40,int(input())) for _ in range(5)])//5)

print(t//5)


    print(total // 5)


print(sum([(score < 40) * 40 + (score >= 40) * score for score in scores]) // 5)

print(int(sum([max(40, int(input())) for _ in range(5)]) / 5))

print(sum([max(int(input()),40) for _ in range(5)]) // 5)

print(s//5)


print(total // 5)

print(a//5)

print(int(sum(kekka)/5))        

print(sum([max(int(input()),40) for _ in range(5)]) // 5)


print(sum(p)//5)

print(sum([max(int(input()),40) for _ in range(5)]) // 5)

print(sum(b) // 5)


print(p//5)

print(ans)


    
print(S//5)


print(sum(a)//5)

print((sum(tensuu))//5)

print(sum(scores)//5)

print(N//5)

        
print(s // 5)

print(int(kei / 5))


print(int(s/5))

print(int(sum(lst)//5))



print(int(ave))

print(int(sum/5))

    

print(sum//5)



print(ave)

print(sum(i) // 5)


print(int(sum(a)/len(a)))

   print(int(sum / 5))

print(c // 5)

print(ave)

print(int(ave))

print(y//5)

print(x//5)

print(sum//5)

    
print(sum(lst)//len(lst))

print(x//5)


print(int(ave))


print((a+b+c+d+e)//5)

print(int(s/5))

print(sum(A)//len(A))
    

print(x//5)

print(math.floor(sum(s)/5))


print(sum(n)//5)

print(a//5)

print((sum(l)+f*40)//5)


print(sum//5)


print(int(sum(list)/5))


    
print((sum(C))//5)

print(sum//5)

print(ave)

print(int(k))

print(s//5)


print(t//5)

print((a+b+c+d+e)//5)

print(sum(a)//5)

print(sm//5)

print(int(sum(a)/len(a)))

        
print(s//5)

print(sum(a)//len(a))

print(sum//5)

print(int(sum(a)/len(a)))

print(sum(L)//5)

    
print(T//5)

print(ave)

print(sum//5)

    
print(int(a/5))
    

print(int(sum/5))

        
print(s // 5)

print(x//5)

print(s//5)

print('{:.0f}'.format(c))


print(g)


    
    print(vote.index(max(vote))+1)

print(P.index(max(P))+1)

    print(ans)


print(pl.index(max(pl)) + 1)


  print(V.index(max(V)) + 1)


    print(vote_list.index(max(vote_list)) + 1)
	
print(S.index(max(S))+1)


print(K.index(max(K))+1)


print(ans + 1)

print(C.index(c)+1)


		print(i+1)
print(winning_competition)



print(t)




print(v.index(max(v))+1)

print(vote.index(max(vote))+1)


print(rank.index(max(rank))+1)


print(v.index(max(v))+1)


print(vote.index(max(vote)) + 1)


print(max(range(len(C)),key=lambda i:C[i]) + 1)

print(1+c.index(max(c)))

print(v.index(max(v)) + 1)



print(p+1)

print(b.index(max(b)) + 1)


print(max(enumerate(v), key=lambda x: x[1])[0]+1)



print(statistics.mode(votelist))

print(votes.index(max(votes)) + 1)


print(vote.index(max(vote)) + 1)

print(c.index(max(c))+1)

print(v.index(max(v))+1)

print(program.index(max(program)) + 1)


print(max_i + 1)

print(I.index(max(I))+1)

print(ans)



print(idx)



print(result.index(max(result)) + 1)


print(Cnt.index(max(Cnt))+1)
        

    
print(c.most_common()[0][0]+1)

        print(key)

    
    print(ans)


print(ans)


print(S)

print(a)

print(s)

print(s)

  
  print(ans)
print(ans)


print(ans)



    print(total_num_roads)


print(nums)

print(ans)

print(ways)

print(ans)

        
print(ans)



print(ans)


print(cnt)


print(roads)



print(ans)


	
print(cnt)

print(count)


print(cnt)


print(ck)


print(cnt)


    
    print(sum(dp[-1]) % mod)


print(sum(MC)%10007)

print(ans)



print((dp[N][1] + dp[N][2] + dp[N][3] + dp[N][4] + dp[N][5] + dp[N][6] + dp[N][7]) % 10007)

    
print(sum(dp[N-1])%mod)



print(sum(dp[n - 1]) % mod)

print(ans % 10007)


print(sum(v for v in dp.values()) % mod)



    print(sum(dp[-1]) % mod)


print(sum(c) % 10007)


print(sum(dp[N]) % MOD)



print(ans)


print(ans)


    print(ans)


        print(next_cost)

    print(dijkstra(n, taxis_list, adjacency_list))


print(min_c)	


print(min(dist[N]))


print(ans)


print(visited[N-1])

print(Cost[N-1])


print(dijkstra())


  
  print(ans + rec)

    print(result)


print(ans)


print(ans)

print(wasure+ans)

    print(max_num_emblems)

  print(max([cum_sum[x] - dpn[x] for x in range(m + 1)]))


    print(max_profit)


print(solve())


print(max_min)


print(max(ret))


    print(ok)



print(low)




    print(left)

print(l)

print(l)

            print(c1 + (H[N] - h1))
        print(-1)

        print(time+(tree_height[v]-height))
        
print(-1)

print(dijkstra(n, to, 0, n-1, x))

  print(-1)
  print(costs[N] + H[N]-last_position)


    print(-1)
    print((X + dist[N-1]) + (H[N-1] + dist[N-1]))


print(dijkstra())


print(bfs())

    print(d[-1].t + h[-1] - d[-1].h)
    print(-1)

    print(ret)
print(ans)



print(max)


print(ans)


    print(n)
    print(ans)

    print(n)
    print(max_len)


    print(max(sum(d[i:i+3]) for i in range(len(d)-2)))

        print(1)
        print(2)
        print(sum(l_01_sequence_list))

    print(max_length)

    print(sum(seq))
    print(max(sum(seq[i:i + 3]) for i in range(len(seq) - 2)))

    print(sum(seq))
    print(best)

print(ans)

    print(B[0])
    print(B[0] + B[1])
    print(max(B[i]+B[i+1]+B[i+2] for i in range(len(B)-2)))

    
print(ans)
    

        
print(ans)


print(ans)


print(ans)


print(max(max(dp[-1]), ans))

print(ans)

    print(max(ans, 0))
        print('-1')
    print(res)


    print(ans)
    print(-1)



print(b if b < c else c)

    print(min(a,b))


print(min(x, y))


print(min(X, Y))


print(ans)


print(min(r1,r2))


print(min(x, y))

print(min(A*P, B if P<=C else B+(P-C)*D))

    print(x_price)
    print(y_price)
    

print(min(A*P,B+((P-C if P>C else 0)*D)))

print(min(p*a,b+d*(max(c,p)-c)))


print(min(Y_price, X_price))

print(min(A*P, B+max(0, P-C)*D))

print(min(a * e, b + max(e - c, 0) * d))

print(min(pa, pb))

print(min(costx, costy))


print(min(x, y))

print(cost)

    print(y)
    print(x)

print(min(a*e,[b,b+(e-c)*d][c<e]))

    print(x)
    print(b)
    print(x)
    print(z)


print(min(x,y))

print(min(p))


print(min(P * A, B if P <= C else (B + (P - C) * D)))

print(min(x,y))

print(min(X,Y))


print(min(x,y))


print(min([x, y]))

    
print(min(p1,p2))


print(min(X,Y))


print(min(x, y))

print(min(A*P,B+(D*(max(P-C,0)))))

print(chap)

	print(int(Y))
	print(int(X))



print(min(x,y))

    print(y)
    print(x)

print(min(a*p, b + max(0, p-c) * d))


    print(y)
    print(x)

    print(a_cost)
    print(b_cost)


    print(ans2)
    print(ans1)

print(min(x, y))


print(min(X,Y))



print(min(A*P, B + max(0,P-C)*D))

  print(BB)
  print(AA)

print(mi)

print(min(a*p,b+max(0,(p-c)*d)))

        print(b)
        print(x)
        print(y)
        print(x)



print(min(X, Y))

print(min(X, Y))

print(min(x,y))

print(min(a*e,b+max(e-c,0)*d))

    print(X)
    print(Y)


print(min(x_cost, y_cost))

    print(min(x, y))

print(min(a*p,b+max(p-c,0)*d))

    print(total)
    print(A*P)

print(min(A * P, B + max(0, (P - C) * D)))

        print(a)


    print(p)


    print(i)

print('\n'.join(map(str, p)))

        print(results[i])

    print(i)

    print(i)


print(*s, sep='\n')	

    print(score)

    print(S[i])
        

    print(p[i])

    print(c)
    


    print(point[key])

  print(v)


    print(p)


print(*results, sep="\n")

  print(S[i])

    print(ten[i])

    print(ss[i])
    


    print(p[i])


    print(s)

  print(points[g],sep='')
        
      
    

print('\n'.join(map(str,ans)))

print(*scores, sep = '\n')

    print(pp)

    print(pp)

print(*points, sep="\n")

    print(s)


    print(i)

	print(ans[i])



print(*ans, sep="\n")


        print(score)

    print(point[i])

	print(s)

        print(results[i])

    print(i)

        print(*ans[h])

    print(*an)


    print(' '.join(d))

    print(' '. join(str(a) for a in ans))

    print(*a)



    print(*data)

    print(*res)


    print(*ans)
    

    print(*ans[h])

print('\n'.join(map(lambda x: ' '.join(map(str,x)),ans)))

            print(-1, end='')
            print(0, end='')
            print(cnt, end='')
            print(-1, end=' ')
            print(0, end=' ')
            print(cnt, end=' ')
    print()
    print(*res)

    print(" ".join(map(str, i)))

  print(*lst)

    print(' '.join(list(map(str, row))))

        print(*result_list)

	print(" ".join(s))

    print(*ans_i)


        print(c,end=" ")
    print(c)

    print(" ".join(c))


			print(tmp)
			print(tmp, end=' ')


    print(' '.join(map(str, ans)))


    print(*i)

    print(' '.join(map(str, A[i])))





    print(cha)

    print(*A[i])

print(ans)


            
print(h[n - 1][m - 1])

print(min(dp[n-1][n:m]))

print(dp[n])


print(travel[m][n])


print(dp[m][n])

print(dp[M][N])


print(dp[-1])


print(dp[m][n])


    print(dp[-1][-1])

print(dp[m][n])

		
print(dp[N][M])

print(dp[m-1][n-1])

print(dfs(0, 0))


print(res)

print(en_lis[m][n])

print(dp[m][n])

print(table[-1][-1])


print(ans)


print(dp[M][N])


print(dp[-1][-1])


    
    print(min(dp[-1]))


  
  print(turn)

  
  print(turn)

            print(ans)
print(ans)

print(ans)

    print(solve(h, w, grid))

	
print(cnt)

	
print(cnt)

print(ans)



    print(total_cost)

print(ans)

print(ans)

  print(ans)
  
print(ans)

print(res)

print(ans)


print(ans)


    print(j_max_cake_size)


    print(min_cost)

print(ans)



print(ans)


print(A + B + C + D - min(A, B, C, D) + max(E, F))


print(sum(l2) + sum(l3))

print(S)

print(total)


print(sum(score_list[0:4]) - min(score_list[0:4]) + max(score_list[4],score_list[5] ))

print(x)



print(rikei_sum + bunkei_sum)

print(s)


print(ans)


print(ans)

print(sum(sorted(int(input()) for _ in range(4))[1:])+max(int(input()) for _ in range(2)))

print(sum(sorted(score[:4], reverse=True)[:3])+max(score[4], score[5]))

    print(count)
    print(count)

print(str(total))

print(sum-min1-min2)

print(sum(r)-min(r)+max(a[4:]))


print(sum(sorted(points_1)[1:]) + max(points_2))

print(sum(s) - min(s) + max(l))


print(sum(science[:3]) + literature[0])



print(sum(sorted([A, B, C, D], reverse=True)[:3]) + max(E, F))

print(sum(a[0:4])-min(a[0:4]) + max(a[4], a[5]))

print(sum(sorted([int(input()) for _ in range(4)])[1:]) + max(int(input()), int(input())))

print(sum(sorted(rika)[-3:])+sorted(syakai)[-1])


print(sum(rika)-min(rika)+shakai[0])


print(sum(ns[1:])+max(tr))

print(sum(flist) + sum(slist))

print(total)


print(score)

print(a+b+c+d-min(a,b,c,d)+max(e,f))

print(final_ans)

print(sum(a[1:])+b[1])

print(ans)



print(sum(L[0:3])+M[0])
    



print(sum(a)-min(a)+max(b))

print(sum(x[:3])+sum(y[:1]))

print(alist[1]+alist[2]+alist[3]+blist[1])

print(sum(A[1:4])+max(B))

print(sum(a)-min(a[:4])-min(a[4:]))

print(sum(sc)-min(sc)+max(so))



print(sum(sorted(four)[1:] + sorted(two)[1:]))

print(M[-1]+sum(L[-3:]))


print(rikei[0] + rikei[1] + rikei[2] + bunkei[0])


print(total_max)


print(s)

print(kei)


print(int(y[0]+y[1]+y[2]+z[0]))

print(s+max(e,f))



print(total-a+b)

print(sum)

   
   
print(x1[0]+x1[1]+x1[2]+y1[0])


    
print(sum_1+sum_2)

print(sum(i) - min(i) + max(j))

print(sum(sorted(subjects[:4])[-3:]) + sum(sorted(subjects[4:])[-1:]))

      
   print(sum(l1[0:3]) + l2[0])

  
print(sum(a[:3])+b[0])


print(sum((B,C,D,F)))


print(n+m)


print(sum(sumlist))


print(kei)

print(ave)


print(sum1+max(b,c))


print(x+y+z+w)

    
print(sum1 + sum2)

print(x[3]+x[1]+x[2]+y[1])

print(sum(a[0:4])-min(a[0:4]) + max(a[4], a[5]))


print(sum(A)+sum(B))





print(sum(lst)+max(lst2))


print(sum(n[0:4])-min(n[0:4]) + max(n[4], n[5]))

print(y)
    


print(sum(x)+sum(y))



print((a+b+c+d+e+f) - min1 - min2)


print(b - a + c)



print(sum(list_a[0:3]) + list_b[0])

        print(ans)


    print(a)


    print(i)


print(*a, sep='\n')

    print(zekken[i])

    print(a[i])

	print("\n".join(map(str,a)))

    print(a)



    print(a[i])

        print(a)

    print(Z[i])

    print(aa)

    print(d[i+1])

print(*bibs, sep='\n')

    print(student_bib_)

    print(i)


print(*alst, sep="\n")


    print(s)


print(*a, sep='\n')

    print(A[i])

    print(i)

  print(A[i])

    print(s[i])
    


print(*a, sep="\n")


print(*a, sep = '\n')

    print(A[k])

    print(a)

print(*ary, sep='\n')

print(*a,sep='\n')

    print(i)


    print(a[i])

	print(i)

    print(ans)

print(dp[2][n-1])

print(count)

print(ans)


print(dp[N-1][2])

        
            
print(min(ans_lis))

print(ans)



print(retval)


print(ans)


print(ans)


print(cnt)


print(cur)

print(N*M-T[0])

print(cells)


                    
print(ans)




print(best)


print(min_diff)

print(ans)



print(cnt+minmin)


print(ans)


print(ans)


    print(min_num_changes)

print(ans)

print(mincnt)


print(X)


print(ans)



print(ans)




        print(spot[QX[0]-1][0])
        print(spot[ans-1][0])
        
            print(a - t)
            print(a + t)
                    print(a + t)
                    print(stopping_point)
                    print(a - t)
                    print(stopping_point)

      print(a + t)
      print(min(a + t, coll_pos))

      print(a - t)
      print(max(a - t, coll_pos))


            print(a+T)
                print(wa)
                print(a+T)
            print(a-T)
                print(wa)
                print(a-T)
        




    print(ans[int(input()) - 1])


    print(a)


	print(AD[X-1])

    print(distance[-1])


print(cost[-1])


print(dist[N-1] - (Q if D[N-1] <= S else P))



    print(dijkstra(adjacency_list1, n) - (q if n - 1 in dangerous_vertex_set else p))

      print(total)
print(rp[n-1])

print(TOWN[N-1][2])
			


print(dist[n-1]-cc[n-1])




  print(d-Q)
  print(d-P)

    print(ans)

print(joi_cnt + max(jo_cnt, oi_cnt, ji_cnt))

print(res + a2)


print(ans + max(a, b, c))


print("%d"%(num_JOI+maximum))



    print(num_org_joi + max_num_additional_joi)

    print(-A * C + D + B * E)
    print((B - A) * E)


print(ANS)


    print(ans)
    print(ans)


print(time)


        print(ans)
        print(ans)


    print(SEC)
    print(SEC)

        print(c*(b-a))
        print(a*(-1)*c+d+e*b)
        print(0)
        print(d+e*b)
    print(e*(b-a))


    print((-A[0]) * A[2] + A[3] + A[1] * A[4])
    print((A[1]-A[0]) * A[4])


print(s)


print(ans)


print(s)

print(-a*c+d+b*e if a<0 else (b-a)*e)

        print(-A*C+D+E*B)
        print((B-A)*C)
    print((B-A)*E)

        print((b - a) * c)
        print(- a * c + d + b * e)
    print((b - a) * e)


print(t)



print(t)

  print(-a * c + d + b * e)
  print((b - a) * e)

print(ans)

print(ans)
    

  print(abs(l[0])*l[2] +l[3]+ l[1]*l[4])
  print((l[1]-l[0])*l[4])

print(ans)


print(ans)


print(time)


	print(-a*c+d+b*e)
	print((b-a)*e)

print([(b-a)*e,(-a*c+d+b*e)][a<0])

  print(x)
  print(y)


print(min)


print(total_time)

  print((B - A) * E)
  print((-A * C)+ D + (B * E))

print(time)

    print(ans)


    print(E * (B - A))
    print(D + E * B)
    print(C * abs(A) + D + E * B)


    print(-a*c+d+b*e)
    print((b-a)*e)

    print((B-A)*E)
    print((-1*A)*C+D+B*E)


print(time)


print(t)

    print(ans)

    print((B-A)*E)



    print(abs(a) * c + d + b * e)
    print(d + b * e)
    print((b-a) * e)


print(t)

    print(int(x[4]*(x[1]-x[0])))
    print(t)

    print(num2)
    print(num2)

    print(frozen + not_frozen)
    print((temp_b - temp_a) * temp_e)

print(t)



print(t + (b-a)*e)

    print(c * abs(a) + d + e * b)
    print(e * (b - a))

print(ans)
    

    print((0 - l[0]) * l[2] + l[3] + l[1] * l[4])

     print(l[3] + l[1] * l[4])

    print((l[1]-l[0]) * l[4])


    print(mylist[0]*mylist[2]*(-1)+mylist[3]+mylist[1]*mylist[4])
    print((mylist[1]-mylist[0])*mylist[4])

print(time)


print(ans)

    print(-s[0]*s[2]+s[3]+s[1]*s[4])
    print((s[1]-s[0])*s[4])

    print(e*(b - a))
    print(c*(0 - a) + d + e*b)

        print((0-A)*C+D+B*E)
            print(D+B*E)
    print((B-A)*E)

print(ans)

print(summary)


print(total_time)


print(t)



print(time)


    print((B-A)*E)
    print((0-A)*C+D+B*E)
    


print(sum)

print(T)

print(time)


print(x)

    print(A * C * (-1) + D + B * E)
    print((B - A) * E)


print(time)

    print((b-a)*e)
    print(abs(a)*c+d+b*e)
    print(d+b*e)


print(sum(lst[:m - 1]))


    
    print(ans)

print(sum(l[:-1]))


print(sum(t[:len(t)-1]))


print(ans)

    print(ans)
        
print(sum(c)-max(c))

            print(cost)
print(ans)

print(sum(count) - max(count))

print(sum(cost) - max(cost))


print(cnt)

print(ans)

print(ans)

print(ans)

    print(0)
    print(print_num)

print(expense)

    print(ans)


print(count)

print(money)

        
    
    


print(cost)


print(money)



print(ans)

print(C)


print(result)


    print(sum(s))
    print("0")
        


print(c)


print(ans)

print(sum(Cs[:m-1]))

    print(0)
    print(sum(p[:t]))

print(ans)

    

print(total)

    print(0)
    print(ans)

print(s-x)


print(ans)



print(cost)



print(ans)

print(retval)


    print(total_cost)


print(sum(chng[0:M-1]))

print(cost)


    print(sum(p))
    print(0)


print(need_money)

    print(ans)

print(ans)



print(ans)


print(calc(lambda i, j: S[i][j], N, M) + calc(lambda i, j: S[j][i], M, N))


print(ans)

print(ans)

print(ans)

    print(ans)

print(cnt)

    print(result)

print(a+b)

    print(ans)


print(sum)

print(sum(add_list))

print(cnt)


            
print(p)



print(pattern_num)

            
print(ans)



print(count)

    print(ans)



print(r)


print(cnt)

print(cnt)


print(spaces)


print(ans)


print(CT)

print(count)


print(retval)



print(cnt)


    
print(count)
    


print(toori)

print(ans)

    print(ans)

    
    print(dp[-1])



  print(minimum_cost([i for i in range(m)], h, 0, dic))

print(dfs(0, 0))

    print(dp[ans_bit])
            

    print(ans)


print(ans)

print(ans)

  print(ans)

            
            
print(res)


print(final_ans)

print(ans)


    print(sum([1 for x in range(w) for y in range(h) if is_ridge_grid[y][x]]))



print(cnt)

    print(ans)


			
print(max_time)

  
  print(min([dic[(ct, ht, n - 1)] if (ct, ht, n - 1) in dic else INF for ct in range(x + 1) for ht in range(x + 1)]))

print(min(dist[N-1]))


    print(dijkstra(adjacency_list, n, x, t_list))

print(ans)

    print(an)


print(*ans, sep='\n')

    print(ret)

    print(count)




    print(ans)


  print(temp)

print(ans-1)


    
    print(min(x_ans,y_ans))
        


print(min(x, y))


print(min(math.ceil(n / a) * b, math.ceil(n / c) * d))

    print(X)
    print(Y)


print(min(x, y))

print(min(((n-1)//a+1)*b,((n-1)//c+1)*d))

    print(fprice(c,d))
    print(fprice(a,b))

print(min(ceil(n / a) * b, ceil(n / c) * d))

print(min(X*B, Y*D))



print(ans)


print(min(result))


print(min(math.ceil(N/A)*B, math.ceil(N/C)*D))

print(min(-(-N // A) * B, -(-N // C) * D))


print(x_amount if x_amount < y_amount else y_amount)


print(min(x,y))

    print(moneyA)
    print(moneyB)

    print(x_goukei)
    print(y_goukei)



print(min(X, Y))

print(ans)


print(min((n+a-1)//a*b,(n+c-1)//c*d))


print(min(values))

print(min(price1,price2))


print(min([a_cost, c_cost]))


print(min(price_X, price_Y))

print(min(price_X, price_Y))


print(min(set1_v, set2_v))


print(min(x_t, y_t))




print(min((N+A-1)//A*B,(N+C-1)//C*D))


print(min(h,i))

    print(dataA)
    print(dataB)

print(min(-(-N//A)*B,-(-N//C)*D))

    print(price1)
    print(price2)


print(min(ans))

print(min((n+a-1)//a*b,(n+c-1)//c*d))


print(min(x, y))

    print(y)
    print(x)

print(min((n+a-1)//a*b,(n+c-1)//c*d))

    print(ans)


print(min(costa, costb))

print(min((N+A-1)//A*B,(N+C-1)//C*D))

    print(x_total)
    print(y_total)


    print(A_num * B)
    print(C_num * D)

    print(ymoney)
    print(xmoney)



print(min(B*math.ceil(N/A), D*math.ceil(N/C)))

print(min(x,y))



print(min(ansX, ansY))


print(min(m1, m2))


print(min([math.ceil(n/a)*b, math.ceil(n/c)*d]))


    print(a)
    print(b)


    print(solve(N, A, B, C, D))


        print(*value, sep=sep, end=end)


print(min((n+a-1)//a*b, (n+c-1)//c*d))


print(min(math.ceil(N/A)*B,math.ceil(N/C)*D))




print(min(na,nc))

print(min(q,w))

print(min(X, Y))


  print(costA)
  print(costB)






print(answer)

print(min((N+A-1)//A*B, (N+C-1)//C*D))


  print(x)
  print(y)

    print(b)
    print(d)

    print(pricec)
    print(pricea)

    print(num2)
    print(num1)

print(min(y,r))

        print(int(X))
        print(int(Y))
        

print(min(X,Y))

    print(X)
    print(Y)


    
    print(max(cnts)+1)

print(ans + 1)


print(ans+1)


print(ms)

print(sugoroku_final)

print(max(a)+1)

print(ans)

print(len1(nlist))
        


print(one_max+1)



print(ans)

print(mx+1)


print(ans + 1)



print(max_sequence + 1)

print(maxn)
        

print(max_cont+1)

print(ans)


print(ans)
        

print(max(data)+1)  

print(ans)


print(max_num + 1)

print(ans+1)

print(maxVal+1)




print(max+1)


print(mcount+1)
        

    print(solve(N, A))


        print(*value, sep=sep, end=end)


print(mx+1)

print(M+1)


print(ans+1)


print(max(A))

print(ans+1)

print(ans+1)


print(max(P,C)+1)


print(max_seq + 1)


print(max+1)


    print(1)
    print(long_repeat(A)+1)

print(max)

                
    


print(m)


print(mx+1)


    print(max(l_gr))
    print(1)


print(max1 + 1)


print(ans)

        print(max(max_num_dice, counter + 1))
        print(1)
        print(max_num_dice)


print(ans)


print(max(l))

print(ans + 1)


print(max(slist) + 1)


print(SS+1)


print(max(a)+1)

print(ans)

print(ans)

print(ans+1)

print(max(res, cur))


print(max(faces))

print(ans+1)

print(maxcnt+1)

print(max(ans))

        print(dice_num)
    print(answer + 1)


    
print(ans+1)


print(ans+1)

    print(ans)


    
    print(ans)

print(day)
print(answer)





print(ans)



print(min(sumd(i, j) for i in range(h) for j in range(w)))

    print(solve(H, W, A))


        print(*value, sep=sep, end=end)



    print(min_total_dist)


print(minimum)



    print(ans)



        
print(ans)

print(min_val)

print(min_d)


print(c1)

        

print(ans)


print(mincnt)

print(ans)

print(min(result))     


print(s_min)



print(answer)

print(ans)

print(ans)


print(mins)


        
            
print(min(length))

print(ans)


print(min(S))


print(ans)

            
print(ans)

print(min(c))


print(ans)


print(ans)


print(ans)

print(ans)


print(ans)



print(min_total)    

print(minVal)

print(ans)



print(ans)

print(best)


print(min(distance_all))


print(ans)

print(ans2)



print(min_score)

print(min(ans))


print(SS)


print(ans)



print(min(M))

print(n)


print(sum_d)


print(mi)


print(ans)


print(mdist)

print(mi)


    print(ans)



print(ans)
		



    print(ans)


print(ans)



print(ans)


    print(solve(N, A))


        print(*value, sep=sep, end=end)


print(ans)

    print(solve(H, W, A))


        print(*value, sep=sep, end=end)


    
    print(ans)

  print(ans)
  

print(dp[H-1][W-1])

    print(total_time)

print(ans)



print(min(Res[W-1][H-1]))


print(dp[n-1][h-1][w-1])



print(min(dp[H-1][W-1]))

    
    print(ps[ok][0])


print(r)

print(right)

print(right)


    print(sorted_a_list[right])


print(code[ok + 1])


print(bisearch(200000,-1))



print(ps[ok][0])

print(stove(n,k,t))

print(ans)


print((T[-1] - T[0] + 1) - sum(S[:K-1]))


    print(all_time - d_time)

    print(solve(N, K, T))


        print(*value, sep=sep, end=end)


  print(max)
  print(max)

print(t[-1] - t[0] + 1 - sum(v[:(k - 1)]))

print(n+sum(diff[k-1:]))


  print(n)
  print(n + sum(diff[:n - k]))

print(ans)

print(ans)

print(ans)

print(result)


print(ans)

print(ans)


print(days)


print(weeks * 7 + day)


print(7*w+d)


print(c//(7*a+b)*7+(7 if c%(7*a+b)>6*a else (c%(7*a+b)+a-1)//a))

print(ans) 

   print((7*x)+math.ceil(y/a))
   print(7*(x+1))


    
print(cnt)


    print(n_weeklylogin*7)
    print(n_weeklylogin*7 + (n_dailylogin>=7)*7 + (n_dailylogin<7)*(n_dailylogin))



print(7 * min_k + min_r)

print(week * 7 + num)

print(7*w+d)

print(ans)

print(total)


print(Process(A, B, C))



print(c)


    print(ans)


    print(p*7 + 7)
    print(p*7 + r)
    print(p*7 + r + 1)

    
    



print(C//(7*A+B)*7+(7 if C%(7*A+B)>6*A else (C%(7*A+B)+A-1)//A))


        print(int(C/(7*A+B))*7 + int(D/A))
        print(int(C/(7*A+B))*7 + 7)
        print(int(C/(7*A+B))*7 + int(D/A) + 1)
        print(int(C/(7*A+B))*7 + 7)


    print(1)
        print(7)
        print(day_0+1) 
        print(day_0)
        print(day_0+day_rem)
        print(day_0)
        print(day_0+1)
    print(week_day)
        print(week_day+1)
        print(week_day+7)
        print(week_day+week_rem)  

print(ans)

print(a)


print(7*q+min(7,math.ceil(m/a)))

    print(week*7+min(7,day))

print(ok)

print(ans)

    print(7*k + (C+A-1)//A)
    print(7*(k+1))


print(d)

		print(tmp4)
		print(tmp2*7 + tmp4)



print(res_week * 7 + res_day)


print(ans)    


print(ans)

print(ans)

print(x)

print(int(e*7+g))

            
    print(days + weeks * 7)

    print(x*7+7*r)
    print(x*7+z)


print(ans)



print(7*w+d)

        print(7)
            print(C//A)
            print(C//A+1) 
        print((C//((7*A)+B))*7)
            print((C//((7*A)+B)+1)*7)
                print(((C//((7*A)+B))*7)+((C%((7*A)+B))//A))
             print(((C//((7*A)+B))*7)+((C%((7*A)+B)))//A+1)
    

    print(int(b))
    print(int(a))

        print(C//A)
        print(C//A+1)

            print(F*7+x)
            print(F*7+x+1)
        print((F+1)*7)

    print(-(-c//a))
    print('7')
        print(d*7+f)
        print(7*d+7)

print(d)

    print((W+1)*7)


    print(W*7+day)


    print((t+1)*7)
    print(t*7+day)


    print((y+1)*7)
    print(y*7+day)

            print(7*z+e)
            print(7*z+e+1)
        print(7*z+7)
    print(7*z)

    print(w*7+math.ceil(z/A))
    
    print(w*7+7)


        print(7*x+7)    
            print(7*x+t+1)
            print(7*x+t)
    print(7*x)

    print(ans)

print(min(totalday,totalday2))


    
print(7*w+d)

    print(ans)


print(w*7+ d )       



    print(ans*7+point)
    print("7")
        print(C//A)
        
print(day)

        print(x)
print(ans)

print(ans)



            print(7)
            print(int(c/a))
            print(7)
            print(int(c/a)+1)
        print(int(c/d)*7)
                print(int(c/d)*7+7)
                print(int(c/d)*7+int(e/a))
                print(int(c/d)*7+7)
                print(int(c/d)*7+int(e/a)+1)
            
    

    print((y+1)*7)
    print(y*7+day)


    print(c//(a*7+b)*7-(-1*(c%(a*7+b)))//a)
print(l)

print(ans)


print(s)

    print(weeks * 7)
        print(weeks * 7 + i)
        print((weeks + 1) * 7)


print(ans)

        print(C//A)
        print(C//A+1)
        
    print(y*7)
        print(y*7+7)
        print(y*7+7)
        print(y*7+w)
        print(y*7+w+1)

    print(counter)



print(7*q+min(7,math.ceil(m/a)))

    print(x*7+math.ceil(y/A))
    print(x*7+7)

            print(c//a)
            print(c//a+1)
        print(7)
        print(int(7*c/(7*a+b)))
                print(int(c//(7*a+b)*7+(c%(7*a+b))//a))
                print(int(c//(7*a+b)*7+(c%(7*a+b))//a)+1)
            print(int(c//(7*a+b)*7+7))

            print(c//a)
            print(c//a+1)
        print(7)
        print(int(7*c/(7*a+b)))
                print(int(c//(7*a+b)*7+(c%(7*a+b))//a))
                print(int(c//(7*a+b)*7+(c%(7*a+b))//a)+1)
            print(int(c//(7*a+b)*7+7))

print(ok)

    print(7*k + (c+a-1)//a)
    print(7*(k+1))

print(ans)

    print(7*k + (C+A-1)//A)
    print(7*(k+1))

    print(7 * (x + 1))
    print(7 * x + z)

    print((y+1)*7)
    print(y*7+day)

print(ans)

            print(7*z+e)
            print(7*z+e+1)
        print(7*z+7)
    print(7*z)

print(x)

print(ans)

print(days)

print(days)

            print(ans)


    print(x)


    print(i)

    print(i)


    print(i)

print(format("\n".join(map(str,X))))


    print(i)


    print(v)


print(*xlst, sep="\n")

        print(i)

    print(komaI[i])
    print(tmp[i])

    print(X[i])


  print(X[i])

        print(i)

        print(x)


    print(X[i])

        print(i)

    print(X[i])

    print(x)
    

    print(i)

    print(pieces[i+1])

    print(i)

    print(L[i])


    print(i)

    print(i)

    print(x[i])

    print(x[i])

    print(i)
    
    


    print(*x[1:], sep="\n")


    print(i)

    print(X[i])

    print(x[i])


    print(i)

    print(X[i])

    print(X[i])


    print(X[i])

    print(i)

    print(X[i])

    print(x)

    print(x)

    print(x)


    print(x[i])


print(*d.values(), sep="\n")

    print(t)

    print(piece_pos_list[i])

    print(i)


    print(x+1)

            print(i + 1)

print(*X,sep="\n")

    print(peace[i])


    print(x[i])


    print(X_N[i])

    print(BASYO[i])

  print(j)

    print(x)

        print(X[i])

    print(m)

	print(k)


    print(_map.index(i+1))

    print(P_locat[i])

    print(s[i])
    
    


print(*X[1:],sep="\n")

    print(i)

print(b)

    
    print(ans)

print(ans)

print(i + str2.count("XO"))

print(s.count("OX") + s.replace("OX", "").count("XO"))

print(ans)


print(ans)



print(ans)


    print(ans)



print(cnt)

print(ans)

print(re.sub(r'OX|XO','@',input()).count('@'))

   print(ans)

print(ans)



print(ans)


print(ans)


    print(stomp)


print(x)



print(cnt)


    print(solve(N, S))


        print(*value, sep=sep, end=end)


print(count)


print(cnt)

print(cnt)
    


print(ans)


print(cnt)

    print(ans)
print(counter)

print(cnt)

        
print(cnt)

    print(counter)

print(depth)


print(cnt)

print(oxcnt)



print(ans)


print(ans)



print(count)

print(ans)

print(maru_batsu)
    

print(ans)




print(stamp_0x)

print(ans)
        

print(count)



print(cnt)

print(cnt)


print(cnt)



    print(dp[-1])

print(cnt)



print(count)


        
print(ans)

print(max(maxx,minn))



print(count)

print(count)



print(ans)

print(cnt)

print(cnt)

print(dp[N])

print(cnt)



print(cnt)


print(ctr.ctr) 


print(countox(s))


print(count)


print(count)

print(ans)

print(k)

print(dp[-1])


        print(count)
print(a)


print(ans)

    print(int(al[0] > 0))
print(ans)


print(ans)

print(max_overlaps)

    print(n_max)
        print(0)

    print(max_island)

    print(max_island_count)


    print(solve(N, A))


        print(*value, sep=sep, end=end)


  print(0)

print(max_cnt)

    
print(max_count)

            print(1)
            print(0)
        print(0)

    print(max_num_islands)


    print(ans)
        print(0)
        print(1)

print(maxCount)



    print(max(cur, ans))


    print(+(min(A) > 0))
    print(ans)


print(ans)

print(ans)


    print(0)
print(ans)


print(ans)

print(ans)

        print(0)
        print(1)

print(max_islands)


    print(0)
    
print(ans)


    print(dp[-1])



    print(max(dp))
    print(dp[-1])


print(dp[N])

print(ans)

    print(solve(N, M, A, B))


        print(*value, sep=sep, end=end)


print(query(0, N+1))


print(segtree.get(0, N+1))


print(solve())




print(solve())


            
    print(ans)


print(cnt)


print(P)

print(ans)

print(ans)

        

print(power)
             

print(ans)


print(ans)



print(ans)

    print(solve(H, W, S))


        print(*value, sep=sep, end=end)


    
    print(ans)

    
    print(ans)


print(cnt)

print(ans)

    print(solve(N, M, P, C))


        print(*value, sep=sep, end=end)



print(solve())



    print(counter)

print(cur)



print(num)


    print(result)

print(2 if sum(n) > 4 else 1)

    print(1)
    print(2)    

        print("1")
            print("1")
            print("2")
        
            print("1")
            print("2")
        print("2")

    print(1)
    print(2)

    print(1)
    print(2)

    print("1")
    print("2")

    print(A)
    print(A)
    print(B)
    print(A)

    print(1)
    print(2)

        print(2)
        print(1)



    print(2)
    print(1)


    print(1)
    print(2)

        
print(int(c1 < 2) + 1)

    print(1)
    print(2)

print(a[1])

    print(2)
    print(1)


    print(2)
    print(1)

    print(2)
    print(1)

    print(1)
    print(2)


print("1" if b>c else "2")

    print("1")
    print("2")

    print(1)
    print(2)


    print(1)
    print(2)

    print(1)
    print(2)

    print(1)
    print(2)

print(1 if c >= 2 else 2)


        print('1')
        print('2')
    print(2)
    print(1)

    print("1")
    print("2")
        print("1")
            print("1")
            print("2")
        print("2")
    print("2")

    print("2")
    print("1")
        



    print(1)
    print(2)

    print(1)
    
    print(2)

    print(1)
    print(2)


	print(2)
	print(1)

    print(1)
    print(2)


print("2" if t > o else "1")


    print(1)
    print(2)

        print("2")
        print("1")
        
        
    
		print(1)
		print(2)

    print(1)
    print(2)

    print(2)
    print(1)
        

print(1) if max(S.count("1"),S.count("2")) == S.count("1") else print(2)

    print(1)
    print(2)

    print(1)
    print(2)

    print(1)
    print(2)

print(nums[1])

    print("2")
    print("1")

   print("1")
   print(2)

print((S+1)//3)

    print(2)
    print(1)

    print(A)
    print(A)
    print(B)

        print('1')
        print('2')

    print(1)
    print(2)

 print("2")
 print("1")

    print(2)
    print(1)

    print(1)
    print(2)

    print(2)
    print(1)

    print(1)
    print(2)
    

    print(2)
    print(1)

    print(1)
    print(2)



print(ans)


print(b)        

        
print(ans)


print(s.count('a') + s.count('i') + s.count('u') + s.count('e') + s.count('o'))

print(nisimuraGOMI)

print(a)

print(ans)

    
    print(ans)


print(cnt)



print(vowel_count)

        
print(ans)

print(vowel)


print(total_vowels)


print(ans)

print(result)

print(ans)

print(b + c + d + f + g)

print(ans)

print(ans)


print(s.count("a")+s.count("i")+s.count("u")+s.count("e")+s.count("o"))

print(sum)

print(N-len(s))

print(s.count("a") + s.count("i") + s.count("u") + s.count("e") + s.count("o"))

print(cnt)



print(count)

print(cnt)


print(count)

print(a)


print(num_vowel)


print(cnt)

            
    print(boin)
        

    
	print(cnt)


print(count)
  


print(c)


print(ans)


print(count)

print(a.count('a') + a.count('i') + a.count('u') + a.count('e') + a.count('o'))

print(count)

print(l.count("a") + l.count("i") + l.count("u") + l.count("e") + l.count("o"))

print(cnt)



print(input_list.count("a") + input_list.count("i") + input_list.count("u") 
print(cnt)


print(result)


    print(counter)


        
print(cnt)

print(S.count('a') + S.count('i') + S.count('u') + S.count('e') + S.count('o'))


print(ans)

print(int(S.count('a')) + int(S.count('e')) + int(S.count('i')) + int(S.count('o')) + int(S.count('u')))


print(sum_x)


print(count)


print(boin)
    

print(sum)
        



print(S.count("a")+S.count("i")+S.count("u")+S.count("e")+S.count("o"))


print(v)


print(cnt)



print(sum)


print(n)

print(count)


print(number)

print(c)

print(count)

print(ans)



print(cnt)


print(cnt)


        print(A[i])
        print(B[j])
        print(a)
    

    print(v)


    print(num)

    print(i)

    print(i)

    print(i)

print(*sorted(l),sep='\n')

  print(num)


    print(c[i])


print('\n'.join(map(str, AB)))


    print(i)

            print(list_M.pop(0))
            print(list_N.pop(0))
            print(list_N.pop(0))
            print(list_M.pop(0))

    print(i)

        print(B.pop())
        print(A.pop())
        print(B.pop())
        print(A.pop())


    print(listc[i])

        print(val)
 
	print(*C,sep='\n')

    print(i)

    print(i)

    print(num)  

      print(c)
    print(a)

    print(moji)


    print(k)

            print(b_list.pop())
                print(a_list.pop())
                print(b_list.pop())
            print(a_list.pop())

    print(C[i])


    print(c)

        print(B[b])
        print(A[a])
            print(A[a])
            print(B[b])
    print(C[i])

    print(A[i])

    print(C[i])

    print(i)


    print(i)

    print(c)

    print(k)



print(*c, sep = '\n')

    print(l[i])

    print(i)


        print(c[i]) 

    print(c)

    print(i)
    

    print(i)
    

            print(i)
        
  print(c)

    print(C[i])

    print(x)

        print(i)

    print(i)

            print(B[0])
            print(A[0])
                print(A[0])
                print(B[0])
    print(i)
    

    print(t)

    print(x)


    print(i)

  print(D[i],sep="")

        print(B.pop(-1))
        print(A.pop(-1))
            print(A.pop(-1))
            print(B.pop(-1))

print("\n".join(list(map(str, c))))

    print(b+c)
    print(a+c)
    print(a+b)

    print(ans)

print(sum(l) - min(l))


print(total)

print(A[1]+A[2])

print(a + b + c - min(a, b, c))


print(high1 + high2)

    print(b+c)
    print(a+c)
    print(a+b)


print(lst[1] + lst[2])


print(a + b + c - min(a, b, c))

print(sum(A)-min(A))


print(a + b + c - min(a, b, c))

print(B[0]+B[1])


print(a + b +c - min(a, b, c))

print(a+b+c-min(a,b,c))

    print(A+B)
    print(A+C)
    print(A+B)
    print(B+C)
    print(A+C)
    print(B+C)
    


print(score[1] + score[2])

print(sum(l)-min(l))

print(sum(a[1:]))

print(score)


print(A[1]+A[2])


print(sum(sorted(ABC)[1:]))


print(score[0]+score[1])

print(lst[1] + lst[2])

print(sum(a) - min(a))



print(sum(P[:2]))

print(list[1]+list[2])

print(a[1] + a[2])

print(sum(score) - min(score))

print(sum(sorted(list(map(int,input().split())))[1:]))

        print(d)
        print(a)
        print(e)
        print(a)
        

print(sum(a[0:2]))

print(sum(ls) - min(ls))

    
print(JOI1+JOI2)

  print(answer)
  print(answer)
  print(answer)
  print(answer)
  print(answer)
  print(answer)

    print(str(y+z))
    print(str(x+z))
    print(str(x+y))

print(a[-1]+a[-2])

print(a + b)

print(l[-1] + l[-2])

print(X[1] + X[2])


print(sum(input_list[-2:]))


print(sum(test) - min(test))

    print(num_list[-1] + num_list[-2])


print(max(A+B,B+C,C+A))

print(sum(A[1:]))

print(score[0] + score[1])

print(R)

print(sum(A)-min(A))


print(sum(F[1:]))

print(point[0] + point[1])



print(nums[0] + nums[1])

print(test[0]+test[1])

print(N[0]+N[1])




print(scr[1]+scr[2])

print(exms[1] + exms[2])

print(sum)


    print(a+b)
    
    print(a+c)
    
    print(b+c)

print(exam[0]+exam[1])


print(sum(s)-min(s))

print(sorted(ABC)[-1]+sorted(ABC)[-2])

print(A+B+C-min(A,B,C))

print(score[0] + score[1])

print(score)


print(sum(score)-min(score))

print(num)

print(a + b + c - min(a, b, c))


print(sum(A))


print(max_point1+max_point2)

    print(S[i], end = '')
    
print()



print(s[:(a-1)]+"".join(reversed(s[(a-1):b]))+s[b:])
    

    print(ans)


print(t)

print(result)

print(ans)

print(ans)

print(S_before + S_inv + S_after)

  print(s)

  print(inverted_string)


print(s[:a] + mid[::-1] + s[b:])

print(ans)


print(s[:(a-1)]+"".join(reversed(list(s[(a-1):b])))+s[b:])


print(*ans, sep='')



print("".join(text))

        print(i, end = "")
        print(s[x], end = "")
        print(s[x], end = "")
        print(s[b + 1], end = "")   
print()

print(s[:a-1] + s[a-1:b][::-1] + s[b:])



print(S1 + S2[::-1] + S3)


print(result)

	print(S[:A-1]+S[A-1:B][::-1]+S[B:])

print(S)

  print(s)
  print(s1+sss+s2)

print(a[:srt-1]+a[srt-1:end][::-1]+a[end:])

print(s3)

print(T)

print(S[:A-1] + res + S[B:])

print(S[:A-1] + S[A-1:B][::-1] + S[B:])

        print(c, end='')

        print(c, end='')

        print(c, end='')
        
    print('')

    print(S)
    print(p+q+r)
    
    

print(S[:A-1] + rs + S[B:])

print(S[:A-1] + S[A-1:B:][::-1] + S[B:])

print(ns)


    print(S[i],end="")
    print(S[i],end="")
    print(S[i],end="")
print()


        print(s[1])
                print("".join(text))
    print(s[1])
            print("".join(text))
    print(S[i],end="")
    print(S[i],end="")
    print(S[i],end="")
print()



print(''.join(C))


print(s[:a - 1] + s[a - 1:b][::-1] + s[b:])

print(s[:a] + mid[::-1] + s[b:])
print(f'{S[:A-1]}{S[B-1:A-N-2:-1]}{S[B:]}')


print(s[:a] + mid[::-1] + s[b:])

print(S[:A-1]+S[A-1:B][::-1]+S[B:])

print(R)



print(text)


print(s[:A - 1] + s[A - 1:B][::-1] + s[B:])

print(s[:a-1]+''.join(list(reversed(s[a-1:b])))+s[b:])


print(s[:a-1] + mid[::-1] + s[b:])

print(out)

print(''.join(aa))


print(SS)


print(str[:i] + rSubStr + str[j:])

print(s[:A-1] + s_rev + s[B:])

print(res) 


    print(new)

print(S[:A-1] + new + S[B:])


print("".join(s))



print("".join(L1 + L3 + L2))

print(S[:A] + rev[::-1] + S[B:])

print(ss)

    print(a) 


print("".join(map(str,ans)))

print(s[:a] + mid[::-1] + s[b:])

print(max(a))

print(B_max)

print(max(b))
    


print(max(b))


    print(max(mm))
    

print(max(c.values()))


print(max_count)

print(max_cnt)


print(max(b))


print(ans)


print(max(B))


print(max)

print(max(lst_b))

print(max(b))


print(max(b.values()))


    print(max(l_result))
 
	print(max(B))


print(max(B))


print(max(B))

print(max(ls))

print(max(X))

print(max(B))


    print(max_b)

    
print(max(B))

print(ans)


print(max(B))


print(max(b))


print(max)
    

print(B[0])

print(max(b))

    
print(max(c))

print(max(B))


print(max(b))

print(mode)



print(max(B))


print(max(B))


print(max(b))


print(max(B))

print(max(M))

print(max(ans))

print(d)

print(A.count(X))


print(max(ans))

    
    print(max(B))
    


print(*max(data))


print(ans)


print(tmp)

print(max(b))

print(max(B))

print(max)


print(max(B))

print(max([a.count(j+1) for j in range(m)]))

print(max(l_ans))


print(ans)

print(c.most_common()[0][1])

print(c[0])

        print(0)

    print(ret)



print(b.most_common()[0][1])

print(max)


print(highest_value)


print(ans)

    print(r)
    print(l)
    print(x)
    

        print(L)
        print(X)
        print(R)


    print(x)
        print(r)
        print(l)



print(result)

    print(L)
    print(X)
    print(R)

  print(x)
    print(x)
      print(min(l, r))
      print(max(l, r))
    print(min(l, r))


    print(l)
    print(x)
    print(r)


print(a if c<a else b if c>b else c)


print(ans)


    print(x)
    print(l)
    print(r)


    print(L)
    print(R)
    print(X)

    print(x)
    print(l)
    print(r)

    print(l)
    print(x)
    print(r)


    print(X)
    print(L)
    print(R)

		print(L)
		print(R)
		print(X)

  print(num2)
      print(num)
    print(num3)
    print(num2)
  

    print(a)
    print(b)
    print(c)

    print(c)
    print(b)
            print(i)

    print(L)
    print(R)
    print(X)

    print(R)
    print(L)
    print(X)

        print(l)
        print(x)
        print(r)

    print(X)
    print(L)
    print(R)

    print(x)
    print(l)
    print(r)

    print(X)
    print(L)
    print(R)


    print(l)
    print(x)
    print(r)


    print(X)
    print(L)
    print(R)

print(X)

        print(r)
        print(l)
        print(x)


    print(l)
    print(x)
    print(r)

    print(x)
    print(l)
    print(r)

 print(X)
 print(int(L))
 print(int(R))


    print(R)
    print(L)
    print(X)

print(x if l <= x <= r else l if x < l else r)

    print(X)
    print(R)
    print(L)

    print(l)
    print(r)
    print(x)

    print(L)
    print(R)
    print(X)

    print(list_x[1])
    print(list_x[2])
    print(list_x[0])

    print(L)
    print(R)
    print(X)

print(ans)

print(nums[idx])

print(ans)

    print(L)
    print(R)
    print(X)


print(ans)


print(num)


print(mini)

print(ans)

    print(b)
    print(c)
    print(a)


print(ti)

            
    print(mi)
            
        
        
        
    
            
    
    

    

print(num[ind])

    print(i)
      print(max(LR))
      print(min(LR))
print(num)


print(tmp)

    
print(count)

print(cur)

    
print(ans)
    

    print(S)

print(s.replace("joi", "JOI"))


print(result)

print(s)

print(result)


print(output_string)


print(s)


print(sc)


print(S)


print(s)



print(text)

print(s)

print(ans)


print(S.replace("joi","JOI"))


print(text.replace('joi', 'JOI'))

	print(S.replace('joi','JOI'))

print(S)

print(st)

print(T)

print(S)

print(S.replace("joi", "JOI"))

    print(input_str.replace('joi', 'JOI'))

print(ans)

print(S)


print(out_s)



print(S)

print(s.replace("joi", "JOI"))

print(S.replace("joi","JOI"))

print(s)

print(s.replace("joi", "JOI"))

print(S)




print(s.replace('joi','JOI'))

        print('JOI', end='')
        print(S[i], end='')

print(S[i:])

print(s.replace('joi', 'JOI'))


print(s)

print(''.join(s))

print(S.replace('joi','JOI'))


    print(ret)

    
print("".join(st))

    
print("".join(S))

print(s.replace('joi', 'JOI'))

print(S.replace('joi','JOI'))


print(S.replace('joi','JOI'))


print(S)


print(M.replace("joi", "JOI"))

print("".join(s))

print(S.replace('joi','JOI'))


print(s.replace("joi", "JOI"))

        print('JOI', end='')
        print(s[idx], end='')
print()

print(S)

print(s)

print(s.replace("joi", "JOI"))

print(s.replace('joi', 'JOI'))


print(S)


    print(s.replace('joi','JOI'))
        
        
        
    
            
    
    

    
print(x)


print("".join(s))

    
    print(ans)

    
        
print(ans)
    

print(ans)


print(maxim)

print(max_result)

    print(1)
    print(max(b))
    

print(max(answer))


print(ans)


print(ans)



print(max)

    print(1)
    print(max(lst))

print(max(max_c, cnt))



print(ans)


print(max(candidate))


	print(max([maxv,cnt]))

            
    print(now)

    
print(ans)

print(now)

print(M)

print(max(count_list))

        print(1)

    print(max_length)

print(Cnt)

print(max(ans, cnt))

print(ans)



print(max)

print(ans)

print(max(c_list))

print(max(list(map(len, ''.join(map(lambda x: '1' if x else '0', b)).split('0'))))+1)

print(maxlen)


print(ans)



print(max(l_list))

print(max(*ans,ct))

print(ML)

    print(1)
    print(max(cnt_set))

    print(ret)


print(ans+1)


print(ans)

print(ans)

  print(ct)
  print(ans)

print(answer)


print(maxCount)



print(max_count+1)

print(res)

print(max_count)

print(ans)

print(ans+1)

print(max(cnt))


print(ans)

print(mso)


print(max(ans))            


            


print(ans)



print(compair(s, t))




print(min(count_list))

    print(min(c_1,c_2,cc,norm))


	print(min(p))

    print(operation_time)


print(ans)


print(ans)

 
print(min(time_1, time_2, time_3, time_4))


print(ans)


 
print(ans)


    print(min(dif(S,T,N), 1 + dif(S90,T,N), 2 + dif(S180,T,N), 1 + dif(S270, T, N)))


print(min(check,check_1,check_2,check_3))


print(ans)


    print(ans)


print(ans)

print(min_m)


print(ans)


print(ans)

print(m)

    print(min(ret))


print(ans)


print(min(c0,c1,c2,c3))



print(_min)



print(min(wk))


    print(same_s)
    print(same_sr +1)
    print(same_sl +1)
    print(same_sd +2)

print(A)


print(ans)

        
print(ans)

    print(ans)
print(ans)



    print(min_t)

print(t)



print(max(max_v[0]+max_v[1], max_k*2))

    print(T_max + A_list[T_index])
    print(A_max * 2)


print(maxtime)




print(sec)


print(ans)

    print(a)
    print(b)

    print(T_max + A_list[T_index])
    print(A_max * 2)
    

 
print(sec)


    print(max(res))


    print(time + T[0][0])


print(time)

print(time+abs(x))



print(tm)

print(time)

        
print(time)

print(2*length+waits)


print(ans)

print(2 * ma + w)



print(max(Finall_tim1, Finall_tim2))


print(S+1)

    
    print(dp[N])



print(cnt[N])


    print(l[n])

print(l[n])


print(check(n))



print(len(ans))


    print(dp[n])

print(ans)



    print(len(s))


print(dp[n])



print(len(ans_set))


print(len(K))


print(listN[N-1])


    print(1)
print(ans)

print(dp[n])

print(dp[N])


print(d.count(1))

print(len(l))



    
print(min_NoO)

print(ans)


    print(min_num_operation)


    print(now[2])
        print(d)
    print(min_num_operation)

print(ans)


    print(j[0][0])
    print(j[0][1])
    print(j[0][2])


    print(result)

print(l[1])

print(A[-2])

print(l[1])


print(num[1])



print(A[1])

print(abc[1])


    print(B)
    print(C)
    print(C)
    print(A)
    print(A)
    print(B)



    print(ABC[1])

print(l[1])


print(a[1])

print(l[1])

print(c[1])


print(a[1])

print(sorted(list(map(int, input().split())))[1])


print(sorted(l)[-2])

print(N[1])

    print(lst[1])

print('%d' %ABC[1])

print(sorted(l)[-2])

print(abc[1])


print(s[0])

print(l[1])

    print(sum(nums) - max(nums) - min(nums))


print(sorted(l)[-2])


    print(b)
    print(a)
    print(c)
    print(a)

print(sorted(map(int, input().split()))[1])

print(NUM[1])

print(abc[1])

print(mylist[1])

print(list[1])

print(sorted(s)[1])


print(sorted(na())[1])

print(l[1])

print(A[1])

print(sorted(abc)[1])

print(l[1])

print(n[1])

print(l[1])

print(l[1])

print(sorted(list(map(int, input().split())))[1])


print(a[1])

print(a[1])

print(textJO + textI)


print('J'*s.count('J') + 'O'*s.count('O') + 'I'*s.count('I'))


print("J"*S.count("J") + "O"*S.count("O") + "I"*S.count("I"))

print('J' * s.count('J') + 'O' * s.count('O') + 'I' * s.count('I'))

    print(ans)


print("J"*j + "O"*o + "I"*i)


print(ans)

    
print(ans)

print("J"*a+"O"*b+"I"*c)

    print(c, end="")
print()


    print("J", end="")
    print("O", end="")
    print("I", end="")
print()

print("J"*counter[0] + "O"*counter[1] + "I"*counter[2])


    print(*[c for n, c in lst], sep='')

  print('J',end='')
  print('O',end='')
  print('I',end='')
print()


print("".join(l))

print(ans)



print("".join(ans_j + ans_o + ans_i))

print("".join(sorted(s, key=order.index)))


print('J' * l.count('J') + 'O' * l.count('O') + 'I' * l.count('I'))

print('J'*t[0]+'O'*t[1]+'I'*t[2])

    print('J', end='')

    print('O', end='')
    print('I', end='')
print()


    print("J" * j + "O" * o + "I" * i)


    print(j[a],end="")
    print(o[b],end="")
    print(i[c],end="")
print()


print("J" * j + "O" * o + "I" * i)


print(ans)

    print('J', end="")
    print('O', end="")
    print('I', end="")
print()

print("J"*string.count("J")+"O"*string.count("O")+"I"*string.count("I"))


print(ans)


print("".join(sorted(s, key = lambda x: ord[x])))


print("J"*j+"O"*o+"I"*i)


print("J"*S.count("J") + "O"*S.count("O") + "I"*S.count("I"))

print(ans)

print(s)

print(ans)

    print("J", end="")
    print("O", end="")
    print("I", end="")
print()

print("J"*s.count("J")+"O"*s.count("O")+"I"*s.count("I"))



print(("").join(S))

print("".join(S))

        print(num[i])

    print(i)

            print(ans)

        

    print(an)


    print(i)


  print(a)


        print(N[i])

        print(*lst, sep='\n')

  print(i,sep='')


    print(i)


    print(k)

    print(item)


    print(i)

        print(end="")
            print(num)


  print(i)

    print(int(g))

        print(a_i)


    print(an)

    print(d)

    print(p)

    print(i)

    print(c)


	print(i)

    print("\n".join(map(str, D)))

    print(c)


    print(ci)

    print(a)

    print(i)

    print(i)

  print(element)

        print(n)
    print(s[i])


    print(1)
    print(0)    


    print(1)
    print(0)

    print("1")
    print("0")

        print(1)
        print(0)


print(int(a <= c < b))



print(int(a <= c < b))

    print("0")
    print("1")

    print(1)
    print(0)

  print(1)
  print(0)


    print(1)
    print(0)

    print(1 if a <= c < b else 0)

  print('0')
  print('1')
  print('0')


    print(1)
    print(0)


    print(1)
    print(0)

print("1") if a <= c < b else print("0")


    print("1")
    print("0")

print(int(a<=c<b))

    print(1)
    print(0)

        print(1)
        print(0)


print(int(a<=c<b))

print(1 if a <= c < b else 0)


print("1" if A<C<B else "0")

    print(1)
    print(0)

    print(1)
    print(0)

    print(0)

        print(0)
        print(1)

    print(0)

    print(1)
    print(0)

    print(1)
    print(0)

print(1 if a <= c < b else 0)

    print(1)
    print(0)

    print(1)
    print(0)

    print(1)
    print(0)

    print(1)
    print(0)

    print(1)
    print(0)

    print(1)
    print(0)

    print(1)
    print(0)

    print("Yes")
    print("No")

        print('Yes')
        print('No')


        print("Yes")
print("No")


  print("Yes")
  print("No")

    print("Yes")
    print("No")

    print("Yes")
    print("No")

      print("Yes")
  print("No")

    print("Yes")
    print("No")

    print("Yes")
    print("No")


    print('Yes' if is_ok else 'No')
    print('Yes')
  print('No')


    print('Yes')
    print('No')


print("Yes") if ct == 3 else print("No")


print(p)

        print("No")
        print("Yes")
        print("No")


    print("Yes")
    print("No")

            print("Yes")

print("No")


print("Yes" if j > 0 else "No")
    

    print("Yes")
    print("No")

print('Yes' if 'O' in s[i:k] else 'No')

    print(f())

    print("Yes")
    print("No")

    print("Yes")
    print("No")

print("Yes" if re.match(r'.*I.*O.*I.*',S) else "No")

        print("Yes")
        print("No")
    print("No")

    print("Yes")
    print("No")

                print("Yes")
print("No")

print(f)
print(b)

    print(front)
    print(back)

print(sum(al[:i]))
print(sum(al[i+1:]))

print(sum(left))
print(sum(right))


    
print(total_b)
print(total_a)

print(sum(L[:n]))
print(sum(L[n+1:]))

    print(sum(a_list[:idx]))
    print(sum(a_list[idx + 1:]))

print(R)
print(L)

print(sum(a[:idx]))
print(sum(a[idx + 1:]))



print(sum(A[:p]))
print(sum(A[p+1:]))

print(sum(a[:max_a]))
print(sum(a[max_a + 1:]))


print(x)
print(y)

        print(0)
        print(sum(a[1:]))
        print(sum(a[:-1]))
        print(0)
        print(sum(a[:idx]))
        print(sum(a[idx + 1:]))


print(sum(numbers[:numbers.index(max(numbers))]))
print(sum(numbers[numbers.index(max(numbers)) + 1:]))

print(f)
print(b)


print(sum(a[:max_ind]))
print(sum(a[max_ind + 1:]))


print(sum(A[:ix]))
print(sum(A[ix+1:]))

    print(0)
    print(sum(a[1:n]))
    print(sum(a[0:n-1]))
    print(0)
    print(sum(a[0:i]))
    print(sum(a[i+1:n]))
    

print(sum(a[:a.index(max(a))]))
print(sum(a[a.index(max(a))+1:]))


print(before_maximum)
print(after_maximum)



print(sum(s[:idx]))
print(sum(s[idx+1:]))

        print(su)
print(su)

print(sum(a[:idx]))
print(sum(a[idx + 1:]))


print(sum(A[:i]))
print(sum(A[i + 1:]))

print(ans1)
print(ans2)

    
print(forward)
print(backward)

print(sum(a[:s]),sum(a[s+1:]),sep="\n")

print(sum(l[:ind]))
print(sum(l[ind+1:]))

        print(sum(A[:i]))
        print(sum(A[i+1:]))
print(max(a+b,a-b))
print(min(a+b,a-b))


    print(p)
    print(m)
    print(m)
    print(p)

    print(max(plus, minus))
    print(min(plus, minus))
    

    print(an)


print(max(A+B, A-B))
print(min(A+B, A-B))


print(max(a + b, a - b))
print(min(a + b, a - b))

    print(a+b)
    print(a-b)
    print(a-b)
    print(a+b)

print(max(a+b,a-b))
print(min(a+b,a-b))

  print(i)




print(maxi)
print(mini)

print(L[0])
print(L[1])

    print(max(s, d))
    print(min(s, d))

  print(A+B)
  print(A-B)
  print(A-B)
  print(A+B)

print(max(a + b, a - b))
print(min(a + b, a - b))



print(max(list))
print(min(list))


print(max([a - b, a + b]))
print(min([a - b, a + b]))


print(max(c,d))
print(min(c,d))


    print(max(add, sub))
    print(min(add, sub))


print(m1)
print(m2)

print(max(a - b,a + b))
print(min(a - b,a + b))

    print(p)
    print(m)
    print(m)
    print(p)

    print(a+b)
    print(a-b)
    print(a-b)
    print(a+b)

print(max(k))
print(min(k))



print(first)
print(second)


    print(calc1)
    print(calc2)
    print(calc2)
    print(calc1)
    



print(max(A+B, A-B))
print(min(A+B, A-B))

print(max(a + b, a - b))
print(min(a + b, a - b))


print(max(l))
print(min(l))

print(max(a+b,a-b))
print(min(a+b,a-b))

print(max(a+b, a-b))
print(min(a+b, a-b))

print(max(a+b,a-b),min((a+b,a-b)),sep="\n")


    print(h)
    print(t)
    print(t)
    print(h)

print(max(x))
print(min(x))

print(max(a + b, a - b))
print(min(a + b, a - b))


print(ans1 if ans1>ans2 else ans2)
print(ans2 if ans1>ans2 else ans1)

print(max(A+B,A-B))
print(min(A+B,A-B))

print(t)

    
    print(ans)


print(cnt)



print(operations)

        
print(ans)

print(count)

print(ans)



print(N-flag_i-flag_o)

print(ct)

    print(counter)

print(f)

print(ans)



print(count)

print(x)



    print(cnt)


print(c)


print(cnt)


print(a1+a2)

print(answer)

print(num)

print(cnt)

print(ans)

print(ans)


print(a)

print(ans)

print(count)

print(count)

print(a)

print(c)

print(t)

    
    print(ans)

print(ans)



print(count)

            
            
print(ans)

print(count)
        

print(len(result_set))


            
print(count)

print(ct)

    print(counter)


print(ct)


print(ans)



print(count)

print(cnt)



    print(cnt)


print(c)


print(ans)


print(len(ans))

print(c)

print(m)

print(c)

print(ans)

print(ans)

print(ans)

        
print(count)

print(an)

print(answer)

print(ans)

    
    print(ans)


print(ans)


        print(0)

    print(result)

        print(0)

    print(result)

        print(0)

    print(result)


print(ans)


print(Ans)



  
print(Ans)


print(ans)


print(time)

print(answer)

        print(D[s])


    print(ans)

        print(n)
        print(max(j0, j1))

    
    print(right)



    print(right)

print(t-s)

print(max(a,b,c)*3-a-b-c)

    print(ans)


print(3*max(l) - sum(l))


print(3*s-a-b-c)

  print(max(A)*3-sum(A))
  print("0")

print(ans)


print(L[2]*2-L[0]-L[1])


print(count)

print(max(a,b,c)*3-a-b-c)

    print(2 * abc_list[2] - abc_list[1] - abc_list[0])


print(max(ABC) * 3 - sum(ABC))



print(max(ABC) * 3 - sum(ABC))

print(ans)


    print(maxv * 3 - a - b - c)


print(3 * s - a - b - c)

    print(ans)

print(2*c-a-b)

print(2*num-ABC[0]-ABC[1])

print(sum([max(l)-i for i in l]))

print(answer)

    print(ans)

print(s)


print(s[:K-1]+s[K-1:].swapcase())

print(ans)



print("".join(T_h + T_fn))

print(s[:k-1]+s[k-1:].swapcase())

    print(t_str[:k] + t_str[k:].swapcase())


print(T[0:K] + T[K:].swapcase())



print(T[0:K] + T[K:].swapcase())

print(s)



    print("".join(ans))


    print(ans)

print(S)

print("".join([j if i<K-1 else j.swapcase() for i,j in enumerate(S)]))

print(t[:k-1] + str.swapcase(t[k-1:]))

print("".join(S))

print(ans)


    
    print(ans)

    
    print(ans)
    

    print(min_time)

print(ct)

print(ct)


print(min_m)


print(min([(cs2[i] if cs[i] else 0) + cs[-1] - cs[i] for i in range(n)]))


print(min(min(x + z, y + z) for x, y, z in count))

        print(-1)
        print(ans)



print(left)


    
    print(ans)

        print(max_v)
            print(-1)

            print(left - 1)

print(ans)

            print(i)
    print(-1)


        print(-1)
        print(0)
        print(num_inversions if num_inversions >= 0 else max_num_inversions)

print(ans)

print(a%21)

print(ans)

print(x%21)

print(x%21)

print(x % 21)

print(x%21)



print(a%21)

print(x%21)

print(int(input())%21)

print(a%21)

print(c)

print(X%21)

print(X % 21)


print(X%21)



print(x % 21)


print(int(input()) % 21)

print(x%21)

print(X%21)

print(int(input()) % 21)

print(y)

print(keisan)

print(ans)

print(answer)

print(X%21)

print(X%21)

print(X%21)

print(x % 21)

print(X % 21)

print(x % 21)


print(X%21)

print(int(input()) % 21)

print(X%21)

print(int(input()) % 21)


print(x%21)



print(answer)

print(n % 21)

print(n%21)

print(int(input())%21)

print(N % 21)

print(number%21)


print(X % 21)


print(ans)

print(N%21)

print(ans)

print(int(input())%21)

print((int)(input()) % 21)

print(X%21)

print(x % 21)

print(x % 21)

print(x%21)

print(x%21)

    print(x % 21)

print(N%21)

print(X%21)

print(x%21)
print(ans)

print(int(input())%21)

print(X%21)

print(X%21)

    print(b)


print(getting%21)


print(k)

print(n%21)

print(x%21)

    print(1)
    print(0)

    print("1")
    print("0")

    print("1")
    print("0")    

    print(1)
    print(0)



    print("1")
    print("0")


    print(1)
    print(0)

print(int(int(input()) + int(input()) <= int(input())))

    print(1)
    print(0)


    print(0)
    print(1)

    print("1")
    print("0")

print(int(x + y <= z))


        print(1)
        print(0)

print(1 if X + Y <= Z + 30 else 0)

    print("1")
    print("0")

    print(1)
    print(0)


print(int(x + y <= z))


print(ans)

    print(1)
    print(0)

    print(0)
    print(1)

    print(1)
    print(0)

    print(1)
    print(0)


print(1 if res else 0)

    print(0)
    print(1)

    print(1)
    print(0)

    print(1)
    print(0)

    
    
print(answer)

    print("1")
    print("0")
    

    print(1)
    print(0)

    print(0)
    print(1)

    print("1")
    print("0")

print(1 if x+y<=z else 0)

    print(1 if x + y <= z else 0)

print(int(X+Y<=Z))

    print(1)
    print(0)

    print(1)
    print(0)

    print("1")
    print("0")

    print(0)
    print(1)

    print('1')
    print('0')

    print(1)
    print(0)

    print("1")
    print("0")


    print(1)
    print(0)


    print(0)
    print(1)

    print(1)
    print(0)

    print(1)
    print(0)

    print("{}".format(isClear[1]))
    print("{}".format(isClear[0]))

print(1 if X+Y <= Z+.5 else 0)

    print(1)
    print(0)


print(1 if (x_min + y_min) <= z_min else 0)

    print(0)
    print(1)

    print(1)
    print(0)
    

    print(int(0))
    print(int(1))

print(1 if 2*dist < 2*z + 1 else 0)

  print("Yes")
  print("No")

    print('Yes')
    print('No')
    
    

    print("Yes")
    print("No")


print(["No", "Yes"][count >= 3])

    print('No')
    print('Yes')

print("Yes" if len(set(s)) >= 3 else "No")


        print('Yes')
        print('No')

    print('Yes')
    print('No')



    print("Yes")
    print("No")
    

    print("Yes")
    print("No")

    print("Yes")
    print("No")
        


    print("Yes")
    print("No")

    print('Yes')
    print('No')

    print("Yes")
    print("No")

    print("Yes")
    print("No")
    

  print("Yes")
  print("No")

    print("Yes")
    print("No")

    print("Yes")
    print("No")

    print("Yes")
    print("No")

print('Yes' if len(list(set(input().strip()))) >= 3 else 'No')

print('No' if len(data)<3 else 'Yes')

    print('Yes')
    print('No')

print('Yes' if len(list(set(input().strip()))) >= 3 else 'No')


    print("Yes")
    print("No")

    print('Yes')
    print('No')


    print("No")
    print("Yes")

    print('Yes')
    print('No')


print("Yes" if len(s) >= 3 else "No")

    print("Yes")
    print("No")


print("Yes" if len(set(list(input())) & set(all_list)) >= 3 else "No")

  print('Yes')
  print('No')

  print('Yes')
  print('No')
    

print("Yes" if sum(e) >= 3 else "No")

    print("Yes")
    print("No")

    print("Yes")
    print("No")

    print('Yes')
    print('No')

    print("Yes")
    print("No")

        print('Yes')
        print('No')
    

    print('No')

print("Yes" if len(set(list(input().strip()))) > 2 else "No")

        print("Yes")
        print("No")


    print("Yes")
    print("No")


    print("Yes")
    print("No")

    print("No")
        print("No")
        print("Yes")

    print("No")
        print("Yes")
        print("No")

print('Yes' if yes else 'No')

print('Yes' if len(list(set(input().strip()))) >= 3 else 'No')


    print("Yes")
    print("No")

	print("Yes")

	print("No")

    print("Yes")
    print("No")

    print("No")
        print("No")
        print("Yes")

  print("Yes")
  print("No")


    print("No")
    print("Yes")

    print("Yes")
    print("No")


print(counter)

print(y)

print(ans)


    print(ans)

        
print(ans)


print(cnt)

            

print(count)

            
print(cnt)

        

print(gets)


print(ans)
    

print(k)

print(answer)

print(ct)


print(count)

    print(counter)

print(ans)


print(count)

print(ans)


print(sum(1 for a in A if a in B))


print(ans)


print(sum)



print(count)

print(box)


print([a in Bs for a in As].count(True))


print(count)

print(num)

print(sum([i in e.keys() for i in a]))


print(chests)


print(sum_openable)


print(total)


print(cnt)

print(p)

    
    print(ans)


print(ans)


    print(cnt)


print(ans)


print(sum(i in b for i in a))

print(c)


print(sum(1 for a in A if a in B))


print(k)

print(sum_)

print(Bcount)

print(sum(1 for a in A if a in B))


print(ans)


    
    print(count)
    

print(c)

print(Alen-len(A))

print(c)


print(total)

print(c)

print(cnt)

print(ans)


print(cnt)


print(total)


print(open)


print(ans)

print(a*a*a)

print(a)

print(x*x*x)

print(int(input()) ** 3)


print(n**3)

print(a*a*a)


print(X*X*X)

print(x**3)


    print(X**3)

print(x**3)

print(x * x * x)

print(X**3)

print(ans)

print(A*A*A)

print(X**3)

print(x * x * x)

print(X ** 3)

print(x**3)

print(int(input())**3)

print(ans)


print(int(input())**3)

print(pow(x,3))

print(int(input())**3)

print(X*X*X)

    print(x**3)

print(int(input())**3)


print(N*N*N)

print(x**3)



print(answer)

print(n**3)

print(int(input())**3)

print(ans)

print(a*a*a)


print(X*X*X)

print(x * x * x)


print(ans)


print("{}".format(A))

print(int(input())**3)

print(int(input()) ** 3)


print(x*x*x)

    print(x ** 3)


print(X**3)


print(X**3)

print(volume)


print(ans)

print(int(input())**3)

print(str(x*x*x))


    print(X ** 3)



    print(X ** 3)



    print(X ** 3)


print(int(input())**3)

    print(x ** 3)


print(X*X*X)

print(int(input())**3)


print(a**3)

print(ans)

print(int(input()) ** 3)

print(a**3)

print(i**3)

print(int(input())**3)

print(x**3)

print(x*x*x)

print(int(input())**3)

print(x**3)

    print(12)
    print(ans)

print(c)

    print(12)
    print(time)

    print(12)
    print((a + b) % 12)

print(12 if c == 0 else c)


            print(12)
            print(ans)
        print(A+B)

    print((a+b)%12)
    print(12)
    

    print(12)
    print(ans)

print(c)


    print(12)
    print(ans)

    print(A+B_p)

    print(A+B_p-12)

    print(12)


print(tmp if tmp != 0 else 12)

    print(a + b)
        print("12")
        print(ans)

print(n)

    print(12)
    print(N)

print(ans)


    print(12)
    print((A+B)%12)

    print((a + b) % 12 + 1)

print((A+B-1)%12+1)

    print(12)
    print((A+B)%12)

print(A)


print((A - 1 + B) % 12 + 1)


    print('12')
    print(ans)

    print(12)
    print(check)

    print(12)
    print(c)

    print(ans+12)

    print(ans)


    print(12)
    print(now)


    print(12)
    print(X%12)

        print(12)
        print((A + B)  % 12)
    print(12)
    print(A + B)

print("12" if end == 0 else end)

print((a+b)%12 if (a+b)%12 else 12)

  print(12)
  print(time)

print(calc)


print(ans)

print((a+b-1)%12+1)


    print(C)


print(a)

print(A%12 if A%12 != 0 else 12)

        print(12)
        print(mod)


    print(12)
    print(now)



print(A)

print(ans)

print((int(input()) + int(input()) - 1) % 12 + 1)

print(x if x else 12)

    print(12)
    print(n)

    print("12")
    print(ans)

print(s if s!=0 else 12)

print(a)

    print(12)
print((A+B)%12)


print(ans)

print(C if C!=0 else "12")

print((int(input())+int(input())-1)%12+1)


print((a+b-1)%12+1)

    print((t+a)%12)
    print(t+a)

    print(s-12)
    print(s)

    print(12)
    print((a+b)%12)

print(ans)

        print(result)
        print(12)
        print(y_surplus)
    print(y)


print((A + B - 1)%12 + 1)

        print(b[i])

        print(s[i])

        print(b[i])

        print(s[i - 1])


        print(a)

        print(s[i])
        


        print(s[i-1])

        print(S[i-1])

        print(S[i])

        print(S[i])

        print(S[i])


        print(S[i-1])

            print(s[i])

        print(S[i])


        print(S[i])


      print(S[i-1],sep='')

        print(s[i])

        print(S[n])


        print(L[i])

        print(s[i])


    print(R[j])

        print(s_list[i])


    print(s[i])

    print(S[i])

        print(li[i-1])
        

        print(S[i-1])

        print(S[i])

        print(s[i-1])

        print(s[i])

        print(S[i-1])


            print(s[idx - 1])


        print(Si)


        print(s[i - 1])

print(*ans, sep='\n')

        print(s[i])

        print(s[a])
            print(bb[-1])

        print(S[i])

        print(S[k])

        print(S[i])


        print(s[i])

        print(string[x-1])
        print(a)
    print(string)



        print(sec)

        print(S[i])
    

        print(s[i - 1])

print("\n".join(l))


        print(S[i-1])

        print(s[i])

	print(a)

        print(s[i-1])


        print(N[i-1])
    

        print(in_string[i])

        print(S[i-1])

    print(S[i])

    print(v)

        print(b[c-1])
            print(tmp)
        print(s[n-1])

            print(S[i-1])


        print(new_lis[j])
print(c[1])

print(z)

print(c[1])




print(sorted([(v, k) for k, v in c.items()])[0][1])


            print(i)

print(min(cands))

print(A[0][1])

print(min(mini))


            print(h[1])
print(ans)


print(sorted(count.items(), key=lambda x: (x[1], x[0]))[0][0])


print(min(mini))

print(min(d, key=d.get))


print(ans)


print(sorted_ct[0][0])

print(min([i for i in f if f[i] == minval]))


print(sorted(A.items(), key=lambda x: (x[1], x[0]))[0][0])

print(li_unique[li_count.index(min(li_count))])

print(a[0][0])

print(min(rec)[1])

print(sorted(bag.items(), key=lambda x: (x[1], x[0]))[0][0])



print(ans)



print(sorted(count.items(), key=lambda x: (x[1], x[0]))[0][0])


    
print(sorted(count.items(),key=lambda x:(x[1],x[0]))[0][0])

print(a[0])


print(l[0][1])

print(calc_rare_number(count_dict))

print(index)            


print(B[c.index(min(c))])


            
print(candidate)
            
                

        
    


print(j[1])

print(min(display))

print(tmp)


print(ans)


print(num)

        print(str(list_set_number[list_count.index(i)]))

print(minA)

print(min_key)

print(ans)


print(min(anslis))

print(min_answer)

print(mi)

    print(C.most_common()[-1][0])




print(d)


print(min(ans))

print(candidate[0][1])

print(s[0][1])



    print(min_val)



print(ans)


print(ans_list[-1])


print(return_value)



print(sorted(count.items(), key=lambda x: (x[1], x[0]))[0][0])




print(res)

print(ans)


print(result)


    
print(num)

print(B-A)

print(b-a)


print(abs(int(input())-int(input())))


print(b-a)


  print(a-b)
  print(b-a)

print(b - a)


    print(B-A)

print(b-a)

print((int(input()) - int(input())) * -1)

print(int(input())-a)

print(b-a)


print(b-a)


print(B-A)


print(b-a)

print(0-int(input())+int(input()))

print(ans)


print(-int(input())+int(input()))

print(b-a)

    print(b - a)

print(B-A)


print(B-A)

print('%d' %abs(A-B))

print(b -a)


print(B-A)

print(b - a)


print(ans)


print(B-A)

print(B - A)


print(b-a)


print(B-A)

print(-int(input()) + int(input()))


print(B-A)


print(B - A)

print(b-a)

print(b-a)

print(abs(int(input())-int(input())))


    print(b - a)


print(B-A)


print(b - a)



print(ans)

print(B-A)

print(-(int(input()) - int(input())))

print(b-a)

print(b-a)

print(b-a)

print(-int(input())+int(input()))


    print(defeference_A_B(A, B))

print(b-a)

print(result)

print(B-A)

print(-int(input())+int(input()))


print(b-a)

print(b-a)

print(- int(input()) + int(input()))

print(b-a)

print(difference)



print(b-a)


print(x2 - x1)

print(B-A)


print("%d"%(b-a))

print(-1*(int(input())-int(input())))


print(b-a)

print(-int(input())+int(input()))

        print(m)

print(price)



print(ans)


        print(250)
        print(ans)
        print(ans)

    
print(ans)

    print(250+B*100)

    print(value)
        
    print(value+(count*100))

    print(250)

    print(250+100*((S-A)//B))

    print(250+100*((S-A)//B+1))



print(250 + 100 * Bs)


print(M)


    print(250 + max(0, 100 * ((s - a) // b + (1 if (s - a) % b > 0 else 0))))


print(ans)


        print(a)
        print(money)
            print(money)

print(d)

print(250 + c*100)



print(250 + topping * 100)


    print(250)
        print(250+100*X)
        print(250+100*A)


print(int(coin))

print(x)


print(nowc)


print(money)

print(math.ceil(tmp/b)* 100 + 250)

print(calc)

print(price)

print(max((s-a+b-1)//b,0)*100+250)

    print(250)
    print(250+k*100)

        print(ans)
    print(ans)



print(ans)




print(price)

    print(250)
    print(250 + 100 * math.ceil((S - A) / B)) 

        print(m)
    print(math.ceil(ans)*100+250)
    print(250)

    print(250)
    print(250+how*100)



print(ans)


    print(250)
print(250+100*cnt)

	print(250)

print(ans)

print(result)

    print("250")
    print(250+math.ceil((S-A)/B)*100)

print(250+max(math.ceil((int(input())-int(input()))/int(input())),0)*100)


    print(math.ceil((a-b)/c) * 100 + 250)
    print(250)

print(ans)


print(price)

print(ans)



print(ans)



print(prices)

        
print(p)

print(int(M))

print(cost)

print(kin)

	
print(cnt)

    
    print(250+buy_num*100)
    print(250)

print(m)


print(250 + max(0, math.ceil((S-A)/B)*100))

print(250 + 100 * x)


print(m)

    print(base)
    print(base+count*add)
        

    print(250)
        print(250 + int(S2/B)*100)
        print(250 + count * 100)

    print(250 + 100 * max(X, 0))


print(now)

print(day)
print(answer)
    print("W")
    print("R")




    print("W")
    print("R")

print("R" if s.count("R")==k-1 else "W")

    print("W")
    print("R")


        print('W')
        print('R')

    print("W")
    print("R")

        
print("RW"[wc - (n - k)])

    print("W")
    print("R")


print("R" if team.count("R") < K else "W")

    print('W')
    print('R')

    print("W")
    print("R")

        print('R')
        print('W')

    print('W')
    print('R')


  print('W')
  print('R')

    print('W')
    print('R')



    print("W")
    print("R")


    print("W")
    print("R")


print("R" if S.count("R") < K else "W")

print("W" if input().count("R") == k else "R")

  print('W')
  print('R')

    print("R")
    print("W")

    print('W')
    print('R')

    print('W')
    print('R')

print('WR'[k])

        print("W")
        print("R")

print("W" if S.count("R") == K else "R")

        print("W")
        print("R")


    print('W')
    print('R')

    print("W")
    print("R")

    print("W")
    print("R")











print("R" if r < k else "W")


        print('W')
        print('R')
    

        print('W')
        print('R')
    

	print('W')
	print('R')

  print("W")
  print("R")


    print('R')
    print('W')

    print("W")
    print("R")

    print('R')
    print('W')


    print('W')
    print('R')

    print("R")
    print("W")

print('W' if int(input()) == input().count('R') else 'R')


    print("W")
    print("R")

    print("W")
    print("R")


    print("W")
    print("R")
    

   print('W')
   print('R')

    print("W")
    print("R")

    print('R')
    print('W')

    print("R")
    print("W")


    print('R')

    print('W')


	print("W")
	print("R")

    print("W")
    print("R")


    print("W")
    print("R")

    print("W")
    print("R")


print("R" if S.count("R") != K else "W")

print('W' if s.count('R') == k else 'R')

    print("W")
    print("R")

    print("W")
    print("R")

    print("W")
    print("R")

    print("W")
    print("R")

        print("W")
        print("R")


    print('W')
    print('R')
    

    print('W')
    print('R')


print(*pos, sep="\n")


        print(ans)

    print(ball[i])


    print(*[i + 1 for i in ball_idx_list], sep='\n')

    print(balls[i])


    print(ball)

    print(ans)

    print(ball_pos[i])

    print(initial[i])

    print(balls[i])

    print(L[i])

    print(balls[i])

    print(d.get(x))
    print(p[i])


    
print('\n'.join(map(str, balls[1:])))


    print(I[i])

    print(box_num[1])


  print(i+1)

  print(b+1)

    print(box)

    print(a[i])

print(*b[1:],sep='\n')

        print(idx)


    print(d)


        print(balls[i]) 

  print(ans[i])

    print(balls[i])



    print(b[i])


    print(box)

    print(s)

        print(bib.ball2box(i))


    print(ans[i])


print("\n".join(strarray))
    
    
    

    print(pos)


    print(balls[i])

    print(a)


	print(box[i])	

    print(v)

    print(box)

    print(ball[i])

    print(bi + 1)

    print(v)

    print(answer[i+1])

  print(res[i])

    print(*B[1:], sep="\n")


    print(balls[i])


    print(n)

  print(ans[i])

    print(e)

    print(get_pos(str(k+1), ii)+1)

            print(stack[-1])
        print(ans)
        print(a)

    print(book)

        print(stack.pop())
    print(max(max_a - a[i],a[i] - min_a))
        print(stack[a[1]])
        print(books.pop())

      
      print(max(*b))
            print(books.pop(-1))
        print(b[-1])
    print(value)

    print(readbook[i])

            print(books.pop(-1))
        print(shelf.pop())
    print(S[-1])
        print(stack.pop())
        print(space.pop())
        print(-1)
        print(ans)

            print(cd)

    print(-1)

print(-1 if dist[h - 1][w - 1] == INF else dist[h - 1][w - 1])


        print(visited[x][y])
print(-1)


print(D[H - 1][W - 1])


print(ans-1)
    

print(ans)

            
    print(result)

    print(res)


    print(int(i))


print(d)

print(ans)


    print(ans)

    print(sum(a_list[1:-1]))

print(sum(s)-max(s)-min(s))


print(ASum - AMax - AMin)

print(sum(A[1:len(A)-1]))

print(sum(xs[1:n-1]))

print(sum(a) - max(a) - min(a))


print(su-mi-ma)

print(sum(a) - max(a) - min(a))

    
    print(ans)


    print(result)

print(ans)

print(ans)



print(ans)

print(a)

print(cnt)



    print(num_for_list[-1])

    
    print(vote[-1])

print(agree[n])


print(s)

    
    print(ans)

print(max_cnt)


print(ans)



    print(result)

    print(max(dp))

print(a*b)

print(a*b)

print(a*b)

print(a*b)


print(a * b)

print(a*b)



print(a * b)

print(a*b)


print(A*B)

print(A*B)

print(a*b)

print(a*b)

print(a * b)


print(a*b)

print(a*b)

print(ans)

print(a*b)

print(A*B)

print(ans)

print(int(input())*int(input()))

print(a*b)

print(a*b)

print(int(input()) * int(input()))

print(int(input())*int(input()))

print(int(input())*int(input()))

print(A * B)

print(a*b)

print(a*b)

print(A * B)

print(A * B)


print(a*b)

print(a*b)

print(A*B)


print(a*b)

print(a*b)

print(int(A)*int(B))

print(a*b)

print(a * b)

print(A*B)


print(a*b)

print(area)

print(f"{int(input())*int(input())}")

print(a*b)

print(A*B)


print(s)


print(a * b)

print(a*b)


print(a*b)

print(X*Y)

print(S)

print(a*b)


print(a*b)

print(A*B)

print(A*B)

    print(1)
    print(0)

    print(1)
    print(0)    

    print(1)
    print(0)

    print(1)
    print(0)

    print(1)
    print(0)


    print(1)
    print(0)

    print(1)
    print(0)

    print(1)
    print(0)


    print(1)
    print(0)

    print(1)
    print(0)

    print(1)
    print(0)

    print(1)
    print(0)

    print(1)
    print(0)

    print(1)
    print(0)


    print(1)
    print(0)

print(a)

    print("1")
    print("0")

    print(1)
    print(0)

    print(1)
    print(0)

    print(1)
    print(0)

print(int(a == b))

print([0, 1][n[0] == n[1]])

    print(1)
    print(0)

    print(1)
    print(0)

    print("1")
    print("0")

    print(1)
    print(0)

    print("1")
    print("0")

    print(1)
    print(0)

    print(1)
    print(0)


    print(1)
    print(0)

print(int(0==int(input())%11))

    print(1)
    print(0)

print(int(n//10==n%10))

    print(1)
    print(0)

    print(1)
    print(0)

    print(1)
    print(0)


print(int(1-int(input())%11/10))

    print(1)
    print(0)

print(ans)

    print("1")
    print("0")

    print(1)
    print(0)

  print("1")
  print("0")

    print('1')
    print('0')

  print(1)
  print(0)

    print('1')
    print('0')

print(int(n[0] == n[1]))


    print(1)
    print(0)

        print(1)
        print(0)
        

    print("1")
    print("0")

        print(1)
        print(0)
    print("input error")

    print(1)
    print(0)


print(z)



print(cnt)

print(ans)

print(cnt)

print(i)

print(b)


print(ans)

print(ans)

print(cnt)


print(th)

print(e)

print(a)

print(ans)

print(times)


print(a)


print(count[2])



    


print(c)

print(d)

print(str(a))

print(num)


print(ans)


print(c)


print(d)

print(count)

print(count_balls_in_box3)


    print(result)


print(counter)


print(count)

print(len(count))


print(count)


print(count)

print(cnt)



print(cnt)

print(count)


print(count)

    
    print(ans)

        
        
print(count)

print(ans)

print(box3)
        
        


print(count)

        
print(count)
            
                
                

print(count)

print(count)


print(count)



print(c[2])

print(count)

print(count)

print(c)

print(cnt)


print(count)
                
        

        
            
print(count)

print(ct)

print(cnt)


print(count)




print(ans)


        
print(ans)

print(count)

print(pair)

        print(i)

        print(i+1)


        print(i+1)

        print(i+1)

        print(S[i])
        print(x+1)
print(y)

        print(i+1)

        print(i+1)

        print(i)

print(ans)


print(int(ans))

print(v.index(v.count(1)))

print(v.index(v.count(1)))



        print(i)
print(a[0])


        print(i + 1)
        print(i+1)

print(n)

print(pairs[0])


    print(i)

        print(i)
        print(i)
print(STA-SA)

            print(n+1)

print(l[0])


print(ans[0])

        print(ClassList[i])
        print(k+1)
        print(i)

        print(k+1)
    

        
print(answer)

    
    

    

print([ele for ele in count if count[ele] == 1][0])


        print(i)
print(v.index(v.count(1)))


        print(key)
        print(i)
        print(i+1)

        print(C)
        print(n+1)
        

        print(i+1)
        print(key)



print(ans[0])

        print(c)

print(v.index(v.count(1)))


        print(i+1)
print(a[0])

		print(a[i])
		

print(mat.index(1) + 1)
    

    print(v)


    print(result)

        print(i+1)

    print(result)

print(s.pop())

print(a*24)

print(ans)

print(x*24)

print(D*X)

print(x*24)

print(X*24)

print(x*24)


print(a)

print(x*24)

print(x*24)

print(days*24)

print(int(input()) * 24)

print(x*24)

print(X * 24)


print(24*n)

print(hour)

print(x * 24)

print(x * 24)

print(x*24)

print(x*24)

print(hours)

print(X*24)

print(X*24)

print(int(input()) * 24)

print(x*24)



print(int(input())*24)

print(x*24)

print(24*x)


print(X*24)

    print(ans)

print(x * 24)

print(X*24)

print(int(input()) * 24)


print(24*t)

print(hours)


print(x*24)


print(x*24)

print(X*24)

print(X * 24)

    print(how_hour(X))

print(24*x)

print(int(input()) * 24)


print(X*24)

print(n*24)

print(x * 24)


print(X * 24)

print(X*24)


print(n*24)

print(int(input())*24)


print(X*24)


print(24*int(input()))

print(ans)

print(B)

print(A*24)

print(N*24)

print(x*24)

print(H * 24)

print(int(input()) * 24)


print(X * 24)

print(24*int(input()))

    print(24 * x)

print(a * 24)


print(x * 24)


    print(1)
    print(-1)
    print(0)

    print("-1")
    print("0")
    print("1")

    print(-1)
    print(0)
    print(1)
    


    print(-1)
    print(0)
    print(1)    


    print("-1")
    print("0")
    print("1")

    print(-1)
    print(0)
    print(1)

    print(-1)
    print(0)
    print(1)




    print(0)
        print(-1)
        print(1)

print(ans)

print([-1,0,1][1+(a>b)-(a<b)])

    print(-1)
    print(0)
    print(1)

    print(-1)
    print(0)
    print(1)

    print(-1)
    print(0)
    print(1)

print(output)

    print(-1)
    print(0)
    print(1)

    print(-1)
    print(0)
    print(1)

    print(-1)
    print(0)
    print(1)

print(1-2*int(1-n)-int(abs(n)-1))

    print(-1)
    print(0)
    print(1)

    print(0)
    print(1)
    print(-1)

print(ans)

    print("-1")
    print("1")
    print("0")

    
print(c)

print(c)


    print(-1)
    print(0)
    print(1)

        print(-1)
        print(0)
        print(1)

    print(0)
        print(-1)
        print(1)

    print(-1)
    print(1)
        print(0)

    print(-1)
    print(0)
    print(1)

print(c)

    print("-1")
    print("0")
    print("1")
    

    print("-1")
    print("1")
    print("0")

    print(-1)
    print(0)
    print(1)

    print(1)
    print(0)
    print(-1)

    print(compare(A,B))

    print('-1')
    print('0')
    print('1')


    print(-1)
    print(0)
    print(1)

    print(-1)
    print(0)
    print(1)

    print(-1)
    print(1)
    print(0)

    print(-1)
    print(0)
    print(1)


    print(1)
    print(0)
    print(-1)

    print(-1)
    print(0)
    print(1)

    print(-1)
    print(0)
    print(1)

    print("1")
    print("0")
    print("-1")


    print(-1)
    print(0)
    print(1)

    print(1)
    print(-1)
    print(0)

    print(-1)
    print(0)
    print(1)

    print(-1)
    print(1)
    print(0)

    print(-1)
    print(1)
    print(0)


print(-1 if A < B else 0 if A == B else 1)

    print(-1)
    print(0)
    print(1)

        print(-1)
        print(0)
        print(1)

    print(-1)
    print(0)
    print(1)
    

    print(-1)
    print(0)
    print(1)


    print("-1")
    print("1")
    print("0")

	print(-1)
	print(0)
	print(1)

    print(-1)
    print(1)
    print(0)
    

    print("Yes")
    print("No")

    print("Yes")
    print("No")    



    print("Yes")
    print("No")



    print("Yes")
    print("No")

    print('Yes')
    print('No')

    print('Yes')
    print('No')

print(stats)

    print("Yes")
    print("No")

    print("Yes")
    print("No")

    print('Yes')
    print('No')

    print("Yes")
    print("No")

    print('Yes')
    print('No')

print("Yes" if s[:n]==s[n:] else "No")

    print('Yes')
    print('No')

    print("Yes")
    print("No")

print(result)


    print("Yes")
    print("No")


    print('Yes')
    print('No')

  
print(result)

print("Yes" if s[:n//2] == s[n//2:] else "No")


    print("Yes")
    print("No")

        print('Yes')
        print('No')

    print("Yes")
    print("No")

  print("Yes")

  print("No")

print("YNeos"[s[:n]!=s[n:]::2])

    print("Yes")
    print("No")

    print("Yes")
    print("No")


    print("Yes")
    print("No")



    print("Yes")
    print("No")

    print("Yes")
    print("No")

    print("Yes")
    print("No")


    print("Yes")
    print("No")


    print('Yes')
    print('No')

    print("Yes")
    print("No")

    print("Yes")
    print("No")

    print("Yes")
    print("No")

    print('Yes')
    print('No')


print("Yes" if S[:int(N / 2)] == S[int(N / 2):] else "No")

    print("Yes")
    print("No")

        print('Yes')
        print('No')

    print("Yes")
    print("No")


    print("Yes")
    print("No")


    print("Yes")
    print("No")

    print("Yes")
    print("No")

    print("Yes")
    print("No")

	print("Yes")
	print("No")

print(point)


print(score)

print(d)

print(score)


print(score)

print(score)

print(count)

print(point)


print(score)

print(score)

    print(points)
    print(0)
    


print(score)


print(score)

        
print(score)

print(score)


        
print(score)
    

print(count)

    
    print(score)


print(score)

        
print(point)

    print(result)


print(score)



print(score)


print(scor)  


            
print(count)



print(su)

print(ans)


        
print(s)

print(score)

print(kotae)

print(score)

print(score)

print(sum)


print(score)


    print(score)

print(score)


print(a)

print(score)
    

			
print(p)

print(a*10+b)

print(ans)

print(a+b)

print(str(a)+str(b))

print(A*10 + B)

print(str(a)+str(b))

print(a + b)

print(n)

print(input()+input())

print(10*a+b)

print(int(input())*10 + int(input()))


print(10*a+b)

print(10 * a + b)

print(10*A+B)


print(a+b)

print(f"{input()+input()}")

print(A*10+B)


print(f"{A}{B}")


print(a + b)

print(a + b)


print(result)

print(A+B)


print(A + B)

    print(ans)



print(A * 10 + B)

print(input() + input ())


print(10*a + b)

print(a*10+b)




print(a + b)

print(result)

print(A*10+B)


print(int(result))


    print("{}{}".format(A,B))

print(answer)


print(Num)


print( a*10  + b)


print(A*10+B)


print(10*A + B)

print(ans)

print(kotae)

print(a*10+b)

print(C)


print(A * 10 + B)

print(A+B)

    print(10 * a + b)

print(10 * a + b)


print(a + b)


print(eval(input())*10+eval(input()))

print(int(a+b))

  print("1")
    print(0)
    print(1)

    print("1")
    print("0")

    print(1)
    print(0)    

    print(0)
    print(1)

    print("1")
    print("0")

    print(0)
    print(1)

    print(0)
    print(1)

    print("0")
    print("1")

print(int(int(input()) + (7 * int(input())) <= 30))

    print(1)
    print(0)

    print(1)
    print(0)

    print(1)
    print(0)

    print(1)
    print(0)

print(int((A+7*B)<=30))

    print(1)
    print(0)

print(int(1-((int(input())+int(input())*7)//31/10)))

    print(1)
    print(0)

print(ret)


    print("1")
    print("0")

print(int(a + 7*b <= 30))


    print("0")
    print(0)
    print(1)

    print("1")
    print("0")

        print(0)
        print(1)

    print(1)
    print(0)

    print(1)
    print(0)

    print(0)
    print(1)

    print("1")
    print("0")
    

    print(result)

    print(1)
    print(0)

    print(0)
    print(1)
    

    print(judge(A, B))

    print(0)
    print(1)

    print(1)
    print(0)

    print(1)
    print(0)


    print(1)
    print(0)

    print(0)
    print(0)
    print(1)

    print(1)
    print(0)

    print(1)
    print(0)


print(1 if A + B * 7 <= 30 else 0)

    print(0)
    print(1)

        print(1)
        print(0)

    print(1)
    print(0)


    print("1")
    print("0")

	print(0)
	print(1)

print("".join(S))

print(ans)

print(S)



print(text)    

print(*b, sep ='')

    
    print(pre_i, end='')
print('')


    print(s[j],end='')
    
print(s[-1])



print(''.join(output))

print(S)

print(ret)

print(*s, sep="")


print(str(S))

print(S)


print(*Sl,sep="")

    
    print(ans)



print(word)


print(s)

print(JOI_Editor(s))


    print(result)

        
print(result)

print(convert_to_JOI_editor_text(N, S))

print("".join(out))
    

print("".join(ans))


print(result)

print(*s, sep="")

print(ans)

print(S)


    print(''.join(result_list))

print(''.join(stack))


print(a)

print(sc)

print(answer)

    print(counter+1)

    print(r)

    print(z+1)

    print(b.index(i)+1)

    print(r)

    print(r)
    

    print(rank)

    print(u.index(a) + 1)

print("\n".join(map(str, rank)))

    print(l.index(a) + 1)


    print(rank[i])
    

        print(idx+1)
    


  print(i)

        print(r)

            print(j+1)
    print(rank)


    print(ranking(l, li))
    

    print(rank)




            print(j+1)
    print(a)


    print(rank)

    print(idx+1)

    print(i)

    print(ranklst[i])

    print(value)

    print(len([x for x in A if x < a]) + 1)

  print(r)


        print(r)

    print(s.index(n)+1)

			print(j+1)
    print(dic[x])


        print(ma - a[i])
        print(a[i] - mi)

        print(b-a[i])
        print(a[i]-c)

        print(ans)

    print(max(a-mi,ma-a))


        print(M - A[i])
        print(A[i] - m)

    print(max(a[i] - c,b - a[i]))

    print(max(max_a - a[i],a[i] - min_a))

    print(max(c-a[i],a[i]-d))



        print(abs(mi - a[i]))
        print(ma - a[i])

        print(AM)
        print(Am)
    

    print(d)

        print(f)
        print(g)

        print(diff_max)
        print(diff_min)

    print(ans[q])

    print(max(x, y))

    print(ans)


        print(k)
        print(l)

    print(max(x - b[0], b[-1] - x))

    print(max_diff)

    print(ans)


    print(o)

        print(d)
        print(e)

    print(max(a-u[0], u[-1]-a))


      
      print(max(*b))

        print(s)
        print(t)

        print(X)
        print(Y)


        print(r)

        print(max(a - min_a, max_a - a))

        print(a)
        print(b)

    print(Amax - a if Amax - a > a - Amin else a - Amin)

        print(abs(A[i] - maxage))
        print(abs(A[i] - minage))

        print(abs(a[i]-maxage))
        print(abs(a[i]-minage))

    print(max(x - b[0], b[-1] - x))


	print(max(i-c[0],c[-1]-i))

    
    print(ans)

print(Answer)

    
    print(ans)

    
    print(ans)


print(ans)



print(ans)

print(ans)

print(ans)


    print(S[:-1])
    print(S + "G")


print(text)

    print(S[:-1])
    print(S + "G")

    print(s[:n-1])
    print(s + "G")


print("".join(X))


    print(s[:-1])
    print(s + 'G')

  print(s[:-1])
  print(s + 'G')

    print(s[:-1])
    print(s + "G")


    print(S[:N-1])
    print(S+"G")

    print(s[:-1])
    print(s+z)


print("".join(X))




print(s)


    print(s)

print(result)

        print(S[:N-1])
        print(S)

    print(*s[0:len(s)-1],sep="")
    print(*s,sep="",end="")
    print("G")

    print(s[:-1])
    print(s+"G")

    print(result)
    print(result)

    print(S[:-1])
    print(S+"G")

    print(s[:n-1])
    print(s)

    print(s[:-1])
    print(s + "G")


        print(s[:-1])
        print(s + 'G')

    print(l[:N-1])
    print(l+"G")

print(al[0])


        print(B[0])
print(*a)

print(a[-1])


    
    print(A[0])


print(l[0])

print(A[0])   

print(list[0])

print(*A)


print(A[0])

    print(s[:-1])
print(*a)



print(*a)




    print(a_list[0])

print(l[0])

print(*a)


            print(ans)
            print(0)


        print(max(K - abs(b - A[index]), 0))
        print(max(K - abs(b - A[N - 1]), 0))
        print(max(K - abs(b - A[index]), K - abs(b - A[index - 1]), 0))

        print(max(K - abs(b - A[index]), 0))
        print(max(K - abs(b - A[N - 1]), 0))
        print(max(K - abs(b - A[index]), K - abs(b - A[index - 1]), 0))


  print(max(max(k - abs(a[x] - i), 0), max(k - abs(a[x - 1] - i), 0)))

    print(ans)


    print(volume)


    
    print(res, H*W-res)
    
print(ans)


        print(A+B)
     print(n[0]+n[1])
    print(output[x])

		print(x+y)
    print(sum)

    print(a + b)

    print(a+b)

	print(i)

        print(sum(list(map(int,input().split()))))
    print(sum(nums))

  print(a + b)

   print(su)
    print(int(l[0]) + int(l[1]))

    print(a+b)

    print(a+b)

    print(x)

    print(A + B)

		print(sum([eval(x) for x in input().split()]))
        print(a+b)

  print(a+b)
        print(a+b)
        print(sum(map(int, input().split())))
    print( int(a) + int(b) )

        print(A[0]+A[1])
    print(a+b)

    print(a+b)

    print(sum(map(int, input().split())))
    print(sum(map(int, line)))

        print(a+b)
    print(a+b)
        print(ans(a, b))

        print(a+b)
        print(result)
    print(a+b)

    print(A+B)


            print(int(a) + int(b))
        print(num)
        print(a+b)

        print(a + b)


        print(A+B)
        print(a + b)

        print(n+m)
    print(sum([int(x) for x in input().split()]))
        print(A+B)
        print(a + b)
    print(a+b)

    print(sum(map(int, rec.split())))
   print(a+b)

    print(sum(map(int, line.split())))

        print(a + b)

    print(a + b)

    print(a + b)


        print(sum(map(int, input().split())))
        print(a + b)
        print(a+b)
            print(a + b)
        print(a+b)
	print(ans)

            print(tree_dump(ans))
            print(tree_dump(ans))


            print(a)

            print(inter(t1, t2))#  == "((((((,),),),),),)")
            
            print(union(t1,t2))# == "((((,),(,)),((,),(,))),(((,),(,)),((,),(,))))")
    print(ans)


    print(ans[0] + n)

	print(dp[0][n+1]-1)

    print(ans)

    print(ans[1:])

	print(ans)

        print(*ans, sep='')
        print(p[n])
            print(2)
            print(0)
        print(ct)

            print(0)

            print(len(list(set(index) & set(index_r))))
    print(ans)


		print(ans)

        print(sum([1 for a, b in zip(list(range(1,n+1)), list(range(1,n+1)[::-1])) if primes[a] and primes[b]]))
        
        print(ans)
            print(0)
        print(len(primes)*2 - len(set(primes+primes_inv)))

    print(sum(i in ps and (n + 1 - i) in ps for i in range(2, n + 1)))

    print(cnt)

    print(c)

        print(0)
    print(ans)

        print(0)
        print(oup)

		print(count)
    print(count)

  print(count)


    print(max(ret))

            print(data[i][indexmin])
    print(0)
    

	print(ans)

            print(s)
        print(0)

    print(ans)

        print(e)
        print(0)

                print(a[i][j])
        print(0)

    print(ans)


    print(ma if ma > ans else ans)

	print(ans)



    print('Case {}:'.format(case))
        print(''.join('{:>3}'.format(pixel) for pixel in row))

            print("{0:>3}".format(n),end="")
        print("")

    print("Case {}:".format(c))

        print(*l,sep='')


        print("Case {}:".format(TC))
                print("{:3d}".format(arr[i][j]), end='')
            print()

	print("Case ", cno, ":", sep='')
		print()

                print(k)
        print('NO COLOR')

        print(a)
        print("NO COLOR")


	print(x if w>(n>>1) else "NO COLOR")

    print("NO COLOR")
    print(universe_color)
  

            print(i)
        print('NO COLOR')

            print(res)
            print("NO COLOR")
        print(stars[num//2])
        print("NO COLOR")

    print(s[n//2] if s.count(s[n//2])>n/2 else 'NO COLOR')

                print(A[i])
        print("NO COLOR")


    print(math.gcd(x, y))


        print(a)
    print(a)

    print(b)

	print(gcd(a, b))

        print(math.gcd(int(a),int(b)))
        print(math.gcd(a,b))
        print(gcd(n,m))
        print(y)
    print(A)

        print(gcd(x, y))
    print(math.gcd(a,b))

        print(math.gcd(a, b))
    print(gcd(a,b))

    print(gcd(int(data.split()[0]),int(data.split()[1])))

    print(math.gcd(a, b))


            print(q)
    print(gcd(a, b))

            print(euclid_algorithm(a, b))

        print(fractions.gcd(n, m))



		print("Yes")
	print("Yes" if ans else "No")

        print('Yes')
        print('No')

            print("No")
                print("Yes")
                print("No")
	print(a[i])

        print(carbons)
            print(" ".join([str(n) for n in result]))
            print("NULL")
                    print(*sorted(ans))
                    print("NULL")
      print('NULL')
      print(*ans)


    print(*ans)
    print('NULL')

        print("NULL")
        print(*sorted(list(ans)))


    print(ans)
        

	print(ans)


	print(ans)

        print(c)
    print(*res, sep = "\n")

    print(ans)

        print(ans)

            print(len(subsets))

    print(cards[-1])

        print(C[-1])

    print(deck[-1])
        print(A[-1])
    print(ans)

    print(ans)

    print(sum((n-i)*x for i,x in enumerate(sorted(list(map(int,input().split()))))))

    print(sum(penalty))

	print(ans)


	print(sum(a))


        print(S)
        print(S)

        print(ans)
    print(sum(ans))

    print(sumItUp(List[i]))

                print("No")
        print("Yes")

    print("Yes" if min(s) >= 0 else "No")

        print("Yes")
        print("No")

        print("Yes")
        print("No")


        print('No')
        print('Yes')

    print('No' if f else 'Yes')

    print("Yes" if flag else "No")

        print("Yes")
        print("No")


	print("Yes" if ans else "No")

        
        print("Yes" if tarimasu else "No")

    print(ans)

      print("No")
    print("Yes")

            print("No")
            print("Yes")

  print(dp[n][ord(t) - base])

    print(room[int(battery/3)][battery%3])

    print("{:.{}f}".format(room[int(battery/3)][battery%3], 8))
        print(f"{dp[n][t]:.8f}")
        print(f'{probability:.8f}',)

    print("%.15f" % (S[ty][tx] / su))


    print(DP[t])



	print(f[n][t//3][t%3])

        print(line)

            print("".join(content))

            print(i)

        print(sentences[i])
        
print(edited_text)



print(*text, sep="\n")


    print(editer, end='')

            print("".join(t))


        print("DO NOT DETECT END_OF_TEXT. got:", inputs)
        print(text)

        print(line)

            print(line)


		print("No\n")
	print()

  print(8*f(n//2-1)+8*n)

	print((ans+n) << 3)

    print(8*(a+n))

    print(sum(map(int,input().split()))//k)

        print(int(input()))
        print(int(sum(po)/(K-1)))


  print(sum(map(int, input().split())) // (k - 1))

    print(sum(C) // (k - 1))


	print(sum(list(map(int, input().split())))//(K-1))

    print( sums // (k - 1))

    print(int(S/(K-1)))
    

	print(int(total/(K-1)))



    print(min([make_price(i) + return_cnt(i - p) for i in range(p, p + 500)]))



    print(min([pay(i) + change(i - p) for i in range(p, p + 500)]))


	print(ans)


    print(ans)

    print(max(t[i+1]-t[i] for i in range(n+m)))

    print(ans)


  print(ans)


        print(maxi)

    print(max_car)
    

	print(ans)


        print(n**3 - len(s))


	print(n**3-len(set(ans)))

    print(N**3 - len(s))


    print(ans - len(remove_set))


  print(n ** 3 - len(hit))


        print(*panel.search(x, y))

            print(result)


    print("NO")
      print("YES")
      print("NO")

    print("YES" if solve(x, y, n * n - 1, - board[y][x], 0) else "NO")

                print(index)
                print("impossible")

    print("END")

          print(i)
        print("impossible")
  print("END")

                print("impossible")
                print(k)
    print("END")


                    print("impossible")
                    print(0)
                        print(l)
                        print("impossible")
    print("END")


  print("".join(right))

	print(ans)

	print(calc()[15])

  print(f(s)[15])

    
    print(*cnt)




    print(H * W - g.minimum_steiner_tree(terminal) - 1)

    print(sum(list_x))

    print(s)

print(0)
print(4)
print(8)
print(2)
print(8)
print(5)
print(4)
print(50)
print(10)
print(46)
print(1)
print(6)
print(14)
print(27)
print(2)
print(4)
print(16)
print(0)

    print(total_hits)

    print(s)
    

    print(s)

    print(ans)

	print(ans)

    print(sum([int(input()) for _ in range(int(n / 4))]))

	print(sum([int(input()) for i in range(n>>2)]))

    print(a)
    
    print(on_mark)




  print(sum([int(input()) for _ in range(n // 4)]))


    print(ans)


    print(sum_e)


    print(ans)

    print(sum([int(input()) for _ in range(n//4)]))

  print(sum([int(input()) for _ in range(n // 4)]))

    print(hit_count)

    print(A[j])

        
    
    


    print(sum)


    print(ans)
	print(ans)

    print(goukei)

    print(sum(s))
    print(A)

    print(point)

    print(c)

    
    print(count)


	print(sum([int(input()) for i in range(n)]))

    
    
    


            print(answer)
        print(kei)

    print(sum)

    print(str(score))
        
    

    print(sum(cnt))

  print(point)

    print(count)

        print(points)

    print(ans)


    
    print(ans)

    print(t)


        print(p)

    print(score)


    print(total)


   print(hit)
    print(cnt)

    
    print(count)
    

            print(sum)

    print(sum(ll))
    
        
        

    print(sum)

    print(ans)


    print(b)


        print(sum)

    print(sum)
    

    print(ans)

    print(counter)


        print(ans)

    print(hoge[i])



    print(total)



    print(sum(trials))

    print(a)

    print(count)


        print(sum([int(input()) for i in range(int(n/4))]))

    
    print(total_score)


    print(s)

    print(ans)

	print(ans)
	

    print(sum([int(input( )) for _ in range(n//4)]))
    

	print(ans)

        print(n2)

print(0)
print(4)
print(8)
print(2)
print(8)
print(5)
print(4)
print(50)
print(10)
print(46)
print(1)
print(6)
print(14)
print(27)
print(2)
print(4)
print(16)
print(0)

    print(ans + str(l))

    print(l)

            print(c,end="")
    print(c)

        print(x, end='')
    print()

            print(n, end="")
    print(n)

    print(*[(x != '') * len(x) for x in i.split(' ')], sep='')

	print(ans)

    print(*[len(x)*(x!='')for x in e.split(' ')], sep='')

    print("".join(a))

	print(''.join([str(x) for x in ans]))

    print("".join(map(str, li)))

  print(*lst,sep="")

    print(ans)


            print(num, end="")
                print(" ", end="")
        print()

        print(len(i), end='')
    print()


            print(count, end = "")
      print(count)

    print(ans+str(now))

    print("".join(map(str, ans)))
    print(''.join(output_count_list))

        print(len(a[i]), end='')
    print()

	print(ans)


            print(count, end='')
    
    print(count)

            print(c,end="")
    print(c)

                print(c,end = "")
        print(c)

                print(N[i])
                print(N[i], sep = "", end = "")
            
            
        

    print("".join(answer))

        print(len(TEXT[i]),end='')
    
    print('')

            print(c,end="")
    print(c)

        print(k, end="")
    
    print()

    print(''.join(map(str,map(len,inp.split(' ')))))

  print(ans)

    print(ans)

         print(c, end = "")
   print("")


            print(c,end="")
    print(c)

                print(0)
                print(len(i),end="")
        print()

    print(*m,sum,sep='')

            print(c, end="")
    print(c)

    
    
    print(*A,sep='')


    print("".join(map(lambda x: str(len(x)), st.split(" "))))

            print(c, end='')
    
    print(c)

            print(count,end="")
    print(count)

            print(y[i],end="")
        print("")

            print(c,end="")
    print(c)


        print(len(d),end="")

    print()
    
    


            print(moji,end='')
    print(moji)

            print(ans,end="")
    print(ans)

         print(c, end = "")
   print("")

    print(*ans,sep="")
    

            print(s,end='')
    print(s)

      print(len(x[i]), end='')
   print()

    print(*a,sep='')
    

    print(''.join(ans))

                print(0)
                print(len(i),end="")
        print()


            print(c,end='')
    print(c)

        print(len(a[i]), end='')
    print()

        print(len(a[i]), end="")
    print(len(a[len(a) - 1]))

                print(0)
                print(len(i),end="")
        print()



        print(len(w),end='')
    print()

    print(*l,sep='')

            
        print(*ans, sep="")

        print(*ans,sep="")

        print(len(s[i]), end='')
    print()

        print(*ans, sep="")

      print(l,end='')
  print(l)

    print(*a,sep='')

        print(*ans,sep="")

            print(c,end='')
    print(c)        

            print(b,end='')
    print(b)

            print(ans, end="")
    print(ans)

        print(len(a[i]),end='')
    print()

            print(count,end="")
    print(count)

            print(c,end='')
    print(c)

            print(ans,end='')
    print(ans)

    print(*list,sep="")


    print(*ans,sep="")


            print(len(i),end="")
        print()

    print(ans)

            print(len(i), end ="")
        print()

    print("".join([str(len(i)) if i else "0" for i in S.split(" ")]))

    print(team[i][0])
            print(i)
            print(i)
            print(i)
            print(Team[i][0])
            print(Team[i][0])
            print(Team[i][0])

                print(item[0])
                print(item[0])
                print(item[0])
                print(team[0])
                print(team[0])
                print(team[0])
            print(P[i][0])
            print(P[i][0])
            print(P[i][0])

        print(sorted_teams[i][0])


                print(i[0])

        print(i)




            print(a[0])


                    print(i[0])
                print(i[0])
                    print(i[0])
                print(i[0])
                print(i[0])

  print("\n".join(map(str,Selected_team_id)))


                print(D[i][2])
                print(D[i][2])
                print(D[i][2])

    print(*ans,sep='\n')

        print(t[0])

    print(words)

        print("".join(t))
        print("".join(t))
        print("_".join(t))

	print(ans)



    print(*[name.title() for name in names], sep="")
    print(*[name.title() if i !=  0 else name for i, name in enumerate(names)], sep="")
    print(*names, sep="_")


    print(ans)


        print("".join(t))
        print("".join(t))
        print("_".join(t))

                print(N[i])
                print(N[i], end = "")
                
                
                
                
        


    print(ans)

        print(*Upper(l), sep="")
        print(*Lower(l), sep="")
        print(*Under_Score(l), sep="")
        
            

            print(a)
            print(a)
            print(s.lower())
                print(s)
                print(s)
                print(s)
                print(s)
            print(s.lower())

        print(*ans,sep="_")
        
        print(ans)
            
      

            print(a[i])
            print(a[i],end='')

    print(words)



    print(c)

            print(word2s(word, types))


    print(ans)


    print(Ans)

        print(toUCamel(n))
        print(toLCamel(n))
        print(toSnake(n))

			print(change_camel_case(words, type))



        print(make_UpperCamel(words))
        print(make_LowerCamel(words))
        print(make_under(words))
        




    


        
    
    print(NAME)

        print(''.join(name))
        print(''.join(name))
            print(''.join(name))
            print(''.join(name))

            print(n)
                print(l)
                print(p)
            print(s.lower())
            print("".join(r))
            print(v)


    print(ans)



    print(t)


        print(*W, sep='_')
        print(*map(lambda x: x.capitalize(), W), sep='')
        print(W[0], *map(lambda x: x.capitalize(), W[1:]), sep='')

    
    print(ans)

    
    print(ans)

                print(N[i].capitalize())
                print(N[i].capitalize(),end='')
                    print(N[j].lower())
                    print(N[j].lower(),end='')
                print(N[j].capitalize())
                print(N[j].capitalize(),end='')
        
                print(N[z].lower())
                print(N[z].lower(),end='')
                print('_',end='')
        


    print("".join(X))

		print(s - 2*ans)
	print(s - 2*ans)

        print(b - 2*ans)
    print(b - 2 * ans)

    print(arr_len-1-2*l)


    print(l - 2 * dif)


    print(min(map(abs, lst)))
      print(i)
      print(t, by - 1, bx - 1)
        print("impossible")
    print("impossible")

                    
        print(ans)
        
		print("impossible")
	print("impossible" if ans < 0 else ans)


            print("%d%s" % (line[i], s), end='')
            print("%d-%d%s" % (line[i], line[j], s), end='')
	print(*ans)

  print(ans.strip())



    print(*ans)

    print(*ANS)


    print(*s)



print(*Ans, sep="\n")


        print('Yes')
        print('No')

        print("Yes")
        print("No")


      print("No")
    print("Yes")


        print("Yes")
        print("No")


            print("No")
        print("Yes")

	print("Yes" if f else "No")


            print("No")
        print("Yes")


            print("No")
        print("Yes")    

	print(ans if abs(ans-d) <= EPS or ans <= d else "impossible")


                    print(OP)
                    print('impossible')
                    print(d)
                    print('impossible')
            print('impossible')

        print(dif)
        print("impossible")


        print(self.contents[self.pointer].name)


  print(res)

	print(ans)


    print(dp[n])

      print(pena)
            print(x + " : {}".format(s))


        print(ans)


			print((path1[c]*path2[c])/path2[0])
	print()

    print(shortest_counter[n - 1][int(input())] / path_counter[n - 1])
  print()
 

    print(dp[0][c]*dp[c][-1]/dp[0][-1])

	print("myon"*calc(b))

		print(1)
		print(2)
	print((ans+1)>>1)

  print((saiki(values, 1, 0, len(values)) + 1) // 2)




    print('lunch', l*100//cl if cl else 'no guest')
    print('dinner', d*100//cd if cd else 'no guest')
    print('midnight', mi*100//cm if cm else 'no guest')

		print(ss[j]+' ', end='')
		print("no guest" if cnt[j] == 0 else ok[j]*100//cnt[j])

      print(key, math.floor(100 * clear[key] / dic[key]))
      print(key, "no guest")
  

    print("lunch", 100*a//a0 if a0 else "no guest")
    print("dinner", 100*b//b0 if b0 else "no guest")
    print("midnight", 100*c//c0 if c0 else "no guest")


        print("lunch", end = " ")
            print("no guest")
            print(int(l[0] / l[1] * 100))
        print("dinner", end = " ")
            print("no guest")
            print(int(d[0] / d[1] * 100))
        print("midnight", end = " ")
            print("no guest")
            print(int(m[0] / m[1] * 100))

            print(f"{tn} no guest")
            print(f"{tn} {ans}")


		print(1)
	print(ans)


        print(-1)
    print(max(DP))


	print(ans)


		print(n)
		print(0)
	print(n - ans)

        print(seg.query(lx,rx,ly,ry))

            print(tree.sum(li, lj, ri + 1, rj + 1))
        print(SG.query(r1,c1,r2+1,c2+1))

        print(seg.query(r1, r2 + 1, c1, c2 + 1))


    print(l)
    print(" ".join(map(str, sorted([x//l for x in even]))))

	print(g)
	print(*[i//g for i in even])


		print("yes")
		print("no")

	print("no" if r*c & 1 else "yes")


  print(["yes", "no"][c % 2 and r % 2])

        print("yes")
        print("no")


    print(score, names[0])

	print(str(min_score) + " " + sorted(winners)[0])
	
	print(tbl[0][0], tbl[0][1])


  
  print(*min([(v, k) for k, v in score.items()]))
  

    print(m, min(U))

    print(min_p, ans)


    print(ans[1], ans[0])

    print("HIGH" if cnt1 >= cnt2 else "LOW")


    print('{:.10f}'.format(n/2 if flag else 0))

	print(n/2)

    print(av + bv + cv)
    print(av + bv + cv + min(ar, br, cr))
      print(av + bv + cv + 2)
          print(av + bv + cv + xr)
          print(av + bv + cv + 1)
      print(av + bv + cv + min(ar, br, cr))
  

	print(ans)

            print("yes")
        print("no")

            print('yes')
                print('yes')
                print('yes')
        print('no')


	print("yes" if ans else "no")

print(*ans, sep='\n')


    print("yes" if ans else "no")

  print(ans)

  print(left)

  print(time, comb % MOD)

    print(ans)

    print("NO GAME")
    print(score - max(scores))

        print("NO GAME")
        print(ans - max(S))


    print(a)

  print(ans)


    print(ans)


  
    print(max([dp[d][weight][rest] if dp[d][weight][rest] != None else 0 for weight in range(w + 1) for rest in range(x + 1)]))

  print(*a)


  print(*mcf.min_cost_max_flow(s, t, flow_limit = g))    

  print(ans)

  
print(mcf.min_cost_max_flow(s, t, flow_limit = 1<<60))      
    print((a*(4*l*l-a*a)**.5+2*l*((l+x)**2-l*l)**.5)/4)


    print((str(heron(a,l,l)+heron(l,temp,temp)*2)))

        print("%.10f" % (l*sqrt(x*(2*l+x))/2 + a*sqrt(4*l**2 - a**2)/4))
    print('{:.8f}'.format(S1 + S2*2))

  print(v1 * 2 + v2)

    print(ans)


    print(max_score, dp.index(max_score))
    
    print(str(c) + " " + str(abs(area/2)))
    print("%d %.1f" %(c,s))
    print(c,abs(s)/2);input()

    print(idx, abs(s/2))
    print("{} {}".format(c,s))
    print("{} {}".format(cnt,area))

    print(idx,area/2)
    print(i, polygon_area(p))

    print(setNumber, area(X, Y, len(X)))


        print("{0} {1}".format(i, -ar))
        print("{0} {1}".format(i, ar))

        print(str(index) + " " + str(solve(points)))

        print(f'{i} {-area:.1f}')


    print(count, abs(sum))
		print('%d %.1f'%(T,abs(s-t)))
    print(num, abs(area))
        print("{0} {1}".format(index, -area))
        print("{0} {1}".format(index, area))

    print(index, shoelace(A))
    print(i+1, x)

	print(cno, Decimal(str(calc_area(pp))).quantize(Decimal('0.1'), rounding=ROUND_HALF_UP))


    print(count,res)
    print("{} {}".format(c,S))
            
            
    print(s[:cursor]+'^'+s[cursor:])



    print(word)


    print(s[:cur]+'^'+s[cur:])

        print(*words)


            
    print(s[:char]+'^'+s[char:])


    print(syntext[:current]+'^'+syntext[current:])


        print("overflow")
        print(0)
        print(int(ans.imag), 'i', sep='')
        print(int(ans.real))
        print("{}{:+}i".format(int(ans.real), int(ans.imag)))


    print(recursive(1, [[0] * 4 for _ in range(4)]))

    print(solve(1,[[0]*4 for _ in range(4)]))
        

	print(ans)


	print(ans)


    print(xaxis,yaxis)

            print(i, j)
                print(robot[0], robot[1])
	print(c, r)


    print(sum(d))

    print(sum(ok))

	print(n-sum(f[s:n+1]))


    print(dp.count(True))

	print(p, q, r, s)


        print("Impossible")
        print("Impossible")

    print("%d %d %d %d" % (p, q, r, s))
        print('Impossible')
    print(p, q, r, s)

	print(len)
	print(*ans)

	print(tbl[z]-ma)

    print(zz-m)

    print(n3 - res)


	print(ans)


    print(ans)


	print(len(ans))
        print("SAME")
        print("DIFFERENT")

        print('SAME' if solve(now_key, past_key) else 'DIFFERENT')


			print(checkio(data))
	print(ans)


    print(ans)
    print(ans)

    print(mx,my)

	print(tx, ty)


        print(treasureX, treasureY)

    print("end")

    print(l,ma,dic[l][ma])

    print(c, max_c, max_n)

            print(0)
            print(d if 0 - x >= q else 0)


    print(ans)

            print(0)
            print(res.index(ans))

        print(0)
            print(i)
        print(day)
        print(0)

    print(ans)

    print(ans)


            print(ans)
            print(0)
        print(0)


        print(i)
        print(i)
    print(0)

    print(0)
    print(tt[0][0])

            print(0)
            print(open_day)



        print(0)
                print(i)
		print(r[0][0])
		print(0)

        print(0)
        print(ind)


        print(0)
                print(i + 1)
        print(0)
        print(cnt.index(c))

        print(0)
        print(ans[0][1])

    print(meeting_day)

        print(ans_d)
        print(0)

    print(ans[1] if ans[0]>=q else 0)

    print(answer)


                    print(date_li[j])
    print(ans)


        print(0)
                print( i )


print(main())



	print(ans)

        print(c_dates[0])

    print(c_day)
        print("0")
        print(c[ans.index(max(ans))])

        print(0)
        print(ans)


    print(day)

	print(answer)


    print(d)

        print(x_day)
        print(0)

                print(0)
                print(answer[0])

    print(index)

        
    


        print(max_num)

        print(ans)
    print(max([max(row) for row in areaSums]))
            

    print(ans)
                    

    




print(main())



    print(ans)
    


    print(ans)

    print(ans)

    print(ans)


    print(ans)



    print(ans)

        print(max_persimmon)

    print(ans)
    

	print(ans)

	print(ans_max)

    print(ans)

	print(count)

    print(max(ans))

    print(ans)
    print(max(c_list))


    print(count)

    print(ans)

  print(ans)

    print(m)

print(*ans, sep='\n')




    print(max_val)


                print(j,end = "")
                print(str(d[j])+j,end = "")
    print()
    print(ans)
            print(j)
            print(a//2,n)
    print(dp[m],dp_2[m])
    print(c[0])
    print(parse_expr(s,0)[0])
    print(ans)




print(main())



    print(ans)

    print(max(max(row) for row in dp))

    print(ans)


    print(ans)

        
    print(res)


    print(ans)



        print(maxNum)

	print(r)

    print(ans)

    print(ans)

    print(ans)


    
    print(ans)

        
        print(num)


        print(" ".join(row))

            

        print(f"{ans:.3f}")
    
    print('{:.03f}'.format(ans))
        
    
    
    
















    print(f"{an:.3f}")


    print("{:.03f}".format(e))

    print('{:.03f}'.format(ans))

        print("{:.3f}".format(krus(spheres)))
        print(*args)

        print('{:.3f}'.format(a))

    print("{0:.3f}".format(total))

        print(f"{ans:.3f}")


        print(ans)


    print(f"{ans:.3f}")


    print('{:.3f}'.format(ans))

    print(format(total, ".3f"))


        print("{:.3f}".format(round(ans,3)))
    print('{:.3f}'.format(ans))


    print("{0:.03f}".format(ans))

  print('{:.3f}'.format(ans))

        print(f"{solve():.3f}")

    
    print("{:.3f}".format(ans/1000))



    print('{:.3f}'.format(result))



        print(f'{ans:.3f}')


    
    print("%.3f"%ans)

        print(ans)

      
  print('{:.3f}'.format(ans))

  
  print('{:.3f}'.format(ans))

    print(format(ans, '.3f'))

    
    print("{:.3f}".format(res))
    

        print(format(ans, ".3f"))

    print('{:.3f}'.format(ans))

        
        print("{:.3f}".format(sm))

    print("{:.3f}".format(round(ans,3)))




        print("{:.3f}".format(ans))



    print("\n".join("{:.3f}".format(i) for i in ans))



  print(f"{res:.3f}")

    print("{:.3f}".format(kr()))


        print('{:.03f}'.format(ans))


        print('{:.3f}'.format(total))
    print("{:.3f}".format(ans))

        print(f"{ans:.3f}")


        print("{:.3f}".format(a))


    print(("%.3f") % res)


            print(member,self.find(member))
        print('{:.03f}'.format(res))
        print("{:.3f}".format(r))



    print('{:.3f}'.format(ans))

    print(ans)


    print(f'{ans:.3f}')

    print(f"{ans:.3f}")


        print(f'{ans:.3f}')

    print('{:.03f}'.format(ans))


    print(f'{ans_dist:.3f}')


    print('{:.3f}'.format(ans))
            
    
    
    


  print('{:>.3f}'.format(ans))

  print(f'{a:.3f}')

    print(answer)
    print('{:.3f}'.format(ans))
            


    print('%.3f' % ans)


    print('{:.3f}'.format(ans))

        
    print("{:.3f}".format(cost))

    print(f'{kruskal(n, E):.3f}')


    print(f"{ans:.3f}")


    print(f'{ans:.03f}')

        print(f"{Kruskal(graph, n).total_cost:.3f}")


  print('{:.3f}'.format(ans))
    
    
    






    print("{:.3f}".format(cost))


        print('{:.3f}'.format(item))
    print("{:.3f}".format(ans))
    


    print("{:.3f}".format(a))


    print("{:.3f}".format(s))


    print('{:.3f}'.format(res))


        print("{:.3f}".format(ans))

    print("{:.3f}".format(ans))
    
    

    print('{:.3f}'.format(cost))

            print(ans)
                    print(ans + i)
    print(an)


  print(array[0])

        print(cards[-1])


    print(cards[0])



    print(deck[0])

    print(card[0])


  print(cards[0])

    print(yama[0])
    print(pile[0])

    print(l[0])


    print(yama[0])

    print(cards[0])

		print(ls[0])


    print(deck[0])


    print(d[0])


  print(lst[0])



    print(cut[0])


        print(cards[0])

    print(cs[-1] + 1)
    

    print(res[i]) 

    print(dp[0])
print("\n".join(map(str,ans)))

        print(i)
    
    print(ans)

    print(cards[0])


    print(L[0])
    
    

        print(aa[0])

    print(cards[0])

  print(cards[0])



  print(A[0])

        print(l[-1])
        
    print(d[0])

    print(li[0])

    print(D[0])

    print(top_card)


    print(cards[0])

    print(deck[0])


    print(cards[0])

	print(cards[0])

            print(cards[0])


    print(cards[0])

	print(yama[0])

    print(card[0])
    print(cards[0])
	print(card[0])
    print(l[0])

    print(deck[0])

    print(cards[0])

        print(cards[n-1])

    print(cd[0])

    print(mountain[0])

        print((sum(data)-max(data)-min(data))//(n-2))

        print(deck[0])


    
    print(cards[0])

    print(N[0])


    print(cards[0])



    print(deck[0])
  print(l[0])

        
    print(yama[0])
    



  print(yama[0])


    print(card[0])

    print(L[0])

    print(deck[-1])


    print(ans)


        print(tiles)


    print(c)

        
        


        print(ans)
        print(cout)


    print(search(x, y, room))

        print(answer)

        print(cnt)

    print(ans)
    

    print(fill(y,x))


        print(i)
    
        print(a)

        print(solve(w, h, f))


    print(able)

    print(answer)

        print(ans)

        print(search(curh, curw))


        print(ans)

                print(dfs(x, y, w, h, floor_map))



    print(count)

  print(i)



    print(get_panels(map_list, exp, pos, w, h) + 1)

    print(ans)

    print(ans)
        print(sum(flag[i].count(1) for i in range(n)))


    print(ans)


				print(count_area(h,w))
    print(ans)
    
        print(ans)

  print(result[i])

    print(cnt)


    print(result)

        print(getter(lab,b,a))
    print(floodfill(room, ax, ay))

	print(cnt)


    print(D.ans)

        print(calc(sx,sy))

        print(str("|".join(r)))


    print(ans)


    print(answer)


    print(ans)

    print(a)

    print(count)

  print(ans)

    print(sum)





    print(ans)

    print(ans)



  
  print(cnt)

    print(dfs(sx, sy, 0))


    print(ans+1)
    print(i)

  print(ans)

        print(ans)
    print(ans)
    print(count)            

        print(count)

    print(ans)


    print(len(d.keys()))

    print(count)


    print(count)

        print(dfs(start_x, start_y, room, visited))
    print(search(w,h,x,y,m))



print(main())



                print(ans)
    print(dfs(sx, sy))



    print(ans)


        
        print(  floodfill(board, row, col, ROWS, COLS)  )

                print(ans)


    print(i)

    print(ans)
    
    print(ans)

    

            
    print(cnt)
    
    


            print(totalans[i])
    print(sum([1 if Map[i][j] == '*' else 0 for i in range(H) for j in range(W)]))

	print(count+1)
	

            print(dfs.count_reachable_tiles())

print(*ans, sep="\n")





print(main())


    print(*ans, sep="\n")    

        print(1 if p==1 and q<=a else 0)
        print(solve(p, q, a, n))


    print(ans)


        print("1")
    print(ans)

    print(max(Max, ans))

        print(1)
    print(ans)
                
            
    print(ans)
            
            
        
        

    print(ans)
    print(dfs(0,s,l,v,dic))

    print(ans)
    print("{:.3f}".format(round(ans,3)))

            print(dx)
    print("unreachable")
    print(dp[0][n])
    print(len(ans))
            print(i)
            print(i)
            print(i)
    print(ans)


  print(ans)







  print('{:.10f}'.format(x),'{:.10f}'.format(y))

  print('{:.10f}'.format(x))

        print(1)
                print(53)
        print(ans)


        print(ans)

    print(ans)
    print(ans)



print(main())


    print(ans)
    print(line)

	print(res)

        print(max_funds)


        print(ans)

    print(ans)


    print(int(max_))

    print(int(m))

    print(int(a))

	print(ans)


    print(max(b))

    print(max(ans))

        print(answer)

	print(ans)
    print(ans)

  print(int(ans))

            print(i + 1)
            print(i + 1)
    print("+++++")


    
    print('\n'.join(output))

                print(i)
        print("+++++")
        print(j)

            print(num+1)
    print("+" * 5)



    print(name +":" + str(type(var)) + " = " + repr(var), file=stderr)
                        print(i)
        print("+++++")
            print("\n".join(res))
        print("+++++")


        print(l)
    print("+++++")


                print(i+1)
    print("+++++")

            print(i)
    print("+++++")


print(*res, sep="\n")


            print(i+1)
    print("+++++")
    

            print(i)
            print(i)
    print('+++++')

      print(i)
      print(i)
  print('+++++')


      print(i)
      print(i)


  print('+++++')



print(main())



        print("\n".join(map(str, ans)))
    print("+"*5)


                print(i)
                    print(i)




        print('+++++')


                print(idx)


        print("+++++")

        print(i)
    print("+++++")

    print(an)


        print(encode(decode(s) + decode(t)))


    print(to_mcxi(from_mcxi(s1) + from_mcxi(s2)))


    print(tsac(lr))


    print(calc(s1, s2))


  print(ans)




  print(answer)


        print(ans)

    print("".join(i))

    print('\n'.join(answers))

    print(ans)

    print(itom(sum(map(mtoi,l))))


	print(to_mcxi(from_mcxi(s[0]) + from_mcxi(s[1])))

    print(*reversed(r),sep='')

    print(d)



print(main())



    print(getN(temp))



print(*ans, sep='\n')


    print(ans)


    print(ans)

    print(i_m(ans))
    

    print(ans)
    

    print(r(c))
    

    print(s)

    print(toMCXI(sum(parseMCXI(x) for x in input().split())))


    print(res)

    print(ans)

        print(integer_MCXI(MCXI_integer(s[0]) + MCXI_integer(s[1])))

    print(ans.replace("1", ""))

    print(encode(decode(a) + decode(b)))

  print(conv(parse(s1) + parse(s2)))

        print(NtoS(StoN(a) + StoN(b)))

    print(calc_num(c))

    print(rev(ans))
        

    print(s[::-1])
    

	print(toord(ans))
    print(anstr)

    print(mcxi(a+b))

    print(res)


    print(state)


    print(c)


    print(ans[::-1])

            print(f'{m}m',end='')
            print('m',end='')
            print()
            print(f'{c}c',end='')
            print('c',end='')
            print()
            print(f'{x}x',end='')
            print('x',end='')
            print()
            print(f'{i}i')
            print('i')
            print()





        print(int2mcxi(mcxi2int(mcxi1) + mcxi2int(mcxi2)))

            print(answer)


    print(ansstr)

    print(ans)

                print(j,end = "")
                print(str(d[j])+j,end = "")
    print()


    print(ans_s)

    print(transform(sumv))

    print(ans)


            print(check[i] if v[i] == 1 else str(v[i])+check[i], end="")
    print()


            print(S[j + (4 - l)], end = "")
            print(ANS[j], S[j + (4 - l)], sep = "", end = "")
        
    print()
    
    
    

    print(answer_s)


    print(encode(s))

 print(re.sub(r'0.','',''.join([i+j for(i,j)in zip(str(10000+eval('+'.join([i[0]+{'m':'*1000','c':'*100','x':'*10','i':''}[i[1]]for i in ['1'+i for i in''.join(re.split(r'\d\w',s))]+re.findall(r'\d\w',s)])))[1:],list('mcxi'))]).replace('1','')))

    print(ans)


            print("Impossible")
            print("Impossible")
            print(f"{ans:.3f}")




print(main())


        print("Impossible")
        print(ans)
        print("Impossible")
        print(ans)

      print('{:.08f}'.format(w))
  
  print('Impossible')

      print("Impossible")
      print(ans)
        print(solve())


        print("Impossible")
        print(result[3])
        print("Impossible")

	print(ans if ans < INF else "Impossible")


            print(t)
        print("Impossible")
        print("Impossible")
        print(ans)
                        
            
            
    

    print("Impossible" if ans == float("inf") else "{:.05f}".format(ans))

    print(ans)
        print('Impossible')
        print(ans)


                print(-1)
            print(min(dp[-1]))

    print(ans)
        print(-1)
        print(min(dp[-1]))
        
        
        
        

        print(-1)
        print(min(dp[-1]))

        print(-1)
  
  print(min(dp[-1]))

      print(-1)
    print(shortest(start, {i for i in range(stain_num) if i != start}, edges, dp))

        print(-1)
        print(-1)


print(main())


        
        print(num)

    print(an)




print(main())




        print(a - d)

	print(a)


    print(a+d*(i-1))

        
    print(arr) 

        print(a)


    print(a)

                print(a)
    print(solve(a, d, n))

    print(a-d)


                print(i)
			print(i)
    print(a)

        
        print(a)

            print(a)
                print(kou)
    print(a)
    print(a)

    print(ans)
        

                    print(x)
    print(a-d)

    
    print(a + k * d)

                print(t)
                print(i)
    print(curr)


    print(a)        

                print(a)
            print(solve(table, a, d, n))

			print(a+d*i)
			print(i)
        print(ans)



        print(showprime(a, d, n))

    print(a)

    print(a)

    print(i)

                print(i)
    print(a)

            print(now)
			print(a)
    print(a)

            print(kazu)
			print(a)
    
    print(Plist[n-1])

        print(i)

             print(a_i)
        print(p)
    print(ans[n-1])

        print(2)
            print(i)
    print(i)

            print(a)
                print(a)
                print(A[i])
    print(ans)

    print(X[n-1])


        
    print(len(set(ans)))
    

    print(an)


        print(versions(input()))


    print(len(s))

    print(len(set(trains)))

        print(len(ssum))

    print(i)



    print(len(_set))

        print(ans)

    print(len(trains))


    print(len(aset))

	print(len(ss))

    print(len(l))

    print(len(st))

    print(len(strs))

    print(len(pat))


    print(len(ans))


  print(len(ptn))

        
    print(len(ans))
        

    print(len(answer))






    print(ans)


  print(len(ans))

    print(len(C))
        
        

    print(len(s))


        print(len(S))
    print(len(d_set))

    print(len(ss))


	print(solve(input()))


        print(count(input()))

            print(len(ans))


    print(len(before))

    print(len(set(result)))

    print(len(A))
    print(len(A))

        
        print(len(cfg))

    print(len(li))

        
    print(len(se))

    print(len(se))
                






    print(len(res))

  print(len(anss))

    print(len(d))



print(main())



    print(len(uniq_train))

    print(len(b))


    print(196470 - c)
    print(len(set(ans)))

	print(len(arr_train))
	print(len(all_list))
print(blkA_train)
print(blkB_train)
print()
print(all_list)

print(all_list)
print(len(all_list))
print(blkA_train)
print(blkB_train)


print()
print(all_list)
print()

print(all_list)
    print(len(st))


    print(len(X))

    print(len(set(now)))

    print(len(result))


        print(i)

    
    print(len(s))

    print(F(data))

    print(len(after))


        print(0)
    print(len(collections.Counter(stack)))
    

    print(len(ans))


    print(len(train_set))

  print(i)






    print(len(s))

    print(len(ans))


    print(len(l))    


    print(len(ans))


	print(len(A))


    print(len(list(set(kind))))

    print(len(list(set(new_train))))

    print(len(st))

    print(len(list(res.keys())))


    print(cnt)

    print(len(ans))



    print(len(ls))

    print(len(kouho))

    print(len(date))

    print(i)

    print(an)


    print("\n".join(map(str, ans)))




print(main())


        print(ans)

        print(-1)
        print(ans)

            print('-1')
            print(ans)

                    print(turn+1)
        print(-1)
      print(-1)
      print(10 - score)

    print(res)




    print(ans)

  print(ans)
      

        print(ans)
    

        print(minThrows if minThrows != None else -1)

            print(11-n)
            print(11-n)
            print(11-n)
            print(11-n)
        print(-1)


        print(res)


    print(ans)


            print(-1)
            print(answer)

    print(0)
      print(node[now][k])
        print("0")
    print(solve(res, x))


    print(find(s,0,len(s),i))


    print(ans)

            print(0)
        print(r[n])

        print(text[int(idx)] if len(text) > int(idx) else 0)



print(main())


    print((s - vmin -vmax) // (n - 2))

	print((s-vmin-vmax)//(n-2))

    print(sum(score) // (n - 2))


    print(an)


    print(int(ans))

    print(ave)

    print(ans//(n-2))
    print(sum(s) // (n-2))

    print(int(count/(n-2)))

    print(ave)




  print(sum(a)//(len(a)))
print(*ans,sep='\n')

	print(tot//(n-2))

    print((sum(sorted([int(input()) for _ in [0]*n])[1:-1]))//(n-2))


    print(ans)


    print("%d" % sum)

    print(ans)

    print(int(sum(points)/len(points)))

	print(sum(s)//len(s))

		print(int(score_sum//(n-2)))

    print(Sum//Count)
    print(score // (n - 2))

    print(sum(s)//len(s))


    print(sum(tmp[1:-1])//(N-2))

	print(sum(s[1:n-1])//(n-2))

  print(int(sum(l)/len(l)))

  print(sum(sorted([int(input()) for _ in range(n)])[1:-1]) // (n - 2))

    print(ans)


    
    print(math.floor(sum(score)/len(score)))

        print(sum(Score[1:N-1])//(N-2)) 


    print(tmp)

  print((A-L[0]-L[len(L)-1])//(N-2))

    print(ans//(n-2))


    print(Ans)


    print(int(avg))


  print(sum(a[1:n-1])//(n-2))

    print(ans[i])


        print(int((total-minimam-maximam)/(N-2)))
    print(sum(point) // (n - 2))


        print(ans)

    print(B)

    print(sum(sorted([int(input().rstrip()) for _ in range(n)])[1:-1])//(n-2))


    print((sum(judges) - max(judges) - min(judges)) // (len(judges) - 2))


        print(sum(s[1:N-1])//(N-2))
    print((sum(a)-max(a)-min(a))//(n-2))


    print(ans)



    print((sum(S)-max(S)-min(S))//(N-2))

    print(int(ysum/(n-2)))

    print((sum(x)-max(x)-min(x))//(a-2))
   


    
    print((t-amax-amin)//(n-2))

    print(int((b-mx-mn)/(x-2)))

        print(y)

    print((sum(s)-min(s)-max(s))//(n-2))


    print(sum(S)//(n-2))
    


    print(math.floor(sum(s)/len(s)))

    print(x)

    print(*ans, sep='\n')


    print(sum(S) // len(S))


    print(y//(n-2))

    print(y)


    print('{:.0f}'.format(c))
  print(point)

    print((a-min-max)//(n-2))



print(main())



        print(ans)

        print(ans)


        print(ans)
            
        print(ans)


        print(ans)
            
            

        print(ans)

            print(0)
        print(ans)

        print(res)


            print(summ)
        print(imos[m][te - 1] - imos[m][ts - 1])


		print(ans)


    
    print('\n'.join(map(str, answers)))

        print(ans)

        print(sum(new_lst))
        






        print(count)
        

            print(T[m][e] - T[m][s])


        print(ans-cnt)




        print("DEBUG")


    print(sum([1 for i in ut[sta - TIME_MINIMUM:] if i > 0]))




            print(0)
            print(T[i][te] - T[i][ts])
    

        print(sum([1 for j in range(ts,te) if user[m][j] > 0]))

    print(an)


        print(ans)

        print(ans)


            print(0)
            print(359)
            print(timeline[c][b-1]-timeline[c][a-1])
        print(tmp)

        print(ans)

            print(sum(a > 0 for a in A[stu][ts:te]))

    print(*Cakes)




    print(*ANS)

	print(*sizes)


        print(" ".join(map(str,ans)))
    print(*an)


    print(" ".join(map(str, [a*b for a, b in L])))


        print(*map(lambda x: x[0]*x[1], piece))


        print(" ".join(res))
        
    print(' '.join(map(str, cake)))







        print(*ans)



        print(*sorted([i[0]*i[1] for i in cake]))

    print(' '.join(cakes))

    print(' '.join(map(str,ans)))


  print(' '.join(ans))

        print(*ans)


        print(*args)

        print(*a)

        print(*ans)

    print(*x)



    print(*sorted(d * w for d, w in square))

  print(*ans)

            print(area, end="")
                print(" ",end="")
                print()

        print(*s)
    print(' '.join(map(str,ans)))


        print(*a)


    print(' '.join(map(str,ans)))

    print(' '.join(map(str, ans)))


    print(*ans)


    print(' '.join(map(str, sorted([w*d for w, d in pieces]))))


        print(" ".join(map(str,sq)))
        

        print(*solve(n, w, h))


    print(*ans)

    print(*sorted(ans))

    print(*ans)



        print(' '.join([str(v) for v in sorted(areas)]))


    print(*cakes)

    print(*ans)

        print(' '.join(ansl))


        print(*ans)


    print(*ans)

    print(*area_list)
    

    print(' '.join(map(str,ans)))

        print(" ".join(list(map(str, areas))))

    print(*ans)


    print(' '.join([str(i) for i in ans]))

  print(*ansli)
  
    print(" ".join(map(lambda cake: str(cake[0]), sorted(cakes))))

    print(*sorted([(p[3]-p[1])*(p[2]-p[0]) for p in pieces]))


   print(' '.join(map(str, sorted(map(lambda x: x.area(), pieces[1:])))))
    print(*[a * b for a, b in lst])

    print(*ans)

    print(*ans)



    print(s)

    print(*ans)

    print(*ansL)
      
      
      
      


    print(*sorted([t[0]*t[1] for t in pi]))

    print(*sorted([cake[0] * cake[1] for cake in cakes]))




print(main())




    print(sub[0:-1])


        print(w, d, s)
            print(J, end = "")
            print(J, end=" ")
    print()

	print(*sorted(v[0]*v[1] for v in cakes.values()))

        print(ans[i][2], end = " ")
        print(ans[i][2])

        print(value, end="")
    print()

    print(*area)


  print(*(sorted(area_lst)))    

        print(*ans)
                            

    print(ans[0],end="")
        print(" "+str(ans[i]),end="")
    print()
    print(' '.join(areas_str))


    print(*res)
        
    

		print(sq[i][0]*sq[i][1],end=" ")
	print(sq[len(sq)-1][0]*sq[len(sq)-1][1])









        print(w * d)
        print(" ".join(list(map(str, sorted([abs((i[2] - i[0]) * (i[3] - i[1])) for i in num_list])))))
  print(*sorted(A))
  

        print(W * D)
    print(" ".join(map(str, area[1:])))


  print(*sorted(c), sep=' ')

	print(*sorted(v[0]*v[1] for v in cakes.values()))

        print(' '.join(map(str, ans)))

                        print(cost)
            print(-1)




  
  print(search()) 




print(main())


    print(dijkstra(start,goal))

    print(solve(W, H, S))

        print(-1)
        print(ans)
            
    

    print(-1 if ans == INF else ans)

        print(-1)
        print(weights[T])


      print(cost)
      print(cost)
  
  print(-1)
print(t)

          print(a, b)
    print(-1)
    print(*ans)
                
                

    print(*an)


        print(-1)
    print(s[i], t[j])


    print(-1)
    print(ans1, ans2)


            print("-1")
            print(inter[0], inter[0])
        print("-1")
        print("-1")
        print(ans[0][1], ans[0][2])


        print(-1)
        print(-1)
        print(answer_n, answer_m)


        print(-1)
        print(a[ans[0]], b[ans[1]])


		print(-1)
			print(a,b)
		print(-1)

    print(t, h) 
        print(*ans[0])
        print(-1)

        print(-1)
            print(taro[ti], hanako[hi])
        print(-1)

                    print(i,i)
                    print(i+j,j)
                    print(j,i+j)
            print(t[i], t[i] - d//2)
        print(-1)


                print(i, j)
    print(-1)
        print(-1)
                print(i + sa, i)
            print(-1)
                print(i, i + sa)
            print(-1)

        print(-1)
        print("{} {}".format(ans[0], ans[1]))


        print(-1)
            print(-1)
            print(a,a-k)


        print(-1)
            print(t, t - diff)
        print(-1)


        print(-1)
                print(A[i],B[ix])
            print(-1)

                print(ai, bi)
        print(-1)

    print(ans)
                

        print("-1")
        print("{0} {1}".format(t, h))
    print(r)

    print(ans(t,h,t_s,h_s))

        print(-1)
            print('{0} {1}'.format(v1, v2))
        print(-1)

          print(a, b)
    print(-1)
                print(i,j)
        print(-1)

          print(i, j)
    print(-1)
  

        print(showchcard(c_taro, c_hana, toave))
        print("headdata::")
        print(head)
        print("c_taro::")
        print(c_taro)
        print("c_hana::")
        print(c_hana)
        print("sum_taro::")
        print(sum_taro)
        print("sum_hana::")
        print(sum_hana)
        print("average::")
        print(avee)
        print("")
        print(Taro[t],Hana[h])
        print(-1)
        print(-1)
        print("{} {}".format(i[0], i[1]))


            print("-1")
                print("{} {}".format(l1[a1],l2[a2]))
                                print(i,j)
                print(-1)
            print(k, k - diff // 2)
        print(-1)


        print(-1)
                    print(a[i], b[j])
            print(-1)


        print(-1)
        print(i,j)
        print(-1)


            print(ans[1])
            print(ans[1], ans[2])


                    print(list_n[i], list_m[j])
            print(-1)
            
            
                    print(list_n[i], list_m[j])
            print(-1)
    

                    print(Ts[i], int(Ts[i] + D))
                    print(Ts[i], int(Ts[i] - D))
            print(-1)
    
    

        print("-1")
                print("{} {}".format(t_card,h_card))
        print("-1")

        print("-1")
        print("{} {}".format(taro[piv_taro], hanako[piv_hanako]))
        print("-1")


                print(i,j)
    print(-1)
            

                        print(i,j)
            print(ans)
                        print(i,j)
            print(ans)
    
                

        print(-1)
            print(taro[ti], hanako[hi])
        print(-1)

                    print(i,j)
        print(-1)
                print(taro[i],int(taro[i]+abs(taha)))
                print(taro[i],int(taro[i]-abs(taha)))
        print('-1')

                   print(i,j)
       print(-1)
        print(-1)
            print(x, x + t)
        print(-1)


        print(*ans[0])
        print(-1)

                    print(S[i], T[j])
            print(-1)
    print(-1)

                print(cn[i],cm[j])
        print(-1)

        print(-1)
        print(ans_taro, ans_hanako)

    print(" ".join(map(str, i)))

                print(i,j)
        print(-1)

        print(-1)
        print(a[0], a[1])


        print(-1)
            print(t,t+diff//2)
        print(-1)


        print(-1)
        print(-1)
        print(t_, t_ - d)
    

        print(-1)
        print(-1)
        print(a, b)

                    print(a,b)
            print(-1)
            print(-1)
            print(A[0],A[1])

        print(-1)
        print(-1)
        print(*ANS)


                    print(t[i], h[j])
            print(-1)


    print(res)

		print(-1)
		print(' '.join(map(str, res)))

    print(*ans)

        print(-1)
        print(ans1, ans2)
        print(-1)

    print(*ans)

        print(-1)
        print(Tchange,Hchange)

        print(-1)
        print(-1)
        print(str(ans[0])+" "+str(ans[1]))


        print(-1)
        print(ans[0], ans[1])


    print(answer(n, m, taro, hanako))



    print(-1)
    print(ta, tb)

  print(*ans)


    print(ans)

    print(str(Nlist[i]) + ':', end='')    
        print(' ' + str(ans[i][j]), end='')
    print()
    

        print(n, ': ', ' '.join(map(str, res)), sep='')
        print(n, ': ', n, sep='')


        print(ans)

    print(str(key)+": "+" ".join(map(str,value)))


    print("{}: ".format(n), end="")
    print(*ans)

    print(f"{n}:", *ans)

        print(N, ": ", sep="", end="")
        print(*ans)
    print(str(n) + ':',n if L[n] is True else ' '.join(map(str,L[n])))

    print(f"{n}: {ans}")


  print(str(n)+':',*div[n])



print(main())



    print('{0}: {1}'.format(N,ans))

        print("{0}: {1}".format(n, ans_txt))


        print("{}: {}".format(num, " ".join(list(map(str, factors)))))

    print(" ".join(res))

  print(f"{n}: ", end="")
  print(*divisors) 
    print('{}: {}'.format(n, ' '.join(map(str, b))))

        print(f'{n}: ', end='')
        print(*v)



        print(str(data) + ":", end = "")

            print(" " + str(item), end = "")
        print("")
            

    print('{}: {}'.format(n, ' '.join(map(str, b))))

    print(ans)


    print(str(n)+str(':'), *res)
 

    print(str(N)+":",*seq)

    print(n, end=": ")
    print(*ans)


    print('{}: {}'.format(N, ' '.join(map(str, ansp))))

    print(n, end=":")
        print(" ", end="")
        print(i, end="")
    print()

    print(str(n) + ':',' '.join([str(x) for x in S2 if n % x == 0 and x <= n]))

        print(str(N)+':',' '.join(map(str,ans)))


    print(n,end = ":")
            print(" "+str(x),end = "") 


    print()


    print("{}: {}".format(N, " ".join(map(str, ans))))
    print(str(N)+":",*sorted(ans))
    
    
    
    


    print(str(n)+":",end=" ")
    print(*ans)

  print(n, ":", sep="", end=" ")
  print(*ans)

        print("{}:".format(n), *ans)


    print(N, end=":")
        print(" " + str(a), end="")
    print()

    print(f"{n}:", *m)


    print(n,end=':')
            print('',gdprimes[i],end='')
    print()

    print(n, end="")
    print(':', end=" ")
    print(*ls)

    print(str(input_list[i]) + ": ", end="")
    print(*answer[i])

    print(str(num[i])+":",*R[i])

    print("%d: %s" % (num, output_str))

    print(str(i[0]) + ":", end = "")
        print("", end = " ")
        print(j, end = "")
    print()

    print(parser(0, len(S)).count(2))

    print(ans)


    print(ans)

    print(ans)

    print(ans)





print(main())


	print(ans)

  print(ans)

                print(j,end = "")
                print(str(d[j])+j,end = "")
    print()
    print(ans)
            print(j)
            print(a//2,n)
    print(dp[m],dp_2[m])
    print(c[0])
    print(parse_expr(s,0)[0])
    print(ans)
    print(ans)


    print(count)

    print(ans)
    print(ans)

    print(ans)

        print(count)


    print(*result, sep="\n")


    print(result.count(2))

    print(ans)
                

    print(ans)
    print(cnt)
    


    print(ans)


	print(r)


                
    print(answer)

  print(ans)

  print(ans)

    print(ans)


  print(ans)

    print(min(dic[(w, h, D)], dic[(w, h, R)]))

	print(dijkstra(h, w, cost))



    print(min(E[H][W]))
            print(dist)
    print(min(dist[h-1][w-1]))


        
    print(min(dist[-1][-1]))

    print(min(DP[h - 1][w - 1]))





print(main())


        print(solution_without_nx(w, h, s, c))

    print(min(weights[cal(x,y,0):cal(x,y,3)+1]))


    print(ans)
        print(min(mincost[h-2][w-1][2], mincost[h-1][w-2][1]))



                print(0)
            print(min(R))


print(main())


        print(0)
        print("%.08f" % ans)

    print(0)
  print('{:10}'.format(ok))


    print(ans)
        

            print(0)
                print(0)
    print(dist)
    print(ans)


            print(t)
				print(i, flush = True)
            print(l.index(c))
    print(an)


      print(i)


    print(i)

    print(solve(n,p))



                    print(i)
        print(order)


        print(i)



print(main())



        print(ans)

                                print(index)
    print(ans)


                    print(i)
      print(now)
    print(main(n,p))


        print(election(n,p))
        

        print(game(man, donst))

    print(i)



    print(i)
 

            print(simulation(n, p))

      print(ans)
    print(*ans, sep='\n')



    print(i)
                print(i)
            print(ans)
                    print(i)
                print(i)
                    print(i)
            print(main(n,p))
        

    print(i)
        


                print(i)
            print(i)
                print(cnt)
  

 
      


print(*ans,sep="\n")

  

        print(ind)
                print(i)
    print(step%n)

                print(str(position))
                    print(i)
    print((pivot - 2) % n)

    print(i)


                print(i)
                print(i)
            print(i)
    
    print(index)
        print(ind)
	print(ans)

    print(ans)

	print(ans)



        
    print(i)


                    print(cnt)
            print(mayor)
                print(er)
                print(a)
        print(i)
            print(i)
	print(turn)



                print(turn)
                print(idx)

    print(i)
    

                print(i)


    print(result)

                    print(x)
            print(i)
        print(current)

                print(i, flush = True)
            print(I)
    print(x)

  print(tousen)

    print(ans)


    print(ans)

	print(ans)


  print(ans)


        print(cnt)
        

    print()
        print(*row)
    print()

        print(cnt)
      
  print(counter)


    print(cnt)

    print(count_islands(c))
    

    print(ans)

    print(count)
    
    

        print(ans)


    print(count)


print('\n'.join(map(str, ans)))


    print(island - 1)


    print(ans)




    print(an)



    print(island)

    print(i)

    
    print(solve(w,h,c))
  print(ans)



	print(count)


    print(solve(W, H, cell))


    print(res)

    print(islands)

    print(ans)

    print(ans)

    print(i)

        print(ans)
    print(ans)


    print(ans)


    print(a)


        
        print(ans)

        print(result)


        print(cnt)

        print(cnt)

    print(answer[i])


        print(i)


    print(count_list[i])

    print(solver(w, h))

    print(a)


        print(solve(W, H, A))
    print(ans)

    print(i)


  print(ans)


    print(ans)
        
        

print("\n".join(map(str, a)))


    print(cnt)

    print(ans)


    print(ans[i])

  print(cnt)
  

    print(s)




    
    print("\n".join(map(str, ans)))    


    print(ans)

print(*ans, sep='\n')


    print(island_number)


        print(i)

        print(cnt)



   print(ans)
        print(r)



    print(count)


    print(ai)

        print(ans)
        print(ans)


    print(ans)



        print(res)

  print(ans)
      

  
  print(cnt)

    print(ans)


    print(ans)

  print(ans)

    print(bfs(w, h))

    print(ans)



    print(ans)

    

    


    print(ans[i])


    print(ans)

  print(i)

    print(time()-start)
    print(ANS)



print(main())


    print(ans)

    print(ans)
    print(dfs(0,s,l,v,dic))

    print(ans)
    print("{:.3f}".format(round(ans,3)))

            print(dx)
    print("unreachable")
	print(ans if ans >= 0 else "unreachable")


                print(t)
            print('unreachable')

  
  print(dijkstra(s))

    print('unreachable')
    print('{:.20f}'.format(ans))

            print("unreachable")
            print(ans)





print(main())


            print("{:.20f}".format(cost))
        print("unreachable")

        print("unreachable")
        print(ans)
    print(solver.solve())


    print(sum(dfs(s, set()) for s in range(m)))
  
  print(dinic.flow(S,T))

	print(dinic.flow(n+m, n+m+1))


print(*ans, sep="\n")



    print(dinic.flow(s,t))

    print(*ans, sep='\n')


    
    print(solve(M, N, B, R))

    print(G.max_flow(s, g))
    
    



    print(*answer, sep="\n")

    
    
  print(F.flow(source, terminal))
        
    print(r)


        print(ans)

        print(MF.compute(s,t))

        
  print(ans)



    print(*ans, sep="\n")


    print(hk.flow())



        print(bm.run())


    print(ans)

    print(Dinic(V, edge, M+N, M+N+1).maxflow)

    print(ans)





print(main())


            print(solve(M, N))

print(*ans, sep='\n')

    print(network.max_flow(source,sink))
        

    

    
    






    print(dinic.solve(s, g))



    print(flow(0,n+m+1))



    print(ans)
        

        print("1 1")
    
    print(right - left + 1, bottom - top + 1)

    print(*an)


  
  print(max(posx) - min(posx) + 1, max(posy) - min(posy) + 1)


        print(1, 1)

    print((maxy - miny + 1), (maxx - minx + 1))

  print(w_answer, h_answer)


        print(right - left + 1, top - btm + 1)


    
    print(max(x) - min(x) + 1, max(y) - min(y) + 1)

    print(max(a)-min(a)+1, max(b)-min(b)+1)


            print(1, 1)
            print(width, height)

    print(max(py) - min(py) + 1, max(px) - min(px) + 1)

        print(w,h)

	print('{} {}'.format(w+1, h+1))

    print(maxX - minX + 1, maxY - minY + 1)

    print(hy-ly+1,ht-lt+1)


    print(max_x - min_x + 1, max_y - min_y + 1)

    print(max(x)-min(x)+1,max(y)-min(y)+1)

    print(w,h)


	print(c2-c1+1, r2-r1+1) 


    print(xma-xmi+1,yma-ymi+1)

        print(str(max(xlist) - min(xlist) + 1) + " " + str(max(ylist) - min(ylist) + 1))
  print(xmax-xmin+1, ymax-ymin+1)

    print(maxx - minx + 1, maxy - miny + 1)


        
    print(max(w)-min(w)+1,max(h)-min(h)+1)

    print(*ans)
    



    print(ans_w, ans_h)


    
    print(max(x)-min(x)+1, max(y)-min(y)+1)


        print(1)
    print(width, height)



        print(w, h)

        
    print(max(x)-min(x)+1,max(y)-min(y)+1)

    print(max_w - min_w + 1, max_h - min_h + 1)


    print(bottomright[0]-topleft[0]+1,topleft[1]-bottomright[1]+1)

    print(x_max - x_min + 1, y_max - y_min + 1)

    print(abs(max_w-min_w)+1,abs(max_h-min_h)+1)

        print(1,1)
    print(solve[-1][0]-solve[0][0]+1,end=' ')
    print(solve[-1][1]-solve[0][1]+1)  
        

        print(1, 1)
        print(abs(max(w)-min(w))+1, abs(max(h)-min(h))+1)

    print(max(stack_x)-min(stack_x)+1,max(stack_y)-min(stack_y)+1)
        print(abs(mr - ml) + 1, abs(mu - md) + 1)
    print(max_w + 1 - min_w, max_h + 1 - min_h)



    print(max_x-min_x+1, max_y-min_y+1)


    print(sort_x_square[-1][0] - sort_x_square[0][0]+1, sort_y_square[-1][1] - sort_y_square[0][1]+1)

    print(max(place_x)-min(place_x)+1, max(place_y)-min(place_y)+1)

    print(LX,LY)


    print(max(x)-min(x)+1,max(y)-min(y)+1)

    print(dx,dy)

    print(w,h)
        
    

    print(max_j - min_j, max_i - min_i)


  print(f"{abs(left - right) + 1} {abs(top - down) + 1}")


    print('%d %d' % (max_x - min_x + 1, max_y - min_y + 1))

    print('{0} {1}'.format(w,h))



print(main())



    print(i[0], i[1])

  print(W,H)

	print(max(list_x))
	print(min(list_y))
	
	print('%d %d' % (max(list_x)-min(list_x)+1,max(list_y)-min(list_y)+1))	
		
	
    print(w_max - w_min, h_max - h_min)



    print(x,y)

		print(1, 1)
	
	print(maxx - minx + 1, maxy - miny + 1)




        
    print(str(max(index_x)-min(index_x)+1)+" "+str(max(index_y)-min(index_y)+1))



    print(mxw - mnw + 1, mxh - mnh + 1)
            

    print(width, height)

    
    print("%d %d" %(W, H))

        print(*i)
    
    print(right - left + 1, bottom - top + 1)


        print(ans)

        print(ans)
    print(solve(w, h, wall))



        print(dist[h - 1][w - 1])


            print(depth[r][c-1])
        print(0)

    print(*tate, sep = "\n")
    print("----")
    print(*yoko, sep = "\n")
        print(0)
        print(ans)
    

    
    
    
    


    print(check((1, 1), (height * 2 - 1, width * 2 - 1)))


    print(ans)

    print(bfs() or 0)


    print(bfs(mazu, h, w))


        print(0)
        print(visit[-1][-1])

    print(dist[-1][-1])

    print(an)




	print(dist[data.h-1][data.w-1])









                print(dist[nh][nw]+1)
        print(dist[H-1][W-1]+1)
        print(0)

                            print(fp_len + reverse_rec[next_place])
                            print(rp_len + forward_rec[next_place])
            print(0)

        print(0)
        print(d[w - 1][h - 1])

    print(solve(w,h,row,col))

  print(fish(c,w,h))
            print(0)
            print(dist[-1][-1])


    print(bfs(w, h))

            print(step)
        print(0)


        print(0)
        print(node_distance_array[-1][-1])


    print('*' * W)
        print(*depth[i])

        print(solve(w, h, wall_vertical, wall_horizontal))


        print(sum(a[1:-1])//(n-2))
            
                                print(ans+1)
            print(0)
            
    
            print("." if j else "#", end="")
        print()

        print(i)

        print(i)

    print(a)


        print(0)
        print(distancemat[H-1][W-1])

    print(ii)
    print(ii)
    print(ii)
  print(a[gyx[0]][gyx[1]])

            print(0)
            print(ans)

        print(ans)



        print(dist[-1][-1])


    print(a)

    print(a)

    print(a)


print('\n'.join(map(str, distances)))



    print(ans)


            print(score)
        print(0)


        print(A[i])


    print(search(0, 0, next, root, yoko, tate))
    

    print(0)
    print(dist[h-1][w-1])

            print(dist[-1][-1])
            print(0)
        


            print(score)
        print(0)

    print(solve(tate, yoko, (w, h)))


    print(i)


    print(bfs())



        print(F[H-1][W-1])


  print(i)

            print(score)
        print(0)



    print(d[h-1][w-1])


        print(ans if ans!=INF else 0)
                        
        
        

        print(check[h-1][w-1])


            print(0)
            print(distance[H - 1][W - 1])


        print(answer)

            print(d+1)
        print(0)






















    print(L[-2][-2])

        print(item)


        print(*args)

    print(*ans, sep='\n')

    print(res)


    print(res)


        print(dist[H*2-2][W*2-2])


    print(0)
    print(visited[d - 1][w - 1])
  
  
  
  
  

    print(i)

    print(*ans, sep='\n')

        print(ans if ans != -1 else 0)
    print(ans)


        print(ans)


            print(c+1)
        print(0)

    print(res)

        print(0)
        print(ans)


    print(res)

  print(i,j)

  print(i,j)

      print(ANS)

print(s, end='')

        print(rec[n], odd_rec[n])
        print(rec[n], odd_rec[n])
        print(rec[n], odd_rec[n])
        print(rec[n], odd_rec[n])
        print(rec[n], odd_rec[n])
    print(f'{dp1[value]} {dp2[value]}')


        print(a,b)
        print(a,b)
        print(a,b)

    print(main(n, sq, check, dp), main(n, ss, checks,dps))




print(main())




print(main())



        print(dp[num],odd_dp[num])
        print(dp[q], odd_ans[i])


        print(*i)

    print(table[q], ans[i])

    print(table[q], ans[i])

        print(dp[q], ans[i])
    print(table[q], ans[i])

    print(table[q], ans[i])

    print(table[q], ans[i])

    print(table[q], ans[i])

    print(table[q], ans[i])

    print(DP[q],ans[i])
        print(dp[q], ans[i])

        print(dp[n], dpo[n])


	print(rec[N],odd_rec[N])

    print(rec[n], odd_rec[n])
    print(L1[N],L2[N])

    print(ans1[i], dp[a])



    print(tetra_dp[q], tetra_odd_dp[q])

    print(dp[n], dp_odd[n])


        print(a, b)

        print(str(dp_all[a]) + " " + str(dp_mod[a]))


        print(dp[n], dp2[n])


        print(dp[q], dp_odd[q])


    print(cnt[n], cnt_odd[n])


    print(ans,DP2[N])
    

        print(DP[n], DPodd[n])

    print(cnt[n], cnt_odd[n])


    print(num[N], num_odd[N])

        print(a,b)
        print(a,b)
        print(a,b)
        print(a,b)
        print(a,b)
        print(a,b)
        print(a,b)
        print(dp1[n], dp2[n])


        print(a,b)
        print(dp[n], dp_odd[n])


        print(a,b)
        print(dp[S], dp_odd[S])


        print(a, b)

        print(dp[N], odd_dp[N])

        print(*ans)


        print(a,b)


    print(dpm1[i],dpm2[i])
        


  print(a[N], b[N])


    print("\n".join(ans))


        print(dp[n], odd_dp[n])

    print(dp1[t],dp2[t])

    print(dp[N], dp_odd[N])


        print(dp[N], odd_dp[N])


        print(ans1, ans2)

        print("{} {}".format(dp[x],dpo[x]))

        print(dp[x], dp2[x])

        print(dp[n], odd_dp[n])

      print('UNSTABLE')
  
  print('STABLE')


      print("UNSTABLE")
    print("STABLE")


    print(ans)
    print(dfs(0,s,l,v,dic))

    print(ans)
    print("{:.3f}".format(round(ans,3)))

            print(dx)
    print("unreachable")
    print(dp[0][n])
    print(len(ans))
            print(i)
            print(i)
            print(i)
    print(ans)
            print("UNSTABLE")
        print("STABLE")




print(main())



print(s, end='')


print(s, end='')

        print('NO')
        print(spell)



print(main())


    print('NO')
        print('NO')
  
  print(ans)
  
        print("NO")
                    print("NO")
    print(ans)



    print(an)


    print(r-l+1)

        print(ans)

		print(a-bisect_left(prime, n+1, 0, a)+1)


            print(1)
            print(q - p)




print(main())



    print(sum(primes[N+1:2*N+1]))


        print(sum(p[n+1: n*2+1]))


    print(cumsum[2 * n + 1] - cumsum[n + 1])

    print(count[n * 2] - count[n])


  print(sum(p[n+1:2*n+1]))

    print(ans)

    print(isprime[2 * n] - isprime[n])

    print(prinum[2 * n] - prinum[n])

    print(sum_prime[n * 2] - sum_prime[n])


    print(bisect_right(Primes, 2 * n) - bisect_left(Primes, n + 1))


        print(sum(1 for p in ps[n + 1:2 * n + 1] if p))

    print(ans)






    print(flag[n+1:2*n+1].count(True))

    print(sum(p[n+1:2*n+1]))

    print(prime[n + 1 : n * 2 + 1].count(True))

            print(sum(table[n + 1: 2 * n + 1]))

    print(bisect_right(prime, 2 * n) - bisect_right(prime, n))

        print(e[n+1:2*n+1].count(True))

	print(ruisekiwa[2*n]-ruisekiwa[n])
    print(y[n + 1 : n * 2 + 1].count(True))

	print(p[n+1:n*2+1].count(True))

    print(ans)


        print(count)
    print(len([v for v in S[n+1:n*2+1] if v == 1]))

    print(bisect.bisect_left(prime,2*n+1)-bisect.bisect_left(prime,n+1))

        print(cnt[2 * now] - cnt[now])


        print(ans)


        print(1)
        print(bisect.bisect_left(primes_lst, 2 * n) - bisect.bisect_right(primes_lst, n))

    print(sum(1 for i in range(n+1, 2*n+1) if primes[i]))

    print(sum(1 for i in range(n+1, 2*n+1) if primes[i]))

  print(ans)


    print(ans)


    print(cnt)

    print(ans)

    print(PrimeNum[N*2+1]-PrimeNum[N+1])


    print(ans)

                
        print(len(p))
        

    print(i)

    print(sum([1 if primeTable[i] == True else 0 for i in range(n+1,2*n+1)]))

    print(ans)

        print(ans)

  print(cnt)

    print(a)

    print(i)

    print(tmp_isPrime.count(True))

    print(ans_1-ans_2)

    print(len(primes(n2))-len(primes(n)))


    print(ans)
    

    print(len(nums))

   print(c)

       


    print(sum(e[n+1:2*n+1]))


    print(sum(2*target>=x for x in prime_list) - sum(target>=x for x in prime_list))
    


    print(cnt)
    print(prime(n,2*n))
        
        

    print(ans)
    
    print(amount_sosu(n, n*2))


        print( prime_count)
        
            
   
            
      
    


    print(len(a))

        print(count)
    print(i)

    print(cnt)


        print(len(l))


    print(ans)

    print(ans)


    print(count)

    print(a)

    print(c)

    print(ans)


                print("no")
                print("no")
                print("no")
        print("yes")
        print("no")



    print("yes" if solve(s) else "no")


                    print('no')
        print('no')
        print('yes')


        print("no")
        print("no")
      print("yes")
      print("no")


    print(ans)
    

 
print('\n'.join(map(is_balanced, lines)))


        print('no')
            print(j)

    print("no" if s else "yes")

        print('no')
        print('yes')

        print(is_balanced(s))

    print('yes' if len(s)==0 else 'no')

            print("yes")
            print("no")

    print(['yes','no'][bool(s)])

                    print('no')
                    print('no')
                print('yes')
                print('no')
                


print(main())



    print("yes")
    print("no")

print('\n'.join(ans))
        
            

            print('no')
            print('no')
            print('yes')
            


                print("no")
                print("no")
        print("yes" if not r else "no")

        print('yes')
        print('no')

		print('no')
		print('yes')

            print('yes')
            print('no')

    print('yes' if ok(S) else 'no')

                print("no")
                print("no")
            print("yes")
            print("no")

    print(["no","yes"][st==""])

        print("yes")
        print("no")
        
            

    print('yes' if check(s) else 'no')
            


        print("yes")
        print("no")

        print("yes")
        print("no")

        print("no")
        print("yes")

                print("no")
                print("no")
                print("no")
                print("no")
            print("no")
            print("yes")
        



                print('no')
                print('yes')
                print('no')
        print('no')
        

    print("no")
    print(ans)


        print("yes")
        print("no")

        print("yes" if solve(now) else "no")


                print("no")
                print("no")
                print("no")
                print("no")
        print("yes")
        print("no")



        print("yes")
        print("no")


    print('yes') if balance else print('no')
        print("no")
        print("yes")


        print(result)

        print("yes")
        print("no")

        print("yes")
        print("no")

        print("yes")
        print("no")

    print('yes' if flg and len(lst) == 0 else 'no')

            print("yes")
            print("no")
        print("no")

    print(i)

        print('yes')
        print('no')


        print("no")
        print("yes")

        print("no")
        print("yes")

        print("yes")
        print("no")


    print( "yes" if is_valid else "no" )


        print('no')
        print('yes')



                print('no')
                print('no')
                print('no')
                print('no')
            print('no')
            print('yes')
            print('no')
    print('yes' if yes else 'no')



  
  print("yes") if ans and len(q) == 0 else print("no")

    print("yes" if len(str) == 0 else "no")
            print("yes")
            print("no")

    print("yes")
    print("no")

        print("yes")
        print("no")


    print("yes")
    print("no")

            print("no")
            print("yes")
            print("no")


            print("yes")
            print("no")
        print("no")

    print(ans)

    print(ans)


    print('yes' if ans else 'no')


                print("no")
                print("no")
                print("no")
                print("no")
            print("yes")
            print("no")


        print("yes")
        print("no")

        print("yes")
        print('yes')
        print('no')





        print("yes")
        print("no")



    print(i)
    print(i)
    print(time()-start)
    print(ANS)
    print(search(5, init_color, c, init_pos, mp))
    print(_max)



print(main())


    print(ans)


    print(ans)


    
    print(dfs(0, P))

                print(j,end = "")
                print(str(d[j])+j,end = "")
    print()
    print(ans)
            print(j)
            print(a//2,n)
    print(dp[m],dp_2[m])
    print(c[0])
    print(parse_expr(s,0)[0])
    print(ans)
    print(ans)
    print(ans)


    print(i)
    print(i)

    print(time()-start)
    print(ANS)



print(main())


    print(i,j)
    print(i,j)
    print(time()-start)
    print(ANS)
    print(cnt, safe)


print(main())


    print(*dp[(0, w - 1, 0, h - 1)])



print(main())


    
    print(ans)

    print(ans)

    print(196470-r)

    print(ans - tyear)

    print(passed(1000,1,1) - passed(y,m,d))

    print(196470 - ans)
    

    print(i)

    print(196470 - b + 1)


    print(int(ans1-ans2))

    print(M-f(y,m,d))


    print(196470-c)
    print(196471 - ((y - 1) * 195 + (y - 1) // 3 * 5 + 20 * (m - 1) - min(1, y % 3) * ((m - 1) // 2) + d))


        print(ans)


	print(get_days(yc,mc,dc))

	print(comp)
    print(al - f(y, m, d))

	print(ans)


    print(i) 
            

    print(total)

    print(196471-y*195-y//3*5-m*20+(m//2 if y%3!=2 else 0)-d)
        print(i)
    print(birth(Y, M, D))

        print(ans)



    print(196471 - ((y - 1) * 195 + (y - 1) // 3 * 5 + 20 * (m - 1) - min(1, y % 3) * ((m - 1) // 2) + d))

        
    print(ans)

    
    print(ans + 1)   # 答えを出力(記念日当日の分として1を足す必要がある)

        print(ans)


    print(days(1000,1,1) - days(y,m,d))

    print(gday-sday)

    print(days)
    
    
        print(elapsed_days(y, m, d))


	print(196471-y*195-y//3*5-m*20+(m//2 if y%3!=2 else 0)-d)

        print(day(1000,1,1) - day(y,m,d))

    print(days)

    print(196470 - day(Y,M,D))

    print(196471-(y//3*590+y%3*195+(m*20 if y%3==2 else m//2*39+m%2*20)+d))

    print(196470-c)

	print(196666-ans-d)


            print(daycount)
                print(daycount)
                print(daycount)
                

  print(days)

    print(196471 - tmp)


    print(ans)

    print(ans)


    print(ans)


    print(str(get_no_days(d)))




    print(mx - date(y, m, d))

    print(196471-n)

    print(ans+1)

    print(196471 - answer)

    print(date2num(1000,1,1) - date2num(y,m,d))

    print(i)


    print(ans)

    print(ans+1)

    print(tmp - cnt)


    print(res)

    print(days(1000, 1, 1) - days(y, m, d))


    print(ans)

  print(day(1000,1,1)-day(y,m,d))

        print(count)

    print(ans)



print(main())



    print(ans)


    print(diff)

    print(last - date[y-1][m-1][d-1])


        print(duration)



    print(ans)

    print(D[1000][1][1] - D[y][m][d])
    


            




    print(D[(1000,1,1)]-D[(y,m,d)])


        print(date_count)

  
  print(day)

    print(*an)


            print(str(idx) + " " + str(bigger - smaller) + " " + str(len(tmp) - idx))
            print(j, ai, (i+1)-j)
                print(made[a], a, i - made[a])
      print(s[a_next], a_next, i-s[a_next])
    print(i,int(a),j-i)


    print(j, n, i - j + 1)

            print(dic[a],int(a),i-dic[a])
  print(a.index(b), b, len(a) - a.index(b))

            print(mem[a], a, cnt - mem[a])
    print(nl.index(ni),ni,ai-nl.index(ni))

    print(j, a, i - j)

            print(j, int(ai), i-j)
            print(j, a[-1], len(a)-1-j)
                print(i, a, j-i)
            print(d[a], a, i-d[a])
                print(j, a, len(A) - j)
            print(Y[t],t,idx+1-Y[t])
    print(a.index(b),b,len(a)-a.index(b))

            print(d[next_n], next_n, cycle - d[next_n])
            print(" ".join(map(str, [a.index(new_a), new_a, len(a) - a.index(new_a)])))
            print(j, A, i - j)
            print(dic[mx - mn], mx - mn, i - dic[mx - mn])
    print(j, a[i], i - j)

    print(ind, a, len(se) - ind)

            print(dic[A], A, i - dic[A])
                    print(j, x, i - j)
            print('%d %d %d' % (j, int(a), len(a_lst) - j))
    print(a_set[a],a,i-a_set[a])

           print(j, n, i-j+1)
    print(a.index(b),b,len(a)-a.index(b))

            print('{0} {1} {2}'.format(j,ai,i-j))
            print(nums.index(a), a, cnt - nums.index(a))
            print(i ,a_ ,ans - i)
    print(count.index(count[-1]) ,end=" ")#Ajのjの値を出力(スペース開けて改行しない)
    print(int(count[-1]) ,end=" ")#Aiの値を出力(スペース開けて改行しない)
    print(" ".join(i))

            print("{} {} {}".format(c.index(a), a, i - c.index(a) + 1))
            print("0 0 1")
                print(j, int(nextt), (i + 1) - j)
                print("{} {} {}".format(j,a,i-j))
    print(ans)

                    print(j, hoge, (len(A)-j))
    print(index, a, j-index)

        print(i, a, cnt-i)
        
    print(*main())


    print(s[a], a, ans - s[a])

            print(i,sa,c-i)
        print(*ans)


            print(nl.index(a),a,i-nl.index(a)+1)
    print(index,ans,len(box)-index)

            print(idx, int(tmp), i+ 1 - idx)
    print(loop_s, res, len(L) - loop_s)


            print("{0} {1} {2}".format(idx, an, len(list_a)-idx))


print(main())



	print('{} {} {}'.format(j, a, len(arr)-j))

    print(lst[num], num, i-lst[num])

    print(j, ai, i-j)

            print("{} {} {}".format(a.index(an),int(an),count-a.index(an)))
            print(checked[a],a,i-checked[a])
	print(*[ list(top.values()).count(i) for i in range(1, 7)])


    print(*counter[1:])





print(main())


    print(*count[1:])


    print(*res[:-1])


        print(X[size//2:], X[:size//2])

    print(*cnt[1:])


        print(" ".join(list(map(str, grid.countVals()))))

    print(*ans[1:])
                
        
        
        

    print(" ".join(cnt))


            print('Error:Constructor\'s Argument is missing.',file=sys.stderr)
    print(" ".join(map(str,ans)))

  print(*[ans[i] for i in range(1, 7)])

        print(*count_top())


                print(j,end = "")
                print(str(d[j])+j,end = "")
    print()
    print(ans)
            print(j)
            print(a//2,n)
    print(dp[m],dp_2[m])
    print(c[0])
    print(parse_expr(s,0)[0])
    print(ans)
    print(ans)
    print(ans)
        print(d[i],end = " ")
    print(d[6])


    print(x)
    print(x)

    print(i)
    print(i)

  print(ans)

                print(u_fare)
            print(-1)

        print(-1)
            print(score)
    print(-1)
            print(prob_cost)
        print(-1)


        print(-1)
        print(ans)

        print(-1)
        print(dist[s-1][g-1])




print(main())


        
        print(dist[g_idx])


        print(solve(ps))


    print(i)







print(main())


    print(dijkstra(m,v))

  print('{:.10f}'.format(x),'{:.10f}'.format(y))

  print('{:.10f}'.format(x))

    print('\n'.join(map(str,res)))
        print(ans)


                print(y, x)
                print(dp[i][0][0], dp[i][0][1])
    print(*an[1:])


print('\n'.join(map(str, res)))


    print(ha, wa)

	print(poly[a+1][1],poly[a+1][2])

    print(hg,wg)

    print(h,w)

    print(gt_rectangle[1], gt_rectangle[2])

    print(r[1],r[2])

    print(ax,ay)

    print(i, j)

    print(li[index+1][1], li[index+1][2])

    print(n_h, n_w)

    print(*lst[ind + 1][1:])

    print(ax,ay)

    print(*l[base+1][1:])

    print(ans_h, ans_w)


    print(s[1],s[2])

    print(a,b)


    print(ans[1], ans[2])


    print(a,b)



    print(ans[1], ans[2])

    print(*lst[lst.index((h, w)) + 1])



print(main())



                print(h, s.index(d2 - h ** 2) + 1)
            print(li[i+1][1],li[i+1][2])
            print(*data[i+1][0][::-1])

        print(ansx, ansy)

				print(lst[i+1][1],lst[i+1][2])
    print('{0} {1}'.format(ans[1], ans[2]))

                print(cheat[i][1], cheat[i][2])
            print(cheat[i][1], cheat[i][2])
    print("{} {}".format(minh,minw))
        

    print('{0} {1}'.format(ans[1], ans[2]))

    print(H,W)


        print(ok[i + 1][0], ok[i + 1][1])
    print(ok2[0][0], ok2[0][1])


			print('{} {}'.format(t[i].h, t[i].w))
            print(H,W)

    print(*sorted(ans)[0][1:])

    print(*ans)

    print(ans)

    print(min_size[0], min_size[1])


    print(ans)

    print(a,b)
    print(a,b)

        print(ans[0],ans[1])

                print(nh, nw)
        print(ans_h, ans_w)

    print(*idx)



        
        print(minh, minw)


    print(tmp_h,tmp_w)



  print(nsq[1], nsq[0])

    print(best_i, best_j)
            


                print(str(a_list[i][1])+" "+str(a_list[i][2]))
                print(str(a_list[i][1]) + " " + str(a_list[i][2]))

    print(ans_h, ans_w)


    print(ah, aw)


    print(ansh,answ)

            
            

    print(ah, aw)

    print(str(ret[0])+" "+str(ret[1]))

    print("".join(ans)[1:])


                print("=", end="")
                print(",", end="")


        print(item, end="")
    print()


      print(all_times[i][2], end = "=")
      print(all_times[i][2], end = ",")
  print(all_times[-1][2])

            print(f"{team_result[i][2]+1}")
            print(f"{team_result[i][2]+1}=", end="")
            print(f"{team_result[i][2]+1},", end="")
    print(','.join(ans))


            print(td1[2], end='=')
            print(td1[2], end=',')
    print(result[-1][2])

        print(final_output)


            print(td1[2], end='=')
            print(td1[2], end=',')
    print(result[-2][2])

        
    print("".join(ans))

        


        print(result[0][0], end="")
                print("={}".format(result[i][0]), end="")
                print(",{}".format(result[i][0]), end="")
        print()

        print(results[0][0]+1, end="")
                print("=",end="")
                print(",",end="")
            print(results[i][0]+1,end="")
        print()




            print(team_li[i][2]+1,end='')
                print(f'={team_li[i][2]+1}',end='')
                print(f',{team_li[i][2]+1}',end='')
            print()



    print(st)
    


    print(ans)

    print(juni(tp))

        print(ti, end = "")
            print(",", end = "")
            print("=", end = "")
    print(data[t - 1][2])

        print(teamdata[i][2],end=('\n' if i==t-1 else ',' if teamdata[i][0]>teamdata[i+1][0] or teamdata[i][1]<teamdata[i+1][1] else '='))


    print(st)
    

    print(ans)

    print(ans)


    print(team[0][2],end="")

                print("=",team[j][2],sep="",end="")
                print(",",team[j][2],sep="",end="")
            print(",",team[j][2],sep="",end="")
        
    
    print()



            print(end="=")
            print(end=",")
        print(i, end="")
    print()
    

        print(-res[t][-1]+1, end="")
            print("=", end="")
            print(",", end="")
    print(-res[-1][-1]+1)

            print('=' if (s == before_s and t == before_t) else ',', end='')
        print(n, end='')
    print('')

    print(ans)



    print(str(listt[0][0]), end = "")
            print("=" + str(listt[i][0]), end = "")
    print("")
  print("".join(ans))

    print(ans)

    
    print(aaaa[:-1])

    print(fans)

            print(-r[2] + 1, end='=')
            print(-r[2] + 1, end=',')
    print(-res[-1][2] + 1)

                print('=',end="")
                print(',',end="")
        print(t[0],end="")
    print()

    print(output[:-1])

    print(output[:-1])

    print(ans)



print(main())



    print(",".join(l))


        print(i[j][0], end = "")
            print(",", end = "")
    print()



        print(sx)


    print(ans)


                print(j)
                print(j,end = ",")
                print(j,end="=")
        print(ans)



    print(ans)


    
    print(",".join(ans))

                print('=', end='')
                print(',', end='')
        print(ranking[i], end='')
    print()



        print(teams[0].num, end='')
                print("={}".format(team.num), end='')
                print(",{}".format(team.num), end='')
        print()

            print(tmp[0][0], end="")
                    print("=", end="")
                    print(",", end="")
                print(tmp[j][0], end="")
    print()


    print(ans)


        print(calculate(tup))

            print(solve(input()))
    print(rec(s, l)[0])

    print(dataset[1:-1])

    print(dataset[1:-1])

	print(rec())




  print(nums[1][0])

        print(solve(input()))
    print(cal(eval(input().replace("][", "],["))))

  print(cost(s))


                print(j,end = "")
                print(str(d[j])+j,end = "")
    print()
    print(ans)
            print(j)
            print(a//2,n)
    print(dp[m],dp_2[m])
    print(c[0])
    print(parse_expr(s,0)[0])


  print(f())



print(main())



    print(elc(k-1))
    print(cal(eval(input().replace("][", "],["))))

    print(dfs(a))


    print(stack[0])


    print(stack[0])

    print(lst[0])
        
    
        print(root.win())

    print(f(S))

    print(dfs(s))
    

    print(solve(L))



    print(stacks[0][0])


  print(expr(Source(input())))


    print(s[0])

    print(i)

    print(solve(S))


    print(f(calculate_list))

        print(s[1:-1])



    print(ans[0][0])

    print(parser(0, len(S) - 1))

    print(x[3:-1])


        
        print(ans1, ans2)
        




print(main())


    print(*solve(m, n))

    print(*ans)
    

    print(cnt, end)

    print(A, B)

        print(0,0)
        print(ma, k)


    print(r[0], r[1])

            print(str(arr[i][j]).ljust(4), end=" ")
        print()


    print("\n".join(" ".join(map(str, v)) for v in matrix))



    print(ma, ama)


  
  
  print('{:.08f}'.format(ok))

    print(search(b)**0.5)



print(main())


    print(ans)


        print(s_max)

        print(max_num)



    
    print(ans)

    print(max_price)


    print(ans)
            
    print(max_result)

    print(X)

    print(mx)

    print(ans)
    print(max(a))

        print(t)

    print(max(a))

    print(max)

    print(ans)


  print(max(map(sum,m)))

    print(max(LIST))

    print(maximum)

    print(solve())


    print(ans)
    print(answer[i])


    print(maximum)

    print(ans)


    print(max(result_set))

    print(solve(x,y,s))

  print(solve(x,y,s))


    print(answer)


  print(solve(X,Y,S)) 

     
 print(count)

    print(ans)

    print(max(t))


    print(best)
        
        
        
        



print(main())



    print(solve(x, y, s))



  print(solve(x,y,s))
 
  print(ans)


    
    print(solve(X,Y,S))

    print(solve(X,Y,S))

    print(solve(X,Y,S))

	print(ans)


	print(ans)

	print(ans)

    print(cost)

  print(ans)

    print(a)   

        print(ans)



        print(p)

	print(ans)

  print(answer)

    print(ans)

  print(max(kumi))

    print(x)

        print(tans)

    print(max)

    print(solve(x, y, s))

	







print(*ans,sep="\n")

        print(ans)
    print(calculate_score(board))




    print(ans)


    print(an)


    print(i)

    print(score) 


  print(CDP(h,5,3))


print('\n'.join(map(str, answers)))


    print(ans)

    print(score)


        print(score)

    
        print(new_score)

    print(calc(h,5,3))


	print(s)

                print(ans)
    
    print(sm)
    print(res)
    print(count(area))

            print(solve())


    
    print(ans)




            print(count)

    print(ans)


        print(init_points - pres_points)



    print(score)

    print(score)

        print(ans)

    print("\n".join(map(str, ans)))



            print(score)

    print(puyo(A))
      
    
    
  
  

              
  print(score)

    print(score)


    print(ans)

    print(main(h))


            print(ans)
            print(Ans)

    print(s)


    print(ans)


    print(score)


    print(ans)

  print(ans)


        print(*board[y])
    print()


            print(total_score)
            print(stones[i])
        print()
    print(ans)


            print(ans)
        print(ans)

    print(s)




    print(score)


      print(pt)
    print(ans)

    print(score)

    print(score)

    print(ans)


    print(ans)

    print(s.ans)


        
        print(ans)


            
            print(cnt-a)
        print(score)

    print(score)


    
    print(ans)

  
    print(score)

    print(res)



    print(ans)


    print(ans)

    print(ans)

        print(ans)



        print(score)


    print(ans)


    print(ans)

    print(ans)


    print(p)

    print(p)
    
                

    print(solve(board))


    print(ans)

    print(ans)

    print(solve(H, S))

            print(ans)
        print(ans)


  
  print(calc(a,h))

    print(res)        
        
    



print(main())


    print("{:.12f}".format(Y + R))

        print("{0:.4f}".format(ans))


    print(min(buildings[i] - sqrt(R * R - (i - geta + (i < geta)) * (i - geta + (i < geta))) + R for i in range(-R + geta, R + geta)))

    print(ans)
    print(0 if ans <= 0 else ans)


        print(ans)


        print(t)



    print(min(t))
  print(ans)

        print(sum(a[1:-1])//(n-2))
            
                                print(ans+1)
            print(0)
        print(ans)
    print(ans)
    print(ans)

    print("{:.12f}".format(ans))

    print(min(t))

    print(ans)
    



print(main())



            print(ans)
        print(ans)

    print(ans)


    print(r_list[20])


        print("{:.6f}".format(max(0, ans)))

        print(ans)


    print(ans)


    print(a)


    print(i)




print(main())


    print(len(cands))
            print(s)
            print(s)
            print(s)
            

    print(len(cands))
            print(s)
            print(s)
            print(s)
            
            
  print(N)
      print(i)
      print(i)

    print(len(ans))
            print(*map(lambda x: chr(x+97), ans_), sep="")
            print(*map(lambda x: chr(x+97), ans_), sep="")
            print(*map(lambda x: chr(x+97), ans_), sep="")


    print(ans - dmax)
    print(ans)
  print(ans+3*ans2-dmax)

    print(ans - dia)

        print(tot)
    
    print(ans + tot - max(dist))

        print(ans)

    print(ans-m)




print(main())



    print(ans - r)

    print(sum(d)*3-2*ans-b)



    
    print(ans)

    
    


            

    print(sum(primes[n-p] for p in prime_values[:eov]))


    print(sum(primes[n-p] for p in prime_values[:eov]))



    print(sum(primes[n-p] for p in prime_values[:eov]))

    print(sum(primes[n-p] for p in prime_values[:eov]))

    print(ans)



   print(c)


   print(c)

        print(s)

        print(s)

        print(a)

        print(p)

        print(a)

    
    print(main(n))

    
    print(main(n))

    print(c)

    print(c)

            print(count)
    print(Count)
    
  print(cnt)

    print(c)

    print(s)

    print(count)


  print(cnt)

                    
        print(cnt)
        


    print(b)
  print(c)

  print(c)

    print(c)
            

    print(c-int(d/2))

    print(ans)

	print(cno, "{:d}.{:02d}".format(ans//100, ans%100))


            print("%d %.2f" % (c, calc_area(area)))

    print(f"{c}/{d} {a}/{b}")



    print("{}/{} {}/{}".format(k * mxkk + (mxbb + 1), mxkk, k * mikk + mibb, mikk))
    
    print(ans)


    print(dp[n])


        print(payway(n, coins))
    print(dp[n])

    print(dp[n])

    print(dp[n])
    print(dice[1])

    print(*solve())
            print("True" if test(input()) else "False")
        print()
        

    print(-1 if ans == (1 << 30) else ans)


    print(F[f])



        print(max(ans))


    print(*ans, sep='\n')


    print(ans)


    print(i)


    print(max(a ** 3, tetrahedral(b), c))
        print(ans)

    print(ans)


    print("{:.6f}".format(mx))


        print(result)



    print(format(dis_max, ".5f"))


    print(round(tmpmax ** 0.5, 5))



    print(*ans)


                print(p, q)
    print(*ANS)




print(main())



    
    print(ans[0],ans[1])

    print(*ans[1:])
    print(ans[1], ans[2])


        print(*ans_pair[max(ans)], end="\n")


    print(prime_table[mx[1]],prime_table[mx[2]])




    print(ans_p,ans_q)

    
    print(p_ans, q_ans)
    print(p,q)
            

    print("{0} {1}".format(p, q))


    print(*i)

    print(ans_p, ans_q)

      print('yes')
      print('no')
  print('.')


        print(ans)


    print(".")


        
        print(maxPoints)
    



print(main())


        print(i+1, *map(lambda x: x+1, vs))


        print(i,end='')
            print('',e,end='')
        print()






            





        print(i,*G[i])      



print(main())


        print("error")
        print("rejected")
        print(a,*ans)

        print('rejected')
        print('error')
        print(m, *parts, sep=' ')


        print("error")
        print(ans)
        print(max_, *ans)



print(main())



        print(t,n)
        print("error")
        print("rejected")
    print(*s)
        print("no")
        print("no")
        print(*ans, sep="\n")
    print("end")
            
                
        
        
    
    
    

        print('no')
            print('no')
            print(divine + 1)
        print('end')

            print("no")
        print(*ans, sep="\n")
    print("end")
        print("no")
            print(x)
        print("end")

    print('no')
    print(i+1)
  print('end')
    

        print('no')
            print('no')
            print('\n'.join(map(str,ans)))
        print('end')
        print('no')


        print('no')
            print('no')
            print('\n'.join(map(str,ans)))
        print('end')
        print('no')


    print(''.join(S))


    print(s)

  print(message)      

    print(mes)


    print(mes)

        print(t)



    print("".join(ans))



        
        print(msg)

    print(s)

    print(*ans, sep="\n")

    print(t)
    print(func_by_J(t))
    print(func_by_C(t))
    print(func_by_E(t))
    print(func_by_A(t))
    print(func_by_P(t))
    print(func_by_M(t))
        print(t)


    print(*message, sep='')
            

    print(t)
    

    print(message)

    print(message)

        print(*t,sep = "")


print(main())



    print(C[n])




print(main())



    print(sum(map(lambda x:x[N],dp)))

    print(sum(a[n]))

    print(ans)


        print(count)

    print(sum(dp[n]))
            



print(main())


        print("1")
        print("0")

        print(0)
            print(1)
        print(0)

        



  print(i)
      

        print("UNKNOWN")
        print(stack[0])
        
            

    print(cal(molcule))

    print(solve(s))
    print(ans if f else 'UNKNOWN')



        print(ans)
        print(main(n))

        print("UNKNOWN" if c is None else c)
        print(eval(s))
        print("UNKNOWN")


        print(eval(s))
        print("UNKNOWN")
    

            print(molecule(Token(seq)))
            print('UNKNOWN')





print(main())




print(main())


    print(data_list[-1][-1])


    print(-mcf.run(0, V - 1, 2, 10 ** 9))

    print(max(max(dpi) for dpi in dp))

                print("no")
                        print("yes")
            print("no")
        
    print(ans)
        print(*ans[l.index(min(l))])


print(main())



    print(*ans)

            print(winner + ' ' + str(i+1))
        print('Draw')

                print('Black' if turn else 'White',t+1)
        print('Draw')



    print(ans)



print(main())



                print("Black", i+1)
                print("White", i+1)
        print("Draw")



        
        
        
    print(hex(ans)[2:])
        



print(main())



            print('not found')
            print('yes')
            print('no')

                print("yes")
                print("no")
            print("not found")

            print('not found')
            print('yes')
            print('no')

        print(dfs(0, [0]*cur, 0))
  print(len(ans))
  print(*ans,sep='')


        print(count)


        
        print(ans)

    print(ans)

    print(*res, sep = "\n")

    print(count)

    print(count)

    print(i)

    print(ans)


    print(ans)


    print(*ans, sep='\n')


    print(count)


        print(countConsecutivePrimes(num, primes))

    print(cnt)

        

    print(ans)
        print(D[V])
    print(b[n])

    print(ans)


    print(count)

    print(c)

    
    print('\n'.join(map(str, ans)))

            print(0)
        
        print(cnt)

            print(0)

        print(cnt)

        print(0)
    print(ans)


    print(solve())


        
        print(solve(f_i, x, y))

            print(ans)
            print(-1)

        
        print(dp[-1])

        print(' '.join(map(str, degree)))

        
        print(ans)

            print(right - left)
        
        print(ans)

        print(c)

    print(len(observed))



    print(len([star for star in stars if star[0]]))


    print(len(list(filter(lambda x:x, is_watch_star))))



    print(count)

    print(dp[k][n])

    print(dp[N][K])

    print(dp[len(prime_list)][k][n])
    print(number_list[N])

	print((r+m)%n+1)

    print(*ans, sep='\n')


    print(i)

    print(l[0])


    print(stones[0])

    print(li[0])

            print(list[0])

    print("%d"%table[0])


    print(lst[0] + 1)

    print(stone[0])
    

    
    print(li[0])

    print(L[0])




print(main())



    print(num[0]+1)

    

        print(0)
        print(Prime[idx] - Prime[idx - 1])


    
    print('\n'.join(map(str, answers)))



print(main())




  print(solve(_n))

    print(r - l)

        print(0)
        print(0)
    print(tmp2 - tmp1)

        print(0)
    print(ans)

        print(0)
    print(j-i)

        print(0)
    print(b-a)

    print(cnt)
    
        

        print(0)
            print(0)
            print(prime_list[idx] - prime_list[idx - 1])

        print(0)
        print(primes[l] - primes[l-1])

        print(0)
        print(i-j)

        print(0)
    print(after-before)

    print(nu - nl)

            print(length_of_gap_containing(n))


        print(0)
        print(P[r]-P[r-1])
        print(0)
        print(r - l)



        print(0)
        print(prime[i] - prime[i-1])
    print(S[n][1] - S[n][0])
    print(0)
    print(r - l)


        print(getPrimeGap(num, primes))

        print(*data)
        print(*data,sep='\n')
        print(0)
        print(count)

            print(p[i+1]-p[i])
            print(0)
        print(f'{Board[N]:.6f}')


        
        print('{:.6f}'.format(ans))



print(main())



    print('{:.6f}'.format(ans))


    print("{:9f}".format(ans))


	print('{:.6f}'.format(sum([memo[t][N] for t in range(T+1)])))



    print('{:7f}'.format(round(board[N],6)))


    print("{0:.6f}".format(ans))


    print("{:.6f}".format(i))



    
    print("{:.10f}".format(ans))
                    


    print(format(sum(dp[-1]), "0.6f"))

    print(format(ans, '.6f'))

    print('{0:.6f}'.format(cntp))

    print('{:.6f}'.format(sum([dp[i][n] for i in range(turn+1)])))


    print('{:.6f}'.format(dp[0][0]))




print(main())


    print(ans)




    print(ans)
  print(ans)

        print(-1)
        print(ans)

                            print(s + step[next_pos])
                print(0)
                    print(step[p1][p2] - 1)
                print(0)
                    print(step[p1][p2][p3] - 1)
      print(i)

  print(0)


            print(cnt)
        print(0)



        print(errLine)

                print(i)
                print(i)
                print(i)
        print(0)

            print(0)
                print(i)
  print(ans)



print(main())


  print(i)

    print(time()-start)
    print(ANS)
    print(ans)


    print(ans / maxn / (bands-1) + 0.01)

    print(ans)

    print(ans)


    print(ans)

        print(1.01)
    print(ans)
    

    print(ans+0.01)

  print(ans)

    print(answer)


    print(a + 0.01)

    print(ans)

    print(ans+0.01)

  print(ans)



print(main())



    print(ans)



print(main())



    print(f"{ans:.10f}")


    print("%s %s" % (convert(mi), convert(ma)))



print(main())


  print(i)

    print(time.time()-start)
    print(ANS)


print(main())


  print(s)

    print(ans)


    print(ans)


  
  print(ans)

    print(ans)

    print(ans)        

    print(ans)



    print(ans)

        
        print(sum(k * v for k, v in h_d.items()))

    print(sum(h1)+sum(h2)-sum(f))
    print(ans)

    print(i)

    print(ans)



print(main())



        print(-1)
        print(ans)



print(main())



    print(res)
            print(cost)
    print(-1)
            print(s[1])
        print(-1)
                

            print(-1)
            print(minCount)



print(main())


    print(ans)


            print('YES')
                print('NO')
                print('YES')
                
                print('NO')
                print('YES')
                
                print('NO')
                print('YES')
        
                print('NO')
                print('YES')
        
                print('NO')
                print('YES')
        
                print('NO')
                        print('NO')
                    print('YES')
        
                print('NO')
                        print('NO')
                    print('YES')
        
                    print('NO')
                        print('NO')
                                print('NO')
                        print('YES')
        


print(main())


      print('YES')
      print('YES')
          print('YES')
  
  
  print('NO')

        
        print(r1, r2, r3)


    print(o*q/p, o*p/q, p*q/o)


    print(R / (2 * (s - c)) * (s + f - R - e - d), end=" ")
    print(R / (2 * (s - b)) * (s + e - R - d - f), end=" ")
    print(R / (2 * (s - a)) * (s + d - R - e - f))


        
        print(r1, r2, r3)


    print(r2, r3, r1)

  print(X.r,Y.r,Z.r)      




  print('{:.10f}'.format(x),'{:.10f}'.format(y))

  print('{:.10f}'.format(x))



print(main())


  print(calc(list(range(m))))

        
        
    
    print(dfs(lst, 0))

    print(dp[0][0])

    print(answer)




print(main())


    print(len(ans_set))


    print(len(dic[first]))
    
    print(solve(dic, main_group))

            
    print(f(s))

    print(len(a))

    print(len(member))
	print(len(edited))



print(main())



    print(ans)

    print(len(ans))
        


  print(len(check(dic,index)))

    
    print(len(first_group_menbers))


  print(len(groups[g0]))
    
    print(len(dp[0]))


    print(len(firstgroup) - 1)

            print("NG", 1)
            print("OK", ans)
            print("NG", ans)


            print('NG',i+1)
        print('OK',min(dp[n])+b[n][0])


        print("NG 1")
                print("NG",i+1)
    print("OK",ans)


print(main())



            print("NG", i)
        print("OK", min(dp[-1]) + P[-1])
            
            

        print('OK',ans)
        print('NG',p+1)


    print(1)
    print(0)

    print(1 if x is not None else 0)
        print(0)
        print(1)


    print(*ans, sep='\n')


    print(ans)
  print(ans)

    print(ans)


print(main())




print(main())


    print(ans)
            print(i)
  print(ans)

        print(volume(Pxy, Pxz, X))

    print(ans)



        print(res)

     print('%.10f'%res)


    print(ans)




print(main())



    print(max(cnt))
    



print(main())



    print(ans)

        print(0)
        print(ans)

    print(ans*(len(ans)>1)or 0)

    print(sorted(answord,key=lambda x:(-x[0],x[1]))[0][1] if answord and sorted(answord,key=lambda x:(-x[0],x[1]))[0][0]>1 else 0 )







        print(0)
        print(x[0][1])


print(main())


    print(min(dp[m-1]))



print(main())


    print(L - omit)
  
  print(min(dp[-1]))
  


    print(min(d.values()))


    print(ans)


    print(min(dfs(1 << i, i) + len(S[i]) for i in range(n)))

    print(ans)

    print(parse(0, w, 0, n-1))

  print(ans)

                    print("C")
        
    print("P")



print(main())




        print("P" if count <= 4 else "C")


        print(i)
            print("P")
            print("C")
    print("CP"[cnt == 2])

        print("P")
        print("C")

        print("P")
        print("C")
        print('P')
        print('C')


    print('P' if c<5 else 'C')

    print(ans)


    print("P" if count == 8 else "C")

        print('P')
        print('C')

        print('P')
        print('C')



print(main())



        
            
    print(*ans)

    print(*[list(t)[0]if len(t)==1else-1for t in a])

    print(*ans)



print(main())



        print(*ans[0])

                        print("No")
                        print("No")
        print("Yes")
        print("No")
    print(ans)
            print(i[0],end = " ")
        print(mat[-1][0])
    print(ans)
            print(' ', end='')
        print(s[i][0], end='')
    print()


	print(*ans)

    print(*U)

            print(ng[0])
            print(0)
            print(i)
    print(cnts.index(max(cnts)))


    print(solve())



print(main())


    print(0)
  print(ans)

    
    print(*ans, sep='\n')
 
            print(diff if diff is not None else "UNKNOWN")

                print("UNKNOWN")
                print(ans)
                print(uf.dif(x, y))
                print("UNKNOWN")
                print(wuf.diff(int(info[i][1]), int(info[i][2])))
                print("UNKNOWN")
                    print(uf.diff(a - 1, b - 1))
                    print("UNKNOWN")


        print('UNKNOWN')
        print(ans)

                print(uf.diff(a,b))
                print(T.diff(u1,u2))
                print("UNKNOWN")
                
                
                

                print(wuf.diff(a, b))
                print("UNKNOWN")

                print("UNKNOWN")
                print(relative[b-1] - relative[a-1])

        print(*a, sep='\n')


                    print(uf.diff(a, b))
                    print("UNKNOWN")




print(main())


                print("UNKNOWN")
                print(ans)

            print('UNKNOWN')
        print(wb - wa)


                print(d if d != -INF else "UNKNOWN")

                print('UNKNOWN')
                print(ans)

                print('UNKNOWN')
            print(uf.weight_check(a, b))


                print('UNKNOWN')
                print(P[y][1]-P[x][1])

                print("UNKNOWN")
                print(Union.differ(a-1, b-1))



    print(rec(n, k, s))


print(*ans, sep='\n')



print(main())



    print(sum([1 if sum(t) == s else 0 for t in combinations(range(1,n+1),k)]))

    print(sum(1 for l in itertools.combinations(range(1, N+1), K) if sum(l) == S))

    print(sum([1 if sum(i) == s else 0 for i in itertools.combinations(range(1,n+1),k)]))


    print(rec(n, 0, k, s))

    print(ans)

  print(dp[n][k][s])

    print(cnt)

    print(ans)


  print(ans)  

    print(dp[N][K][S])
    print(sum(1 for l in list(c(range(1,n+1),k)) if sum(l)==s))

    print(ans)

    print(ans)
    print(a)

    print(sum(dp[-1][-1]))

    print(dfs(0, 0, 0))

    
    print(dfs(n, k, s, 0, 0, 0))

    print(t, ans)



print(main())



    print(ans, last)

  print(ans)



print(main())


    print(ans)
    print(ans)
    

    print(ans)


    print(R)

        print(ans(n,w,needles))


        print(m)

    print(m)

print(min(solve(0), solve(1)))


print(min(f(C), f(D)))



print(min(solve(0),solve(1)))


    print(solve(ans))
    print(solve(ans))
    print(min(solve(ans1), solve(ans2)))

    print(i)

  print(min(calc(bs,ls,i) for i in range(2)))



print(main())



    print('U')
    print('M')
    print('L')
    print('I')


print("ILMU"[r1+2*r2])

    print('U' if eval(formula) == val else 'L')
    print('M' if eval(formula) == val else 'I')

print('ILMU'[f])

    print("U")
    print("M")
    print("L")
    print("I")

    print("U")
    print("M")
    print("L")
    print("I")

    print('M')
    print('L')
    print('U')
    print('I')

  print("U")
  print("L")
  print("M")
  print("I")

    print("U")
    print("M")
    print("L")
    print("I")

    print('U')
    print('I')
  print('L')
  print('M')
  print('I')

print(e)

  print('U')
  print('M')
  print('L')
  print('I')

    print('I')
    print('M')
    print('L')
    print('U')



    print("U")
    print("M")
    print("L")
    print("I")


    print("U")
    print("M")
    print("L")
    print("I")

print("IMLU"[int(eval(s)==ans)+(int(x==ans)<<1)])

    print(ans[nu])    

    print("U")
    print("L")
    print("M")
    print("I")


            print("U")
            print("I")
            print("U")
            print("I")
        print("M")
        print("L")
        print("I")


print(main())



print(a*2+(N+1))

print(ans)


    print(res)


print(n + 1 + dup)

print(ans)


print(sum(i > 0 for i in imos) * 2 + n + 1)

    print(ans[nu])    

    
    print(ans+1)
        
            print("U")
            print("I")
            print("U")
            print("I")
        print("M")
        print("L")
        print("I")
    print(ans)
  print(sum(a))



print(main())



print(r)

print(math.sqrt(ans))

            print(q[0]//2,q[1]//2)
print(tot, cost)

print(*ans)
        
        
    







print(main())


        

print(ans1,ans2)



print(ans1, ans2)


print(cnt, ans)

  print(ans0,ans1)

  print(i)
        print(n)
        print(i)
        print(i)
        print(i)
print(ans)


    
print(id)

                print(k)
                print(k)
        print(i)
        print(i)


print(main())



    print(c)
        print(now)
        print(i)
print(solve(a,n))


    print(0)
        print(lst[i]+1)
print(lst[-1]+1)


print(ans)

            print(i)
        print(i)

print(i)

print(ma)

    
print(solve())


print(ans)

print("{:.07f}".format(ma-mi))

print(ans)


print(ans)



print(main())





print(main())


  print('IMPOSSIBLE')
  print(dist[0])

print(min(mins))


print(ans)

    print(ans)
  print('NONE')
      
print(''.join(front+back[::-1]))

        print("NONE")
    print("".join(SL))
    print("NONE")

print("".join(ans), end="")
print("".join(ans[::-1]))




print(main())



    print(i)




        print(v)
        print(i)


print(*ans, sep='\n')


print(*ans, sep = "\n")



print(*ans, sep="\n")


print(*ans,sep="\n")

    print(v)
        print(temp)

        print(i)



        print(l[i])
        print(i)

    print(x)

    print(i)
    print(i+1)


        print(head[i])

        print(i)

	print(b[i][1])

        print(i)


print(main())



print(ans)


print(ans)

print(ans)


print(ans)





print(main())



print(*ans)


print(" ".join(list(map(str, ans[1:]))))



print(*(r - l + 1 for l, r in zip(L, R)))




print(*[v_max[i] - v_min[i] + 1 for i in range(n)])

print(*[b[i]-c[i]+1 for i in range(n)])

    print(ans[i][1]-ans[i][0]+1,end = " ")


print(ans[-1][1]-ans[-1][0]+1)

print(ans)





print(main())


print(ans)

    print(0)

print(ans)


    print(0)

print(ans)

    print(0)
print(ans)

   print(0)

print(cnt)


print("\n".join(ans))

    print('Yes')
print(ans)


print(sum(dp_b[: l + 1]))


print(ans)


print(ans)

print(dfs(0, 1))

print(int(c))


print(sum(tableB))

print(ans)


    print(ans)


    print(solve(L, K))


        print(*value, sep=sep, end=end)



print(ans)

print(ans)


    
print(ans)



print(ans)

print(ans)


print(ans)

    print(ans)


print(main())


print(max(dfs(0, *P) for P in S))


print(max(dfs(0, *e) for e in s))

print(int(ans))
                        


    print(solve(M, A))


        print(*value, sep=sep, end=end)


print(max(ans))


    
print(dfs(0))


    print(ans)
    print(ans)
            print(i)
        print(ans)
    print(ans,max(s))
    print(sum(ans))
    print(count)



    print(max(1, (t + h[i] + offset[i]) // (h[i] + offset[i])))


print(math.ceil((t + 0.5) / h[0]))

        print(1)
            print(temp + 1)
            print(temp)
        
        print(math.ceil((delta_t + 0.5)/ h[i]))


    print(max((t-x-s)//y+2,1))

    print(min(max_, fin) + 1)
    print(max(ans,1))

print(dp[0])


            print("SAD")
            print("SOSO")
            print("HAPPY")
            print("SOSO")


print(*ans, sep='\n')


print(ans)


print("YES"*(calc(XY0, d0, l0)==calc(XY1, d1, l1))or"NO")


print(ans1, ans2)



print(s2, s1)


    print(ans)
            print(i)
        print(ans)
    print(ans,max(s))
    print(sum(ans))

print(pol1, pol2)
    


print(ans1, ans2)




print(policy1(P), policy2(P))

print(*map(check, Z), sep='')

    print("+")
        print("-")
        print("+") 
      print("-")
      print("+")
        print("-")
        print("+")
    print("-")
    print("+")     


        print("+")
        print("-")



    print("-" if t < s else "+")


    print(ans[i])

		print(ans)
        print('+')
        print('-')
    
    

        print('-+'[len(s0) <= len(s)])
        print('-+'[int(s0[p]) <= int(s[p])])
        print('-+'[a])
        print('-+'[s0[p] <= s[p]])


        print("+")
        print("-")
    

    print(compare(s))


                print('+')
                print('-')
            print('+')
            print('-')
                print('+')
                print('-')
            print('+')
            print('-')
            print('+')



                print('+')
                print('-')
            print('+')
            print('-')
                print('+')
                print('-')
            print('+')
            print('-')
            print('+')


print(*ans, sep="\n")

        



    print('-' if s[i] < s[0] else '+')


        print('-' if solve(inp(), A) < 0 else '+')


        print(*value, sep=sep, end=end)


    print(solve(N, V))


        print(*value, sep=sep, end=end)


print(maxi)


print(max(max(dp[i]) for i in range(n)))


print(ans)



print(ans)



print(ans)


print(dis[-1]+wait)


    print(solve(R, S, P, A))


        print(*value, sep=sep, end=end)


print(ans)

print(lst[-1])

print(ans)


    print(ans)
                
    print(solve(S, T))


        print(*value, sep=sep, end=end)


    print(*solve(N, A), sep='\n')


        print(*value, sep=sep, end=end)


print(ans)


print(sum(lis))

    print(t)
    print(t - 2)
print(cnt)


    print(solve(T))


        print(*value, sep=sep, end=end)


print(count)


        print(len(velocidades)-1)
    

print(ans)

    print(0)

print(sum(b3)+1)

print(ans+n-1)

print(ans)



print(main())




                    print("No")

print(sum([sum(i) for i in height]))


        print('No')
        print(ans)


        print(*value, sep=sep, end=end)



    print(total if isPossible else "No")



print(main())




            print("No")
print(ans)

            print("No")
print(ans)

        print("No")
print(ans)

        print(0)

    print(ans)


    print(ans)


    print(ans)

                print("No")
                print("No")
                print("No")
print("Yes")


                print("No")
                print("No")
                print("No")

print("Yes")

print(*A[:n])
print(*B[:m])







print(*a[:n])
print(*b[:m])


        print(s[i])
print(-1)


print(sum(can))


  print(i)
 



        print(x)


print(*ans, sep='\n')


print(*ans, sep="\n")


	print(ans[i][1])


print(*ans, sep = "\n")



    print(day)

print("query",0,flush = True)
  print("query",x*(10**i),flush=True)

print("answer",ans,flush=True)
    print('query', a)

print('answer',int(ans[::-1]))

print("query",0)
    print("query",k*m)
print("answer",ans)

    print(int(ans))
    print(cnt)


print(solve(s))


    print(sr*sc)



print(count)


print(dp[n][0])



    print(ans)


print((comb(dr+dc, min(dr, dc)) << k) % 100000007)

print(ans)

print(an%int(1E8+7))


    print(ans % maxans)

print(dp[dy + 1][dx + 1] * cnt % MOD)

print(ans)

  

    print(case_list[ex][ey])

print(b+1)

print(ans)



print(solve())



print(max(ans1, ans2))


    print(ans)
print(ans+2)
print(math.factorial(n+1)+2)
    print(i)

print(fact(n + 1) + 2)
  print(i + 2)

print(X)
    print(i + 2)


    print(4)
    print(2)
    print(ans + 2)
        print(i)


    print(4)
    print(2)
    print(14)
    print(2)
    print(3)



    print(ans-n-1)
        print(i)
    

    print(4)
    print(2)
    print(8)
    print(4)
    print(3)
    print(a - n - 1)

        print(i)

    print(num+2)
        print(a)

    print(n1500)
        print(i+2)

        print(" "*k, v[2:])
      print(prod(y, z+1))
	print(ans)

    print(ans)


        print(e * nc + b * nb + a * na)
        print(min(sum(lst[:d]), e*d) + sum(lst[d:]))
        print(min(sum(lst), e*d))

                print(*self.exist_mp[z][y][1:6],sep="")
    print("Case {}:".format(case))
        print()
    print("Case",str(t)+":")
                print(s[z][y][x],end = "")
            print()
            print()
        print()
    print(f"Case {case_n}:")
            print(''.join(map(str, S[i][j])))
            print()
	print("Case ", cno, ":", sep='')
    print(ans)

    
        print(ans)
    
            print(s)


	print(results[i])

        print(s)

        print(s)


print("win" if ans else "lose")

    print("\n".join(map(str, ans)))


print(res)


            print("Yes")
    print("No")
        print('Yes')
print('No')

    print("Yes")
    print("No")


    print('Yes')
    print('No')


  print("NA")
  print(ans)
 

    print("NA")
    print(ans)


print(score[l])


print(eval(s))

    print(ans)
  
            print(score)
        print(-1)


        print(out)
    print("NA")

    print("NA")
    print(ans)


print(''.join(S))



print("".join(A))



print(''.join(a))



print("".join(a_lst))

        print(score)
    print(-1)




print(*Ans, sep="\n")


print(*ANS, sep='\n')



print(f"{ans:.10f}")


        print(N, 1)
        print(v, n)
print(v, n)


print(*ANS)


print(ans2-ans1)


print(a)

                print("LIMIT_OVER")
            print("".join(self.mp[y]))


print([0,1,2,4,6,16,12,64,24,36,48,1024,60][int(input())])

print(ans[int(input())])

print([1, 2, 4, 6, 16, 12, 64, 24, 36, 48, 1024, 60][n - 1])


print([1,2,4,6,16,12,64,24,36,48,1024,60][int(input())-1])

        print(n)
		print(solve(n))
        print(target)

print(ans)

print(a + d * (k - 1))

print(get(K))

print(a + d * (k - 1))

print(D[k] if k in D.keys() else a + b * k)


        print(A[j][1])

print(a+d*(k-1))

print(get_i(data, K-1))

print(ans)


print(ans)



print(ans)

print(DP[gi][gj])


print(ans+(31-saw)*50)


print(ans)


print(ans)


print(ans)

print(sum([abs(i - j) for i, j in zip(values1, values2)]) // 2)


print(ans//2)

print(ans >> 1)

            print(time)
        print(-1)


print(max(li[0]-1, n-li[-1], *[(li[i]-li[i-1])//2 for i in range(1,m)]))


print(ma)

print(max(a[0]-1,n-a[-1],*[(a[i+1]-a[i])//2 for i in range(m-1)]))

print(t)

print(max(n-pre, max(d>>1, a[0]-1)))

print(max(c))


print(ans)


print(ans)
    

    print(solve(n, received_people.copy()))


print(max(lst))

print(max(rp))


print(ans)

print(ans)

print(cnt)


print(ans)



print(abs(m-len(cities)))


    print(answer)


print(abs(n - sum([len(i) for i in q]) - len(q)))

print(abs(a-b))


print(abs(2 * len(city_dic) - village_cnt))

print(abs(ans))


print(ans)



print(result)

print(sum([area[i[1]][i[0]] for i in c]))

print(ans)

print(ans)


    print(ans)


print(ans)

print(ans)


print(ans)

print(dp[5*N][L])


print(ans)


print(ans)

print(ans)

print(N*math.sin(PI/N)*math.cos(K*PI/N)/math.cos((K-1)*PI/N))

    print(ans)

    print(2*(n-1)-ans_)

        print((N - 1) * 2 - ans[i])


print(*ans, sep="\n")


    print(2 * (N - 1) - i)

    print(2*(N-1)-ans)


    print(2 * (n - 1) - max(D1[i], D2[i]))


    print(t)

    print(2*(N-1)-D[i])


print(*ans, sep="\n")


    print(2 * (N - 1) - solver.solve(i))


    print(-1)
    print(result)


    print(an)


    print(gc)



    print(c)
            
    print(num)



        print(ans)



        print(ans)


    print(best_i)
    
    
    

print(*data,sep = "\n")

  print(*args, sep=sep, end=end, file=sys.stderr)
  print(a)


    print(f)

    print(k)

print('\n'.join(map(str, outputs)))


    print(ans)

    print(n+1)

    print(ans)


print(main())



    print(ans)

    print(ans)
            
    
    print(max_index)

    print(ansi)

    print(ans)

        print(ans)
    print(i)

    


    print(ans)

    print(ans)
    

    print(ans1)


    print(ma-(ans.index(max(ans))))

    print(nn)


    print(nmin + len(Sa) - cou - 1)

    print(n2 - g[::-1].index(min(g)))

    print(ans)

        print(ans)
    print(ans)


	print(ans+1)

        print(ans)

        print(answer)


    print(ans[1])


  print(n)


    print(ans+nmin)


        
        
        
    
    print(cnt)
   
      
      

            print(i)
  print(x)


    		print(i + pass_min)
            print(num, end="")
                print(" ", end="")
        print()
 
    
  print(I)

        print(success_student_num)


    print(ans)

    print(n+1)

	print(ans)
	

    print(ans)

    
    print(ans)

        print(ind)

    print(ans)

    
    print(ans)

    print(b-c)

    print(ans+1)

    print(max_ind+1)

    print(idx)

    print(i)

    print(ans)




    print(i)


    print(x)

        print(a)


    print(ans)

        print(a)
        print(n+1)

    
    print(ans)

    print(ans)
    

    print(c-e.index(max(e)))



  print(ans)

        print(ans)


    print(max_index)



    print(ans)
        
        

    print(mx[1])

        print(num)


    print(ans[1])


    print(an)


          print(i + 1)
            print(i + 1)
            print(i + 1)
      print(first_index+1)
            print(i + 1)
                    print(i + 1)
            print(i + 1)
      print(i+1)
            print(i + 1)
        print(i+1)
            print(ans)
                print(i+1)
			print(i+1)
            print(i + 1)
                print(i+1)
            print(j)
            print(res)
                    print(i+1)
                    print(count)
        print(st+1)    
	print(ans)


        print(tanku_check(wclist))


    print(cnt)


    print(i)

  print(ans)

    print(ans)

    print(x + 1)


  print(start+1)
    

            print(i+1)
    print(ans)

        print(ans+i)
            print(i + 1)
    print(ans+1)


                     print(i+1)
        print(ans)
        

    print(solve(a))

                    print(i+1)
                print(i+1)
            print(i+1)
    print(ans)

            print(ans)
    print(i)

                print(i+1)
                    print(j+1)
            print(ans)
    print(solve(n,a))
    

    print(solve(n, ws))

			print(i+1)
            print(i+1)
                  print(i+1)

    print(res)

    print(ans+1)




            print(i+1)
                print(i+1)
                print(ans)
            print(i + 1)
    print(i)



print(*ret,sep="\n")

    print(i)

	print(ans)

            print(i + 1)
                    print(s + 1)
            print(i+1)
                    print(i + 1)

    print(ans)

            print(index+1)
    print(ans)


            print(st + 1)
            print(i+1)
          print(i+1)
        print(process(data))
        print(lis[0][0])
    
    print(rec(0,n,1))
            
            


            

        



        


        print(input())
    print(parser(0)[0])

        print(input())
        print(pls(1))
        print(prd(1))

		print(input())
	print(rec())


	print(calc(0, 0)[0])


        print(solve(n,a,0))
    print(ans)

        print(ans)



    

  print(eles[0][0])




    print(dfs(l))

        print(cal(w,2))
        print(w)

    print(v)
    

    print(ans)


    print(i)

	print(f(lst,n))
    print(p.parse())


    print(calc(0))


        print(f[0])


    print(b[0][0])
    


  print(li[1][0])




print(*res, sep="\n")


        print(h)
    print(L[0])







        print(input())
    print(N[0][0])


  print(todo[0][2])

  print(ans) 

        print(s_list[-1][0])
    print(li[0][1])
    print(stack[0][0])


        print(int(input()))

    print(num[0])


    print(values[0][1])
            print(int(input()))
            print(ans[1])
	print(calc(0))



    print(cal(0))
    print(a[0])
    

    print(i)

    print(eval(st))

    print(int(input()))
  print(stack[0])

                print(j,end = "")
                print(str(d[j])+j,end = "")
    print()
    print(ans)
            print(j)
            print(a//2,n)
    print(dp[m],dp_2[m])
    print(c[0])


    print(i)

    print(ans)

  print(eval(''.join(equation)))


    print(st_num.pop())

        print(int(input()))
        print(solve(l_adjusted))
        

        print(input())
    print(dfs(0, node[0]))


    print(num[0])

    print(func(s, 0))






            print("error")
            
    print(calc(items))
    print(check(data,[],1)[0])
    


        print(calc(exps, 0)[0])

    print(expr(Source(''.join(S)), 0, O['+']))

        print(expr(A))
        print(term(A))


  print(rec(s)[0])

      print(lst[0][1])
    print(stack[0])

    print(stack[0])


        print(stack_numbers[-1][0])


    print(solve(n, lines))



print(main())




    print(s[0][0])


        print(exp[0])


  print(x,y)

        print(" ".join(str(i) for i in solve(plist)))

    print(*serch_ans(dp))

    print(*x)




print(main())


    print(*ans)


        print(n, m)


    print(x)
    print(x)

    print(*ans,sep = "\n")
                print('UNSAFE')
            print("UNSAFE")
                                print("UNSAFE")

    print("SAFE")
    print("SAFE" if solve(n, s) else "UNSAFE")

    print(int(ans))


    print(min(result))


        print(v)
    print(res)



    print(min(result))


    print(ans)


    print(r)

	print(saisho)

	print(ans)


    print(ans)

    print(result[i])


    print(ans)


        print(answer)

    print(min_diff)


    print(ans)

    print(min(b))

    print(c)


    print(v)
    

  print(min)
  

    print(min(Y))


  print(min([a[i]-a[i-1] for i in range(1,n)]))

    print(min([bn - an for an, bn in zip(a, b)]))

    print(d)

    print(i)


    print(ans)

        print(min(list))
    
        print(c)
    print(min(A[i] - A[i - 1] for i in range(1, n)))

    print(ans)

    print(ans)

    print(min([abs(line[i] - line[i + 1]) for i in range(len(line) - 1)]))

    print(i)

                print(ans)
    print(ans)

    print(min([scores[i + 1] - scores[i] for i in range(n - 1)]))


        print(ans)



    print(answer)

    print(ans)

    print(Sa)

    print(min(r))

    print(min(a[i+1]-a[i] for i in range(n-1)))

    print(min(A[i+1] - A[i] for i in range(N-1)))

  print(mindiff)

    print(ans)

    print(mn)

    print(mind)

    print(min(b))


    print(min)



    print(ge)


    print(d)

    print(min(B))

    print(min_list[i])


    print(d)



    print(sa)

    print(ans)

    print(ans)

    print(solve(n,a))


        print(ans)
    print(min)
  print(ans)

    print(a_sub)

    print(i)


    print(min)

    print(ans)

    print(ans)

	print(ans)

	print(x)


    print(res)

            print(num, end="")
                print(" ", end="")
        print()

        print(n, end='')
            print(' ', end='')
    print()


    print(ans)


    print(di)

        print(min_num)




    print(ans)



    print(Min) 

    print(ans)

    print(min(kotae))

    print(ans)

        print('TIE')
        print(k_max, cnt)
    


			print(chr(mnum+65),i+1)
		print("TIE")
		print("TIE")
		print("{} {}".format(max(vote, key=vote.get), ans))
			



            print(chr(first_alfa),i+1)
        print("TIE")

        print(c[fst], cnt)
        print("TIE")


        print("TIE")
        print(firstKey,d)

	print(x)


      print(chr(MD+ord("A")),i+1)
    print("TIE")
  



            print(rev[cnt.index(max(cnt))], i)
        print("TIE")
    
    


    print(*main())

        print('TIE')
                        print(result1[result2.index(max(result2))] + " " + str(sum))
                        print(result1[result2.index(max(result2))] + " " + str(sum))
            print(q,i+1)
            print(chr(M.index(max(M))+ord("A")),i+1)
            print("TIE")
    

            print(first_key, i + 1)
        print('TIE')

                print(max(d.items(), key = lambda x:x[1])[0] + ' ' + str(i+1))
            print(max(d.items(), key = lambda x:x[1])[0] + ' ' + str(i+1))
            print(f'{max_key} {i}')
        print('TIE')



        print('TIE')
        print(i[0],end = ' ')
        print(i[1])




            print(max(li,key=li.get),i+1)

            print("TIE")

        
    


      print(chr(ord('A') + maxi), i)

  print('TIE')

    print(line)

      print(chr(ord('A') + maxi), i)

  print('TIE')

            print(alphabet[votes.index(max(votes))], i + 1)
    print("TIE")
        print(i)
        print(i[0], i[1])

    print(ans)

        print(list(d.keys())[0],int(n/2)+1)
        print('TIE')
        print(max(d,key=d.get),n-remain)



        print("TIE")
        print("%s %d" %(NumToAlphabet(alphabet.index(max(alphabet)) + 1), d))

            print(winner,i+1)
            print("TIE")

            print(chr(idx[0]),i+1)
        print("TIE")
                    


            print(win, i + 1)
            print("TIE")

                print(dd[-1][0],cnt+1)
                print(dd[0][0],cnt+1)
        print("TIE")
        


    print("TIE")
        print(alphab[i]+ " " + str(a))

      print(winner, i+1)
        print("TIE")

      print(winner, i+1)
        print("TIE")

            print(curtop[0],hyo)
            print("TIE")

        print(chr(votes.index(l[0])+65) + ' ' + str(i + 1))
      print('TIE')

      print(winner, i+1)
        print("TIE")

        print(h[ct.index(max(ct))], i + 1)
        print("TIE")

        print(data[0][0],n//2+1)
        print('TIE')
            print(d[0][0],i)
            print(large[stack.index(max(stack))],vote_number)
        print("TIE")
        print(P[0], n // 2 + 1)
            print(max_p, i + 1)
        print("TIE")


                print(*[v[-1][-2],cnt])
            print(di[0][0], num + 1)
    print("TIE")
        print("TIE")
        print(alp[V.index(max(V))],ans)

            print(ranking[0][0] + " " + str(i + 1))
        print("TIE")

           print(sortedvote[0][0] + " " + str(i))
            print("TIE")
         print(input(), 1)
                print(chr(h.index(max(h))+65), i+1)
            print('TIE')


        print("TIE")
            print(T,i+1)
            print(max_key, N-remain)
    print("TIE")


      print(chr(vote.index(first) + base), i)
    print("TIE")

            print(A[i], i + 1)
            print(top_id, i + 1)
        print("TIE")


            print(m1[0], i + 1)
        print('TIE')


      print(chr(vote.index(first) + base), i)
    print("TIE")
  

        print("TIE")
        print(ans,k)


    
    
        

        print(C[0], 1)
                    print(candidates_list[0][0], i)
                print(candidates_list[0][0], n//2+1)
                    print(print(candidates_list[0][0], candidates_list[0][1]))
                print(candidates_list[0][0], n//2+1)
                print('TIE')


                print(candidate[0][0],i+1)
            print('TIE')



        print("TIE")
        print("%s %d"%(chr(who+ord('A')),ans))


        print("{} {}".format(i[0][0], i[1]))
        print(i)


        print("TIE")
        print(*ans)






print(main())



            print(chr(ord("A") + cnter.index(m)), i)
    print("TIE")
            print(E[0][0], i + 1)
        print("TIE")

            print(A[0], n//2 + 1)
            print("TIE")
            print(ans, time)
                    print(x[0][1], i+1)
                print(x[0][1], i+1)

    print("TIE")
            print(alph[abcCount.index(max(abcCount))], sum(abcCount))
        print("TIE")


                print(str(nowdata[0][0] + " " +  str(i + 1)))
                print(str(nowdata[0][0] + " " + str(i + 1)))
                print("TIE")
                print(first[0], i+1)
            print("TIE")

    print(s[0],1)
      print(s[0],ceil(n/2))
      print(s[0],n//2 + 1)
        print(x,i+1)
  print("TIE")

            print("TIE")
            print(c.most_common()[0][0], N // 2 + 1)
            print(winner, time)
                print(dic.most_common()[0][0]+" "+str(loop_count))
                print(dic.most_common()[0][0]+" "+str(loop_count))
        print("TIE")

            print(id, i)
        print("TIE")

                print('{0} {1}'.format(list(ctr.keys())[0], i+1))
                print('{0} {1}'.format(li[0][0], i+1))
        print('TIE')

                    print(c_list[index_output], count)
                print(c_list[0], count)
        print("TIE")


    print(ans if len(ans) > 0 else 'TIE')


    print(', '.join(names.get(id(arg), '???')+' = '+repr(arg) for arg in args))


            print(chr(vote_count[-1][0] + ord("A")) + " " + str(i+1))
    print("TIE")
        print(d[c.index(max(c))], i + 1)
        print("TIE")


            print("{} {}".format(chr(maxim1[1] + ord('A')), i + 1))
            print("TIE")


            print(chr(ord('A') + idx), i+1)
        print("TIE")


            print(alpha[0], i+1)
        print("TIE")


    print(i)
    print(i)
    
    print(time()-start)
    print(ANS)
 
 
 
 
print(main())





print(main())


                print(l)
        print(primeNums[startInd+(n-c)])

                print(l)
        print(primeNums[startInd+(n-c)])


            print(i)
                print(i)
    print(ans)

            print(i)
            print(i)
                print(i)
                    print(i)
            print(i)
    print(m)


print(*ret,sep="\n")


    print(m)



    print(m)


        print(m_prime[m][n])



print(*ANS, sep="\n")

    print(i)
    print(i)

    print(time()-start)
    print(ANS)
        print(i)
        print(i)

    print(solve(n, tuple(map(int, input().split()))))

        print(dp_cnt[-1])


        print(ans)
    print(slv(N, A))

        
    print(dp[-1])


            
    print(ans[N])


        
    print(dp[-1])

	print(dp2[N])


	print(dp2[N])


	print(dp2[N])

        print(a)
        print(a)

    print(dp[-1])


    print(max(dp[0][-1],dp[0][-2]))
    print(dp[-1])

        print(d[N-1])        




print(main())





print(main())


    
    print(dp[0][n-1])


        print(solve(0, N, W, dp))
            
    
        print(dp[0][n-1])
        print(dp[0][n-2] if dp[0][n-2]>dp[1][n-1] else dp[1][n-1])




    print(dp[n][0])        
    print(dp[n][0])        
    print(dp[n-1])

    
    print(dp[n][0])


    print(dp[n][1])
        print(dp[0][-1])

   print(dp[0][N])

        print(dp[0][-1])



        print(dp[0][N - 1])

        print(ans)

        print(a)
        print(a)
        print(a)

        print(a)
        print(a)


  print(dp[n-1][0])
    print(d[N-1])

        print(a)
        print(a)
        print(a)
        print(a)
        print(a)
        print(a)
    print(dp[0][-1])
        print(a)

        print(dp[0][-1])


        print(dp[0][-1])
        print(a)
        print(i)

        print(calc_daruma(N[i], W[i]))


    print(dp[0][N-1])

        print(a)
        print(dp[0][n - 1])
        print(a)
    print(dp[n-1])
        
    print(d[n - 1])
    
        print(dp[0][-1])
	print(lst[n][1])
    print(calc(N, l))

    print(solve(n, w))


        
  print(dp[0][n])


    print(dp[0][-1])

print('\n'.join(map(str, ans)))

print(*ans, sep="\n")


    print(dp[0][n-1])
        print(6 * s ** 2)

    print(answer)

        
        
        
        
    print(-1)
    print(s*s*6*k-2*mx)

        print(S * S * 6)
    print(S * S * 6 * K - ans if ans != -1 else -1)

      print(-1)
      print(6*k*s*s+sub)



    print(-1 if ans == -1 else S * S * 6 * K - ans)

    print(ans)

        print("yes")
        print("no")


    print(min(in_), max(in_))
    
    
    
    

    print("NONE")
    print(ans)


    print(solve() or 'NONE')

    print(max(f()) or"NONE")

    print(ans if ans > 0 else 'NONE')


    print(answer if answer > 0 else "NONE")


    print(max(f())or"NONE")

        print(ans)
        print('NONE')

        print(ans)
        print("NONE")


        
    


        print(p)
        print("NONE")

    print(ans if ans > 0 else 'NONE')


  print(ans if ans>0 else 'NONE')

            print('NONE')
    print(summ[-1])

        print('NONE')
        print(res)

    print(ans if ans > 0 else 'NONE')

        print(*ans, sep="\n")

        print(ans if ans != -1 else "NONE")
        print("NONE")
    print(ans)
    

        print("NONE")
        print(res)


        print("NONE")
        print(max)


        print("NONE")
        print(max(b))

        print('NONE')
        print(ans)


      print(ans)
      print("NONE")
  
            print("NONE")
            print(ans)


        print("NONE")
        print(answer)


            print("NONE")
            print(t)
        print("NONE")
        print(ans[-1])
    print(an)


        print(res[-1])
        print("NONE")









        print(max_value)


        print('NONE')
        print(ans)

        print('NONE')
        print(ans)
                

        print("NONE")
        print(ans)


    print(max((x + y for i, x in enumerate(l) for y in l[:i] if x + y <= amount), default="NONE"))


        print('NONE')
        print(ans)

    print(solve(n,m,a))

    print(solve(n,m,a))

    print(ans)

            print('NONE')
            print(i)
        
    

        print(max(combination))
        print("NONE")


    print(solve(n, m, a))

        print(fab(n,m,a_list))


    print(sum(n,m,a))



print(main())


        print(max_value)
    	print('NONE')

print(str(a+b+c) + " " + s)
			print("NONE")
			print(ans)


        print(max(A))
        print("NONE")



        print(maxv)
        print("NONE")


        print("NONE")
        print(ans)
    print(b)


    
    print("NONE" if t == 0 else t)


        print("NONE")
        print(now)

    print(c)
    print("NONE")

        print(C)
        print("NONE")

    print(main(N,M,A))

    print(main(N,M,A))

        print('NONE')
        print(x)

        print("NONE")
        print(k)







        print("NONE")
        
        print(k)

    print('NONE')
    print(ans)

            print("NONE")
        print(max(Answers))

    print(ans if ans != 0 else 'NONE')

            print('NONE')
            print(ans)


            print("NONE")
            print(ans)

		print(solve(s,t))
        print("DIFFERENT")
            print("DIFFERENT")
                print("CLOSE")
                print("IDENTICAL")
                print("DIFFERENT")
		print("DIFFERENT")
				print("DIFFERENT")
					print("DIFFERENT")
			print("CLOSE")
			print("IDENTICAL")

    print(ans[i])

    print(O[i])

        print("DIFFERENT")
    print(st[i])

        print("DIFFERENT")
                print("DIFFERENT")
                    print("DIFFERENT")
            print("CLOSE")
            print("IDENTICAL")


		print("DIFFERENT")
		print("CLOSE")
		print("IDENTICAL")

	print(a)

    print(x)


		print("DIFFERENT")
				print("DIFFERENT")
					print("CLOSE")
					print("IDENTICAL")
					print("DIFFERENT")
        print("IDENTICAL")
            print("DIFFERENT")
            print("DIFFERENT")
        print("CLOSE")


        print("IDENTICAL")
            print("DIFFERENT")
            print("CLOSE" if key == [0,1] else "DIFFERENT")


        print(check(s1,s2))

        print("DIFFERENT")
                    print("DIFFERENT")
                print("DIFFERENT")
        print("IDENTICAL")
        print("CLOSE")
        
  print(ans)
        print(ans[solve(s1,s2)])

        print('DIFFERENT')
        print('IDENTICAL')
        print(['CLOSE', 'DIFFERENT'][is_close > 1])



        print('IDENTICAL')
        print('DIFFERENT')
        print('DIFFERENT')
        print('CLOSE')
        print('DIFFERENT')

        print("IDENTICAL")
        print("DIFFERENT")
        print(S0str, S1str)
        print("DIFFERENT")
        print("DIFFERENT")
        print("CLOSE")


        print(solve(s1_list, s2_list))

        print("DIFFERENT")
                    print("DIFFERENT")
                        print("DIFFERENT")
                print("CLOSE")
                print("IDENTICAL")


		print("DIFFERENT")
				print("DIFFERENT")
		print("IDENTICAL")
		print("CLOSE")
		print("DIFFERENT")
        print("IDENTICAL")
        print("CLOSE")
        print("DIFFERENT")

    print(ans)


    print(ans)


        print('DIFFERENT')
        print('IDENTICAL')
        print('CLOSE')
        print('DIFFERENT')



    print(result)

        print("IDENTICAL")
        print("DIFFERENT")
                print("DIFFERENT")
                    print("DIFFERENT")
            print("CLOSE")
        


        print("IDENTICAL")
        print("DIFFERENT")
            print("DIFFERENT")
        print("CLOSE")
        print("DIFFERENT")

        print("DIFFERENT")
                    print("DIFFERENT")
                print("IDENTICAL")
                print("CLOSE")
                print("DIFFERENT")
        
            
                



    print(ans)

        print(solve(s1, s2))


        print(ans)
        print("IDENTICAL")
            print("DIFFERENT")
                    print("DIFFERENT")
            print("CLOSE" if cnt == 1 else "DIFFERENT")

        print("IDENTICAL")
        print("CLOSE")
        print("DIFFERENT")

                 

        print("DIFFERENT")
        print("IDENTICAL")
        print("CLOSE")
        print("DIFFERENT")
                
            

    print(answer(s1,s2))
    
        
        


        print("DIFFERENT")
        print("DIFFERENT")
        print(["IDENTICAL","CLOSE"][r[1]])

        print("DIFFERENT")
        print("IDENTICAL")
        print("CLOSE")
        print("DIFFERENT")

        print(ans)


		print("IDENTICAL")
			print("CLOSE")
			
	print("DIFFERENT")

        print("DIFFERENT")
        print("DIFFERENT")
        print("CLOSE")
        print("IDENTICAL")

        print("DIFFERENT")
        print("CLOSE")
        print("IDENTICAL")

        print("DIFFERENT")
            print("CLOSE")
            print("DIFFERENT")
            print("IDENTICAL")
        print("DIFFERENT")
        print("DIFFERENT")
            print("DIFFERENT")

    print("IDENTICAL" if not cnt else "CLOSE" if cnt == 1 else "DIFFERENT")


        print("DIFFERENT")
        print("DIFFERENT")
        print(["IDENTICAL","CLOSE"][r[1]])

                print("DIFFERENT")
                    print("IDENTICAL")
                    print("CLOSE")
                print("DIFFERENT")
            print("DIFFERENT")
            print("DIFFERENT")
        print("IDENTICAL")
        print("CLOSE")
        print("DIFFERENT")

        print("DIFFERENT")
        print("DIFFERENT")
        print(["IDENTICAL","CLOSE"][r[1]])


        print("DIFFERENT")
        print("CLOSE")
        print("IDENTICAL")

        print("IDENTICAL")
        print("CLOSE")
        print("DIFFERENT")


	print(s[ans])

    print("IDENTICAL")
    print("CLOSE")
    print("DIFFERENT")


	print(solve(s,t))

        print("DIFFERENT")
            print("DIFFERENT")
        print("IDENTICAL")
        print("CLOSE")
        print("DIFFERENT")

    print(ans[compare(str1,str2)])


        print('IDENTICAL')
        print('DIFFERENT')
            print('DIFFERENT')
                print("CLOSE")
                print("DIFFERENT")
    print("IDENTICAL")
    print('DIFFERENT')
      print('DIFFERENT')
      print('DIFFERENT' if cnt > 1 else 'CLOSE')
    

        print("DIFFERENT")
            print("CLOSE")
            print("IDENTICAL")
            print("DIFFERENT")


    print(ans)

        print("DIFFERENT")
        print("IDENTICAL")
        print("CLOSE")
        print("DIFFERENT")



        print("DIFFERENT")
            print("IDENTICAL")
            print("CLOSE")
            print("DIFFERENT")

        print("DIFFERENT")
        print("DIFFERENT")
            print("IDENTICAL")
            print("CLOSE")
            print("DIFFERENT")

        print("IDENTICAL")
            print("DIFFERENT")
                print("DIFFERENT")
            print("CLOSE")
            print("DIFFERENT")

    print(solve(a1, a2))


print("\n".join(ans))


    print(' '.join(str(x) for x in v))

        print(solve(s, t))



    print(ans)


            print("DIFFERENT")
            print("IDENTICAL")
            print("CLOSE")
            print("DIFFERENT")

        print("DIFFERENT")
        print("DIFFERENT")
        print(["IDENTICAL","CLOSE"][r[1]])

        print("IDENTICAL")
        print("DIFFERENT")
                print("DIFFERENT")
        print("CLOSE")



        print(i.replace("'", ""))

        print("DIFFERENT")
        print("CLOSE")
        print("IDENTICAL")


    print('DIFFERENT')
    print('DIFFERENT')
      print('IDENTICAL')
      print('CLOSE')
  print('DIFFERENT')


    print(MaxScore)


	print(ans)


    print(ans)



print(main())



        print(ans)


        print(max_capacity)


    print(a)

    print(v)

    print(solve(d,w,f))



    print(ans)

        print(ans)



    print(res)


	print(ans)

  print(ans)
                print(j,end = "")
                print(str(d[j])+j,end = "")
    print()
    print(ans)


    print(ans)
  

        print(pondmax)
                        
    print(ans)

    print(res)

    print(res)

    print(ans)


	print(x)


    print(ans)


        print(best)

        print(ans)

    print(ans)



        print(x)




    print(ans)


    print(ans)

    print(ans)

    print(ans)

        print(ans)
    print(ans)
    print(ans)



    print(ans)

        print(ans)
        print(0)



    print(ans)


    print(i)

    print(ans)


    print(ans)

    print(ans)


    print(ans)


    print(ans)

    

    print(ans)



    print(V)

    print(ans)

print(*solve(), sep="\n")

print(*solve(), sep="\n")



print(main())




        print(ans)

        print(dp[n][0] if dp[n][0]!=-1 else 0)
        
    


        print(dp[0])


    print(dp[n%2][0])
    print(d[0])
    

    print(dp[0])



        print(solve1(N, M, B))
        print(solve2(N, M, B))
  print(dp[0])

    print(dp[0])

        print(solven(0,0))
        print(dp[0])






    print(d[0])

    print(ans)
    print(dfs(0,s,l,v,dic))

    print(ans)
    print("{:.3f}".format(round(ans,3)))

            print(dx)
    print("unreachable")
    print(dp[0][n])
    print(len(ans))
            print(i)
            print(i)
            print(i)
    print(ans)
            print("UNSTABLE")
        print("STABLE")
    print(ans[0],-ans[1])
        print(ans)
        print(dp[0])
print(*map(L.__getitem__, eval("e&"+",e&".join(open(0).read().replace(*"-~").replace(*"*&").replace(*"1e").split()[:-1]))),sep='\n')

    print(ddd.get(id,31))


    print(table2length[truthtable()])

  print(cost[res])

        print(rdp_sessions[rdp_resolve(line)])

    print(D[changenum(S)])


    print(D[changenum(S)])

    print(ans[sikidata(S)])




	print(''.join(ans[1:n+1]))



    print(output)



    print(*ans, sep="")
    

    print(''.join(ans))

  print(''.join(ans[::-1]))

    print(ans)

        print(''.join(rval))

    print(s)

    print(ans)



    print(''.join(ans))


  print(*lr,sep = "")

    




    print(ans)


                print("L",end="")
                print("R",end="")
                print("R",end="")
                print("L",end="")
    print()         
        

        print("YES")
        print("NO")

            print('YES')
            print('NO')

    print(ans)


        
    print(cnt)

    print(an)


  print(ans)
    print(counter)


    print(count)

	print(ans)



    print(count)


        print(x)


    print(sum(1 for a in A if a <= ave))

    print(len([i for i in a if avg >= i]))


    
    print(len([i for i in a if i <= ave]))
print(*ans, sep="\n")

print(*ans, sep="\n")

    print(sum(a <= num for a in alst))
    


    
    print(len([i for i in a if i <= average]))

    print(solve(n,s))
   

    print(solve(n,a))


    print(len(tmp))



	print(s)

        print(ans)

    print(*result, sep="\n")

        
    print(count)

    
    print(su)
	print(ans)

print(*ans, sep='\n')


    print(r)

print(*ans, sep="\n")


    print(len(list(filter(lambda x:x<=mean, a))))



    print(cnt)


    print(ans)

        print(i)

    print(i)

    print(ans)


    print(low)

  print(cnt)
      

  print(cnt)

  print(count)

    print(len(list(takewhile (lambda x:x <= ave, num))))


    print(sum(1 for x in xs if x <= ave))


        print(cnt)

	print(i)


        print(len([x for x in aa if x <= ave]))

    print(bisect.bisect_right(a,sum(a)/n))


    print(len(list(filter(lambda x: x <= ave, a))))

    print(ans)

    print(ans)

    print(count)


    print(ans)

    print(len([a for a in A if a<=AVE]))

            print(num, end="")
                print(" ", end="")
        print()

        print(n, end='')
            print(' ', end='')
    print()

    
    print(count)


    print(c)
    

    print(cnt)

    print(ans)

    print(cnt) 


        print(t)

        
    print(ans)

    print(ans)

    print(ans)

   print(c)
   

            
    print(M)

        print(ika)
    print(ans)

    print(ans)

    print(ans)


        print(ans)
  
  print(total)
  
  


        print(len(b))

    print(len([i for i in l if i <= mean]))

    print(ans)

    print(i)


        print(a)


    print("\n".join(ans))


    print("\n".join(ans))
    
        print(ans)


        print(ans)


	print(i)
	

            print(paper[y][x])

        print(yoko[a]*tate[b])

        print(x_[x+x_p]*y_[y+y_p])

        print(col[x] * row[y])

		print(a[y][x])


        print(a[y][x])


        print(paper[y][x])


		print(matrix[len(matrix) - y - 1][x])



print(main())




        print(paper[_xy[1]][_xy[0]])




print(*res, sep="\n")



            print(s[y][x])


		print(aa[p[1]][p[0]])
            print(nq[x]*mq[y])

    print(q)



        print(paper[-y[i]-1][x[i]])


            print(g[y][x])


            print(oldm[c[0]][c[1]])

    print("------------------")
        print('|', end="")
            print(mmap[i][len(mmap[0])-1-j], '|', end="")
        print()
    print("------------------")


        print(paper.thickness(x, y))

        print(*solve(N, M, T, P, F, H), sep='\n')


        print(*value, sep=sep, end=end)


        print(paper[y][x])


    print(a[y][x])
  
        print(paper[len(paper)-i-1][j])

    print(mp[y][x])

print(*ans, sep='\n')


    print(*v,sep='\n')
    

        print(Grid1[tate-1-y][x])

        print(B[y][x])

        print(paper[-y[i]-1][x[i]])


        print(ans)    

        print(paper[-y[i]-1][x[i]])



            print(MAP[y][x])


        print(A[a][b])
    

        print(paper[x][y])


        print(a[y[j]][x[j]])


            print(res)
            
            
        print(paper[y + sy][x + sx])

        print(cnt[m-y-1][x])

    print()
            print(holes[i][j], end="")
        print()


        print(H[len(H) - 1 - offset_y - y][offset_x + x])


        print(li[y][x])

    print(field[y_offset+y][x_offset+x])

        print(c_li[1000 - now_m - y - 1][now_n + x])


            print(origami[i][j], end = " ")
        print()
    print("--------------------------------------")

            print(origami[MAX_V-y-1][x])

        print(a)
        print(new_paper[y[i]][x[i]])
    

        print(origami[white_up - y][white_right + x])

    print(paper[gx+x][gy+y])

    print(*ans)

            print(l + 1, p)
                    print(int(a), n)
        print("\n".join(map(str,[" ".join(map(str,i))for i in ans])))
        print(*solve(B))


        print(*value, sep=sep, end=end)


    print(res_a, max_n)


				print(int(a), n)
  print(num,ans)

                
    print(ans1, ans2)

    print(*ret[i])


    print(*ANS)


          print(a, k)
          print(a, k)
                print(int(a), n)
    print("{} {}".format(*i))



print(main())


            print("{} {}".format(n, k))
            print(a, n)
    
    print(int(rank), max_num)
    
                    print((b-check_list[i])//i+1, i)
            print(int(x), i)
  print(s,t)
      
                        



    print(*hoge)

        print(ansa, ansn)
  print(x, ans_y)

        print(b,1)
                print(x//2,n)
        print(b,1)
                print(x//2,n)
        print(f'{b} 1')
                print(x//2,n)
        print(a,n)






            print(int(n / i - (i - 1) / 2), i)
    print("{} {}".format((y-x+1)//2, x))
    

        print(a, k)


print(*ans, sep='\n')


    print(b, 1)
    print(beg, ans + 1)


    print(res[0], res[1])


    print(*ans)


                print(1,t)
                print(alpha//beta,t+1)
        print(ans1, ans2)

        
    print(*res)


                print(j,end = "")
                print(str(d[j])+j,end = "")
    print()
    print(ans)
            print(j)
            print(a//2,n)

    print(minf, lenf)

    print(ans[0], ans[1])

	print(a, n)


    print("{0} {1}".format(ans[0],ans[1]))
    


    print(base, floors)


    print(*q)




    print(*an)


    print(int(a), int(n))


    print(ans)

            

    print(ans_d,ans)


    print(str(int(answer_floor)) + " " + str(answer_num))


    print(bottom, SUM)

    print(*ans)

        print(ans1, ans2)


        print(a,c)


    print(search(0, t_count))

    print(dfs(0, win_cnt))

    print(dfs(0, S))


    print(dfs(0, win_cnt))


    print(dfs(0, S))


    print(dfs(0, W))



    print(dfs(0,s,l,v,dic))

    print(ans[tuple([n // 2] * n)])

        print(1615040)
    print(rec(B, 0, 0))

    print(ans)



    print(ans)
        




print(main())





        print(a)



    print(dfs(0,1,dp,n,A))



      print(0)
      print(ans)

            print("Yes")
            print("No")
                    print(ls[i][j],end = "")
                    print(ls[i][j],end = "")
                        print("",end = " ")
            print()
        
                print(ls[i],end = "")
                print(ls[i],end = "")
                    print("",end = " ")
        print()


    print(ans)


        print(ans)


    print(ans)

    print(f"{bin(s)[2:]:0>12}{bin(a)[3:][:52]}")

        print(ans)


print(*ans, sep='\n')


        print(i,end = "")
    print()


    print(ans)


    print(x)
    print(x)

  print(ans)

        
    print(max(ans))

    print(an)


  print(ans)

    print(max(s))

    print(max(sum(p[j][k] for j in range(m)) for k in range(n)))

    print(ans)

    print(ans)




    print(ans)

    print(max(a))

        

        print(ans)

        print(max(p))

    print(max(tot))

    print(max(sum(p) for p in zip(*P)))


    print(ans)
    print(solve(N, M, P)) 

    print(solve(n,s))

        print(max(L))


    print(max(sum(col) for col in zip(*g)))


    print(ans)

    print(max([sum(rr) for rr in [[r[i] for r in s] for i in range(line[0])]]))

        
    print(max(X))

    print(max(sum(i) for i in zip(*a)))

        print(ans)


    print(judge(n, m))

    print(max(students))


  
  print(max_student_score(all_scores))

    print(max([sum([q[i] for i in range(m)]) for q in p]))


    print(solve(N, M, P))


    print(max(ans))

        print(max(list_sum))

  print(ans)


    print(max(ans))

    print(ans)


        print(max_sum)

        print(solve(N, M, P))


        print(*value, sep=sep, end=end)


    print(max(kei))



    print(ans)


    print(max(l))

        print(max(N))

    
    print(max(goukei))

    print(ans)

        print(T)


    print(max(stu))


        print(max(N))

    print(max)

    print(max)

    print(max(score))


    print(check_max_point(p))
        print(max(sumlist))



    print(an)


    
    print(s)

    print(ans)


  print(ans)

    print(ans)
    print(answer_count)

    print(ans)


        print(ans)


        print(solve(H, W, R, S))


        print(*value, sep=sep, end=end)



    print(*result, sep="\n")


        print(ans)



        print(ans)

    print(ans)

    print(i)

    print(count)
        print(count)


    print(ans)


    print(ans)
    print(ans + len(target))

    print(C)

    print(c)

    print(ans)


print(*ans_list, sep = "\n")




    print(cnt)


    print(ans)
    print(ans)


    print(ans)


    print(ans)


    print(ans)


    print(x)

    print(ans)

    print(res)

    print(c)

    print(ans)


    print(ans)


    print(c)

    print(ans)


    print(ans)

    print(ans)



    print(ans)

        print(ans+len(s))
    print(ans)


    print(cnt)

    print(k)


    print(ans)



    print(ans)


    print(total)


    print(ans)

        print(ans)

  print(ans)

    print(cnt)

            
    print(ans)

    print(press)

    print(ans)


  print(str(g))



    print(count)


    print(ans)

    print(ct)

    print(count+len(string))



    print(result)







    print(i)

				
	print(ans)

    print(count)

    print(sums)
        



    print(ans+len(s))


    print(p)

    print(N)

    print(ans)


        
    print(suma)
    print(move)


    print(t)




    

    print(a)



            print(num, end="")
                print(" ", end="")
        print()

        print(n, end='')
            print(' ', end='')
    print()


    print(count)


    print(i)

        print(S)

        print(0)
        print(min(L))
        print(-1)

        print(0)
        print(min(L))
        print(-1)

        print(0)
        print(-1)
        print(min(ans))

        print(0)
        print(min(list(ans)))
        print(-1)


    print(an)



print(*ans_list, sep = "\n")


        print(0)
            print(min(c))
            print(-1)

		print(ans)
		
	print(ans)

        print(0)
    print(ans if ans!=inf else -1)
    

                print(-1)
            print(min(plus))
            print(0)


            print(min(S))
                print(0)
                print(-1)


            print(0)
            print(min(add))
            print(-1)


            print(0)
                print(min(add_w))
                print(-1)
        print(solve(N, M, A, W))


        print(*value, sep=sep, end=end)


        print(0)
        print(-1)
    print(ans)

        print(0)
        print(-1)
        print(min(add_w))

    print(result)




            print(min(weight))
            print(-1)
        print(0)


            print(0)
                print(-1)
                print(min(sorted(list(w))))


    print(f())
                    
        

    print(i)


        print(0)
    print(ans)
        print(0)
        print(-1)
        print(min(Y))
    

    print(A)



        print(0)
        print(-1)
        print(ans)

            

    print(0)
      print(i)
  print(-1)

        print(i)
        print(i)
    print(time()-start)
    print(ANS)
    print(min(dp.values()))

    print(min(list(dp[n].values())))

        print(min(dp.values()))


        
    print(min(dp.values()))



    print(min(dp))
    print((ans-dp[0])//2)
      print("Yes")
      print("No")
      print("Yes")
      print("No")

        print("No")
        print("Yes")
        print("No")
    

        print("No")
        print("Yes")
        print("No")
    


        print("No")
        print("Yes")
        print("No")


        print("No")
            print("No")
                print("Yes")
                    print("Yes")
                    print("No")
        
    print(ans)

	print(ans)

    print(an)


    print(cnt)

  print(ret)



    print(count)

    print(cnt)

    print(sum(s[i:i + 4] == "2020" for i in range(len(s) - 3)))



        print(count)
 
    print(count)

    print(count)

    print(cnt)



    print(ans)


        print(sum(d.startswith('2020', i) for i in range(n)))

	print(sum([1 for i in range(len(s) - 3) if s[i:i+4] == t]))


    print(count)

    print(ans)


    print(count)

  print(ans)


        print(num_2020)

        print(count)
            
        
   
       
       
            
   
            
      
    



    print(ans)
    print()
        print(count)

    print(ans)


    print(ct)

    print(ans)

    print(count)

    print(count(a, "2020"))

    print(s)
    print(c)
    print(ans)


    print(count)

    print(cnt)

        print(ans)







	print(cnt)


    print(count)

    print(ans)

    


    print(ans)

    print(count)

        print(b)
  print(cheak(a,b))
  

    print(ans)


    print(cnt)


    print(count)

    
    print(ans)

    print(k)

    print(count)

        print(sum)

    print(a)


    print(ans)


        print(*ans, sep="\n")
    print(ans)

    print(cnt)

    print(ans)


    print(ans)


    print(len(kmp(A, [2, 0, 2, 0])))

    print(b)

    print(ans)

    print(count)

    print(ct)

    print(ans)

        print(count)

    print(count_2020(n, arr))


    print(ans)

    print(an)


    print(len(s))





    print(len(contact))


        print(sum(is_suspected))

        print(sum(visited))

            











print(*res, sep="\n")



    print(ans.count(True))


    print(len(s))

    print(sum(ans))

        print(sum(is_candidate))
    

    print(*ans, sep="\n")
    print(len(s))


    print(len(S))

   
    print(sum([1 for i in infection if i == True]))



        print(len(s_record))
    print(len(infected))


    print(len(ans))

    print(len(l))


    print(sum(positive))

  print(sum(ans))

  print(sum(inflected))


    print(len(carrer))



    print(len(sick))



    print(sum(l))
            

    print(virus.count(1))

    print(len(carrer))

    print(bin(infected).count('1'))


    print(sum(infected))

    print(ans)

    print(sum(ans))


    print(len(ppap))

    print(infect.count(True))

    print(sum(data))

    
    print(len(dset))




    print(check.count(True))

      print(len(ans))

  print(i)


    print(len(ids))




  print(ans)

    print(len(carriers))
    

    print(sum(virus))



    print(len(p_set))

    print(len(p_set))

    print(fl.count(True))

    print(count)

        
    print(c)

    print(answer)

    
    print(sum(x))

    print(len(seen))


    print(len(st))

    print(sum(contact))
    print(sum(ans))


    print(uf.size(P-1))



    print(len(z))


print(*ans_list, sep = "\n")

    print(sum(li))

    print(len(virus))


    print(uf_tree.size(p))

    print(uf.size(p))


    
    print(uni.size[uni.root(p)])

    print(uf.size(p))

        print(*ans, sep="\n")
    print(len(kansenlist))

  
  print(len(list(set(B))))


        
    print(len(kansen))

    print(i)
    print(i)
    print(time.time()-start)
    print(ANS)
  print(ans)

    
    print(res)

                    


        

    print(i)
    print(i)

    print(time.time()-start)
    print(ANS)
  print(ans)
    print(*sorted(solve(n, m, abss)))

        print(*solve(N, M, E))


            print('size:', len(components), 'sum:', self.components_sum(i), 'Node:', components)


    print(*ans)

            print(min_val[0])
    print(an)


    print(*A)

    print(*a)

    print(max(wan))



        

    print(gcd(*a))

    print(ans)


    print(g)


    print(x[0])


    print(line[0])


    print(g)

    print(*result, sep="\n")


            print(lista[0])
  print(g)

        print(b[0])
  print(solve(list(map(int, input().split()))))

    print(max(A))


            print(max(a))

    print(max(values))




            print(x[i])


            print(data_set[0])
        print(sum(bowls))
            print(m)
    print(max(a_li))

      print(max(A))

    print(gcd(gcd(a, b), gcd(c, d)))

    print(a_li[0])


    print(max(bowl))
    print(lucky_number)


    print(a[0])

    print(v)


    
    print(cheak(a))

    print(ans[i])

    print(sum(cup))


            print(ans)

    print("YES" if all(i for i in ra) and all(j for j in ca) else "NO")

    print("YES" if all(visit) else "NO")
        print("YES" if res else "NO")

        print("YES")
        print("NO")


    print(i)


        print("YES")
        print("NO")


        print("YES")
        print("NO")


        print('NO')
        print('YES')
            
    

  print(i)

        print("YES")
        print("NO")


        print("YES" if ans < INF else "NO")


        print("YES")
        print("NO")
  
  print(['NO','YES'][min(okx+oky)])

        print("NO")
        print("YES")
        print("NO")

        print('YES')
        print('NO')

  print(ans)

        print(max(calc(rt, [], 1)))


  print(solve(n,a))

    print(i)
    print(i)
    print(time.time()-start)
    print(ANS)

    print(cnt)

    print(p)

    print(an)


    print(ans)

    
    print(ans)

    print(ans)


    print(count)


    print(cnt)


    print(ans)

        print(count)


  print(days)
    
        
        

    print(count)


    
    print(counter)

    print(cnt)

    print(i)


            
    print(ans)


        print(ans)
    print(ans)



        print(num_peaks)

  print(cheak(a,b))
  

    print(ans)


    print(peaks)

    
    print(ans)


    print(sum)

        print(peaks)

                
            
        print(count)
   


      print(ans)


  print(peak)

    print(count)


        print(cnt)
    print(cnt)

    print(ans)

    print(ans)


    print(cnt)


    print(count)

        print(ans)

    print(i)


    print(count)


    print(ans)


    print(count)
    print(c)


  print(ans)

    
    print(ans)


    print(count)

    print(peek)


    print(ans)

                print(i)

    print(count)
            


    print(ans)

    print(ans)


    print(cnt)


    print(ans)

    print(ans)
    print(ans)


    print(ans)
        
        

    print(ans)


    print(turn_count)



    print(ans)


        print(res)
    

                



  print(i)

    print(cnt)


  print(ans)

    print(ans)

        print(-f(m))
        print(f(n))

    print(ans)


    print(solve())


  print(ans)

        print(-m**2)
        print(ans)

    print(0)
  print(ans)

    print(sps+1)

        print(idx)
            
    print(ans)

    print(ans)


    
    print(ans)

    print(a.index(min(a))+1)

    print(an)


    print(num+1)

    print(A.index(min(A))+1)

    print(ans + 1)


    print(ans + 1)

        print(ans + 1)


    print(ans+1)
        

    print(ans + 1)

    
    print(ans+1)    


        
    print(min1+1)



    print(ans)

    print(ans.index(min(ans)) + 1)

    print(i)


    print(ans)


    print(ans)


  print(ans+1)


  


        print('OK')
            print(min(l1[i], l2[i]), i)
        print('NG')

    print(*i)


        print("OK")
                print(1, i)
                print(n - 1, i)
                print(now, i)
                print(now - 1, i)

    print("NG")


    print("OK")
        print(A[k], k)
        print(B[k], k)
      print("NG")
      
      


        print("OK")
                print(j,i,sep=" ")
        print("NG")

    print("OK")
        print(j+1,i)
  print("NG")


        print("OK")
        print(i, y)
        print("NG")
            print("OK")
                        print(j, i)
                print("NG")


        print(*i)
    
                


        print(*i)

        print(*aft[i],sep=" ")

    print(*C[i])


              print(6-[i1,i2,i3,i4,i5,i6].count(0))
  print(7)

              print(6-[i1,i2,i3,i4,i5,i6].count(0))
  print(7)

              print(6 - [i1, i2, i3, i4, i5, i6].count(0))
    print(7)

  
  print(ans)

    print(an)


        print("Yes")
        print("No")
                        
                    
            
            

            print(ans)
            print('No')
        print('Yes')

            print('Yes')
            print('No')

        print("Yes")
        print("No")
        print("Yes")
        print("No")


    print('Yes' if all(gems.values()) else 'No')


print('\n'.join(ans))

    print(name +":" + str(type(var)) + " = " + repr(var), file=stderr)
        print("Yes" if len(g) == 0 else "No")
            print('Yes')
            print('No')

    print('Yes' if solve(n) else 'No')
    print('Yes')
  print('No')
        print("Yes")
        print("No")
            
        
    


            print('No')
        print('Yes')

        print("Yes")
        print("No")
    

    print(result)

        print('Yes')
        print('No')

    print('Yes' if p == n else 'No')

        print("Yes")
        print("No")

        print("Yes" if i else "No")


        print('Yes')
        print('No')

            print('Yes')
            print('No')
        print("No")
        print("Yes")





        print("No")
        print("Yes")

        print("Yes")
        print("No")


        print("Yes")
        print("No")

    print("Yes" if n == 0 else "No")

        print('Yes')
        print('No')

        print('Yes')
        print('No')

    print("Yes" if f else "No")

            print("Yes")
            print("No")


    print('No' if l else 'Yes')

    print(['Yes','No'][bool(b)])

    print('Yes' if got == N else 'No')

        print("Yes")
        print("No")


    
        print('No')
        print('Yes')


        print("Yes")
        print("No")



    print("No")
    print("Yes")


        print("Yes")
        print("No")


			print("Yes")
			print("No")


            print("No")
            print("Yes")


        print("No")
        print("Yes")
    print(['Yes','No'][bool(b)])

            print("No")
        print("Yes")

    print(a)


        print('Yes')
        print('No')

    print("No" if points else "Yes")
		print("Yes")
		print("No")

            
        print({True:'Yes', False:'No'}[p.judge()])

    print('Yes' if n==0 else 'No')

        print("Yes")
        print("No")


            print("No")
        print("Yes")


    print(ans)


    print("stones::")
        print(stones[i])
    print("------------")
    print("picked???")
        print(i)
    print("----------")
            print("No")
        print("Yes")


        print("Yes")
        print("No")

            print("Yes")
            print("No")
                    print("No")
        print("Yes")
    print("No" if nums else "Yes")

        print("Yes")
        print("No")

        print("Yes")
        print("No")

        print("Yes")
        print("No")

        print("Yes")
        print("No")
            print('Yes')
            print('No')



print(main())



        print('Yes')
        print('No')


    print("Yes")
    print("No")

    print("Yes")
    print("No")

        print("Yes")
        print("No")


        print("Yes")
        print("No")


		print('Yes')
		print('No')

    print(a)

    
    

    print(an)


    print(l.index(a - 1) + 1)


    print(amida[a])
  
  print(now)


    print(now+1)

        print(j)

        
        print(a)

        print(a)
    print(a)
            print(i+1)
    
    print(amida[a])


        print(a)


    print(a)

    print(A)



            print(now_bar + 1)
    print(vl)



print(main())



    print(a)

    print(amida[a - 1] + 1)

	print(a)

    print(now)

        
        print(res.index(a) + 1)

    print(idx.index(a)+1)

    print(a)



    
    print(dist.index(a))

    print(a)


	print(a)


        print(currentPlace[1])
  print(a)



    print(a)

    print(a)



    print(current)

            print(i+1)


    print(a)

    print(A + 1)


    print(place[a])

    print(pos)

            print(now+1)
    print(current+1)
        
    

    
    print(org_num.index(a)+1)
        


    print(currentBar)

    print(pos)

    print(a)

        print(res[a-1])

    print(cur)


    print(a + 1)


    print(a)

            print((j + 1) // 2 + 1)

        print(a)

    print(a)

    print(s+1)

    
    print(x)

  print(a)

        
        print(scan(image, W))
        


print(main())



        print("SAFE")
        print("SUSPICIOUS")

    print('SAFE' if is_safe(image, p) else 'SUSPICIOUS')

            print('SUSPICIOUS')
        print('SAFE')


            print("SUSPICIOUS")
        print("SAFE")


      print("SUSPICIOUS")
    print("SAFE")

        print('SUSPICIOUS')
        print('SAFE')


                    print('SUSPICIOUS')
                    print('SUSPICIOUS')
            print('SAFE')

        print("SAFE")
        print("SAFE")
        print("SUSPICIOUS")



    print(solve(h, w))


            print(ans)
            print(0)




print(main())


    print(sum(i != j for i, j in zip(intersections, intersections[1:])))

    print(0)
  
  print(ans)

    print(count)

    print(ans)

    print(max(ans, 0))
            
    
    

    print('\n'.join(ans))

        
        print(min(map(sum, zip(d1, d2, d3))))


    print(ans)

  print(ans)

    print(ans)


    print(current_best)

        print(ans)


    print(min([from_i[s][i] + from_i[i][g1] + from_i[i][g2] for i in range(n)]))
  
    print(ans)





print(main())


    print(ans)


    print(min(D[s][i] + D[i][g1] + D[i][g2] for i in range(N)))

    print(an)


        print(message(input()))


    print(''.join(ans))

        print(''.join(ans))

    print(*a, sep="")
    

		print(solve(mm,cmd))


    print(res)

        
    print(ans, end='')

    print("".join(answer))
    

    print(r)

        print(dic[c[0]][(len(c)-1)%len(dic[c[0]])],end='')
    print()

   print(output)

        print(dic[c[0]][(len(c)-1)%len(dic[c[0]])],end='')
    print()

    print(message)

        print(messeagedone)
	print(r)

		print('')
			print(s[0][s[1]], end='')
		print('')
    print(b)


      print(ans[j])
      print(ans[j], end = "")

        print(word)

    print(*res,sep="")
        print("".join(ans))


  print(''.join(ans))


    print("".join(ans))


                print(charset[(counter - 1) % len(charset)], end='')
    print()

        print(a[d][(len(c)-1)%len(a[d])],end='')
    print()

                print(button[int(key)][(cnt - 1) % len(button[int(key)])], end = "")

    print()

    print(str,end="")
    print()


	print(*ans, sep='')

                print(string[num][count % len(string[num])], end="")
    print()


    print(i)


                print(phone[num][-1], end="")
                print(phone[num][kaisuu-1], end="")
    print()


    print(''.join(ans))

                    print(lst[int(x)][k], end = "")
    print()

    print(ans)


    print(ans)

    print(S[i],end="")
  print("")

    print(ans)

    print(ans)


    print(ans)

    print(i)

    print(*ans,sep="")


    print(ans)

  print(ans)

    print(''.join(ans))



    print(ans)

    print(ANS)
        

                print(end=lst[now][(cnt - 1) % len(lst[now])])
    print()

                print(s[num-1][(cnt-1) % len(s[num-1])], end="")
    print()


    print(ans)
        

    


    print(s)

    print(moji)



print(main())



  print("".join(l))

    print("".join(c))


  print(''.join(ans))

            print(dic[int(s[j])][index], end='')
    print()

    print("".join(ans))

            print(button[inputStr[j-1]][(count-1)%len(button[inputStr[j-1]])],end='')
    print()

    print(S)



    print(ans)
        

    print(i)

    print(message)


    print(buff)

            print(button[forward[0]][forward[1]],end="")
    print("\n",end="")
            


            print(b[s][c % len(b[s])],end="")
    print()


        print()
            print(*A[i])

    print()
    print(10, A - A2)
    print(50, B - B2)
    print(100, C - C2)
    print(500, D - D2)
    
    print(ans.rstrip())

print('\n\n'.join(ansOut))


print('\n\n'.join(output))

        print(aa[i]*10, cc[i])

            print("")
    
            print(10,tn-tn2)
    
            print(50,ff-ff2)
            
            print(100,hn-hn2)

            print(500,fh-fh2)
    print(10,a-a2)
    print(50,b-b2)
    print(100,c-c2)
    print(500,d-d2)
    

  print()
            print(cc, aa - mm)

    print()
        print()

            print(coins[i],has[i] - surplus[i])

        print('')
        print('{0} {1}'.format(k,v))



print(main())



        print()
    print('10 %d\n'%(max(a-m10,0)) if max(a-m10,0)!=0 else '', end='')
    print('50 %d\n'%(max(b-m50,0)) if max(b-m50,0)!=0 else '', end='')
    print('100 %d\n'%(max(c-m100,0)) if max(c-m100,0)!=0 else '', end='')
    print('500 %d\n'%(max(d-m500,0)) if max(d-m500,0)!=0 else '', end='')


        print()
            print(coin[i], pur[i] - afterpur[i])

        print()
            print(money[i],li[i] - lis[i])
            print()
                print(coin[i],L[i]-change[i])

        print()
    
            print(yen[i],coins[i]-arr[i])
    


            print(types, saifu - tsuri)
            
    print()
        print()
            print(f"{prace[i]} {a}")


            print("")
                print(T[i],A[i])
        print()
            print(money[j],ans[j])


            print(f"{amounts[k]} {C[k]}")

        print()
		print()
			print('{} {}'.format(c[i], m[i]-r[i]))

            print(str(coin_values[i]) + ' ' + str(use_coins[i]))
 
            print('')
            print()
            print(c,n)



        print(money[i],ans[i])
    
            print('')
        print()
            print(coin[i], hand[i])
    
    

            print()
                print(yen, change[yen])


        print()

            print(syurui[i], a[i])
    
        print()
            print(pri, coi)


        print()
            print(money[i], x)
    
    

        print()
        print(str(coin[i]) + " " + str(used))
        print("")
            print(COINS[i], pay)


        
        

        





        print()
            print(c[i], coin[i] - change[i])

            print()
                print(b[j],co[j])
        

        print()
            print(coins[i], int(ans[i]))
        print()
            print(clst[i],shouldpay[i])
        print()
        print(10, R[0])
        print(50, R[1])
        print(100, R[2])
        print(500, R[3])


        print()
        print(money, how[i])
        print(coins[j], an[j])
        print("")


        print(10, ans_a)
        print(50, ans_b)
        print(100, ans_c)
        print(500, ans_d)
        print()


        print(10,A_list[idx])
        print(50,B_list[idx])
        print(100,C_list[idx])
        print(500,D_list[idx])
        print()

            print("YES")
            print("NO")


    print('YES' if dfs(set(range(n)), 0, hx, hy, n) else 'NO')

 
    print(1 + n + num_crossed)


    print(1 + n + num_crossed)

        
        print(area)



print(main())


    print(ans)

    
    print(ans)

  print(ans)

  
  print(ans)

    
    print(ans.rstrip())

    print(ans)


        print(R)
      
  print(-1)

            print(i + 1)
        print(-1)

    
    print('\n'.join(map(str, ans)))

            print(i)
        print(-1)

    print(solve(n, meetables))



print(main())



      print(i)
    print(-1)

                    print(i+1)
        print(-1)
                

            print(d + 1)
        print(-1)

        print(-1)
    print(i)


    print(*result, sep="\n")


                print(t+1)
        print(-1)



    print(solve(n, f))

    print(ans)



                print(i)
        print(-1)
    

                print(b//N+1)
            print(-1)


    print(m)



print(main())




        print(ans)

    
    print('\n'.join(map(str, answers)))



    print(int(ans))


    print(m)

    print(ans)

    print(m)

    print(ans)

        print(res)

    print(m)
    print(min(L))



    print(m)


  print(ans)


    print(ans)

    print(m)


        print(solve(a))


    print(ans)

    print(ans)

    print(ans)

    print(dp[e])

    print(m)



    print(ans)



    print(min_e)

    print(m)
        

    print(m)

    print(ANS[n])



    print(ans)

    print(m)

    print(ans)

    print(ans)

	print(r)

    print(m)

    
    print(ans)

    print(ans)

    print(ans)

        print(N)
    print(ans)


    print(ans)

    print(m)

    print(m)

    
    print(ans)

    print(ans)
        

    print(ans)

        print(minans)
        print(y + z)
	print(ans)
	

    print(main(n))


    print(m)

        print(ans)
    print(r)




print(main())



        print(max(imos))


    print(ans)

   print(max(times))
    print(max(alb))

    print(ans)


    
    print('\n'.join(map(str, answers)))

    print(ans)



    print(Ans)

    print(ans)

    print(max(b))

    print(ans)

    print(ans)



    print(*ans, sep="\n")


    print(MAX)
    print(a)

    print(a)


    print(ans)



    print(ans)


  print(ans)


        print(max_running_trains)


    print(ans)

    print(ans)
        


  print(ans)

        print(ans)


        print(ans)


    print(max(trainlist))

    print(ans)


    print(max(timetable))


    print(max(res))



        print(max(accumulate(lst)))

        print(max(AA))


        
    print(max(it.accumulate(lists)))    

    print(max(line))    

    print(max(ress))

        print(ans)

    print(max(accumulate(time)))


  print(max(accumulate(al)))
    print(max(acc_seq))


        print(max(cumsum))


  print(max(section_acc))

    print(max(list(accumulate(ans))))

    print(max(cA))


    
    print(max(train_ims))


  print(max(day))
  

    print(max(train))

        

  print(max(H))

    print(max(cumsum))

        print(max(itertools.accumulate(train)))


    print(max(ac))

    print(ans)


    print(ans)

    print(max(cc[:ft+1]))

    print(max(train))

    print(max(accumulate(cnt)))

    print(max(S))


    print(max(timetable[:-1]))

    print(max(IMOS))


        print(ans)

        print(max(list(accumulate(yamanote_line))))


    print(trains)

  print(max(s))

    print(max(a))


    print(max(res))




    print(ans)


        print(max(imos))

    print(max(imos))


        print(max_trains)


    print(an)


        print(max(list(accumulate(A))))
    print(max(S))


    print(train_num_max)


    print(max(accumulate(timeline)))

        print(ans)


    print(max(timestamps))


	print(e)



    print(*an)


    print(ans_b, ans_w)

    print(*ans[1:3])


    print(*i)
    


  print(ans_b, ans_w)


    print(b, w)


    print(ansB, ansW)


    print(*ans)

    print(count_dict['B'],count_dict['W'])

    print(bans, wans)


  print(ans_b,ans_w)



        print(ansb,answ)


    print(*ans)


        print(ansb, answ)

        
    print(ans0, ans1)

print('\n'.join(buf))

    print(str(b) + ' ' + str(w))



print(main())



    print(bc, wc)


    print(B,W)

  print(sum(c*c-c for c in Counter(x-y for y in ys for x in xs).values())//2)

        
        print(sum(map(combin, V.values())))
    print(solve(N,M,h,w))
    print(ans)


        print(ans)


    print(ans)


            print("\n".join(list(map(str, total_ans))))

  print(ans)
  
  
  print(ans)



print(main())



    print(f(n,m))
    print(ans)

        print(res)

    print(ans)


    print(ans)

    print(ans)


    print(ans)


    print(ans)


    print(ans)

  print(sum(c*c-c for c in Counter(x-y for y in ys for x in xs).values())//2)

    
    print(ans)

                
    print(ans)

    
  print(ans)


    print(i)

    print(ans)

  print(ans)


print('\n'.join(map(str, buf)))

        print(solve(n, m))






        print(solve(n, m))

    print(ans)



    print(ans)



    print(ans)



	print(count)




    print(ans)


    print(ans)


    print(ans)


    print(ans)
    


        print(ans)


    print(ans)


    print(ans)

        print(count_square(h, w))


    
    print(count) 

    print(solve())





    print(ans)


    print(ans)

    print(an)


        print(ans)


    print(count)

    print(ans)

    print(ans)

    print(ans)

    print(ans)

    print(ans)


    print(b)

    print(ans)

    print(an)


        print(0)
        print(gold_pool//x[m-1])
        print(0)
        print(math.floor(win / player[M-1]))
    


    print(return_x // x[m - 1] // 100 if x[m - 1] != 0 else 0)


    print(prize)


        print(int(ans))

        



        print(0)
        print(sum(x) * 100 * (100 - p) // (100 * x[m - 1]))


        print("0")
        print(int(cum*100*(100-P)*0.01/a))

        
    
        
        
    

    




        print(0)
        print(sum(X) * 100 * (100-P) // (100 * X[M-1]))


        print(0)
        print(sum(X) * (100 - P) // X[M - 1])

    print(0)
    print(count*100*(100-c)//(100*Xi[b-1]))




    print(0)
    print(cnt * (100 - P) // member)

        print(0)
        print(sum(X)*(100-P)//X[M-1])

        print(0)
        print(pool // X[M - 1])


        print(solve(m, p, xs))

    print(r)

    print(sum(x)*(100-p)//x[m-1] if x[m-1] else 0)

        print(int(ans))

    print(int(gold_div / winner) if winner > 0 else 0)

        print(0)
        print((100-P) * sum(src) // src[M-1])

    print(dividents)

	print(math.floor(100 * total * (100 - p) / 100 / winner) if winner > 0 else 0)


  print(r)

    print(int(result_all[i]))

    print(i)


        print(int(pey))
        print('0')

            print(0)
            print(pool // ps[m-1])

    print(0)
    print(int(haitou))


        print(0)
        print(math.floor((100-p)*sum(x)/x[m]))

    print(int(ans))



        print(0)
        print(ans)

        print(0)
        print(ans)


    print(sum(x)*(100-p)//x[m-1] if x[m-1] else 0)
        print(ans)
        print(0)
        print(sum(l) * (100 - p) // l[m])

        print(0)
        print(sum(li)*(100-p)//li[m-1])

    print(ans)


            print(0)
            print(dis//winner)

            print(0)
            print(get)

        print(0)
        print(sum(X) * (100 - p) // X[m])


        print(0)
        print(int(sum(X)*(100-p)/X[m-1]))

        print(0)
        print(int((count)*((100-P))/hitman))

    print(div)

        print("0")
        print(math.floor(100 * sum(vote) * (100 - per) / 100 / vote[number-1]))

        print(0)
    print(ans)


    print(int(retGld / winTickets) if winTickets > 0 else 0)

    print(sum(data)*(100-p)//data[m-1] if data[m-1]!=0 else 0)

        print(0)
        print(total // x[m - 1])

        print(0)
        print(total // vote[m-1])

        print(0)
        print(int(round(sum(X) * 100 * (1 - P / 100) / win, 10)))



			print(0)
			print(ans)

    print(s*(100 - p) // x[m - 1]) if x[m - 1] != 0 else print(0)
    


            print(0)
        print(each_distribution_money)


        print(0)
        print(int(Sum * 100 * (100 - P) / 100 / winner))

        print(str(total_money//win_ticket))
        print('0')
        print(sum(X) * (100 - P) // X[M - 1])
        print(0)

        print(0)
        print(ans)



        print(0)
        print(pool//vote[m-1])

        print(0)
        print(math.floor(gold/X[M-1])//1)

    print(S*(100-P)//X[M] if X[M]>0 else 0)

    

        print(s // win)
        print(0)

    print(sum(x)*(100-p)//x[m-1] if x[m-1] else 0)

        print(0)
        print(tot // X[m])
    



print(main())



        print(0)
    print(math.floor(cnt/cnt_li[M-1]))
    

		print(0)
		print(int(sum(x) * (100-p) / x[m-1]))

    print(ans)

    print(A)

  print(solve(a,x,y))


        print(solve(x,n,m))
    
    print(ans)


        print(ans)

    print(ans)

    print(ans)



    print(0)
    print(sum_)



print(main())



        print(cnt)
	print(r)


    print(nokori)


  print(ans)


	print(d) 


        print(ans)


    print(sum)

    print(sm)

	print(ans)


        print(E)
        print(0)

    print(result)

    print(r)

    print(ans)
    print(ans)
 

    print(ans)

    print(ans)

    print(ans)
             

  print(ans)


    print(ans)

    print(ans)

    print(res)



    print(ans)

    print(ans)


    print(sikaku)


    print(solve(N,M,DP))
    print(ans)


    print(remain + sum(p * d for p, d in risks))

        
    print(hazard)
    
    print(e)


        print(0)
        print(ans)

    print(solve())

    print(ans)

        print(0)
        print(ans)

        print(0)
        
        print(ans)

    print(ans)

        print(0)
        print(ans)

    print(ans)


    print(e)

    print(b)


        print(s)


    print(total)

    print(ans)

        print(count)

    print(ans)


    print(ans)


    print(s)


    print(ans)

    print(sum)
        print(P_sum)

    print(exsum)

    print(solve(M, D, P))

        
        print(ans)


    print(ans)




    


        print(S)

  print(ans)

    print(ans)

    print(s)

    print(dijkstra(links, n, m, freezables, a, h))



print(main())



      print("Help!")
      print(ans)

    print(ans)
    
    print(ans)


  print("a" if 2*max(a)-sum(a)>2*max(b)-sum(b) else "b")

        print("a")
        print("b")

    print(cnt,f(10,b))

				print(p,0)
				print(hs[t],p-hs[t]+1)
        print('{:.8f}'.format(closest_pair_distance(circles)))

    print(f'{find_distance(p, q):.8f}')


                print(factorial(len(rest_nums)))
                print(dfs(0, rest_nums))
            print(ans)

    
    print('\n\n'.join('\n'.join(map(str, ans)) for ans in comp_ans))

        print(ans)

    
    print("\n\n".join('\n'.join(a) for a in ans))

        
        print(max(dist + halfway_dist))

        
        print(solve_level(grid, NX, NY))

    print(*ans_out, sep='\n')

    print(u, d)

        print("{0} {1}".format(up[x], down[x]))


    print(u,d)


    print("%d %d" %(max_up,max_down))
    

    print(maxv, minv)

    print(*d)

    print(up, down)


  print(M, -m)

			
	print(uplen,downlen)


    print(a, -b)

  print(M, -m)

    print(y, -z)


        print(0,end = " ")
        print(hop[0],end = " ")
        print(0)
        print(-(hop[-1]))

    print(max_up, max_down)


  print(maximum_ascent, maximum_descent)


    
    print(max(asc), max(desc))

    print(upper, lower)
    

    print(*a)

    print(*ans)


        print(M, 0)
        print(0, abs(m))
        print(M, abs(m))

        print(max_up, max_down)

    
    print(M, m)


    print(y,abs(x))


			print("perfect number")
			print("deficient number")
			print("abundant number")



        print("perfect number")
        print("deficient number")
        print("abundant number")

        print("perfect number")
        print("deficient number")
        print("abundant number")

        print("perfect number")
        print("deficient number")
        print("abundant number")

    print("abundant number")
    print("perfect number")
    print("deficient number")

        print('perfect number')
        print('deficient number')
        print('abundant number')

        print("perfect number")
        print("deficient number")
        print("abundant number")


        print("deficient number")
        print("perfect number")
        print("deficient number")
        print("abundant number")


        print("deficient number")
            print("perfect number")
            print("abundant number")
            print("deficient number")


        print(p)
        print(d)
        print(a)
            

    print(y)

            print(1)
            print(0)
        
        
        print(0)
        

        print(1) 
        print(0)

        print(result)


    print(check([R,G,B]))

    print(y)

        print(1)
        print(0)

  print(int(ans))

		print("0")
		print("1")
		print("0")

    print(ans)

        print(0)
        print(1)
        print(0)


        print(1)
        print(0)


        print(1)
        print(0)

    print(x)

        print(ans)
        print(''.join(c))
    
        print()
        print(''.join(F[i]))
        print()


        print()

        print("".join(f_i))


    print("".join(mp[j][1:-1]))
    print()

            print(Map[h][w], sep="", end="")
        print()
        print()
                    
            

            print(''.join(all_map[j][i]))
            print("")


  print(solve(a,x,y))


        print(0)
        print(l)

        print(sum(sortlist))
        print(0)

        print(0)
    print(num)

  print(xlst[-1] - xlst[0] - sum(diff[:min(n - 1, k - 1)]))

  print(xlst[-1]-xlst[0]-sum(diff[:min(n-1,k-1)]))

        print(res)

        print(0)
            print(sum(distance))
            print(sum(distance[:1-k]))

    print(f(n,k,x))

        print(0)
        print(ans)
        print(0)
    print(0)
    print(sum(dif[:n-k]))

    
    print(min_length(read()[1], read()))

    print(ans)

        print(0)
    print(x[-1]-x[0]-sum(d[:k-1]))

    print(sum(I[k-1:]))    

    print(sum(I[K-1:]))

    print(sum(I[K-1:]))

    print(sum(I[K-1:]))

  print(ans)

    print(0)
    print(sum(dis[:n-k]))


    print(ans)

  print(sum(d[:t-k]) if t>k else 0)

    print(sum(I)-sum(I[:K-1]))

  print(sum(I[K-1:]))

    print(sum(d[:t-k]) if t>k else 0)

        print(0)
        print(sum(betweenx[:n-k]))
        

    print(solve(X, N, K))

    print([0,sum(c[:a-b])][b<a])

    print(sum(i[k - 1:]))    

    print([0, sum(houses[:a-b])][b<a]) 

    print(sum(D[k-1:]))

    print(solve(n, k, x))

  print(0)
  print(sum(dist[0:(h-g)]))
		print(0)
		print(solve(N,K,X))

    print(answer)

    print(result)

        print(sum(house_diff_ls[:n-k]))
        print(0)


  print(road(x,n,k))

    print(cuntry(N,K,X))

        print(sum(dif))
        print(max(0,sum(dif[:-k+1])))

    print(sum(I[Y-1:]))

        print(0)
        print(length)


    print(solve(N,K,X))


        print(0)
        print(maxl - sum(y[0:k-1]))
        
    print(country_road(n,k,x))

        print(0)
    print(res)
    

    print(country_road(N,K,X))

  print(country(n,k,X))


        print(0)
    print(total - sum(spans[:K - 1]))


    print(result_list[i])

    print(country_road(n,k,x))

        print(0)
        print(sum(rs[:n - k]))

    print([0,sum(c[:a-b])][b<a])

    print(s)

    print('%d/%d'%(n,d))

        print(-1)
            print(-1)
                print(-1)
            print(-1)
    print(res)
    print(an)


            print(-1)
            print(-1)
    print(ans)

    print(ans)


                print(f)
                    print(f)
            print(-1)



print(main())



                print(i-1)
                print(-1)
        print(0)
                print(i+1)
        print(-1)


                print(i)
        print(-1)

        print(done_frame)
        print(-1)





                print(i)
            print(0)
                print(j+1)
        print(-1)

                print(-1)
        print(ans)

        print(ans)
        print(-1)

        print(-1)
        print(flame)

                print(i)
        print(-1)
    
        



        print(-1)
        print(i)


	print(frame)


        print(flame)
        print(-1)

    print(ans)


        print(-1)
        print(ans)        



            print(i)
        print(-1)

            print(i)
        print(-1)

    print(ans)


            print(-1)
                print(flame)
    print(-1)
    print(cnt)

    print(r)

    print(cnt if tgt == lenY else -1)

        print(cnt)
        print(-1)

        print(-1)
        print(ans)


        print(f)

				print(-1)
					print(i)
    print(i)


	print(count)

    print(i)

    print(cnt)

            print(frame_count)
            print(-1)
        print(flame_num)



  print(real)

        print(-1)
        print(i-1)
    
        

    print(frameCount)

            print(ran.get_count() - 1)
            print(-1)

        print(-1)
            print(f)
            print(-1)

    print(an)


  print(m(x,y))

  print(lst[p - 1])



print(main())



    print(sorted(li)[P-1])

            
    print(sorted(lst)[p-1])
    

    print(numli[p - 1])

    print(candi[P - 1])
        
    
    

    print(L[p - 1])


    print(sorted([pr[i]+pr[j] for i in range(n,n+p) for j in range(i,n+p)])[p-1])

    print(cands[P-1])

    print(d[p-1])



    print(lst2[p-1])

    print(sorted([sum(t) for t in itertools.combinations_with_replacement(prime_list,2)])[P-1])

    print(i)

    print(sorted(p[i]+p[j]for i in range(qP)for j in range(i,qP))[qP-1])

    print(psum[p-1])


        print(ans)


    print(lans[p-1])

    



    print(l[p-1])

    print(ans_li[P-1])

        print(t[p-1])

    print(sorted(ans)[P - 1])


    print(sorted(l)[P-1])


    print(hoge[P-1])


	print(m(n, p))

        print(sosu_add[P - 1])



            print(e)

    print(min(dist[N-1]))

  print(min(dist[n-1]))

            print(prov_cost)



print(main())


    print(min(count[n-1]))


	print(ans)

  print(ans)




print(main())


                print(-1)
                    print(file_id)
                        print(storage[index][2])
                        print(-1)
                    print(-1)
        print()


                print(-1)
                    print(id_)
                    print(-1)
    print()


                    print(i[0])
                print(-1)
            print(ans)
    print()




print(main())


                print("Yes")
      print("No")
        print(bfs(W, H))

            print("Yes")
            print("No")
    print(bfs(sly,slx,sry,srx))


                print("Yes")
    print("No")
    print(sum(IsInfected))




print(main())



    print(ans)
        


            
    print(PCs.count(True))

    print(sum(a))


    print(infect.count(True))

    print(sum(ng))


    print(len(infected))

    print(ans)

    print(sum(infected))



print(main())


        print(0)
    print(ans)

  print(i)

    print(time()-start)
    print(ANS)
        print(bfs(k))



print(main())


        
    print(dfs(0))
    

  print('{:.10f}'.format(x),'{:.10f}'.format(y))

  print('{:.10f}'.format(x))

    print(psum + qmax)

        print(0)
    print(dfs(0))
    print(' '.join(map(str,solve(src))))



print(main())



    print(*ans)

    print(ans_s, ans_a, ans_c)

    print(smin,amin,cmin)


    print(min(dp[-1]))



print(main())




    print(mf.run(source, sink))

  
  print(g.flow(S,T))



print(main())


    print(len(se))
    

        
        print(ans)
        


print(main())



    print(ans)
    print(ans)
    print(ans)


    print(ans)


    print(ans)


    print(ans)



    print(ans)

    print(s)

    print([self.get(i) for i in range(min(self.n,s))])

  
  print(ans)

    print(sum)

    print(res)


    
    print(ans)

        print(-1)
            print(x[index[s]])
            print(x[index[s]-1])
    print("impossible")
  print("{:.10f}".format(ans))
    

print(main())
        print('impossible')
    print(ans)


            print(W)
                print(u_cost)
  print(D[0][1])
    



  print('{:.10f}'.format(x),'{:.10f}'.format(y))

  print('{:.10f}'.format(x))

        print("NS", win[0] - 6)
        print("EW", win[1] - 6)

        print("NS {}".format(a))
        print("EW {}".format(b))


print(main())






print(main())


        print("Yes")
            print("No")

    print("Yes")
        print("No")
            print("No")
    print("Yes")
    
    print(*ans[s:s+k], sep="")
    
    

            print(i,end="")
        print()
        print(ans)
            print(s,end="")
        print(s[:k])


print(main())


        print("No")
        print("Yes")
        
    

                            print("No")
    print("Yes")


print(main())


  print("%.016f" % mini)


  print(ans)

        
    print(ans)

    print(ans)


    print(ans)
        

    print(i)

        print(ans)



print(main())


        print(solve(n))



    print(ans)

    print(sum([i[0] for i in dp]))


    print(ans)

            print(count_seq(string))
    print(ans)
  
        

    print(cnt)
    print(c)

    print(cnt)

    print(c)


    print(cnt)

  print(ans)

    print(count)

    print(ans)


    print(ans)


    print(ans)

        print("Miserable Hokusai!")
        print(T[gx + 1][gy + 1])

    print(a[i])

    print(m[a][b] if m[a][b] != 0 else "Miserable Hokusai!")
    print("Miserable Hokusai!" if dp[gx] == 0 else dp[gx])

        print(ans)
        print("Miserable Hokusai!")


    print(heian())

        print('Miserable Hokusai!')
        print(a)


    print("Miserable Hokusai!")
    print(dp[gy][gx])

        print("Miserable Hokusai!" )
        print(ans)

        print("Miserable Hokusai!")
        print(T[gx][gy])

        print("Miserable Hokusai!")
        print(T[gx][gy])



        print("Miserable Hokusai!")
        print(T[gx][gy])    


        print("Miserable Hokusai!")


        print(T[gx][gy])




        print("Miserable Hokusai!")


        print(T[gx][gy])

        print("Miserable Hokusai!")
        print(T[gy][gx])

    print(answers[t])

        print('Miserable Hokusai!')
        print(H[gy+1][gx+1])

    print(dp[gy + 1][gx + 1])
    print("Miserable Hokusai!")

        print("Miserable Hokusai!")
        print(DP[X][Y])

        print("Miserable Hokusai!")
        print(T[gx][gy])

        print("Miserable Hokusai!")
        print(T[gx][gy])

        print("Miserable Hokusai!")
        print(W[gx][gy])

        print("Miserable Hokusai!")
        print(T[gx][gy])


        print('Miserable Hokusai!')
        print(T[yg][xg])


    print(dp[gy + 1][gx + 1])
    print("Miserable Hokusai!")

        print("Miserable Hokusai!")
        print(Heian[gy][gx])

    print("Miserable Hokusai!")
    print(T[x][y])




    



        print("Miserable Hokusai!")
        print(T[gx][gy])

      print("Miserable Hokusai!")
      print(T[gx][gy])
           

        print("Miserable Hokusai!")
        print(keiro[gx][gy])


        print("Miserable Hokusai!")
        print(dp[gy][gx])

        print(dp[g[0]][g[1]])
        print("Miserable Hokusai!")


        print(ans[x][y])
        print('Miserable Hokusai!')

        print(answer)
        print("Miserable Hokusai!")

        print("Miserable Hokusai!")
        print(T[gx][gy])

     print(comb(Gx+Gy,Gy))
        print("Miserable Hokusai!")
        print(root[targ[1]][targ[0]])

                print("Miserable Hokusai!")

                print(mapH[-1][-1])

        print('Miserable Hokusai!')
        print(t[y][x])
                

        print("Miserable Hokusai!")
        print(Txy[y][x])


        print("Miserable Hokusai!")
        print(matrix[G[1]][G[0]])

        print('Miserable Hokusai!')
        print(x)

        print('Miserable Hokusai!')
        print(co)

    print(dp[gy + 1][gx + 1])
    print("Miserable Hokusai!")
  

        print(Z[gx][gy]) if Z[gx][gy]>0 else print("Miserable Hokusai!")








    
    


    
    print(dp[-1][-1] if dp[-1][-1] > 0 else "Miserable Hokusai!")

        print("Miserable Hokusai!")
        print(ans[gx][gy])            
        print("Miserable Hokusai!")
        print(answer)


        print("Miserable Hokusai!")
        print(Tot[X][Y])

        print("Miserable Hokusai!")
        print(ans)

        print("Miserable Hokusai!")
        print(T[gx][gy])

        print("Miserable Hokusai!")
        print(n)

        print("Miserable Hokusai!")
        print(n)

        print("Miserable Hokusai!") 
        print(T[gx][gy])

        print("Miserable Hokusai!")
        print(T[gx][gy])

        print("Miserable Hokusai!")
        print(T[gx][gy])

        print("Miserable Hokusai!")
        print(T[gx][gy])

        print("Miserable Hokusai!") 
        print(T[gx][gy])

        print("Miserable Hokusai!")
        print(path[X][Y])
  

        print("Miserable Hokusai!")
        print(T[gx][gy])
        

    print(ans1 / fact9, ans2 / fact9)

    print("{} {}".format(Decimal(c).quantize(Decimal('0.000001'), rounding=ROUND_HALF_UP), Decimal(1 - c).quantize(Decimal('0.000001'), rounding=ROUND_HALF_UP)))

    print("{} * 10^{} {}".format(v, a, b))

    print(f"{f} * 10^{coef} {unit}")



  print(x , "*", "10^"+str(sisuu), z)

        print("Audrey wins.")
        print("Fabre wins.")


      print("Yes")
    print("No")

        print("Yes")
        print("No")



    print(len(a))

    print(c)

    print(ans)

        print(odd_num)


    print(y)

    print(c)

    print(ans)

    print(DP[n])


print(*ans, sep="\n")


    print(an)


    print(ans)
        

    print(cnt)

		print(r)
    print(y)

    print(cnt)

        print(res)

    print(cnt)


    print(c)

    print(ans)

    print(ans)
    print(ans)





  print(answer)


    
    print(count)


    print(cnt)

        print(ans)  

    print(ans)
    print(-1 if ans == inf else ans)
    print(-sum(M_lis[:M_count]) + sum(M_lis[M_count:]))


            print(t)
        
        print(ans)


            print(count_combinations(n))

	print(ans)


    print(pear)



    print(cnt)

        
    print(count)
print(*ans, sep="\n")
            
            







    print(ans)

    print(ans)



print(main())



    print(cnt)

    print(ans)
    print(count)


    print(count)

    print(f(n))

            print(A[i])
    print(count)



    print(c)


    print(ans)


    print(cnt)

  print(ans)
	print(count)

    print(ans)

    print(i)


                
        print(cnt)

            
    print(a)

    print(C)

    print(ans)


    print(cnt)
        

    print(ans)
    print(ans)

    print(ans)


  print(count)

	print(ans)

  print(ans)
        print(c)

    print(tori)

    print(ans)

    print(cnt)

    
    print(cnt)

    print(a)


            
    print(a)
        

    print(ans)



    print(ans)

    print(a)

    print(a)

    print(cnt)

    print(count)

    print(count)

    print(ans)

    print(ans)


    print(count)

    print(ans-1)


        print(count)

        print(P[i][1])
    print('#')



        print(i[0])
    print("#")

        print(D[i][1])
    print('#')

    print(name)
  print("#")


        print(data[i][0])
    print('#')



        print(data[i][0])
    print('#')

			print(aa[i][1])
		print("#")
			

            print(l)
        print("#")

        print(output[i][0])
    print("#")

    print(i)


    print(i)

        print(l)
    print("#")

        print(ans[x][1])
    print("#")

        print(name)
    print('#')

        print(name)
    print('#')

        print(a[0])


    print("#")


            print(ie[0])
        print("#")


        print(effies[i][0])
    print("#")

        print(effies[i][0])
    print("#")

		print(i[0])
	print("#")


        print(i)
    print("#")
        print(i)
    print('#')

        print(n)
    print("#")


            print(L[i])
        print("#")
        print(D[i][1])
    print('#')

        print(element[0])
    print("#")



print(main())



        print(resultss[i][-j-1][1])
    print('#')

        print(key)
    print('#')

        print(j)
    print("#")
        print(nyan)
    print('#')


  print(i)

    print(time()-start)
    print(ANS)
        print(min(pre_df))
    print(calc(codebook, signals))


        print(a)
        

        print(a)


        
        print(min(dp1))

        print(min(dp))

        print(min(dp))
                    
        print(min(dp_new))

        print(min(dp))
        print(f(n,m))

        print(ans)






print(main())



        print(min(dp))

        
        print(min(dp_new))

        print(a)
        print(a)
        print(a)

        print(min(dp1))



            print(min(dp_cur))

        print(a)
        
        print(min(dp1))

        print(min(dp1))
        print(min(dp1))


        print(a)
        print(a)
  print(i)

    print(time()-start)
    print(ANS)

        print(min(dp1))


    print(min(dp1))




print(main())


  print(ans)



  print('{:.10f}'.format(x),'{:.10f}'.format(y))

  print('{:.10f}'.format(x))


    print(t_out[k])

    print("{} {}".format(max(p), min(p)))

    print(a,b)


    print(top, bottom)


  print(max(lst), min(lst))


    print(max(s),min(s))

    print(total[-1],total[0])

    print(max(a), min(a))

        print(max(p_lst), min(p_lst))

    print(max, min)

    print(max_s ,min_s)
        

    print(max(total), min(total))
    

        
    print(max_sum, min_sum)

        print(str(max(num_list)) + " " + str(min(num_list)))

    print(*ANS)


    print(*ans)

    print(ans)

    print(s)

  print(ans)

    print(c)

    
    print(ans)


    print(ans)


    print(cost)

  
  print(cnt)

    print(rensa)

    print("Yes" if ok else "No")

        print("Yes")
        print("No")


    print("Yes" if f else "No")

      print("No")
    print("Yes")

            print("Yes")
            print("No")


        print("Yes")

        print("No")
        print("Yes")
        print("No")



print('\n'.join(Ans))
            
                

        print(silver,gold,bill)

    print(b//100,e,d)

  print(z, y, x)
 

    print(" ".join([str(x) for x in [b%500//100, b%1000//500, b//1000]]))
    

    print((c%500//100),c%1000//500,c//1000)

        
        print(C[0], C[1], C[2])
        

    print(h, f, t)


    print(ans_100, ans_500, ans_1000)

    print(*ANS[::-1])


  print(a//100, f, s)

    print(int(a100),int(a500),int(a1000))

  print(ans)
  

    print(UF.group_count())


      print(score(hand, dic, point))


  print(max(max_param(vocals), max_param(dances), max_param(looks)))
  


        print(y, 0)
        print(0, y)
        print(0, 0)
        
                print(0, 3)
                print(3, 0)
                print(0, 0)
                
            print(pn[0], pn[1])
            
            print(pn[0], pn[1])
            
            print(pn[0], pn[1])
            
            print(pn[0], pn[1])
            

    
    print(pos,neg)

    print(pl,mi)

        print(y, 0)
        print(0, y)
        print(0, 0)
        
                print(0, 3)
                print(3, 0)
                print(0, 0)
                
            print(pn[0], pn[1])
            
            print(pn[0], pn[1])
            
            print(pn[0], pn[1])
            
            print(pn[0], pn[1])

        print(y, 0)
        print(0, y)
        print(0, 0)
        
                print(0, 3)
                print(3, 0)
                print(0, 0)
                
            print(pn[0], pn[1])
            
            print(pn[0], pn[1])
            
            print(pn[0], pn[1])
            
            print(pn[0], pn[1])

  print(*a)

    print(*ans)



    print(str(over)+' '+str(sub))



print(ans)

    print(ans)
print(ans)


print(ans)



print(main())


print(ans)





print(main())


    
    print(fences_len)



print(main())


    print(f'{cost:.3f}')


print(sum(e[2] for e in edges) - kruskal(edges, N))


print(ans)

print(ans)


print("{:.18f}".format(ans))


print(ans)


print(sm-ans)

                print("YES")
print("NO")




print(main())



            print("YES")
print("NO")




print(main())


  print(4649)
  print(4633)
  print(4594)
  print(4700)
  print(4551)
  print(4695)
    print(now)
    print("\n".join(["YES" if ans else "NO" for ans in res]))

    print(-1)
  print(h0-rem)
  print(-1)



print(main())


    print(solve())

  print(ans)

print(ans)



print(main())

  print("USAGI")
  print("NEKO")
  print("DRAW")

            print("DRAW")
            print("USAGI")
            print("NEKO")
        print("DRAW")
        print("DRAW")
        print("USAGI")
        print("NEKO")
    print("DRAW")

        print('DRAW')
        print('USAGI')
        print('NEKO')
    print('DRAW')






print(main())


            print(era, y - sy + 1)
            print("Unknown")


            print(e[j-1][0],i-int(e[j-1][2])+int(e[j-1][1]))
            print("Unknown")
            print('Unknown')
            print('Unknown')
            print(gengou, result)

                print(n + ' ' + str(q-y+l))
                print(n + ' ' + str(q-y+l))
        print('Unknown')

            print("Unknown")
            print(e, yy)
            print("Unknown")
        
        
        

            print("Unknown")
                print(era[r-1][2], x - era[r-1][0] + 1)
                print("Unknown")


			print('Unknown')
			print('Unknown')
			print(name + ' ' + str(q-y+length))


            print(*ans)
            print('Unknown')



print(main())



                 print(j[2], x-j[1])
            print('Unknown')

                print(i+' '+str(p-dic[i][0]+1))
             print('Unknown')

                print(a,year- hajime[a])
            print("Unknown")


            print(Name[n],era_year)
          print("Unknown") 

                print(v[2], x - v[1])
            print('Unknown')

                print(e, year - y[0] + 1)
            print('Unknown')

                print(k + ' ' + str(targ-v[0] + 1))
            print("Unknown")
    print(min(ans, cnt))



print(main())





print(main())


        print(ans)
    print("%.16f" % ((x0 + x1) / 2))
    print("%.16f" % ((y0 + y1) / 2))

    print(sum(cost))




print(main())


    print(ans)
        
    print(sum(cost))

    print(ans)


  print(ans)

    print(sum(min(e.cost for e in g.E[i] if sp.dist[e.dst] + e.weight == sp.dist[i]) for i in range(1, N)))


    print(Q - match.solve())
  print(L-f)



print(main())


    print(an)


    print(cnt)


		print(count)
				

        print(ans)
    print(ans)

	print(len([k for k, g in itertools.groupby([c in left for c in s])])-1)

            print(solve(s))

    print(c)

    print(c)

        print(ans)

    print(ans)

    print(cnt)

    print(a-1)


  print(c)


    print(cnt)

  print(mv_cnt)


    print(cnt)


    print(ans)

    print(change)

		print(cnt)

        print(ans)
        



  print(count)


    print(ans)



    print(ans)
        

        print(change_num)


    print(cnt)

	print(ans - 1)

    print(ans)


    print(c)

    print(ans)


    print(ans)
    print(cnt)
        

  print(change_num)
    


    print(count-1)


    print(ans)
    


    print(ans)

  print(ans)

    print(ans)

    
    print(cnt)

    print(ans)

    print(count)
    

    print(sum((S[i] in left) != (S[i + 1] in left) for i in range(len(S) - 1)))
    


    print(ans)
                
                
            


    print(ans)
    print(ans)


    print(ans)


    print(s.count('qp') + s.count('pq'))

    print(count)

    print(count)


    print(change_count)

    print(count)

    print(ans)



    print(ans)
    



print(main())



    print(len(seen))




print(main())



            print(i,end="")
        print()
        print(ans)
        print(bfs(sx, sy, block, t))
    print(solve((start_x, start_y), obs, t))


  print(cnt)

  print(len(reached))

    print(ans)
    

    print(len(dists))



        print(ans)


    print(ans)



    print(ans)
    print(ans)

    print(ans)


    print(sum([0 if Map[i][j] == -1 else Map[i][j] for i in range(200) for j in range(200)]))

    print(ans)


    print(ct.count(1))



print(main())



    print(dp[-1])

    print(dp[-1])

    print(ans)

  print(len(ans))



print(main())


    print(len(expr(Source(S))))



    print("{:0.11f}".format(ans/h/h))


    
print(temp)

print(max(solved_problems))

print(max(l))

print(max([sum(map(int,input().split())) for i in range(n)]))

print(result)

print(max([sum(map(int, input().split())) for _ in range(int(input().split()[0]))]))

print(max(a))



print(ans)


print(max([sum(map(int, input().split())) for _ in range(m)]))


print(ans)

print(ans)


print(max)


    
print(m)
    

print(ans[-1])

print(max(s))

print(num_list[int(a) - 1])


print(ans)


print(max(lst))

print(mc)



print(ans)

print(max_ans)

print(max(l))

print(ans)

print(ans)

print(max(l))

print(count)

print(ma)

print(p_max)


print(max)

print(tmp)
    

print(X)
    

print(ans)


print(a)

print(max(sumdata))

print(max([sum(list(map(int, input().split()))) for i in range(m)]))

print(max(nums))    


print(count)


print(result)

print(c)

print(ans)


print(ans)


print(ans)

print(c)


print(ans)

print(ans)

print(c)

print(ans)

print(3 + 2 * l[-1][-1])


print(solve(S,T)*2+3)

    print("YES")
    print("NO")

    print("YES")
  print("NO")

        print(j)
print(ans)

    print(i)
        print(j)

print(solve(0,0))

print(result)

print(total - res)


print(min(s.count(c) for c in "KUPC"))


print(min([K,U,P,C]))

print(min(s.count(i) for i in 'KUPC'))

print(min(s.count(x) for x in "KUPC"))

print(min(s.count("K"),s.count("U"),s.count("P"),s.count("C")))

        
print(min(kupc))

print(t)

print(min(s.count("K"),s.count("U"),s.count("P"),s.count("C")))



print(min(count_K, count_P, count_U, count_C))

print(min(n.count("K"),n.count("U"),n.count("P"),n.count("C")))

print(a)

print(KUPC)

print(Y[0])

print(min(l2))


    
print(min(k,u,p,c))

print(A)


print(min(K,U,P,C))

print(b)

print(cnt1)

print(m)

print(min(l))


print(min(s.count(x) for x in "KUPC"))

    
print(min(con))


print(z)

print(x)

print(f[0])


print(min(data))

print(b)


    
print(min(k,u,p,c))

print(min(a.count("K"),a.count("U"),a.count("P"),a.count("C")))

print(min(x))

print(b)

print(sum)

print(x)

    

print(min(n))

print(min(l))

print(ans)

print(y)

    print(min(a))
    print(0)


print(m)

print(min(K,U,P,C))

print(a)

print(min(list))



print(min)


print(min(n.count('K'),n.count('U'),n.count('P'),n.count('C')))

print(min)


print(min(s.count(x) for x in "KUPC"))

    print(L.count('K'))
    print(0)
    print(0)
    print(0)
    print(0)
    print(ls[len(ls) - 4])
print(min(d))

print(min(l))


print(min(a))


print(min(K,U,P,C))

print(min(F))

print(min(l))

print(min(e))

print(min(list))

print(min(y))


print(min(a))


print(min(L))

print(min(l))


print(min(a.count('K'),a.count('U'),a.count('P'),a.count('C')))

print(min(k,u,p,c))

print(min(n.count('K'),n.count('U'),n.count('P'),n.count('C')))

print(min(a.count('K'),a.count('U'),a.count('P'),a.count('C')))

print(ans)

print(x)

print(min(Kco, Uco, Pco, Cco))


print(min(n.count(x) for x in "KUPC"))

print(min(list))

print(min(n.count(i) for i in "KUPC"))

print(min(a.count('K'),a.count('U'),a.count('P'),a.count('C')))

print(min(s.count(x) for x in "KUPC"))

print(min(n))

print(min(a.count(i) for i in "KUCP"))

print(min(s.count(x) for x in "KUPC"))

print(min(b))

print(min(kupc))


print(min(lis))

print(min(s.count(i) for i in'KUPC'))

print(min(n.count("K"),n.count("U"),n.count("P"),n.count("C")))

        
print(min(kupc))

print(min(count_K, count_P, count_U, count_C))

print(min(s.count(c) for c in "KUPC"))

print(min(s.count(x) for x in "KUPC"))


print(min(l2))



print(min(n.count(x) for x in "KUPC"))

print(min(lst))

print(min(s.count(x) for x in "KUPC"))


print(min(boards))

print(min(x.count('K'),x.count('U'),x.count('P'),x.count('C')))


print(min(k,u,p,c))

print(a)



print(dp[H-1][W-1])


print(DP[H - 1][W - 1])
    

print(dp[H-1][W-1])

    print(ans)

print(dp[h][w])

print(dp[-1][-1])

print(DP[h - 1][w - 1])



    print(dp[-1][-1])




print("?za")
        print("!OUT")
    print("?"+p)

print("?" + dic["a"].pop())
    print("!OUT")
  print("?" + dic[s[-1]].pop())

print(ans)

  print("".join(mes))

    print("".join(s))

    print(''.join(S))


    print(ans)


  
  print(score(s, p) + score(p, g))

    print(ans)


  print(dist[(keys[-1] + 1, gx, gy)])

    print(DP[m + 1])


print(*(a[int(n)] for n in sys.stdin), sep="\n")


print("\n".join(map(str, [F[x] for x in n])))


    print(cumsum[n+1]+1)

    print(int(ans[a]))


    print(f[i])


        print(farey[ni] + 1)


    print(count[num])

    print(f[n])
    


    
    


    print(q[i] + 1)


print(ans)



print(main())


print(n*inf-f[1])

print(res)



print(solve_kanpsac(knapsac,T))


print(max(dp))


print(solve())



print(main())


print(U[S-1])

print(r+s)


print(ans)

print(ans)

    print(ans + (l - fin)/v)
    print(ans + (l - fin)/u)

            print('{:.10f}'.format(time))
print("{:.12f}".format(ans))
        
        

print((goal - used) / normal + used / fast)


    print("{:.9f}".format(ans))



            print(time + (l - pos) / uv)
            print(time)
print(time)






print(main())


print(f'{t:.9f}')

print(A.count(0)/u + A.count(1)/v)

        
print(time)





print(main())



print(ans)


print(ans)

            
        
print(sum(used) * 2)



    print(ans)



    print(0)
print(ans)

    print(ans)


print(main())



print(ans)


print(ans)

print(ans)

print('{:.12f}'.format(ans))



print("{:.12f}".format(dfs(0, L, R)))


print("{0:.15f}".format(ans))

print('{:.9f}'.format(f(k,r,l)))

print("{:.12f}".format(ans))






print(main())




print(main())


print(ans)
    
    



print(main())


    print('%.8f'%a)

        print(0)
    print("{:.12f}".format(ans))










print(mf.dinic(source, sink))
print(len(ans))
    print(*ans, sep='\n')

print(d.maxFlow(S-1, T-1))

print(len(ans))

print(flow)
print(len(rev_edge))
    print(*rev_edge, sep="\n")

print(f)
print(len(rev_ids))
    print(*rev_ids, sep='\n')


print(a)
print(len(ans))
    print(*ans, sep = "\n")


print(f)
print(len(ans))
  print(i+1)



print(main())


print("%.16f" % solve())



print(main())


    print(solve(N))



print("{:.18f}".format((l+r)*0.5))



print('{:.20f}'.format(ok))

    print(ans)

print(ans)



print(main())



print(ans)



    print(ans)
        print('No')
            print('No')
    print('Yes')
    print('Yes')
        print('Yes')
print('No')


     print('Yes')
          print('Yes')
print('No')


print('Yes' if ok else 'No')



    print("Yes" if ok else 'No')

print(ans)

    print(*t[1:9],sep='')

    print("".join(maze[i]))
        
    

  print("".join(s))


    print(''.join(S[i]))


    print("".join(i))


print("\n".join("".join(S[i]) for i in range(8)))



print(main())



    print(''.join(MAP[y][1:9]))



print((res-mx)//L)



print(main())


print(ans)



print(main())


  print(ans)


    print(flow)




print(main())


    print(i + 1, j + 1, "NESW"[t])
            

    print(i + 1, j + 1, D[d])




print(main())



        print(w)
            print(w)

    print("Yes" if T[gy][gx] < N+1 else "No")


print(main())


    print(bit.sum(0, n))


  print(seg.tree[1])
  
	print('Yes' if ans else 'No')

    print(ans if ans else 0)

print(math.ceil(math.log(int(input()),3)))

print(math.ceil(math.log(int(input()),3)))

        print(ans)
print(solve(n))

        print(i)
print(ans)

print(ans)

print(count)

print(ans)

print(k)


print(cnt)


print(math.ceil(math.log(int(input()), 3)))



print(ans)

print(ans)

    print(ans)


print(ans)

print(ans)

print(ans)

        print(count)
print(ceil(log(N) / log(3)))


    
print(ans)

print(ans)


print(int(log(n - 1, 3)) + 1)

print(ans)

print(ceil(log(int(input()),3)))

print(math.ceil(math.log(int(input()),3)))

            print(i)
    print(1)
    print(ans)




print(main())



        print(i)
    print(ans)

    
print(ans)



print(main())



        print(i)
print(ans)
    


        print(i - 1)
print(ans)
    

        print(n)
print(0)

print(ans-1)


print(ans)

print(ans)

    print(i)
print(ans-1)


print(max([0] + [y - 1 for (x,y) in zip(hist, range(N + 2)) if x + 1 >= y]))

print(ans)

print(ans)

print(ans-1)

    print(ans)

print(ans)


print(ans)


print(res-1)


print(ans)

        print(i - 1)
    print(0)

print(ans)


print(y-1)

print(ans)

    print(min(ans, n))


        print(i-1)



print(ans-1)



print(ans)


print(ans)


print(max(res,0))



print(i)
    
        


print(ans)

print(best)

        print(count)
        print(y)
        print(score + 1)
        print(score + 1)
    print("Miss!!")




print(main())



print(dist[-1])

      print('a')

  print(min(dist[n-1:]))

print(d[n-1])


    print(sum(dp) % MOD)




print(main())


print(ans % MOD)


print(ans)

    

    

            


            
            



    print(1)
print(ans % MOD)

print(ans%mod)

    print(1)

print(ans)


print(ans)


print(ans%M)

print(ans%(10**9+7))

  print(1)
print(ans%mod)



print(main())


  print(-1)
  print('{:.20f}'.format(ans))

    print(abs(Sa) + abs(Sb))
print(ans)

print(ans)


print(ans)


print(ans)

print(ans)
    
    

print(ans%M)



print(main())


    print(min(g_dist[sy][sx], s_dist[sy][sx] + E))
  print(g_dist[sy][sx])



print(main())


print('{:.20f}'.format(ans))

        print("Yes")
        print("No")




print(main())



    print(['No','Yes'][not c])

        print("Yes")
        print("No")

    print('Yes' if lp == rp else 'No')

        print("Yes")
        print("No")
    print(['No','Yes'][r==0])



print(main())


    print(min(a+b for a, b, d in U[gy][gx]))
    print(-1)



print("{:.20f}".format(dp[-1]))

print(a // b)

print(x if x<(1<<31)else x-m)

    
    print(a.bunshi // a.bunbo)



    print(result)

print(tmpv)


    print(0)
    print(ans)

    print(b)

            print(0)

print(ans)

print(['chicken','egg'][r=='e'])

            print("Rabbit")
    print("Rabbit")
    print("Cat")


print(['Rabbit','Cat'][s=='mew'])

      print("Cat")
      print("Rabbit")
    print("Cat")
    print("Rabbit")

print(["Rabbit", "Cat"][eval(s,0) == len(s)+1])

    print("Rabbit")
    print("Cat")
    print("Rabbit")

    print("Rabbit")
    print("Rabbit")
        print("Cat")
        print("Rabbit")    


    print("Rabbit")
    print("Cat")
    print("Rabbit")

print("Cat" if dp[0][L] else "Rabbit")



print(main())



print("Cat" if iscat(s) else "Rabbit")




print(main())




        print(-1)

print(ans-m)

                    print(-1)
print(w * b - m)


                print(-1)
print(w * b - M)


        print(-1)
    print(cntl * cntr - m)


    print("Taro" if remain % 2 else "Hanako")
        print("Taro")
        print("Hanako")
    print(even_win)


    print(res if res < INF else -1)


print(main())


        print(n - 1)
        print(ans)

print(ans)


print(ans)

    



print(ans)

    print(sum(count)+(len(count)-1+len(count)-1 if len(count)!=1 else 0))
    print(sum(count)+(len(count)+len(count)-1 if len(count)!=1 else 0))


    print(ans)




print(main())



print(ans)

print(ans)
    

print(ans)

print(ans)

print(ans)

print(ans)            



    print(ans)

print(ans)

print(ans)

print(ans)

            

print(ans)

print(ans)



print(main())




    print("Case {}: {}".format(case, ans))


print(main())


        print("Case {}: {}".format(case, ans))

    print("Case {}: {}".format(case, res[W-1]))
    print(an)


    print(ans[0] if len(ans) ==1 else -1)

    print(c[0] if len(c)==1 else -1)

                    print(-1)
                print(suspect)
                print(-1)


        print(ans[0])
        print(-1)


    print(res)


        print("-1")
        print(cd[0])




                print(-1)
            print(ans)
            print(-1)

    print(ans[0])
    print(-1)

        print(-1)
        print(ans[0])


        print(-1)
        print(potential[-1])


        print(answer[0])
        print(-1)


        print(ans[0])
        print(-1)


        print(ans)
    print(c[0] if len(c)==1 else -1)

    print(e)

        print(ans)
        print(-1)


		print(f[0])
		print(-1)

    print(crime)

    print(solve(A, K))


        print(ans[0])
        print(-1)


    print(ans[0] if len(ans) == 1 else -1)


    print(ans)

        print(ans[0]+1)
        print(-1) 

        print(-1)
        print(now)

        print(-1)
        print(ans[0]+1)



print(main())



    
    print(cand[0] if len(cand) == 1 else -1)



        print(cnt.index(k) + 1)
        print(-1)
            

        print(-1)
        print(idx)


    print(ans)
        

            
        
            

        

                print(-1)
        print(ans)



    

        print(id)
        print(-1)


    print(result)

        print("-1")
        print("%d"%(ans+1))



		print(v[2] + 1, v[0], v[1])



print(main())



        print(i[0],i[1],i[2])


        print(t + 1, -ns, p)




		print('{} {} {}'.format(s.id, s.solve, s.penalty))

    print(*e)

        print(t + 1, -s, p)


        print(*ans)


        print(abs(t) + 1 , c_n, abs(pen))

        print('{0} {1} {2}'.format(i+1, -r, p))

        print(res[i][0],res[i][1],res[i][2])


        print(teamdata[i][2],teamdata[i][0],teamdata[i][1])



        print(i[0], i[1], i[2])

        print(i, a, t)
            

        print(' '.join(str(d) for d in D))

            print(l, i, k)


        print(tid, -ans, pen)

        print(rank[i][2] + 1,rank[i][0],rank[i][1])
    
    
    



        print(*t)


        print(t[0] + 1,t[1],t[3])



    

            print(f'{core_li[i][3]} {-core_li[i][0]} {core_li[i][2]}')


        print(score[0], score[1][0], score[1][1])


            print('NO')
        print('YES')



    


                



  print(ans)

            print("NO")
        print("YES")
                
        print("YES" if is_eq else "NO")

        
            print("NO")
        print("YES")


        print("YES")
        print("NO")




print(main())


    print(dist[m-1][l-1])


    print(d[M-1][L-1])


print(main())


        print(0)
        print(dp[0][1])

    print(i + 1)
  print(-1)

        print(x.index(i))
print(s)

    print(w+1)
    print(-1)

print(ans)

        print(i+1)
    print(-1)


print(number)

print(ans)

            print(j+1)
    print(-1)

        print(i + 1)
        print(i + 1)
print(-1)


print(ans)

            
print(clock + 1)
            

print(a)

   print(-1)
         print(i + 1)
    print(-1)
        print(i+1)
    print(-1)
    print(a[0])

    print(-1)
    print(index+1)

print([s[-1],'o'][s[0]=='o'])

    print("x")
    print("o")
    print('o')
    print('x')
        print('x')
        print('o')


print(sum(a))

print(sum(anger))

print(len(ans_set))


print(len(out))

      print("Impossible")
    print(ans)
    print(ans if covered == n else "Impossible")
    print("Impossible")
    print(DP[m][n])


    print(ls[i % len(ls)])
      print(day)
    print(restore[y])


print(ans)

        
    print(ans)
    
print(f)

    print(i, end="")


print()


print(ans)

print(ans)



print(result)


print(ans)

print(ans)

    print(cnt)

    print(c)

    print('\n'.join(answers))


    print(ans)


    print(cnt)



    print(cnt)


            print(0)

        print(cnt)        
    print(num)

            print(-1)
        print(ans)

        

            print(cnt)
            print(-1)
        print(ans)

        print(ans)
    print(ans)

  print(solve(dic, 0, int(input())))

    print(ans)

            print(k)
    print(c)

        print(solve(n))


    print(multiple(input(),0))


    print(func(int(input())))


            print(k)
            print(-1)
    print(ans)


    print(j)

    print(c)

        print(count) 

    print(main(int(input())))


    print(0)
        print(-1)
    print(ans)

    print(ans)
        

        print(0)
            print(iter)
            print(-1)


print(main())



        print(ans)  


        print(ans)
    print(ans)
    print(-1 if ans == inf else ans)
    print(-sum(M_lis[:M_count]) + sum(M_lis[M_count:]))


            print(t)
    print(cnt)

    print(cnt)

        print(count)

	print(c)


            print(ans)
            print(-1)
        print(f[I()])


print(main())



print(ans)

print(ans)

    print(score)
  print(-1)

        print(c)
    print(-1)



    print(cs.sum(a1, a2, b1, b2))





print(main())


    print(mp[y2i][x2i] - mp[y2i][x1i] - mp[y1i][x2i] + mp[y1i][x1i])

        print(ans)




print(main())


            print("no")
        print("yes")
    print(ans)
    print(str(a)+"/"+str(b))
        print(max(ans))
    print(ans)

print(ans)

print(mx)



print(mincost)
print(len(operation))
print("\n".join(operation))


print(cost)
print(len(ans))
    print(*a)


print(main())

print(ans)
print(len(ope))
  print(i,j,k)

    print(ans)

    print(len(ret))
        print(*temp)


print(base + result[-1][1] - BIG * N)

print(ct)
  print(i, j, "write")
  print(i, j, "erase")
  


print(res)
print(len(ans))
    print(i, j, s)


    print(ans)

print(sum(X)-seg.query(0,N+1))
    


    print(N*(N+1)//2 - get(N))

print(N * (N + 1) // 2 - bit.sum(0, N+1))

print(N * (N + 1) // 2 - dp.query(N - 1))


print(sum(a)-seg.query(0,n+1))



print(main())


print(sum(X) - seg.query(0, n + 1))

print((n * (n + 1))//2 - st.query(0,n+1))



print(main())


                        print("error")
print("correct")

                    print("object")
                    print(f'string "{T[1][1:]}"')
        print("no such property")

print(yaml.get(gkey, 'no such property'))


print(d[ans])




print(main())


  print(main1(n,c))



print(dp[0])

print(ans)






print(dp[n])


print(dp[N][N])


print(dp[-1][-1])


print(dp[n][0])





print(dp[n][0])


print(DP[-1][-1])

print(dp[n][0])


print(dp[-1][0])


print(dp[-1][-1])


print(dp[n][0]%m)


print(dp[0])


print(dp[N][0])

print(dp[n][0])
                
        

print(dp[N][0])


print(dp[-1][0])


print(dp[n][0])

print(ans%M)


print(dp[n][0])


print(dp[n][n])

print(dp[n][n])




print(dp[n][0]%1000000007)



print(main())



print(dp[n][0])


print(dp[n][0])


    
    print(dp[n][n])

print(DP[n][0])

print(dp[0][0])

            print("Opened by",ID)
            print("Closed by",ID)
        print("Unknown",ID)

    print(r)

        print( "Opened by " + i )
        print( "Closed by " + i )
        print( "Unknown " + i )

            print('Closed by',key)
            print('Opened by',key)
        print('Unknown',key)

            print('Closed by ' + T_i)
            print('Opened by ' + T_i)
        print('Unknown ' + T_i)

            print("Opened by " + d)
            print("Closed by " + d)
        print("Unknown " + d)


        print("Unknown {}".format(T))
    print("{} by {}".format(["Closed", "Opened"][flag], T))

      print("Opened by",i)
      print("Closed by",i)
    print("Unknown",i)

    print(move[cnt % 2], t)
    print("Unknown", t)

            print("Closed by {}".format(i))
            print("Opened by {}".format(i))
        print("Unknown {}".format(i))


                print("Opened by", t)
                print("Closed by", t)
            print("Unknown", t)


	print("Opened by", x)
	print("Closed by", x)
	print("Unknown", x)
	
       print("Unknown %s" % T)
       print("Opened by %s" % T)
       print("Closed by %s" % T)

            print('Opened by ' + s)
            print('Closed by ' + s)
        print('Unknown ' + s)

        print(msg)

            print("Opened by" + " " + str(i))
            print("Closed by" + " " + str(i))
        print("Unknown" + " " + str(i))

			print("Opened by",t)
			print("Closed by",t)
		print("Unknown",t)


            print("Opened by " + t)
            print("Closed by " + t)
        print("Unknown " + t)

      print("Opened by " + T)
      print("Closed by " + T)
    print("Unknown "+T)

            print("Opened","by",T[i])
            print("Closed","by",T[i])
        print("Unknown",T[i])


            print(f"Opened by {s}")
            print(f"Closed by {s}")
        print(f"Unknown {s}")

            print(txt, "by", T)
        print("Unknown", T)


            print(f"Opened by {T}")
            print(f"Closed by {T}")
        print(f"Unknown {T}")
        

            print(f"Closed by {T}")
            print(f"Opened by {T}")
        print(f"Unknown {T}")
            
    

        print("Unknown",S)
        print("Closed by",S)
        print("Opened by",S)
    


            print("Opened by " + s)
            print("Closed by " + s)
        print("Unknown " + s)


            print("Closed by " + T)
            print("Opened by " + T)
        print("Unknown " + T)

    print(l[c%2]+" by "+ s)
    print("Unknown "+ s)

            print('Opened by', k)
            print('Closed by', k)
        print('Unknown', k)

        print("Opened" if flag == 1 else "Closed", "by", s)
        print("Unknown", s)

			print("Opened by",s)
			print("Closed by",s)
		print("Unknown",s)

        print(('Closed' if closed else 'Opened') + ' by ' + name)
        print('Unknown ' + name)

            print("Opened by", t)
            print("Closed by", t)
        print("Unknown", t)

                print("Opened by " + n)
                print("Closed by " + n)
            print("Unknown " + n)

        print('Opened by '+s)
        print('Closed by '+s)
        print('Unknown '+s)


            print(f"Opened by {i}")
            print(f"Closed by {i}")
        print(f"Unknown {i}")


        print("Unknown {}".format(t))
            print("Opened by {}".format(t))
            print("Closed by {}".format(t))


                print('Opened by', t)
                print('Closed by', t)
            print('Unknown', t)

        print("Opened by" if num % 2 == 0 else "Closed by", act)
        print("Unknown", act)

            print("Closed by {0}".format(ic))
            print("Opened by {0}".format(ic))
        print("Unknown {0}".format(ic))

        print({True:"Opened by ", False:"Closed by "}[D]+t)
        print("Unknown " + t)

        print("Opened by",T[i])
        print("Closed by",T[i])
      print("Unknown",T[i])

                print("Closed by " + U[k])
                print("Opened by " + U[k])
        print("Unknown " + T)

            print("Unknown",t)
            print(ans[k],t)
            print(f'Opened by {t}')
            print(f'Closed by {t}')
        print(f'Unknown {t}')


			print('Opened by {}'.format(t))
			print('Closed by {}'.format(t))
		print('Unknown {}'.format(t))



print(main())



                print("Opened by", A[j])
                print("Closed by", A[j])
        print("Unknown", B[i])
    




                print("Opened by {}".format(t))
                print("Closed by {}".format(t))
            print("Unknown {}".format(t))

            print("Opened by %s" % (p))
            print("Closed by %s" % (p))
print(ans[N - start:N - start + 20])

print(fzbz[s-count-1:s-count-1+20])

print(s[n-fizzbuzzlen(l)-1:n-fizzbuzzlen(l)-1+20])


print(s[offset:offset+20])

print(*fizzbuzz(r)[offset:offset+20],sep="")



print(a[s - 1:s - 1 + 20])


print("".join(ans)[n:n+20])


print(T[n:n+20])



print(ans[m-1:m+19])

print(ans[pos:pos+20])



print(main())


	print("NA")
	print(ans.real, ans.imag)
	print("NA")

    print("NA")
        print(x / 2, y / 2)
    print("NA")

    print("NA")
    print("NA")
print("{:.7f} {:.7f}".format(ans.real, ans.imag))


    print("NA")
        print(f"{Xm[0] / 2:.5f} {Ym[0] / 2:.5f}")
        print("NA")

    print('NA')
        print('NA')

print(x_sum,y_sum)

    print("NA")
    print(ans)


  print('NA')
    print('NA')

print(gx/n,gy/n)




print(main())




print(main())


	print(len(A) - 1)
	print(ret)


print(ans)

print(len(se))

print(len(ans))


  print(len(mem))

print(len(tank1))



print(solve())




print(main())


print('{:.10f}'.format(ans))

print("{:.12f}".format(ans))



print(main())



print("{:.8f}".format(ans))

print(['No','Yes'][n==1])

print('%.10f'%dp[n])

    print(n)

            print(i)
        print(ans)


    print(s)
    print(s)
    print(t)

    print(n)
        print(s[0])
        print(s[-1])

        print(res)


print(ans)


    print(rev[ind-1])
    print(rev[ind])

print("YES" if now == 0 else "NO")

    print("NO")
    print("YES")


			print("NO")
	print("NO")
	print("YES")
			
			

print('NO' if a else 'YES')

    print("NO")
    print("YES")


        print("YES")
        print("NO")
    print("NO")

print(ans)


        
print(ans)

print(dist[goal])



    print(''.join(ans_))


        print(j,end = "")
    print()




print(min(get_dist(w, a - 1, b - 1) + get_dist(w, c - 1, d - 1) for w in range(1, n + 1)))

print(ans)

print(min([f(a,b,i+1)+f(c,d,i+1) for i in range(n)]))

    print(ans)
            print(-1)
        print('\n'.join(ans))

        print(-1)
            print(i)
        print(ai)
    print(-1)


    print(-1)
    print(*ans, sep="\n")

        print(-1)
            print(ans[i])

print(*(result if m_inf not in result else [-1]), sep="\n")

    print(-1)
    print(*ans, sep = "\n")

            print(-1)
    print("\n".join(ans))
            

        print(p)
    print(-1)

    print(-1)

		print(-1)
	print(*ans, sep="\n")


    print(-1)
print(-1 if -1 in results else '\n'.join(map(str, results)))

        print(-1)
        print(dp[i])

        print(-1)
    print(i)

            print(a)
        print(-1)

        print(-1)
        print(i)


print(-1 if -1 in ans else '\n'.join(map(str, ans)))

	print(-1)
		print(a)


    print(-1)
        print(a)
    

        print(a)


        print(ans[i])
    print(-1)


        print(-1)
    print(a)

    print(-1)
    print(*ans, sep='\n')


    print(-1)
    print(*ans, sep="\n")


    print('-1')
  print(l)

        print(-1)

print(*ans, sep='\n')


        print(-1)
            print(i)

      print(-1)
      print(i)
  print(-1)
  print(*ANS,sep="\n")

    print(a)
            
    


    print(-1)
print(dist[n - 1])

print(dp[0])


    print(ans)
            print(-1)
        print(i)
    print(dfs(n-1))
    print(sum(dp[n-1][:4])%mod)

  print((sum([sum(line) for line in dp[n]]) + sum([dp[n][0][slide_limit] * (n - slide_limit) for slide_limit in range(n + 1)])) % 1000000)

    print(an)


    print(''.join(ans))



    print(ans)



    print("".join(ans))

  print(ans)

  print(answer)

    print(''.join(ans))

    print(ans)

        print(idx, end = "")
    print()

        print(ch,end='')
    print()

    print("".join([c[c.index(i)+j] for (i,j) in zip(s,l)]))



    print(ans)


  print(ans)

    print(ans)

        print(ans)

        print("".join(s))

    print(ans)


            print(e)
        print(ans)


    print("".join(ans))

    print(''.join([al[c - k[i % len(k)]]  for i, c in enumerate(s)]))


    print(res)
        
    


        print(num2alp[id], end="")
    print()


        print(a[(a.index(s[i]) - k[i%n])%52], end='')
    print()


        print(chr(x), end="")
        
    print()

        print(l[(m - k[i])],end="")
    print()


        print(l[(m - k[i])],end="")
    print()

        print(char_list[j-keys[i%len(keys)]],end="")
    print()

    print(ans)




print(main())



    print("".join(ans))



        print(alpha[idx],end='')
    print()

        print(end = chr(x))
    print()

    print("".join(ans))

    print(*s,sep='')

    print(x)
    print(x)
    print(x)
    print(x)

    print(sm+sum(w))
      print(ans+i)


print(main())


        print(s + sum(map(lambda x: x[1], rw)))
        print(rw[-1][0] * 2 + sum(map(lambda x: x[1], rw)) - j)
        


        print(read_t+write_t)

    print(read_t+write_t+sukima-dp[-1][-1])

    

            print(0)
        
        print(cost)



print(main())


        print(0)
        print(ans)

    print(ans)


    
  print(ans)
  
  
    print(ans)

        print(nexts[0][0])
    print(max(minvals))


print(len(res))
    print(len(ans))
        print(a,b)

print(len(l))
    print(i,j)


print(len(ANS))
    print(st, t)


print(len(a))
print(s)



print(len(list(set(par))) - 3)

print(len(p)-1)


  print(max(dp)) 

print(dp[W])


    print(a)
    print(a)

print('INVALID' if s.isalpha() or s.isdigit() or s.islower() or s.isupper() or len(s)<6 else 'VALID')

    print("INVALID")
    print("VALID")
    print("INVALID")

   print("VALID")
  print("INVALID")

    print(ng)
        print(ng)
    print(ok)
    print(ng)

    print("INVALID")
        print("INVALID")
        print("VALID")

    print("INVALID")
    print("VALID")

        print('INVALID')
        print('INVALID')
        print('INVALID')
        print('INVALID')
    
    print('VALID')
    print('VALID')
    print('INVALID')

    print("INVALID")
    print("VALID")

    print("INVALID")
        print("INVALID")
        print("VALID")

        print("VALID")
        print("INVALID")
    print("INVALID")

    print("INVALID")
    print("INVALID")
    print("VALID")

    print('VALID')
    print('INVALID')

    print("INVALID")
        print("INVALID")
        print("VALID")

    print('VALID')
    print('INVALID')

    print("INVALID")
        print("INVALID")
        print("VALID")

    print("VALID")
    print("INVALID")


                print("VALID")
                print("INVALID")
            print("INVALID")
        print("INVALID")
    print("INVALID")

    print("INVALID")
    print("VALID")
    print("INVALID")


    print("INVALID")
    print("VALID")

                print("VALID")
    print("VALID")
    print("INVALID")

print([s,'TLE'][s>1e9])

    print("TLE")
    print(time)

print(t if t <= TL else 'TLE')


    print("TLE")
    print(time)


    print("TLE")
    print(time)

	print(ans)
	print("TLE")



    print("TLE")
    print(ans)


print(f if f <= 1e9 else 'TLE')

print(ans)


print(ans)


print(ans)


print(m-ex-ey if m-ex-ey>=0 else -1)

print(*ANS)


print(*a)

    print(0)
    print(pow(2, N-rank, MOD))


        print("no")
        print("yes")
        print("no")




print(main())


      print("no")
      print("no")
      print("yes")



print(main())


                        print(0)
            print(len(ans))
                print(i)
        print(1)
        print(ans)
        print(ans[(n-1)//2])
                print(c)
      print(c)
    print(res)



    print(ans[len(ans)//2])


  print(*args, end=end, file=sys.stderr)
  print(cost[len(cost)//2])




  print(max(ans,-1))


    print(ans)
print(a)

    print("kogakubu10gokan")
    print(rename[-1][1])
            print(rename[i][1])

print(name[b-1])

        print(s)
        print(ans[i])
print(ans[-1])

print(N[idx])


print(*a)

      print(*t)
    print(-1)
	print(-1)
	print(" ".join(map(str,ans[1:])))

        print(*P)
print(-1)






print(main())


                    print("No")
    print("Yes")
    print("No")

    print(judge(src))



print(main())



        print("none")
        print(max_)
        print("ambiguous")

        print("none")
            print(l)
            print("none")
            print("ambiguous")
                
            


    print(dfs(N-1, 0))



print(main())



        print(dp[total_digit + 1][0])


    print(dp[-1][0])


  print(calc(a,b,c,n-1,0))

    print(ans)

    print(dp[0])

    print(dp[-1][0])


    print(ans)
        print((pow(2, k, MOD) + 1) % MOD)
        print(pow(2, N, MOD))

    print(exp(s, 0)[0])


    print(expr())


  print(expr(s))

    print(expr(s))


print(s)



print("".join(ans))


print(max(dp))


    print("Broken")
        print("No")
        print("Yes")
        print("Unknown")

    print("Broken")
        print("Unknown")
print(key[0])

    print(-1)
        print(-1)

print(max(dp))


print(dp[N-1])


print(G.flow(source, sink, N)[1])

    print(mcf.flow()[1])


print(res)


print(res[1])

    print(an)


        print(cnt)


        print(0)
        print(cnt)

        print(c)
        

    print(ans)

	print(len([t for t in zip(f[1:], f[:-1]) if t in p]))

    print(c)

    print(a)

    print(cnt)

    print(ans)

        print(count)
                
    print(cnt)

    print(ans)
    

    print(i)


    print(cnt)


    print(ans)

    print(cnt)

    print(res)

  
  print(answer)


    print(cnt)

        print(manager.count)


	print(ans)

    print(x)

    print(*answer,sep="\n")


    print(ans)


    print(ans)




    print(ans)


    print(ans)

    print(cnt)

    print(ans)

    print(e)

    print(c)

    print(c)

    print(c)

    print(count)

        print(s)

    print(x)

    print(ans)

    print(ans)
            
        

    print(ans)


    print(n)


    print(point)

    print(ans)

        print(cnt)

        print(ans)

    print(score)



    print(cnt)

    print(ans)

    print(int(c))


		print(cnt)

    print(i)


    print(ans)



    print(cnt)

	print(cnt)



    print(cnt)



    print(cnt)


        print(count)
    print(cnt)


    print(c)


    print(ans)


    print(c)

    print(cnt)

    print(cnt)
    


    print(ans)
    


    print(ans)

    print(ans)

    print(c)

    
    print(cnt)

    print(cnt)

    print(count)



    print(count)


    print(i) 


    print(c)

    
    print(cnt)

    print(ans)






print(main())



        
print(*ans, sep="\n")        


        






        print("".join(S))
            print("".join(line))



print(main())




        print(SS[0])
            print(tmp)


            print(char,end='')
        print()

    print(pS.cipher())


    print(read())


    print(ans)


    print(s.replace('?', 'A'))

    
    print(T[0])

    print(res)


    
    print(p.decode(S))

    print(lis[0])


    print(All())

        print('A' if c=='?' else c,end='')
    print()


  print(nest[0])

  print(''.join(ans))


    print(s)


    print(s)

    print(s)
    print(ans)


    print(cipher(s))





print(main())


    print(start,end)
    print("".join(change_alpha))

    print(ans)
        print(-1)
        print(ans)


print(main())


    print('{:.10f}'.format(i))



print(main())




        print(p)
        print(f"{p}/{q}")


        print(ans1)
        print(str(ans1)+'/'+str(ans2))



        print(deno)

        print(str(deno)+'/'+str(num))



        print(lst[0] * 90)
        print(y)
        print(f"{y}/{x}")
        

        print(ans)
        print(str(ans)+'/'+str(2**(count-1)))

        print(ans)
        print("{0}/{1}".format(ans, mot))

  print(ans)

    print(calc(S))



print(main())



    print(ans)

	print(angle)

  print(x)

            print("0"*m)
            print("?"*m)
    print(*ans,sep = "")


print(main())




    print(true_ans)

    print(*ans, sep="")

      print(table[res[i].pop()],sep="",end="")
      print("?",sep="",end="")
  print()

    print(flow, cnt)

    print(str(ma) + " " + str(res))

    print(ans)

  print(ans)


        print(ans % MOD)
    print("%.16f %.16f" % res[1])




print(main())


    print("Yes")
    print("Yes")
print("No")


        print('No')
        print('Yes')


print("Yes" if ok() else "No")


print("Yes" if min(accW) or min(accH) else "No")


print(['No','Yes'][f(w)or f(h)])

    print('Yes')
print('Yes' if f else 'No')

    print("Yes")
    print("Yes")
print("No")



print('Yes' if check_wifi(map_x) or check_wifi(map_y) else 'No')

  print("Yes")
  print("No")


    print("Yes")
        print("No")
    print("Yes")

  print('Yes')
  print('No')


print('Yes' if check(xyw,0,w) or check(xyw,1,h) else 'No')

	print("Yes")
	print("No")




print(main())



        print("No")
print("Yes")


  print('Yes')
  print('No')

        print('Yes')
        print('No')

  print('No')
  print('No')
print('Yes')


    print("No")
        print("Yes")
                    print("Yes")
    print("No")
            print("Yes")
                    print("Yes")
                print("No")
print("No")

  print("Yes" if ok(w,xs,ws) or ok(h,ys,ws) else "No")


print(sum(min(ai, li) for ai, li in zip(a,l) if ai > 0 ))





print(main())


print(ans)




print(ans)


print(sum([max(0, min(alst[i], max(left[i], right[i]))) for i in range(w)]))


print(sum(ts))


    print(solve(xyuv))
    print(0)
print(dp[N])

        
print(dp[-1])

print(dfs(p,s,characters,cmin,cmax) % (10 ** 9 + 7))

    print(res)

  print(seg.query(l-1,r)[0])  



print(main())



print(x)

print(x)

print(ans)


    print(curr_x)

print(x)
    

print(x)


print(bag)

print(ans)


print(x)

print(b)


print(ans)

print(ans)


print(ans)


print(ans)


        print(c)
        print(ans)
        print(1)
        print(2)
        print(1)
        print(0)
    print(ans)
print(ans)




print(main())



print(ans)

print(ans)

print(ans)




    print(ans)
print(1if n==0else 2//n)

    print(1)
    print(2)
    print(0)

print(ans[n])

    print(1)
    print(2)
    print(1)
    print(0)


    print(1)
    print(2)
    print(0)

    print(1)
    print(2)
    print(0)

    print(1)
    print(2)
    print(0)



    print(1)
    print(2)
    print(1)
    print(0)

        print(ans)

        print(ans)

    print(2)
    print(1)
    print(0)

    print(1)
    print(2)
    print(1)
    print(0)

    print(1)
    print(2)
    print(0)

    print(1)
    print(2)
    print(0)

    print(ans)


    print(1)
    print(2)
    print(1)
    print(0)

        print(c)
        print(ans)
        print(1)
        print(2)
        print(1)
        print(0)
    print(1)
    print(2)
    print(1)
    print(0)



print(main())



    print(1)
    print(2)
    print(1)
    print(0)


print(ans)

      
  print(sum(calc(root))%mod)

    print(r if r < INF else -1)
  print(ans)
print(ans)


print(ans)


print(ans)


print(ans)


            
print(ans)


print(ans)



print(ans)


print(ans)            


    
    
print(res)





print(main())


print(ans)


print(ans)


print(ans)


    print('.'*x+a[i])
    print('.'*depth + s)
        print(ret)
        print("." * depth + dic[npos])


print(main())



    print(ans)
            print(".",end = "")
        print(lis[x])



print(main())



print(f"{ans} / 1")


  
print(ans,'/',1)

print(str(b)+' / 1')

print(n//1+1 if n*2**0.5<n//1+1 else n*2**0.5)

print(ans)


print(ans)


print(ans)


print(max(d * 2 ** 0.5, math.floor(d) + 1))

print("{:.020f}".format(ans))

    print(ans)
print("{:.18f}".format(ans/1000))

print(ans)


    print("{:.10f}".format(ans))



print(main())



print(dfs(0, [0]*N2))

print(*ans,sep='\n')

print(ans)

            print(c)
        print(-1)
print(ans)


        print(c)
        print(alltime+(c-past if past<=c<60 else 60-past+c))
    print(-1)

        print(time)
            print(time)
print(-1)

        print(c + time // 60 * 60)
            print(-1)
    print(c+60*n)
    print(n)


    print(t * 60 + c)
  print(-1)


    print(-1)
            print(c)
            print(-1)
	
print(ans)

    print(c)
        print(60*i+c)
    print(-1)

        print(cnt * 60 + c)
    print(-1)
    

        print(-1)
            print(ans + c - loop)
            print(ans + c - loop)
        print(p)

print(-1)

            print(now // 60 * 60 + c)
            print(now // 60 * 60 + c)
        print(-1)
        print(C)
        print(-1)
            print(60*i+c)
        print(-1)


print(main())



        print(ans)

print(-1)


    print(-1)
    print(ans)







print(main())




print(main())



    print(ans)


    print(ans)

            
    print(ans)

    print(cost)

        print("NO")
        print(ans)
        print(ans)
    print(ans+p*(n*q+(n*(n-1))//2))
print(max(anslist))

print(ans)


print(ans)

    print(ans)      
        print(solve(N,P,Q,menu))
print(max(ans))


print(max(ans))



print(main())



print(ans)


print(max(happylist))

print(a)

        print(ans)
        print(-1)
        print(ans)
    
print(-1)

                print(-1)
                        print(ans)
                        print(ans)
print(-1)

print(min_score)


print(ans)


print(ans)


print(ans)


            print(title)
        print()


      print(title)
    print() 

            print(books[j][0])
        print()

            print(book[0])

            print()

            print(b[1:])
        print()


print(DP[0])



print(cost(0))


print(dinic(0, N, N+1))


print(dinic(0,n,n+1))


            print(-1)
            print(-1)

    print(N)
    print(-1)


        print(-1)
        print(-1)
print(n)


  print(dp[0][n - 1])


print(dp[0][n])


                
    print(dp[0][n])

print(ans)


print(ans**0.5)


print(ans)



print(mn)


    print('-1',time0)
    print(max0**(1/2),time0)
    print('-1',time1)
    print(max1**(1/2),time1)

    print(-1, -1)
    print(max_disA, min_timeA / 60)

    print(-1, -1)
    print(max_disB, min_timeB / 60)

    print(-1,-1)
    print(t1,f1)
    print(-1,-1)
    print(t2,f2)


    print("{0:.10f}".format(round(Al,10)), end = " ")
    print("{0:.10f}".format(At/60))
    print("-1 -1")
    print("{0:.10f}".format(round(Bl,10)), end = " ")
    print("{0:.10f}".format(Bt/60))
    print("-1 -1")

        print('Yes')
        print('Yes')
        print('No')


  print(["No", "Yes"][(acc[index - 1] if index > 0 else 0) >= c])

        print("Yes")
        print("No")



print(ans)


print(ans)


print(ans)



print(sum([v[0] * v[1] for _, v in groups.items()]))

  print(dp[n - 1][l - 1])

    print(score)
  print(-1)

print(dijkstra(s,t))


print('AZ'*c if c else -1)

  print(-1)
  print(ans)

        print(output)
        print("-1")
        


  print(-1)
  print(ans)

print(ans)


print(ans)


  print("Cannot deliver")
  print(ans)

print(ans)

print(ans)




print(main())



    print(flow.solve(S,T,n,d))

    print("invalid")
    print(ans)



print(main())


        print("No")
        print("Yes")
        print("No")
        print(*ans2)
    print(*ba)






print(main())


    print("First")
    print("Second")



print('First' if solve(0, H - 1, 0, W - 1) else 'Second')


    print(an)


    print(ans)


        print(min_diff)


    print(ans)


    print(ans)


    print(mina)

	print(min(abs(b-math.hypot(i,a-i)) for i in range(a//2+1)))

    print(min(r) if min(r)%1!=0 else int(min(r)))

    print(sa)

    print('%.6g'%(min(abs((x**2+(d-x)**2)**0.5-e)for x in range(d//2+1))))


    print(mn)

    print("{:.020f}".format(min(abs(pow(x ** 2 + (D - x) ** 2, 0.5) - E) for x in range(D + 1))))

        print(diff)

    print(ans)

    print("{:.4f}".format(ans))

    print(min([abs(e - math.sqrt(i ** 2 + (d - i) ** 2)) for i in range(d // 2 + 1)]))

    print(m)

        print(e-d)
        print(f'{mi-e:.5f}')
        print(f'{ans:.5f}')

		print(ans)

        print(ans)

    print(ans)


        print(ans)

    print(min(a))


         print(min_num)



        print(minimum)

    print(ans)

    print(min(X))


    print(min([abs(e - math.sqrt(i ** 2 + (d - i) ** 2)) for i in range(d // 2 + 1)]))

    print(min)

    print(ans)
        

    print(ans)



    print(ans)


    print(ans)


    print(ans)



    print(ans)


    print(Min)

	print(min(map(lambda x: abs((x ** 2 + (d - x) ** 2) ** 0.5 - e),range(d + 1))))


    print(ans)

    print(ans)

    print(ans)


    print(e)

    print(a)


    print(min(ANS))
        

    print(ans)



print(main())



    print(ans)




    print(ans)

  print(ans)


    print(ans)



    print(ans)

            print(p[0])
        print(-1)
        print(ok)


            print(k)
    print(-1)


                print(k)
            print(-1)


    print(r if r!=51 else -1)
        



      print(k)
    print(-1)

    print(str(type(var)) + name +":" + " = " + repr(var), file=stderr)
            print(-1)
            print(k)


                print(k)
            print(-1)
      print(k+1)
    print(-1)




        print(-1)
            print(k)
            print(k)
        print(-1)

        print(-1)
        print(k)


        print(-1)
            print(k)
        print(-1)
            print(k)
        print(-1)


            print(-1)
        print(ans)

            print(i)
        print(-1)

    print(ret)


            print(-1)
                    print(a)
  print(ans)

            print(-1)
                print(hh)


print(main())



    print(ans)


        print(func(s, max_str(s), 1))

                print(k)
            print(-1)


                print(-1)
    print(k)

    print(ans)


            print(i)
        print(-1)


        print(solve(kisoku_S=kisoku_S, max_len=max_len))



            print(k)
        print(-1)

        print(-1)
                    print(i)
            print(k)
        print(-1)

	print(k)

        print(result)

            print(k)
            print(-1)
            print(i)
        print(-1)



            print(k)
    print(-1)


            print(k + 1)
        print(-1)



        print(-1) if len(ans) == 0 else print(min(ans))

            print("no")
        print("yes")
    print(ans)
    print(str(a)+"/"+str(b))
        print(max(ans))
        print(s)
        print(parse_expr(s,0))
    print(ans)

  
  print(dp[-1])

    
    print(max_score(0))

            print("Yes")
    print("No")


    print(prime_factorize(q//gcd(p, q)))



print(ans)


    print(ans)

print([c*b,c][b==1])

print(a*q)

    print(ans)
print(ans)


print(ans)

print(ret)

print(ans * q)

    
print(ans)



print(ans)


print(y)



print(main())



                        print(0)
            print(len(ans))
                print(i)
        print(1)
        print(ans)
print(ans)

    

print(ans)


print(a)

print(ans-1)



print(now)

print(val)

print(a)


print(ans)

print(i)




print(main())



    print(0)
    print(ans)


print(prisoner)

    print(main(int(N),int(k)))

print(r)


    print(0)
    print(n-1)
    print(ok)
            
            


    print('No')
    print('Yes')
    print('No')


    print("Yes")
    print("No")
    print("Yes")
    print("No")
        print("Yes")
    print("No")




print(main())



        print("Yes")
        print("No")

print("Yes" if ans else "No")

    print("Yes")
    print("No")

        print("Yes")
    print("No")

        print("Yes")
    print("No")


    print("Yes")
    print("No")

print("Yes" if flag==True else "No")
        

            print("No")
            print("No")
        print("No")
        print("Yes")

    print('Yes')
    print('No')
    print('No')
    print("Yes")
    print("No")


                    print(ans)



print(main())


                    print(score)

print(dp[0])



print(main())



print(max(SCORE))



print(ans)



print(dfs2(find(1)))

print(anstree+ansroop)
  
  print(ans)

    print(ans)




print(main())



print(ans, ans + 1)

print(*ANS)


    print(-1)
    print(k)

        
print(ans)


                        print("No")
                        print("No")
        print("Yes")
        print("No")
    print(ans)
    print(ans)
print(2*((a*b+b*c+c*a)+3*n-s))





print(main())


print(ans)

print(['No','Yes'][f(s,t) or f(s[1:],t)])

print('Yes' if judge(S[::2]) or judge(S[1::2]) else 'No')

    print("Yes")
    print("Yes")
print("No")



    print("Yes")
    print("No")

        print("NO")
        print(ans)
        print("Yes")
                print("Yes")
        print("Yes")
                print("Yes")
    print("No")
        print(ans)


print(main())





print(main())




print(str(ans).zfill(n))


print(str(ans).zfill(l))

print(n-min(s.find('>'),n-s.rfind('<')-1))

print(n - min(c1, c2))


print(n - min(c1, c2))

print(n-res)





print(main())




print(ans_len, ans_id + 1)

print(ans)

            print("NO")
    print("YES")
    print("NO")


            print("NO")
print("YES" if a == un else "NO")


                print('NO')
        print('NO')
        print('YES')


            print("NO")
    print("NO")
    print("YES")

    print("YES")
    print("NO")



    print("NO")
        print("YES")
        print("NO")




            

        


print(ans)
        

print('NO'if a else'YES')

        print("NO")
print("YES" if cnt == 0 else "NO")

        print('NO')
    print('YES' if a == 0 else 'NO')

    print('NO')
        print('YES')
        print('NO')

    print("YES")
    print("NO")

            print("NO")
    print("YES" if a == 0 else "NO")

    print("YES")
    print("NO")

    print("YES")
    print("NO")


    print('NO')
print('YES')


    print("NO")
    print("YES")


  print("YES")
  print("NO")


			print("NO")
	print("NO")
	print("YES")

  print("NO")
  print("YES")

            print("NO")
        print("NO")
    print("YES")
    print("NO")

    print("YES")
    print("NO")

    print("YES")
    print("NO")

    print(solve())


    print("NO")
  print("YES")
  print("NO")

print("YES" if ok else "NO")



        print("NO")
    print("NO")
    print("YES")

        print("NO")
    print("YES")
    print("NO")


        print("YES")
        print("NO")


print(ans)


        print('NO')
    print('YES')
    print('NO')

print(ans)

  print("YES")
  print("NO")


print(ans)


        print("NO")
        print("YES")
        print("NO")

        print("NO")
        print("YES")



        print("NO")
    print("NO")
    print("YES")

print("YES" if isOK else "NO")

        print("YES")
        print("NO")
    print("NO")

    print("YES")

    print("NO")


            print('NO')
        print('YES')
        print('NO')

        print('NO')
        print('YES')
        print('NO')

    print("YES")
    print("NO")

    print("YES")
    print("NO")

        print("NO")
print(solve())


print(main())

            


            print("NO")
    print("YES")
    print("NO")

  print("YES")
  print("NO")

print("NO" if N % 2 or 2 * A - N else "YES")

print(result)


    print("NO")
        print("YES")
        print("NO")

            print("NO")
    print("YES")
    print("YES")
    print("NO")

    print("YES")
    print("NO")

            print("NO")
    print("YES")
    print("NO")

    print("YES")
    print("NO")

		print("NO")
	print("NO")
	print("YES")

    print("NO")
    print("YES")


            print("NO")
    print("NO")
    print("YES")


print(r)

print("NO"if c else"YES")

    print('NO')
  print('YES')
  print('NO')

	print("YES")
	print("NO")

        print('YES')
print('NO')

print('YES' if res == 0 else 'NO')

    print("NO")
    print("NO")
    print("NO")
            print("NO")

print("YES")




                print("NO")
            print("YES")
            print("NO")



print(ans)


    print(ans)


print(ans)


print(ans)


print(t - genkan)


    print(sum(time))


print(t-d)

print(t-d)

print(ans)

print(ans)

print(data.count(False))

print(s)


print(ans)

    
print(study)

print(ans)


print(ts.count(0))



print(cnt)


	print( t - (2*m*n - diff_sum - mini_diff) )
print(res)


print(t)


print(ans)


print(ans)


print(ans)

print(count)


print(sum(x==0 for x in list_time[:t]))



print(ans)


    print(ans)
    print(ans)


print(ans)


print(ans)

print(ans)

    print(r)


print(cnt)

    
print(ans)


print(ans)    

print(ans)

print(t-sum(ans))

print(A[0] - M + max(T - A[-1] - M, 0) + sum(max(0, A[i+1] - A[i] - 2 * M) for i in range(N - 1)))

print(ans)

print(ans)

print(sum(T))




print(main())



print(ans)



print(answer)


        
print(su)


print(count)


    print(inorder(c_tree))



print(construct(new_information))

print(str(dfs(convert(input()), convert(input()))).replace(", ","")[1:-1])

    print('(',end='')
    print(")[{0}](".format(ans[1]),end = '')
    print(')',end='')

print()



print(f(0, 0)[1:-1])

print(solve(input(),input()))

print(tree_to_str(tree))
        


print(*ans, sep="")



print(binary_tree_to_str(''))

print(parser(0, len(S1) - 1, 0, len(S2) - 1))

print(generate(ra, rb))




print(make_ans('N'))




print(main())




print(main())



print(dfs(0, 0, 0, 0, 0, 0))
    
    


print(calc(0,0,0,0,0,0))



print(dfs(0, 0, 0, 0, 0, 0))

print(dfs(0, 0, 0, 0, 1, 0))

  print(ans)

  print('{:.10f}'.format(x),'{:.10f}'.format(y))

  print('{:.10f}'.format(x))

        print(0)
    print(ok)


  print(max(0, math.ceil((C * W0 - R0) / R)))


    print(i)


    print(max(math.ceil((C * W0 - R0) / R), 0))


        print(0)

    print(right)
            print(x)
            
    print(count)
    

    print(math.ceil((w*c-r)/rr) if w*c-r>=0 else 0)

    print(max((c*w0-r0+r-1)//r, 0))

    print(max(0, (w0 * c - r0 - 1) // r + 1))

    print(0 if w0 * c <= r0 else -((r0 - w0 * c) // r))

            print(0)
            print(tmp)


        print(0)
        print(-(-(l[2]*l[1]-l[0])//l[3]))
    print(max((C * W0 - R0 + R -1) // R, 0))

        print(math.ceil(nw/r))

    print(ans)


        
        print(ans)
            

	print(max(ans,0))

    print(ans)

  print(max(0, (W_0 * C - R_0 - 1) // R + 1))

    print(max(0,X))


    print(max((c * w0 - r0 + r - 1) // r, 0))

        print(0)
        print(ceil((c * w - r)/rt))

    print((g + r - 1) // r)

        print(0)
    
            print(a//R)
            print(a//R + 1)

    print(pr)

        print(0)
        print((res + r - 1) // r)


    print(ans)
        print(-(-d // r))
        print(0)
    print(r)

    print(x)

        print(max(tmp // r, 0))
        print(max(tmp // r + 1, 0))


            print(i)
        print(0)
    print(m-1)
        print(0)
        print(m)


            print(x)
                        print(ans)
    print(cnt)



  print(r_count)
  

  
  

        print(min_roux_num)




            print(i)
        print(0)
                print(i)
  print(max(0, (W_0 * C - R_0 - 1) // R + 1)) 

        print(0)
            print((c*w-r0)//r)
            print((c*w-r0)//r+1)


    print(0 if b * c <= a else -((a - b * c) // d))

        print(0)
        print(kosuu)

        print(0)
        print(k)


        
    print(c)

        print(0)
                print(i)
        print(x)
        
                print(x)
        print(x)
    print(x)

            print(0)
                    print(i)
        print(0)
        print(count)
            

    print(i)

        print(0)
                print(num)
  print(n)

  

            print(X)
        print(0)
    print(x)

  print(n)



				print(i)
        print(0)
    print(x)
    print(a)


            print(X)
            print(i)
        print(0)
                print(i)
            print(i)
        print(0)
                print(x)
        
    print(c)

        
    print(c)

    
    print(cnt)



        print(x)

print(*ans, sep="\n")




        print(0)
                print(ans)
      print(ans)


print(main())




    print(res[:-1])

    print(ans)

    print(b2j(rows))

        print(encode(f))

        print(out)


    print(s)
    print(ans)
    print(ass[:])


    print(ans[:-1])


    print('/'.join(ans))



    print("/".join(ans))


    print("/".join(ans))

        print("".join(ans[:-1]))
    print("/".join(ans))

    print(t)

	print("/".join(S))
    print('/'.join(['b'.join('' if len(c)==0 else str(len(c)) for c in ''.join(field[i]).split('b') ) for i in range(len(field))]))


    print(ans[:-1])

  print(to_jfen(mp))

    print('/'.join(ans))



    print("/".join(rows))


    print(ans)


        print(*F, sep = '/')
        print(*F, sep = '/')


    print('/'.join(ans))

    print(S)

    print(ans)


    print(ans)

        
    print("/".join(ans))

        
        

            
        





print(main())



    print(x)
    print(x)


    print(su - res)

  print(ans)

    print(ans)


    print(window - curtain)
    print("%.9f" % (ans))

  print("{0:.7f}".format(ans))



print(main())




    
    print("{:.12f}".format(ans))
        
    
    


  print('{:.10f}'.format(ans))

    print("{:.10f}".format(ans))
    print(f"{ans:.9f}")



            print(x)
            print(x)
            print(x)
            print(x)
    
    print(sum(dlst) + min_score(0, 0, -1))

  print(ans)

    print(dfs(0, 0, 0))

  print(ans%mod)

print(ans)


        print(k)
        print(i)
print(a)

print(ans)

print(len(bin(n)) - 2 if n else 0)

    print(0)
    print(len(bin(n)) - 2)
    

print(len(bin(N))-2 if N > 0 else 0)


    print(0)

print(cnt)

print(0 * (n == 0) + len(str(bin(n))[2:]) * (n != 0))

        print('0',end=' ')
        print(m,end=' ')
    print(m)
        print('0',end=' ')
        print(m,end=' ')
    print(m)    
    print('0 100')
        
        
        


print(*[m]*k, *[0]*(n-k))


print("")

  print(*[0] * (n // 2) + [m] * (n // 2 + 1))
  print(*[0] * (n // 2 - 1) + [m] * (n // 2 + 1))


print(" ".join(points))

  print(dp[-1])

print(DP[m])


    print(ans1,ans2)

					print("Isono-kun")
					print("Nakajima-kun")
					print("Nakajima-kun")
					print("Isono-kun")
				print("Isono-kun")
				print("Nakajima-kun")
					print("Nakajima-kun")
					print("Isono-kun")
					print("Isono-kun")
					print("Nakajima-kun")
	print("Hikiwake-kun")

  print("Hikiwake-kun")

  print("ISONO")
  print("NAKAJIMA")

  print("Love {}!".format(s[:i + 1 + blen]))
  print("mitomerarenaiWA")


print('1\n%d %d'%([1,-1][s>0],abs(s)) if s else 0)


print(len(weight))
  print(*t)

    print(0)
    print(1)
    print(1, -s)
    print(1)
    print(-1, s)

    print(n_prime)
            print("{} {}".format(x_prime, w_prime))


print("".join([x[i] if i not in swap else ("0" if x[i] == "1" else "1") for i in range(n)]))



print(*x, sep='')

    print(''.join(map(str, bits)))
    print(''.join(map(str, allone)))

    print(answer)



print("".join(ans))

print(sum(min(3*t.count(x),t.count(x)+4) for x in set(t) if x!=1)+len(t)-1+t.count(1))

print(res)

print(ans - 1)



print(ans)

print(b)

print(ans if ans != None else "MULTIPLE")


    print(CheckDisit(m))
        print(ans[0])
        print("MULTIPLE")
        


        print(Pxi[0])
        print('MULTIPLE')

    print(P0)

        print(0)
        print(11-sm)
        print("MULTIPLE")
        print(ans[0])

        print(0)
        print(11-sm)
        print("MULTIPLE")
        print(ans[0])


        print(0)
        print(res)
        print(ANS[0])
        print("MULTIPLE")


        print(0)
        print(11-sum%11)
        
        print("MULTIPLE")
            print(k)

    print("MULTIPLE" if answer == -1 else answer)


print(mx)


print(mx)

print(ans)



print(res)

print(1)

print(ma)

print(b)

print(ans)


    print(max_)


print(ans)

    print("-1")
print(ans)

            


print(ans)

print(ans)


print(ans)



print(main())



print("No")







    print("Yes")
    print("No")
        



print(main())



    print("Yes")
    print("No")


print(*ans, sep="")





print(main())



print(*ans, sep="")





print(ans)


print(ans)

        print(i)
            print(j + 1)
        print(0)
    print(n)
        print(j + 1)
    print(0)


    print(solve(n, m, a, b, ds))


print(score)

    print(solve(a, b, n))


    print("NO")
        print("NO")
                print("NO")
print("YES")
    print(*ans)


print(ans)



print(sum([line.count("-") for line in mp]))

    print("kusoge")
    print(ans)


print(ans if ans else "kusoge")

  print(1)
  print(mod_cnt[0] + mod_cnt[1] + mod_cnt[2])
  print(mod_cnt[0] + mod_cnt[1] + min(mod_cnt[1] + 3, mod_cnt[2]))
  print(mod_cnt[0] + min(mod_cnt[1], mod_cnt[2] + 3) + mod_cnt[2])


print(c)


print(ans) 

    print("1")
    print((mod0+mod1+mod2))
        print((mod0+mod2+mod2+3))
        print((mod0+mod1+mod1+3))


print(ans)

print(tnm(n,l,0))


print(N - M - 1)


print(ans)

print(N - M - 1)

    print(N-len(a)-1)

print(ans - 1)

print(n-m-1)

print(N-1-M)

print(n-1-m)

print(count)

            
print(tour-no_vs)
        

print(N-1-M)


print(count)


print(n-m-1)


print(n - m - 1)

print(n-m-1)

print(n-m-1)

print(ans)



print(main())

print(sumrng(n,m,l))

print(ans)


print(main())

print(s)


    print(ans)

print(weight)

print(ans)


print(ans)


print(res)

print(ans)


print(ans)

print(ans)


print(ans)



print(main())



print(main())

        print(sorted(rem)[0])


print(solve())


        print(s)
  print(ans)

print(ans)

      print(total)
print((odd>>1))

print(cnt // 2)

print(ans>>1)

print(sum([x%2 for x in cnt])//2)

print(sum([v%2 for v in collections.Counter(input()).values()])//2)


print(ans//2)



print(ans if ans != 10**5 else 'Saiko')


    print('! 1')
    print('! 1 2')

print('? 1 2')
    print('? 1',i)
    print('? 2',i)

print('!',' '.join([str(u) for u in ans]))

print(ans)


      print(score)
    print(an)


        print(sum(ans))


    
    print(res)

    print(sum(X))

    print(v)


    print(total)

	print(sum(ma))



    print(sum(rec))


    print(sum(cont))

    print(i)


    print(sum(dataset))

    print(c)

    print(ans)



    print(count)


	print(ans)


    print(sum(max_recommend_list))


  print(sum(a))

    print(sum(s))


    print(sum(question_dict.values()))

        
    print(sum(x))

  print(sum(a))

    
    print(sum(score))

    print(sum(max_))

    print(sum(diff))

    print(sum(ANS))


    print(sum([max(i) for i in b]))

    print(ans)

    print(maxi)

    print(res)


  print(sum(dic.values()))

    print(sum)

    print(ans)


    print(ans)
    




print(main())


    print(ans)

        print(total_wet)


  print(ans)


  print(*args, end=end, file=sys.stderr)
  print(ans)




print(main())


    print(ans)





    print(ans)

    print(w)
            

	print(count)

    print(i)

        print(cnt)

    print(ans)


    print(answer)


    print(ans)

    print(total)


    print(ans)

        print(ans-1)
        print(0)


    print(a)

    print(ans)



    print(sum(map(bool, itertools.accumulate(hist[:t], operator.add))))

    print(t - ans - 1)
        

    print(ans)

	
	print(ans)


	print(ans)


    print(sum(x>0 for x in wet[:T-1]))

    
    print(ans)


    print(len([x for x in ans[:T - 1] if x > 0]))


  print(s)

    print(ans)


                print(ma-mi+1)
                print(ma-mi+1)
    print(max(d[-2]-mi,ma-d_[1])+1)
    print(196470 - c)
    print(len(set(ans)))

    print(ans)


	print(vmax-vmin+1)

    print(max_p - min_p + 1)


    print(pmax-min(p_min)+1)

        print(ans_max[k1]-ans_min[l1]+1)
        print(max(ans_max[k1]-ans_min[l2],ans_max[k2]-ans_min[l1])+1)

	print(top_person_score-min_score+1)
        print(point[maxPlayer - 1] - point_fixed[minPlayer - 1] + 1)


    print(ans + 1)


    print(s + 1)

  print(ans + 1)


    print(max_s - min_s + 1)


    
    print(ans)

            print(MaxVal1-MinVal1+1)
            print(max(MaxVal2-MinVal1,MaxVal1-MinVal2)+1)




print(main())


        print(max(P)+1)
        print(max(P)+1-minp)


    print(ans+1)





  
  print(max([max_score[i] - min(min_score[:i] + min_score[i + 1:]) + 1 for i in range(n)]))

    print("%.16f" % dist[N+1])
    print(x)
    print(x)


    print(G.flow(source, sink, N)[1])
    print(res)



  
  print(mcf.flow(S0,T0,2*n))

	print(ans)


print(input().find('xx')+1or n)

print(n)

    print(input().index("xx") + 1)
    print(N)

    
print(ans)


        print(i)
print(n)

        print(i)
    print(N)

        print(cnt)
    print(len(S))

        print(ans)
        print(N)


print(i)

print(a)

            print(i)
print(n)


print(ans)

        print(ans)

print(ans)

    print(i + 1)
  print(n)

        print(-1)
    print(result)

print(-1 if ans < 0 else ans+num*f0)

    print(-1)
  print(ans)

print(ans)


print(result)

print(dijkstra(N, to, s, t))


print(cnt)

print(ans)

print(ans)

print(ans)

print(ans)

print(ans)

print(ans)


print((s[0]=='A')+sum(s[i] >= s[i+1] for i in range(len(s)-1)))

    print((m+1) % MOD)
    print(res % MOD)

print(ans)

    print(ans)
    print(ans)


    print(s%MOD)


    print(s%MOD)

    print((m+1)%1000000007)
    print(ans)

	print(output)

	print(output)

    print("yes")
    print("no")

print(solve())

            print(delicious_cnt, raw_cnt)


        print(result2, result1)

            print(i)
    

        print(Fin.ssum(h1,w1,h2,w2),Yet.ssum(h1,w1,h2,w2))


            print(baked, t_set)


        print(kutte.range_sum(i,ii,j,jj),mada.range_sum(i,ii,j,jj) , flush=1)


        print(ed, re-ed)


        print(done.range_sum(h-1, h2, w-1, w2), undone.range_sum(h-1, h2, w-1, w2))
        print(n)
        print(0)
    print(ans)
    print(s.count('('))


print(min(P,Q))

print(min(f_r, f_l))

print(ans)

print(ans)


print(len(q) // 2)

        print(cnt)
print(min(sta,rsta))

        print(d)
    print(lebel)
print(ans)





print(main())




            print(i + 1)
        print(-1)
                print(ans + i)
        print(ans+i+1)
                print(i+1)
        print(-1)
                print(i+1)
            print(k*d+j)
                print(k*d+i+1+j)
            print(i+1)
        print(-1)
        print(i+1+k*D)
        print(i + 1)
    print(-1)
        print(ans + i + 1)
    print(*[r + 1 for r in row])

    print(max(max(d) for d in dist) - 1)
    print(-1)


print(cnt*h)



print(h * cnt)


print(sum(i==0 for i in window[:w*n])*h)

print(ans) 

print(ans)

    print(ans)
print(ans)
    

print(H * (sum(res) - 1))



print(main())




    print("No")
            print("No")
            print("No")
    
        
print("Yes")


print("Yes")


            print('No')
                print('No')
                print('No')
        print('No')
        print('No')
        print('Yes')
        print("No")
        print("Yes")
    print(ans)
            print(i[0],end = " ")
        print(mat[-1][0])
    print(ans)
print(ans)

print(ans)


print(ans)

    print(''.join(i))
    



    print(*row, sep="")



print(ans)




            print(x)
            print(x)

print(0)


print(r)


            print(x+1)
            print(x+1)
print(0)


            print(x+1)
            print(x+1)
    print(0)

            print(x + 1)
            print(x + 1)
print(0)


            print(x)
            print(x)
    print(0)


print(len(ans),*ans,sep='\n')

    print(len(ans))
        print(*ans, sep="\n")
    print(len(ans))
        print(*sorted(ans), sep="\n")
    print(len(ans))
        print(*ans, sep="\n")

            print(c+1)
     print(time)
    print(cost)

    print(g[s][t])
print(ans%mod)

print(sum(dic.values()) % MOD)

print(ans)



    print(ff.flow(s, t))



    print(output)

    
print(max_flow)


print(flow(s,t))


print(ff.flow(S,T))
        

            print(i, j)
            print(num[i],num[i+j])
    print(*pair)
                print(str(li[i]) + " " + str(li[j]))
        print(i , j)
            print(A[i], A[j])
            print(a[i],a[j])
                print(i,j)
        print(comb[0], comb[1])
print(*ans)


            
print(a[x], a[y])


    print("Yes")
    print("No")
    print(*list(map(str, A)))
    print(*ans)


    print("Yes")

print("No")
    print(*ANS[i])



print(*ans)


print(ans[:-1])

print(ans)


    print(ans)


    print(an)


                print(f'{g} {y} {m} {d}')
                print(f'? {y - 31 + 1} {m} {d}')
        print(g, y, m, d)
        print('?', y - 30, m, d)


        print(g, y, m, d)
        print('?', y - 30, m, d)


      print(g,y,m,d)
    print("?",y-30,m,d)   

    print(g,y,m,d)


    print(g, y, m, d)

        print(f"? {y-30} {m} {d}")
        print(f"HEISEI {y} {m} {d}")
        


        print(" ".join(a))
        print(" ".join(a))
        print(" ".join(a))

    print(a)



print(*ans, sep="\n")


        print('? %d %d %d' % (y-30,m,d))
        print('HEISEI %d %d %d' % (y,m,d))


	print(" ".join(n))
    print(ls_g[i]+" "+str(ls_y[i])+" "+str(ls_m[i])+" "+str(ls_d[i]))        


        print(f'? {int(y)-30} {m} {d}')
        print(f'{g} {y} {m} {d}')


        print(g,y,m,d)
        print(g,y,m,d)
        print("?",int(y)-30,m,d)

            print("HEISEI", y, m, d)
            print("HEISEI",y , m, d)
            print("?", y, m, d)
        print(a[0],y,m,d)
        print(a[0],y,m,d)
        print("?",n,m,d)


      print('HEISEI', y, m, d)
      print('HEISEI',y , m, d)
      print('?', y, m, d)
  print(g, y, m, d)

        print(g, y, m, d)
        print("?", str(y - 30), str(m), str(d))

    print(g, y, m, d)

        print(*i)


        print(g,y,m,d)


    print("{0} {1} {2} {3}".format(era, year, month, day))



        print("? {} {} {}".format(y-30, m, d))
        print("HEISEI {} {} {}".format(y, m, d))


        print('?', y-30, m, d)
        print('?', y-30, m, d)
        print(g, y, m, d)


        print("?",str(int(y)-30),m,d)
        print(s,y,m,d)

            print(tmp)
                print(tmp)
                print("?", y-30, m, d)
            print("?", y-30, m, d)

        print(f"{g} {y} {m} {d}")
        print(f"{reiwa} {y} {m} {d}")

        print("?", int(y)-30, m, d)
        print(g, y, m, d)



        print('? ' + str(y-30) + ' ' + str(m) + ' ' + d)
            print('? 1 ' + str(m) + ' ' + d)
            print('HEISEI 31 ' + str(m) + ' ' + d)
        print(s)

    print(" ".join(a))

    print(nengo,y,m,d)

        print("HEISEI {} {} {}".format(y,m,d))
        print("? {} {} {}".format(new_y,m,d))


        print(x[0],x[1],x[2],x[3])
        print(x[0],x[1],x[2],x[3])
        print("?",int(x[1])-30,x[2],x[3])


        print('?', int(y)-30, m, d)
        print('?', int(y)-30, m, d)
        print(g, y, m, d)

         print(f"? {a-30} {b} {c}")
        print(f"? {a-30} {b} {c}")
        print(f"HEISEI {a} {b} {c}")

        print("?",a[1]-30,a[2],a[3])
        print(a[0],a[1],a[2],a[3])


        print(g,y,m,d)
            print("?", y - 30, m, d)
                print('?', 1, m, d)
                print(g, y, m, d)
            print(g, y, m, d)


        print('?', int(y)-30, m, d)
        print('?', int(y)-30, m, d)
        print(g, y, m, d)

        print(input_str)
        print(' '.join([g, str(y), str(m), str(d)]))


        print("? {} {} {}".format(max(1, y - 30), m, d))
        print("{} {} {} {}".format(g, y, m, d))

        print(q[0], q[1], q[2], q[3])
        print("?", q[1] - 30, q[2], q[3])
            print(q[0], q[1], q[2], q[3])
            print("?", q[1] - 30, q[2], q[3])


    print(*S)
    

    print(g[0],y,m,d)

        print("HEISEI", *S)
        print("?", *S)
            print("HEISEI", *S)
            print("?", *S)


      print(*item)
      print(*item)
    print(*item)
    print(*item)
    print(*i)

        print("HEISEI",y,m,d)
        print("?",y-30,m,d)
            print("HEISEI",y,m,d)
            print("?",y-30,m,d)

    print(*ans)
    

            print("?",int(x[1])-30,x[2],x[3])
            print(*x)
        print("?",int(x[1])-30,x[2],x[3])
        print(*x)

    print(G,y,m,d)
            

    


    print(h, y, m, d)

    print(*ans)

    
    print(g, y, m, d)


    print(gen, y, m, d)


print(str(a+b+c) + " " + s)
			print("? {} {} {}".format(y-30,m,d))
			print("{} {} {} {}".format(N[0],y,m,d))

				print("? {} {} {}".format(y-30,m,d))
				print("{} {} {} {}".format(N[0],y,m,d))


    print(' '.join(map(str, s)))

    print(g, y, m, d)


  print(l[0],y,m,d)

    print("{} {} {} {}".format(i[0], i[1], i[2], i[3]))


        print(era, year, month, day)




        print(f"? {y-30} {m} {d}")
        print(f"{g} {y} {m} {d}")
            print(f"? {y-30} {m} {d}")
            print(f"{g} {y} {m} {d}")


        print("?",y-30,m,d)
        print(g,y,m,d)


    print(g,y,m,d)
    print(g,y,m,d)
    print('?',y-30,m,d)

        print(G[i], end=' ')
    print(G[3])



print(main())


	print(ans)


    print(len(uru))


    print(ans)

    print(ans)


        print(cnt)


    print(ans)


    print(an)


        print(i)


        print(ans)
    print(answer)


    print(ans)
        

    

    print(ans)




print(main())



print(*res, sep="\n")



    print(count)


    print(cnt)


    print(ans)


    print(ans)

    print(ans)

  print(cnt)

	print(count)

    print(ans)


    
    print(cnt)

        print(count)

    print(cnt)

	print(ans)

    print(ans)

        print(cnt)

        print(ans.count(0)+ans.count(1))
        print(ans.count(1))

    print(ans)


    print(ans)



    print(ans)

    print(count)


        
    print(ans)

    print(ans)

    print(ans)

    print(c)

    print(cnt)
            

    print(i)



    print(ans)



					


		print(ans)


        print(h, cnt)


        print(ans, 1000)
    print(ans, cnt)

                print(a, 1000)
                print(b, 1000)
                print(c, 1000)
                print(d, 1000)
        print(ans1, count)

    print(val, ans)


    print(val, cnt)


        print(hash_, cnt)




  print(hs[0], score[hs[0]])

        print(thehash, cnt)


    print(ans,count)

  print(ans,cnt)

    print(h, ans)


    print(x, ans)


        print(p,ans)

    print(h, ans[h])
	print(" ".join([str(ans),str(ans2)]))

	print(hashed, count)


print(main())


    print(a,c)

	print('%d %d'%(r,sum(r==eval(s.translate(maketrans('abcd','%04d'%i))) for i in range(10000))))

    print(res, end=' ')
    
    print(count)

    print(ans+ans_[1:])
    print(''.join(map(str, ans)))

    print(*ans, sep="")
    
    
    

    print(''.join(map(str, ANS)))
    


    print(''.join(map(str, answer)))

        print(f"x = {x} board = {board}")
                            print(f"solve 2 cur = {cur}")
        print(f"func solve cur = {cur}")
        print(f"g_sum = {tmp} k = {k} base = {f(k)}")

print(*ANS,sep = "\n")


    
    print(ok)
    


                print(0)
    print(len(ans))
        print(*ans, sep="\n")
        print(0)
        print(len(ans))
            print(i)


                        print(0)
            print(len(ans))
                print(i)


print(main())




  print(len(ans))
    print(i)

                    print(0)
        print(len(ans))
            print(i)


                print(0)
    print(len(se))
        print(s)

    print(0)
    print(len(ans))
      print(e)

    print(len(ANS))
        print(*ANS, sep='\n')


        print(0)
    print(len(ans))
        print(*ans, sep="\n")

        print(len(ans))
            print(0)
                print(1)
                    print((N-num)//2)
                    print(num//2)
                    print(0)
                        print(1)
                        print(num//2)
                        print(2)
                        print(tmp//2)
                        print((N-tmp)//2)




            print(vals[m])
            print(nx)
print(ans)


print(ans)


print(dp[N][4])

    print(*A)

print(*ans)

    print(*ans)


    print("1")
	print(e)

    print(1 if visited[a] or visited[b] else 2)

print(*ans, sep='\n')



        print(2)
        print(1)

        print(2)
        print(1)


        print(2)
        print(1)

        print(2)
        print(1)



print(*res, sep="\n")


        print(2)
        print(1)


        



        print(2)
        print(1)

            print(2)
            print(1)


        print(2)
        print(1)

            print(1)
            print(2)


        print(2)
        print(1)


        print(2)
        print(1)

        print(2)
        print(1)

        print(1)
        print(2)


            print(2)
            print(1)


        print(2)
        print(1)



print(dp[-1] + 1)

print(ans+1)

    print(ans % MOD)


    print(ans)
    
print(sub()%M)

print(M - cnt)

print(num)

print(ans)



print(M - len([x for x in A if x <= M]))


print(m-x)

print(m-len(list(filter(lambda x:x<=m,[int(x) for x in input().split()]))))

 
print(M - len([x for x in A if x <= M]))

print(sum(x > m for x in a))


print(m - idx)


print(b**3 * math.pi * 4/3)


print(math.pi * float(b) ** 3 * float(4/3))

    print(2 / 3 * math.pi * a**2 * b)
    print(4 / 3 *math.pi * b**3)

print('{:.10f}'.format(4/3*pi*B**3))

print(4/3*b**3*math.pi)

print(b**3*math.pi*(4/3))

print(4 * pi * b**3 / 3)


    print(ans)


print(ans)



print(count)


print(ans)


print(ans)


print(ans)



    print(num_black - (num_adj - flow))





print(block-(adj-D.max_flow(s, t)))


print(count)
        

print(ans)

print(ans)



print(ans)

print(ans)

    print(ans)

    print(ans)




print(main())




print("Yes" if flag else "No")

            print("No")
            print("No")
    print("Yes")
        print("No")
    print("Yes")

    print("No")
            print("No")
                print("No")
        print("No")
    
print("Yes")



print(main())


print(ans)
    


print(ans)

print(ans)


        print(1)
    print(ans)
    print(2)
    print(-1)
    print(d)


print("Paken")


print("Paken")

print("Paken")

print('Paken')

print('Paken')


print("Paken")

print("Paken")

print("Paken")

print("Paken")

print("Paken")

print("Paken")

print("Paken")

print('Paken')

print('Paken')


print("Paken")

print("Paken")

print("Paken")

print('Paken')

print("Paken")

print('Paken')

print("Paken")

print("Paken")

print("Paken")

print("Paken")

    print("square1001")
    print("e869120")


  print("square1001")
  print("e869120")

print(ans)


print('square1001' if input() == 'ani' else 'e869120')

print('square1001' if input()=='ani' else 'e869120')


print("square1001"if input()=="ani" else"e869120")

    print('square1001')
    print('e869120')

print("square1001" if input()=="ani" else "e869120")

print(mp[s])

print("square1001" if input()=="ani" else "e869120")

print('square1001' if s == 'ani' else 'e869120')

    print('square1001')
    print('e869120')


    print("square1001")
    print("e869120")

  print("{}".format("square1001"))
  print("{}".format("e869120"))

print("square1001"if input()=="ani" else"e869120")

    print('square1001')
    print('e869120')

    print("square1001")
    print("e869120")
    

  print("square1001")
  print("e869120")

    print("No")
    print("Yes")


  print("No")
  print("Yes")

print('No' if h*w % 2 == 1 and (x+y) % 2 == 1 else 'Yes')

print('No' if (h*w)%2==1 and (x+y)%2==1 else 'Yes')


    print('No')
    print('Yes')

print("No" if ((a*b)%2)*((c+d)%2)==1 else "Yes")

    print("No")
    print("Yes")

print(["No","Yes"][h*w%2==0 or(x+y)%2==0])

print('No' if h * w % 2 == 1 and (x + y) % 2 == 1 else 'Yes')

    print('No')
    print('Yes')


    print("No")
    print("Yes")


  print("No")
  print("Yes")

    print('No')
    print('Yes')

    print("No")
    print("Yes")


print(ans)



  print("Yes")
  print("No")

print(ANS)


print(r)

print(ans)



print(a.count(0))

print(len(list(filter(lambda x:x%2==0, map(int,input().split())))))

print(cnt)

print(ans)

print(cnt)


print(len([x for x in A if x % 2 == 0]))


print(ans)


print(c)

print(n)

 
print(len([x for x in A if x % 2 == 0]))

print(k)

print(ans)

print(ans)

print(n)


print(N-A-B+C)


print(n-a-b+c)

print(ans)


print(n - (a+b-c))


print(n-a-b+c)

print(n-(c+a-c+b-c))

print(n-a-b+c)

print(n-a-b+c)

print(n - (a + b - c))

print(n-a-b+c)


print(n - (a+b-c))


print(N - A - B + C)


print(n - (a + b - c))

print(n - (a + b - c))

print(N-A-B+C)

print((n+c)-(a+b))

    print(sum(A)//2)


    print((sum(A)-A[i])//2)


  print(r // 2)
      print((r-j) // 2)
print(ans)



print(ans)


    print(int((sum(x) - min(y)) / 2))
    print(int(sum(x)/2))

print(ans)

print(ans//2)


    print(sum(a)//2)
            print((sum(a)-i)//2)
	print(sum(a) // 2)
	print((sum(a) - mi) // 2)

    print(S // 2)
    print((S - min(x for x in A if x % 2)) // 2)


    print(sum(ls)//2)
    print((sum(ls)-km)//2)


  print(sum(a)//2)
  print((sum(a)-s)//2)  


print((sum(A) - [0, mi][oc % 2]) // 2)

print(int(sum(nl) / 2))

    print(s // 2)
    print((s - m) //2)


print(S//2)

print(ans//2)
  

print(ans // 2)



print(min(B))


print(r)



print(ans)
    


        print(i)
print(ans)

            print(i-1)
print(ans)

print(ans)


print(ans)


print(x)


print(ans)

print(min(x//(i+1) for i,x in enumerate(A)))


print(ok)


            print(i - 1)
print(100)


print(ans)


print(sum(A)*sum(B))


print(a*b)

print(sum(a)*sum(b))


print(sum(a)*sum(b))

print(sum(a) * sum(b))

print(sum(a)*sum(b))



print(sum(A) * sum(B))


print(sum(A)*sum(B))

print(sum(A) * sum(B))


print(A * B)


print(ans)

    
print(ans)



print(ans)


print(ans)

print(max(DP))


print(a)


print(p)

    print("No")
    print("Yes")
  print("Yes")

        print("No")
        print("Yes")
    print("Yes")


  print("No")
  print("Yes")

    print("Yes")
        print("Yes")
        print("No")


print(["Yes","No"][h*w%2==1 and(x+y)%2==1])

print(ans)


print(ans)

print(ans)


print(len(ANS1), len(ANS2))
    print(*ANS1, sep='\n')
    print(*ANS2, sep='\n')



print(len(ands), len(ors))
    print(*ands,sep="\n")
    print(*ors, sep="\n")

print(len(i),len(u))
    print(x)
    print(x)


    print(len(intersection), len(union))
        print(i)
        print(u)



print(len(and_list), len(or_list))
    print(i)
    print(i)


print(len(li2),len(li))
    print(i)
    print(i)
print(len(andlis),len(orlis))
    print(i)
    print(i)


print('{} {}'.format(len(A),len(B)))
    print(a)
    print(b)



print(len(a_and_b), len(a_or_b))

    print(p)

    print(q)


print(len(AandB), len(AorB))
    print(x)
    print(x)

print(p,q)

    print(s[i])

    print(t[i])



print(ans)

    print(":(")
    print("".join(ans))

            print(":(")

print("".join(ans))

            print(':(')

print(S)


print(len(p),maxi-1)


print(min_ans, max_ans)

    print(len(d),val-1)

    
    print(min_times, max_times)



print(a, b)


print(len(li2),len(li))
    print(i)
    print(i)
            print(":(")
print(ans)
    print(1,1)
    print(len(k),len(l)-1)
        print(-1)
        print(bisect_left(C, -l))

print(len(li2),len(li))
    print(i)
    print(i)
print(ind)
    print(ans)
print(ans)
    print(":(")
        print(ans[i],end = "")
    print(ans[-1])
    print(1,1)
    print(len(k),len(l)-1)
        print(-1)
        print(r)
        print(ok)
        print(-1)


print(rh*w + rw*h - rh*rw)


print(h*w-high*wide)


print(h*w-ai*bi)


print(h*w - (h//a*a) * (w//b*b))

print(h*w-x*y)

print(h*w-(h//a)*(w//b)*a*b)

print(sum1 - sum2)


print(h * w - (a * b * ((h // a) * (w // b))))


print(h*w - (h//a)*a*(w//b)*b)


print(h*w-(h//a)*a*(w//b)*b)

print(h*w-(h//a)*a*(w//b)*b)

print(h*w-(a*(h//a)*b*(w//b)))

print((h*w)-(x*a*y*b))


print(ans)


    print(h * w)
    print(ans)

    print(x)
    print(x - y)
    

print(h * w - cnt * a * b)


print(ans)

print(ans)
    print(s[c][d]-s[c][b-1]-s[a-1][d]+s[a-1][b-1])
print(ans)
            
print(base)
        


print(reduce(M, P))


print(a)

print(ans)
print(ans)

    print(s[c][d]-s[c][b-1]-s[a-1][d]+s[a-1][b-1])
print(ans)
print(bef)


print(ans)



print(reduce(M, P))

print(out)

print(ret)


print(m)


print(s[0])

print(tf_r[0])


print(x)



print(Pn[-1])

print(ans)
print(ans)
    print(s[c][d]-s[c][b-1]-s[a-1][d]+s[a-1][b-1])

print(ans)
    print(G[(a, b)] - G[(c+1, b)] - G[(a, d+1)] + G[(c+1), (d+1)])

    print(ans)


print(ans)

    print(an)


        print(ans)
        

    print(ans)

    print(sum(min(m // n, x) for x in a))

    print(ans)

    print(int(count))

    print(cnt)

    print(c)


    print(ans)



    print(ans)


    print(ans)


    print(total)


    print(ans)

    print(sum(min(a, m // n) for a in A))

    print(sum)

    print(ans)

        print(sum_ans)

    print(ans)



    print(int(ans))

    print(b)

    print(ans)

    print(sum(min(M//N, a) for a in A))
    print(ans)


  print(ans)


    print(ans)


    print(r)

  print(t)

  print(int(sum))


    print(sum(lst_tmp))



    print(int(total))

    print(C)

        print(ans)

    print(ans)

    print(total)

  print(int(sum))

    print(t)


    print(sum([min(a[i], m//n) for i in range(n)]))



        print(ans)


    print(sum)



    print(i)


    
    print(ret)
    
    

        print("\n".join(map(str,ans)))
    print(d_sum)

    print(ans)




print(*ans_list, sep = "\n")


    print(ans)

    print(ans)


    print(solve(x,y))


	print(calc(x,y))




    print(a)



    print(dfs(M - 1, 0))

print(ans)


print(ANS)


print(ans)


print(max(tmp,tmp2))

print(ans)

    print(ans)
print(ans)


print(ans)


print(ans)


print(ans)


print(max(tmp,tmp2))


print(ANS)


print(max(M1-m1,M2-m2))



print(ans)

print(max(a-b, c-d))


print(ans)


print(max(lu[1]-lu[0],ld[1]-ld[0]))


print(max(a-b, c-d))


    print(ans)
        print(ans)
        print(ans)
    print('Tem')
    print('Hom')

  print("Tem")
  print("Hom")

print('Hom' if sum(map(lambda x:int(x)%2, input().split())) > 1 else 'Tem')

print('Hom' if len(list(i for i in map(int, input().split()) if i % 2 == 1)) >= 2 else 'Tem')


print("Hom" if sum([int(n)%2 for n in input().split()]) > 1 else "Tem")


    print("Hom")
    print("Tem")


    print("Hom")
    print("Tem")

        print("Hom" if odd >= 2 else "Tem")

    print("Hom")
    print("Tem")


        print('Tem')
        print('Hom')

    print('Yes')
    print('No')


    print('Yes')
    print('No')

print("Yes" if dp>>r&1 else "No")

    print("Yes")
    print("No")


print(*ans, sep="\n")

    print(a)

print(ans)


print(sum(table[a] for a in A))


print(ans)


print((res1+res2)%mod)



print(min(DP[N:]))


print(money[n])

print(ou)

print(cost)

    print(ans)

  print(dp[N])

print(DP[n])


print(rec(0))


    print(ans)

print(ans)



print(min(dp[N:]))


    print(dp[n])
    print(ans)
print(res)


print(m)

print(ans)

            

print(ans)

            


print(cost)


    print(S[int(input())])

        print( accANS[ int( input())])
  print(q)

    print(l_count[num])

    print(ans[int(input())])

    print(table[q])


    print(DP[n])


    print(dp[n])
        print(ya[n])
    print(m[i])


    print(ans[int(input())])


    print(imos[q])

    print(ans)
        print(d[I()])
print(ans[0], ans[1])
print(*f)

    print(X)
    print(-1)

        print(max((b-1+a-2)//(a-1), (b+a-1)//a)*a)
        print(-1)
    print(-1)

            print(i)
        print(-1)

    print(e)
    print(-1)

        print(-1)
        print(A * ceil(B / A))
            print(A * ceil(B / A))
            print(-1)
    print(dp[n])
        print(ya[n])
        print(-1)
            print(c)
            print(-1)

print(ans)

print(ans)

    print(ans)
        print(d[I()])
            print(i)
        print(-1)
    print(-1)
        print(k*A)
print(-1)

print("?",s,t)
print(end = '',flush=True)
        print("?",s,i)
        print(end = '',flush=True)
        print("?",t,i)
        print(end = '',flush=True)
print("!",end =" ")
    print(i,end = " ")
print(t)

    print("? {} {}".format(p, q), end="\n", flush=True)

print("! " + " ".join(map(str, ans)))

    print('?', s, i, flush = True)
    print('?', t, i, flush = True)
    print('?', q, pre, flush = True)
print('!', *Ans, flush = True)



print("?",s,t,flush=True)
    print("?",s,i,flush=True)
    print("?",t,i,flush=True)
    print("?",NOW,ans,flush=True)
    print("?",ans,t,flush=True)

print("!",s,*ANS,t)



    


        print("! " + str(s) + " " +str(t))
    print("? "+ str(s) + " " + str(t))
        print("? " + str(s) + " " + str(i+1), flush=True)
        print("? " + str(t) + " " + str(i), flush = True)
    print("! " + " ".join( map( str, ANS)))
    print("?", s + 1, t + 1, flush=True)
            print("?", s + 1, i + 1, flush=True)
            print("?", t + 1, i + 1, flush=True)
        print("!", s + 1, t + 1, flush=True)
        print("?", lastnode + 1, u + 1, flush=True)
    print("!", *list(map(lambda x: x + 1, ans)))





    print(ans)
        print(d[I()])
    print(formula(s,0,0)[0],formula(s,0,1)[0])
            print(i)
        print(-1)
    print("?",s,t)
    print(end='', flush=True)
        print("?",s,i)
        print(end='', flush=True)
        print("?",i,t)
        print(end='', flush=True)
            print("?",x,y)
            print(end='', flush=True)
    print("!",*ans)
    print(dp[n])
        print(ya[n])
        print(-1)
            print(c)
            print(-1)

    print("?", s, t, flush=True)
        print("?", s, i, flush=True)
        print("?", t, i, flush=True)
        print("!", s, t, flush=True)
        print("?", b, nex, flush=True)
    print("!",*ans, flush = True)


    print("? {} {}".format(i,j))
print(ans%M)

print(res)



print(ans)

print(m)


print(ans)


    print(0)
    print(max(L))


print(max(dp.values()))


print(ans_x, ans_y)





print(A if flag else -1)


        print(-1)
        print(-1)
print(tmp_b)

        print(-1)
        print(-1)
print(x % mod)

        
        print("Check OK !!!")
        
        print("GG =", GG)
        print("I =", I)
        print("PA =", self.PA)
        print("rel =", self.rel)
                print("a1 =", a1)
                print("self.one =", self.one)
                print("self.mult(a1, self.one) =", self.mult(a1, self.one))
                print("self.mult(self.one, a1) =", self.mult(self.one, a1))
                
            
            print("x1 =", x1)
            print("self.zero =", self.zero)
        
        print("Check OK !!!")
        
        print("GG =", GG)
        print("I =", I)
        print("PA =", self.PA)
        print("rel =", self.rel)

        print("Value ", i, "=", uf.getvalue(i))
    print(uf.relation(4, 1))


    print("-" * 20)
    print(uf.relation(9, 10))

        print(i, uf.getvalue(i))


    print("-" * 20)

        print("No")
    print("Yes")

            print('No')
        print('Yes')

            print('No')

    print('Yes')


print(main())

print(s^t^y)







print(y^s^t)

print(ans)

print(a ^ y)


print(t ^ s ^ y)


print((s - 2*t*a + a*a*fact[n])*factinv[n]%mod)

    print(0)
    print(C[0] + (C[1] - 1) // 2 * 2)


    print(0)

print(res)

    print(0)
    print(n-1)
    print(n-2)

        print(0)
        print(n-2+(s%2))
    print(0)
    print(N - 1)
    print(N - 2)


        print(0)
                print(n-2)
                print(n-1)



        print(0)
        print(n-2+(s%2))
    print(r-left)


print(k2-k1)


        print(0)
        print(n-2+(s%2))
    print(r-left)
        print((s[1]>>1)*2*m+round(s[0]))
        print(s[1]*m-round(s[0]))
    print(ans)
    print(sum(angs) / 2)




print((a + b) / 2 % 360 if abs (a - b) % 360 < 180 else (a + b + 360) / 2 % 360)

    print((b+(360-b+a)/2)%360)
    print((a+b)/2)

print((a+b+360*(abs(a-b)>180))/2%360)

    print((t2 + t1)/2)
    print(((t2 + t1 + 360) % 720)/2)


    print((a+b) / 2)
    print(((a+b+360) % 720) / 2)



print(ans)


    print((s1+s2)/2)
    print((s1+s2)/2 +180)
    print((s1 + s2) / 2 - 180)


print('{:6f}'.format(ans))

print(t%360)



print(ans)


    print(t1 + dif)
        print(t1 - dif)
        print(t2 + dif)




print(main())

print(*ANS, sep='\n')


print(*ans, sep='\n')


    print(x * 2 + y - 1)

  print(li * 3 + (ri - li - 1))

    print(less * 3 + (more-less-1))


    print(kati*3 + hiki)




print(main())

    print(3*win+(n-win-lose-1))

            print('(x+{})'.format(x), end='')
            print('(x{})'.format(x), end='')


    print('')

print()

print(s)

        print(f"(x+{i})", end="")
        print(f"(x{i})", end="")
print()


print(ans)


print("".join("(x%+d)" % -x for x in R))


        print('(x{:+})'.format(-i), end='')
    print()


        print('(x{:+})'.format(-i), end='')
    print()




print(ans)       

print(h,w)

print(t//60, t%60)


print((lambda x:'{} {}'.format(x//30,(x%30)*2))(int(input())))

print(*divmod(int(input())*2,60))


print(s // 30, 2 * (s % 30))


print("{} {}".format(h,m))

print(str(2*n//60) + " " + str((2*n)%60))


print('{} {}'.format(deg*120 // 3600, (deg*120 % 3600) // 60))


print(hour, minutes)


print(m, s)

print(th // 30, th % 30 * 2)

print(h, m * 2)


print('{} {}'.format(theta // 30, (theta % 30) * 2))



print(h,m)

print(theta//30, (theta%30)*2)

print(min(D))


print(min(eff))


print(min(x))



print(min(C))

print(ans + ma + ans[::-1])

    print('')
    print(s + middle + s[::-1])


print(cnt//3)

print(res)


print(n &- n)

    print(1)
    print(ans)


print(*ans, sep="\n")

print('ai1333' + str(t * '3'))

print("ai1333"+"3"*(int(input())//100))


print(AI)



print('ai1333'+'3'*x)

print("ai1333" + "3" * int(int(input()) / 100))

print(result)

print("ai1333{}".format("3"*(x // 100)))


print("ai1"+"3"*(int(input())//100+3))

print("ai1"+"3"*(int(input())//100+3))



print(id)


print('ai1333' + '3' * (int(input()) // 100))

print(id)

print("ai1333" + ("3"*(int(input())//100)))

print(f(n))

print("{}".format("ai1333")+"{}".format(str(3)*a))

print(ans)


print('ai1333'+'3'*(int(input())//100))

print('ai1333' + '3'*(x//100))

print("ai1333" + "3" * year)


print(ans)


print("ai1333" + "3" * (int(input()) // 100))

print("ai1333" + '3' * (x // 100))

print("ai1333"+"3"*x)

print("ai1333" + "3" * (int(input()) // 100))


    print(len(b))
    print(len(b)-1)



print(int(log2(int(input()) + 1)))

print(int(math.log(int(input()) + 1, 2)))

print(floor(log2(1+int(input()))))

print(ans)



print(cnt)


    print(len(bin_list))
    print(len(bin_list)-1)

print(len(N)-1 if '0' in N else len(N))

print((int)(math.log2(int(input())+1)))

print(max(ans, i - 1))


print(ans)

    print(len(a)-1)
    print(len(a))

print(ans-1)

    print(d)
    print(d - 1)


print(max(res, d - 1))


print(ans)

print(v)


print(cost)






print(ans)


print(ans)


print(ans)


print(ans)



print(ans)

print(len(line) - 1)

    print(0)
print(ans)

        print('yes')
        print('yes')
print('no')


    print("yes")
    print("no")






    print("yes")
    print("yes")
    print("yes")
print("no")


print(ans)

print(sum)


print(int(int(input()) // 500 * 500))

print(int(input())//500*500)

print(int(input())//500*500)

  print(n)
  print((n//500)*500)

print(ans)


print(ans)

print(500 * (p // 500))

print(ans)


  print(n)
  print((n//500)*500)


print(min(ans1,ans2))


    print(ans)
    print(score)

print(min(ans1, ans2))



print(min(ans1, ans2))

        print((k - f - 1) % n + 1)
print(C[gi][gj], DP[gi][gj])



print(ans_d, ptns[by][bx] % MOD)


    print(y/x)
    print(y/x)
print(b/a)

    print((i + 1) * M + add[i])
    print((i + 1) * m + ADD[i])

print(*ans, sep="\n")


    print('A')
    print('B')
    print('C')


print('ABC'[A.index(max(A))])

	print("A")
	print("B")
	print("C")

print(x[a.index(max(a))])

print(Y[X.index(x)])


    print("A")
    print("B")
    print("C")

    print('A')
    print('B')
    print('C')

    print('A')
    print('B')
    print('C')

print(s)


print(keys[0].upper())

    print("A")
    print("B")
    print("C")

print(max([(a,'A'),(b,'B'),(c,'C')])[1])

        print(lst2[i])




print(menber[menu.index(max(menu))])

    print('C')




        print("A")
            print("B")
            print("C")
        print("B")
        print("C")

    print("A")
    print("B")
    print("C")


    print("A")
    print("B")
    print("C")

    print('C')
    print('B')
    print('A')


print(x[-1][0])


    print('A')
    print('B')
    print('C')


        print("A")
        print("C")
        print("B")
        print("C")

    print("A")
    print("B")
    print("C")



print(x[2][1])


print(s[a.index(max(a))])
print(res)


    print(x%MOD)
    print((x + e*b)%MOD)

print((x+max(0, x-b)//(a-b)*b)%1000000007)

print((x + max(x - b, 0) // (a - b) * b) % 1000000007)



print(d%1000000007)




print(ans % 1000000007)


print(((ub*a%MOD)+amari%MOD)%MOD)

print((x+n*b) % mod)


print(ans % 1000000007)

    print(ans)
print(ans)


print("".join((map(str, bestans[:3]))))
print("".join((map(str, bestans[3:6]))))
print("".join((map(str, bestans[6:]))))

    print(ans)


print(dinic_max_flow(0,1))

print(MG.flow(0, 1))


    print(int(ae % eg == 0))
        print("Alice")
        print("Bob")
        print("Draw")
        print("Alice")
        print("Bob")
        print("Draw")


        print('Alice')
        print('Bob')
        print('Draw')
        print('Alice')
        print('Bob')
        print('Draw')



        print('Alice')
        print('Bob')
        print('Draw')
    print('Alice')
    print('Bob')
    print('Draw')

    print("Alice")
    print("Bob")
    print("Draw")
        print("Alice")
        print("Bob")
        print("Draw")
        print("Alice")
        print("Bob")
        print("Draw")

        print("Bob")
        print("Alice")
        print("Draw")
        print("Alice")
        print("Bob")
        print("Draw")

        print("Alice")
        print("Bob")
        print("Draw")
    print("Alice")
    print("Bob")
    print("Draw")


print(ans)


            print("Alice")
            print("Bob")
            print("Draw")
             print("Alice")
             print("Bob")
             print("Draw")
print(-b, a)


print(-t, s)

print(-b, a)

print(a, b)

    print(B-b,B)
print(ans)


    print(ans*180/math.pi)
            print("Yes")
                print("No")
                print("Yes")
                print("No")
        print("Yes")
print("tubuann" if ans==0 else "mo3tthi")


        print(0)
        print(0)
    print(ans)
    print(0)
print(ans)


    print((lst[0] - lst[1])%mod)
print(dp[K] * pow(p_coin, mod-2, mod) % mod)


print(DP[0])


print(ans)


    print(ans)
print(ans)


print(ans)


print(str(N*A)+"0"*B)

print(''.join([str(N*A)] + ['0']*B))

print(N+('0'*B))

    print(ans)

print(str(n*a) + "0"*b)

print(n, end="")
print("0" * b)


print(str(N * A) + '0' * B)


print(str(n * a) + "0" * b)

print(str(x)+"0"*b)


    print(ans)
print(ans)

print(N*A*10**B)


print(N * A * pow(10, B))

print(N*A*10**B)


print(N*A*pow(10,B))

print(n*a*10**b)

print(price)

print(n*a*10**b)

print(n*a*10**b)

print(N*A*pow(10,B))

print(ans) 


print(ans)


print(N * A * 10 ** B)


print(n * a * (10**b))

print(a*b*(10**c))

print(n*a*(10**b))

print(n * a * pow(10, b))

print(10 ** b * a * n)


print(price)


print(N * A * 10**B)

print(n * (a * 10 ** b))


print(N * A * pow(10, B))


print(n * a * pow(10, b))

    print(x+":",end="")
        print(" ",end="")
    print(*sorted(ANS[x]))

    





print('S:', *(sorted(S)))
print('M:', *(sorted(M)))
print('L:', *(sorted(L)))
print('X:', *(sorted(X)))

    print(c + ':', end='')
        print(' ', end='')
        print(*sorted(ans[c]))
        print()



  print(' '.join(A[i]))

    print(size + ":" + ''.join(ANS[size]))


    print(size+':',end = ' ')
    print(*sorted(dic[size]))
    print(size+':')

print('S:', *S)
print('M:', *M)
print('L:', *L)
print('X:', *X)



    
print('S:',*ans[0])
print('M:',*ans[1])
print('L:',*ans[2])
print('X:',*ans[3])


print(ans)

    print([0, 0, 1, 1, 1, 2][N])

    
    print(mat_dot(mat_pow(M, N-4, 10**9+7),[[1],[1],[1]],10**9+7)[0][0])
    




  print(1)
print(m(A,B)[0][2])

    print('掛け算できません')
print(solve())


print(X[0][0])




print(T[2][0])


print(ans)

        
        
print(all_cost - min(K, decrease_cost))

print(max(cost,C-K))

print(ans)

print(P-Q)


    print(c, d)

  print(c,d)

  print(*ans[i])



print('{:.8f}'.format(math.sqrt(ans)))


print((sum((Ps[i] - e[i]) ** 2 for i in range(N))) ** 0.5)

print(math.sqrt(ans))



print(dp[-1])

    print("Beet")
    print("Aizu")
        

    

    print("Beet")
    print("Aizu")
print(X)


print(X)

        
print(x)

print(x)



print(X)

print(x)

print(X)

print(x)

print(x)    

print(x)

print(X)

print(x)

print(X)

print(x)

print(x)

print(x)


    print(ans)
    print(ans)
    print(len(ans))
    print(*ans,sep = "")
print(len(ans))
print(ans)

print(len(ans))
print(ans)



print(len(ans))
print(ans)


print(len(ans))
print(ans)

print(abs(ns) + abs(ew))
    print('A' * ns, sep='', end='')
    print('Z' * (-ns), sep='', end='')
    print('a' * ew, sep='', end='')
    print('z' * (-ew), sep='', end='')
print()

print(abs(x)+abs(y))
  print(answer)

print(len(ans))
print(ans)


print(len(s))
print(s)

    print(*ans[group[i]])

    print(*a)

    print(" ".join(map(str, ans)))


    print(*ans[i])

                    print("Yes")
                print("No")
                print("Yes")
            print("No")
            print("No")
        print("Yes")
                print("No")
                print("No")
    print("Yes")
print(count)

    print(ans)
print(ans)


print(cout)


print(ans)


            print("Yes")
            print("No")
        print("Yes")
        print("No")


    print(0)
                print("".join(map(lambda x: str(t[x]), C)))
print(-1)



print((sum[N][0] + sum[N][1]) % mod)


    print((dp[-1][0][1]+dp[-1][1][1])%mod)

print(seg.all_prod()[3])
    print(seg.all_prod()[3])

print(A.index(min(A))+1)

print(index+ 1)

print(a.index(min(a)) + 1)


print(ans + 1)

    print(i+1)

print(a.index(min(a)) + 1)


print(a.index(min(a)) + 1)

print(A.index(min(A)) + 1)

print(len(set(map(int, input().split()))))

print(A.index(min(A))+1)
print(len(A))


print(ans)

print(len(set(list(map(int,input().split())))))

print(len(s))

print(len(a_set))

print(len(A))

print(len(set(l)))



print(len(a))


    print(bisect_right(A, r) - bisect_left(A, l))

print(A.index(min(A))+1)
print(len(A))
    print(r_idx-l_idx+1)

print("square1001")

print("square1001")

print('square1001')

print('square1001')

print('square1001')

print("square1001")

print("square1001")

print("square1001")

print('square1001')

print("square1001")


print("square1001")

print('square1001')

print("square1001")

print("square1001")

print("square1001")

print('square1001')


print('square1001')

print("square1001")

print('square1001')


print(a)

print("square1001")

        print("square1001")

print("square1001")

print("square1001")

print('square1001')

print("square1001")

print("square1001")

print("square1001")

print(n*m)

print(n*m)

print(n*m)
    

print(N * M)

print(N*M)

print(n*m)

print(a*b)

print(N*M)

print(N*M)

print(N*M)

print(n*m)

print(n*m)

print(n*m)

print(a*b)

print(eval(input().replace(" ", "*")))


print(n*m)


print(n*m)



print(N * M)


print(N*M)

print(n * m)

print(x*y)


print(n*m)


print(n*m)

print(n * m)

print(n*m)

print(N*M)

print(x*y)


print((P * B - Q * (B - A)) / (Q + R) + B)

print(((s1-s2)/(q+r))+b)

print(t/(q+r)+b)

print((p*b+q*a+r*b)/(q+r))

print(x)


print(time)

print(b+(e-s)/(q+r))


print(B+(P*B-(B-A)*Q)/(Q+R))


print((B*(P+R)+A*Q)/(R+Q))


print((B*(P-Q)+Q*A)/(Q+R)+B)

print(d/(q+r)+b)

print(b+(a*p+(b-a)*(p-q))/(q+r))

    print((p*b+a*q+r*b)/(q+r))

print((b*p+b*r+a*q)/(r+q))



print(b + (b*p - (b-a)*q) / (q + r))


print(ans+b)

print(d / (q + r) + b)

print(B+D/(Q+R))

print(ans)

print(ANS)



print(ret)

print(count)

print(ans)

print(cnt)

print(c)

print(time)
print(ans)

print(ans)



print(result)

    print(ans)

print(x)

print(ans)


print(k)


print(ans) 


print(ans)



print(ans)


print(s.count("E869120"))

print(ANS)



print(S.count('E869120'))

print(count)

print(s.count("E869120"))

print(ans)

print(time)
print(ans)
print(ans)

print(S.count("E869120"))



print(S.count("E869120"))

print(l.count('E869120'))

print(ans)



print(S.count('E869120'))


print(nin.count("E869120"))

print(a)

print(l.count("E869120"))

print(ans)


print(ans)


    print(cnt["E869120"])

print(sum(v)-(n*(n+1)//2))

print(V-N*(N+1)//2)


print(sum(a)-n*(n+1)//2)

print(sum(v)-n*(n+1)//2)

print(sum(list(map(int,input().split()))) - n*(n+1)//2)



print(sum(V) - N * (N + 1) // 2)

print(sum(a)-n*(n+1)//2)

print(sum(A)-(N*(N+1))//2)



print(sum(V) - (N * (N + 1) // 2))


print(ans)


print(sum(V) - s)


    print(sum(aa)-n*(n+1)//2)

print(max)


print(sum(l) - k)

print(sum(v)-ans)

print(sum([V[i]-(i+1) for i in range(N)]))

print(sum([A[i]-i-1 for i in range(N)]))

print(time)
print(ans)
print(ans)
print(ans)

print(ans)
print(n)

print(time)
print(ans)
print(ans)
print(ans)
print(ans_min)
print(ans_max)

print(ANS)
print(N)

print(count+1)
print(n)

print(ans)
print(n)

print(a_min)
print(N)


print(ans)
print(n)



print(ret + 1)
print(N)

    print(mn)
    print(n)

print(ans)
print(N)


print(cnt)
print(n)


print(min)
print(max)



print(m+1)
print(n)

print(ans)
print(n)


  print(min(x,y))
print(x)

  print(min(ans1,ans2))
  print(ans)


print(ans)


    print(ans)

    print(0)
    print(min(ans1, ans2))
print(ans)


  print(min(a, b))
  
      
  print(ret)

    print(ans)

    print(min(ans1,ans2))



print(ans)



    print(min(ANS0,ANS1))

    print(ANS)
            


  
print(*ret[N % 12])

print(a,b)

print(*ab[n%12])

print(a,b)


print(A,B)
    

print(A,B)


print(a,b)



print(A, B)



print(*ans[k])


print(a, b)

    print(a,b)

    print(ANS[r][0], ANS[r][1])
    print(-ANS[r % 6][0], -ANS[r % 6][1])


print(l)


print(ok)


print(OK)

print(left)


    print(l)

        print(pow(10,cm[ri]-cm[li]+9))

    print(10**9*getvalues(l,r))
    


    print(pow(10, P[ridx] - P[lidx] + 9))


  print(10**p)

print(min(d[u],d[v])+1)

    print(-1)
    print(MINCOST_CC[T])
                
                
            
        


                print(d+1)
                print(d+1)
    print(-1)

    print(n-mx)

print(abs(a+b+c+d-2*max(a,b,c,d)-2*min(a,b,c,d)))


print(ans)

print(answer)

print(abs(a[0]+a[3]-a[2]-a[1]))


print(abs(x-y))


print(abs(a+b+c+d-2*tuyoi))

print(ans)

print(min(map(abs, x)))


print(ans)

print(ans)

print(abs(A[3]+A[0]-A[1]-A[2]))


print(min(abs(sum(a)-(a[0]+a[i])*2) for i in range(1,4)))

    print(ans)
    
print(abs(A[0]+A[3]-A[1]-A[2]))


print(ans)

print(abs(power[0] + power[3] - power[1] - power[2]))

print(min(abs((a+b)-(c+d)),abs((a+c)-(b+d)),abs((a+d)-(c+b))))



print(abs((l[0] + l[3]) - (l[1] + l[2])))

print(abs(A[3]+A[0]-A[1]-A[2]))

print(min(sa))

print(abs(team_a -team_b ))


print(ans)


print(min(abs(a+b-c-d),abs(a-b+c-d),abs(a-b-c+d)))



print(min(delta))


print(minimum_difference)


print(min(subs))

print(min(abs(a+b-c-d), abs(a+c-b-d), abs(a+d-b-c)))



print(abs(x - y))




print(abs(a - b))

print(ans)

print(mi)


    print(abs(numlist[0] + numlist[3] - numlist[1] - numlist[2]))


    print(ans)
    print(ans)
    print(abs(aa[0]+aa[3]-aa[2]-aa[1]))

print(ans)


print(abs(a - b))

        print("YES")
        print("NO")

    print("YES")
    print("NO")


    print("YES")
    print("NO")


print(["NO","YES"][board[-1][-1]])

print('YES' if B[H-1][W-1] else 'NO')


    print("YES")
    print("NO")
    
        

print('YES' if (W-1, H-1) in used else 'NO')            

            print("YES")
    print("NO")
print("YES" if A[H-1][W-1] else "NO")

        print('YES')
print('NO')

    print("NO")
    print("NO")
        print("YES")
        print("NO")
            print("YES")
            print("NO")
            print("YES")
            print("NO")
            print("YES")
            print("NO")
            print("YES")
            print("NO")
            print("YES")
            print("NO")
            print("YES")
            print("NO")
            print("YES")
            print("NO")
            print("YES")
            print("NO")
    print("NO")

print('YES' if f[h-1][w-1] else 'NO')
            print("YES")
    print("NO")

        print("First")
        print("Second")
        print("First")
            print("Second")
            print("First")

    print('First' if sum(A)%2 else 'Second')
    print('First')
    print('First' if sum(A)%2 else 'Second')

    print("First")
    print("Second")
        print("First")
        print("Second")
        print("First")
        print("First")
        print("Second")


    print(solve(N,a))

            print("First")
            print("Second")
            print("First")
                print("First")
                print("Second")
    print(["First","Second"][((n&1)&(1^sum(a)&1))|((1^n&1)&(1^sum(a)&1)&(1^min(a)&1))])
            print("First")
            print("Second")
                print("Second")
                print("First")

                print("First")
                print("Second")

    print('First')
    print('Second')

    print(ans)

        print("Second")
        print("First")
    
        print("Second")
        print("First")


    print(ans)
print('\n'.join(map(str, answers)))

        print(dp[i][-1])
print('\n'.join(map(str, Ans)))         


print(''.join(map(str, table[1:N+1])))
            
    


    print(1)
    print(0)
    print(2)
    print(0)
    print(11)
    print(K-1)
        print("0"+"1"*i+"0")


    print(1)
    print(0)
    print(2)
    print(11)
    print(0)
    print(N-1)
        print("0"+"1"*i+"0")

    print(2)
    print("00")
    print("1")
    print(1)
    print(1)
    print(K)
        print("1"+"0"*i+"1")


    print(1)
    print(0)
    print(2)
    print(0)
    print(11)
    print(n-1)
        print("1" + "0" * i + "1")

    print(1)
    print(0)
    print(2)
    print(0)
    print(11)

print(n-1)
    print("1" + "0"*i + "1")
    


        print(2)
        print(0)
        print(11)
        print(1)
        print(0)
        print(n-1)
            print("0"+"1"*i+"0")
        print(1)
        print(1)
        print(2)
        print(0)
        print("11")

    print(n-1)
    print("11")
        print("1" + "0" * i + "1")

        print(1)
        print(1)
        print(2)
        print(0)
        print(11)
    print(n-1)
        print("1"+"0"*i+"1")

    print(1)
    print(0)
    print(2)
    print(0)
    print(11)
    print(N-1)
        print('0' + '1'*i + '0')

print(len(A))
print(len(c))
print(*c, sep = '\n')


        print(e)
        print(o)
        print(o)
        print(e)     

        print("EVEN")
        print("ODD")
        print("ODD")
        print("EVEN")

        print("ODD")
        print("EVEN")
        print("EVEN")
        print("ODD")


    print("EVEN")
    print("ODD")


print('EVEN' if (B-A)%2 else 'ODD')


    print(["ODD", "EVEN"][(b-a) % 2])


    print("EVEN")
    print("ODD")

        print("ODD") 
        print("EVEN") 
        print("EVEN") 
        print("ODD") 

        print('EVEN')
        print('ODD')
        print('EVEN')
        print('ODD')

    print("ODD")
    print("EVEN")
    print("EVEN")
    print("ODD")

    print('ODD')
    print('EVEN')

        print("EVEN")
        print("ODD")
            print("EVEN")
            print("ODD")
            print("EVEN")
            print("ODD")


print('ODD' if (b - a + 1) % 2 else 'EVEN')

    print("EVEN")
    print("ODD")


        print("EVEN")
        print("ODD")
        print("ODD")
        print("EVEN")


print(check())

print("ODD"if (b-a)%2 else "EVEN")

        print("ODD")
        print("EVEN")
        print("EVEN")
        print("ODD")


print("EVEN" if (A + B) % 2 else "ODD")

        print('ODD')
        print('EVEN')
        print('ODD')
        print('EVEN')

    print("ODD" if (b-a)%2 else "EVEN")
    print("EVEN" if (b-a)%2 else "ODD")

  print("EVEN") if (b-a) %2 == 0 else print("ODD")
  print("ODD") if (b-a) %2 == 0 else print("EVEN")


print(solve(a,b))



print(ans)

  print('EVEN')
    print('ODD')
    print('EVEN')


print('ODD' if ans % 2 else 'EVEN')


    print("EVEN")
    print("ODD")

    print("EVEN")
        print("ODD")
        print("EVEN")


        print("EVEN")
        print("ODD")
        print("EVEN")
        print("ODD")

print(solve(a,b))



print(ans)

  print('EVEN')
  print('ODD')


        print('EVEN')
        print('ODD')
        print('ODD')
        print('EVEN')


	print(sT[res])
print(' '.join(map(str, b)))




print(*buf)


print(*B)


print(*solve())

    print(" ".join(map(str, B)))

print(*ans)

print(" ".join(map(str, Ans)))


	print(sT[res])
	print(*sol(N,vI))
	
print(*ans)

print(*ans)


print(*b)


print("test:",test)
print(*B)

print(*solve(a))


print(*bb)


print(*res)

print(*b)

print(*ANS)



print(*B)


print(*solve(a))




print(*B)



print(*A)


print(*B)

print(*ans)


    print(*k)
    print(*[l[j+(-1)**j]*(-1)**j for j,o in enumerate(l)])


print(*B)


print('%d'%b[0],end='')
    print(' %d'%b[i+1],end='')

print(ans)


print(s)

print(sum([B[i]*cmb(N-1,i) for i in range(N)])%mod)


print(res)

print(ans)


print(ANS)



print(ans%MOD)

print(ans)



print(res)

	
	print(res)


print(ans)

print(ans)


print(ans)


print(ans)


print(res)


print(ans%M)

print(ans % mod)


print(ans)


    print(pow(x,e,n+1))

print(ans%M)

print(ans)






    print(1)
    print(ans)



print(ans)


print(res)


print(res[-1])

print(ans)

print(P)


print(ans)


print(ans)

print(ans)

print(ans)

print(ma)


print(ans)


print(ans)



print(ans)    

print(ans)


print(MAX)



print(ans)



print(dp[-1])


print(res)

print(max(vals))

print(max(dpx))




print(max(res))



print(dp2[0])
print(ans)


            
print(DP[-1])


print(ans)

print(dp[T])






print(DP2[T])


print(dp2[-1][-1])

print(max(dq))

print(DP2[T])

print(max(dp[-1]))


print(solve(n, m, k, f, abc))


    print(0)
print(ans)


print(ans)
        
    


print(ans)

                print(0)
            print(0)

print(ANS)

        
                
                
        
    



print(res)



print(ans%M)

  print(0)
print(P*pow(2,K*Z,mod)%mod)

            print(ans)

print(ans%mod)

        print("YES" if ok[y] else "NO")


            print("YES")
            print("NO")


      print('YES')
      print('NO')


    print("YES" if t else "NO")


            print("YES")
            print("NO")

      print('YES')
      print('NO')



            print("YES")
            print("NO")

print('\n'.join(Ans))
    



print('\n'.join(ans))


            print("YES")
            print("NO")
    print("SECOND")
    print("FIRST")
        print("FIRST")
        print("SECOND")

  print('SECOND')
    print('SECOND')
    print('FIRST')

    print("FIRST")
    print("SECOND")
        print("SECOND")
        print("FIRST")

        print(r-l+1)
        print(ans)


    
print('\n'.join(map(str, Ans)))
    

print(*total, sep='\n')



print(*ans, sep='\n')

print(*dp2, sep = '\n') 


    print(upper[i])


    print(SCORE_UP[i]+SCORE_DOWN[i])


print('\n'.join(map(str, beauty)))


    print("\n".join(str(a) for _, a in Ans))

    print("fa =", fa[:20])
    print("fainv =", fainv[:20])

print(*XX, sep = "\n")

    print("Yes")
        print(i)
    print("No")


    print('Yes')
    print(*ans, sep='\n')
    print('No')


    print('Yes')
        print(i)
    print('No')

    print("No")
    print("Yes")
        print(i)


    print("Yes")
        print(a)
    print("No")

    print("No")
    print("Yes")
    print(*ans,sep="\n")

    print("Yes")
        print(i)
    print("No")


        print(i)
print(*check(), sep='\n')

    print("No")

    print("Yes")
        print(l[i])

    print("Yes")
        print(t)
    print("No")


    print('No')
    print('Yes')
        print('Yes')
                print(j+1)
    print('No')

    print("No")
    print("Yes")
        print(idx)


  print('Yes')
  print(*P,sep='\n')
  print('No')

    print("Yes")
        print(i)
    print("No")


print(*a[1:])

print(*[s+k for s, k in zip(shoko[:-1], kosa[:-1])])


print(*ans[1:-1])


print(*A)


print(*res)

print(*A[:-1])


print(*arr[:-1])



print(*dif[:-1])

print(*lis[1:-2])


print(*f[:n])


print(*P)

print(*a)

print(*L[:-1])


print(*ans)


print(*ans[1:-1])

            print("".join(res))
        print("hokudai")
            print("".join(res))

print(ANS)


    


print(ans+'*'*(N-len(ans)))

    


print(ans)

print(*ans,sep="")


            print(s)
print(*ans,sep="")

print(P)


print(''.join(map(str, Ans)))

        print("Yes")
            print("Yes")
            print("Yes")
            print("Yes")

        print("No")

        print('Yes')
                print('Yes')
                print('No')
        print('Yes')

        print("Yes")
        print("Yes")
                print("Yes")
                print("Yes")
                print("Yes")
        print("No")


    print("Yes")
    print("Yes")
    print("Yes")
    print("No")

        print(i)

        print("Yes")
        print("Yes")
        print("Yes")
        print("Yes")
        print("Yes")
        print("No")
    

        print("Yes")
        print("Yes")
        print("Yes")
        print("Yes")
        print("No")
        


    
    


        print("Yes")
            print("Yes")
            print("Yes")
        print("No")


print(g.flow(0,n+1))



print(G.flow(0,N+1))

print(ans)
print(ans)


print(ANS+"UPC")


print(T+"UPC")

print(''.join(ans))

print(P)

print(ans+"UPC")


print("".join(contest_name_characters))


print(ans+'UPC')

print(t + "UPC")


print(name+"UPC")

print(name +'UPC')

print(ans + "UPC")


print(*s,sep="")

print(a+"UPC")

print(''.join(ans))


print(result+'UPC')


print(ans)

print(ans)


    print(dx+dy)
    print(dx+dy+1)

print(ans)


        print(-1)
            print(-1)
        print("".join(ANS))


        print(-1)

    print(*ans, sep="")
  print(S)
    print(-1)
  print(-1)
print(ans)




    print(S)
    print(-1)
        print(-1)
        print(-1)
    print(1/0)


print(ans)

    print(s)
    print(-1)
            print(-1)
            print(-1)
    print(-1)
    print(''.join(ANS))


        print(-1)
print(''.join(ans[2:]))

        print(-1)
print(ans[2:])

        print('Yes')
        print('No')
        print('Yes')
        print('No')


print(ans)

print(ans)

    print("Yes" if S == T else "No")

print("Yes" if sxor == txor else "No")

        print("No")
        print("No")
    print("Yes")
    print("No")


        print("Yes")
        print("No")
    print("Yes")
    print("No")


print(ans)


print(ANS)
            



print(kr())

print(ans)


print(ans)



print(ans)

print(ans)


print(ans)

print(ans)



print(ans)


print(ans)

    print(ans)
    print(ans)
    print(ans)
    print(ans)
    print(ans)
    print(ans)
    print(ans)
    print(ans)


print(ans)    


    print(max(u))
    print(max(f))
    print(max(r))
    print(max(f))
    print(max(d))
    print(max(f))
    print(max(l))
    print(max(f))

print(ans)

print(ans)

print(ans)


print(ans)



print(max(CMAX))



print(max(v[x]))

    print(ANS)

    print(ans)

print(*ans, sep='\n')


print("\n".join(map(str,ans)))


    print(ans)


    print(ans)

    print(As[L - 1] - (csum[R] - csum[L]))


    print(a[l]-a[l-1]-a[r]+a[l])

    print(A[l - 1] - (B[r] - B[l]))
    

    print(2*a[l-1]-sum(r)+sum(l-1))

    print(a[l-1]-S.query(l,r))


print(max([(dpi//k)-i for i,dpi in enumerate(dp)]))

print(ans)


print(ans)

print(res)


print(ans)


    
print(ans)

print(ans)


print(ans)



print(ans)

print(ans)


print(ANS)
        


print(ans)

print(ans)

    print("No")
    print("Yes")
    print("No")

    print("Yes")
    print("No")


print('Yes' if res == M else 'No')




  print('Yes')
  print('No')


    print('Yes')
    print('No')

print(*ans)

print(*ans)


print(*ANS)
    



print(*B)




print(*B)


print(*ans)

print(*ANS)


print(*Ans)




print(*ans)

        print(0)
print(ans)

print(ans)


print(res)


print(ans)

        print(0)
    print(ans)

print(ans)



    print("bike")
    print("same")
    print("bus")


    print("same")
    print("bike")
    print("bus")

    print("bike")
    print("bus")
    print("same")


    print("bike")
    print("same")
    print("bus")
    

    print('bike')
    print('same')
    print('bus')

    print("bike")
    print("same")
    print("bus")

  print('bus')
  print('bike')
  print('same')

    print('bike')
    print('bus')
    print('same')

print("bike" if a < b else "bus" if a > b else "same")

  print('bike')
  print('same')
  print('bus')

    print("bike")
    print("same")
    print("bus")

print("same" if Tu == Tv else "bike" if Tu < Tv else "bus")


    print("bike")
    print("same")
    print("bus")


    print("bike")
    print("same")
    print("bus")


    print("bus")
    print("bike")
    print("same")

    print("same")
    print("bus")
    print("bike")

    print('bike')
    print('bus')
    print('same')

    print('bike')
    print('bus')
    print('same')

    print('bike')
    print('bus')
    print('same')


    print("bike")
    print("bus")
    print("same")



print(sum(ans))

    print(s(n))
print(ans)


print(A)


        print(N)
        print(1)
        print(N+1)
        print(0)
    
    print(ans)
    
    

print(solve())

print(ans)



print(ans)

print(ans)


print(s)


print(ANS)



print(ans)

    print(-1)
    print(ans)
        

print(ans)

    print(0)
    print(-1)
    print(ans)


    print(-1)
    print(ans)


    print(-1)
    print(LANS)


print(ans)


print(ANS+1)
        
        




print(res)



print(T.get(M+1)%MOD)
    


print(ans%mod)





print(sum(dp)%mod)



print(bit.sum(0, sum_m) % MOD)

print(ans)


print(ans)
            


        print(0)
print(ans)

    
    print(*ans)

            print(ans.count(str(i)), end=" ")
            print(ans.count(str(i)))

    print(*an)


    print(*ans)


    print(cs)



    print(*ans)
    print(*ans)


  print(*cnt)

    print(*cnt)



    print(*c)

    print(*counts)

    
    print(*ans)
        


    print(*numbercount)

    print(" ".join(map(str,ans)))


    print(ret)


        print(*ans)
    print(*cnt)

    print(*cnt)

    print(*cnt)

    print(" ".join(ans))

  
  print(*num)

    print(*ANS)


    
    print(*L)

    print(' '.join(map(str, r_list)))

  print(*ans)


    print(' '.join([str(n) for n in ans]))

    print(" ".join(list(map(str, cnt))))

    print(ans)

    print(an)


    print(len(l2))


    print(len(l2))

    print(ans)


    print(ans)

    print(sum(burst))


        print(ans)


    print(ans)

    print(count)

    

  print(sum(seen))

        
        print(ans)


        print(bfs(c, sy, sx, H, W, D))
    print(len(ans))


                    
    print(ans)

    print(ans)





    print(uf_tree.size(B - 1))

    print(len(ans))

    print(ct)


    print(ans)


    print(dist[gx][gy] + geta)


  
  print(dp[gx][gy]+ans)
  
    print(answer)

  print(-ans)
  
  print(ans+count(S))

    print(L + R)

    print(ans)

    print(output1)
    print(output2)

    print(i)
    print(i)

    print(time.time()-start)
    print(ANS)
  print((c*(c+1)//2-(a-1)*a//2)*(d*(d+1)//2-b*(b-1)//2)%(10**9+7))


  print((f(c)-f(a-1))*(f(d)-f(b-1))%1000000007)

    print(S(a,c)*S(b,d)%mod)


    print(x*y%MOD)


    print(ans)
    print((f(a, b) - f(a, d - 1) - f(c - 1, b) + f(c - 1, d - 1)) % (10 ** 9 + 7))


        print((f(c, d) - f(c, b-1) - f(a-1, d) + f(a-1, b-1))%mod)


    print(x * y % mod)


    print(ans%M)

    print(ans % (10 ** 9 + 7))

    print(res%mod)


    print((f(c, d)-f(a-1,d)-f(c,b-1)+f(a-1,b-1))%MOD)


    print(x * y % MOD)


    print((c - a + 1) * (c + a) * (d - b + 1) * (d + b) // 4 % (10 ** 9 + 7))


    print(h*w%mod)
        print((a+c)*(b+d)*(c-a+1)*(d-b+1)//4%mod)

    print((a+c)*(c-a+1)//2*(b+d)*(d-b+1)//2%MOD)

    print((a+c)*(c-a+1)//2 * (b+d)*(d-b+1)//2 % mod)


    print(xtmp * ytmp % mod)

    print((a + c) * (c - a + 1) // 2 * (b + d) * (d - b + 1) // 2 % mod)

    print(s(a,b)*s(c,d)%mod)
    print((m-x-y+l)%mod)

    print((x * y) % MOD)



        print(res)


        print(x*y%z)

    print(ans%mod)


    print(ans)

	print(int(ans))

    print(ans)

    print(res)

  print(res)


    print(ans)


print(ans)



    
print(ans%MOD)











print(ans)


print(ans)


print(ans % mod)

print(ans%M)

print(ans)

        print(0)
    print(ans)


    print(ans)

print(res)

    print(ans)



print(ans)
        


print(R)


  print(0)
print(res)


print(res % MOD)

print(ans)

print(ans%mod)

print(ans)


print(ans)


    print(ans)
print(R)


    print(ans)


print(res)


print(res%998244353)


print(ans)


print(ans)


print(ans)


    print(su)

print((ans-b+1)%mod)

print(P%mod)


print(ans)

print(ans)


print(ans%M)


print(ans)

print(ans)

    print(dm.minimum_query())

    print(data.getmin())


        print(B * (more_sum - X_dest * (k + 1 - D)) + A * (X_dest * D - less_sum))

    print(ans)

    print(ans)

        print("debug")
        print([self.getvalue(i) for i in range(min(self.n, 20))])

    print(ans)



print(ans)


print(ans)

    
print(ans)

print(res)

        print(1)
        print(atleast1then)
        print(-1)
        print(1)
        print(atleast1then)
        print(-1)


print(f)
            
print(*ans)

    print(1)
    print(W[0])
    print(-1)
print(Q+mat())
print(*Z)

print(ans)



print(ans)



print(ans)


        print(*ans_sub)
    print(-1)


        print("Yes")
print("No")



print("Yes" if f() else "No")




        print('Yes')
    print('No')

                                print("Yes")
    print("No")
                print('Yes')
print('No')

            print('Yes')
print('No')

                print("Yes")
print("No")

                    print("Yes")
    print("No")
                print("Yes")
print("No")


                print("Yes")
print("No")


print("No")



print("No")

                print('Yes')
print('No')


            print("Yes")

print("No")


              print("Yes")
print("No")

    print(ans)
    print(val)

print(len(ans[0]),p)
print(2,P)
    print(*ans)

print(P-1,P)
  print(*R)


print(M, MOD)
    print(*a)



print(p-1, p)
print(M,P)
    print(*line)



print(M, P)
    print(*row)




print("Yes" if all(b in aa for b in bb) else "No")



print('Yes' if ans else 'No')

    print("Yes")
    print("No")



      print('Yes')
print('No')

    print("Yes")
    print("No")

print('Yes' if j == m else 'No')


    print(dp[(n-1)*n+n-1])
    print(len(ans))
    print(*ans)

print(max(len(S)-1,0))

print(max(ans, 0))

print(cnt)

print(ans)


print(cnt)

print(ans)

print(ans)


print(ans)


print(ans)


print(ans)

print(ans)



print(ans)



print(x)  

    print(len([*filter(lambda x: len(x), s.split('N'))]))


print(max(cnt-1,0))


print(ANS)


print(ans)

        
print(count)

print(ans)

        print(0)

    print(ans)

    print(Ans)
print(ans)


print(len(re.findall(r"NA+N",S)))

print(max(0,res-1))

print(s)

    print(-1)
    print(N)

        print(-1)
        print(P*Q)
print(ans)

    print(-1)

print(ans)

print(ans)

    print(ans)
    print(-1)
    

    print(N)
    print(-1)

    print(-1)
print(ans)


    print(-1)
    print(-1)

print(ans)

print(ans)

        print(K//i)
    print(-1)

print(N)


    print(0)
        print(0)
        print(0)

print(answer)

print(ans)


    print(0)
                print(0)
        print(0)
print(ans)



print(res)

    
    

    print(0)
        print(0)
        print(0)
print(ans)

print(ans)

    print(0)
        print(0)
        print(0)

print(ans)

    print(0)
            print(0)
        print(0)
print(ans)
        

print(ans)

print(ans)




print((f[-1] - 1) % MOD)

print(res % mod)



print(ans % MOD)

print(ans)


print(ANS)


print(ans)


print(e%M)


print(dp[t])




print(ans)

        print("Yes")
    print("No")

print(ans)

    print("Yes")
    print("Yes")
            print("Yes")

print("No")

    print("Yes")
            print("Yes")
print("No")

    print("Yes")
            print("Yes")

print("No")


    print("Yes")
    print("Yes")
        print("Yes")

print("No")

    print(-1)

print(inversion_number(ls))

        print(" ".join(map(str, l)))
    print(-1)
    print(res)

print(res)






    print(-1)

print(inversion_number(B))

    print(-1)
    print(-1)
    print(ans)


print(ans)

    print(maximum[odd])

    print(*an)


    print(gold.index(max(gold))+1896,medal.index(max(medal))+1896)

  print(gold, medal)


    print(min([k for k, v in gold.items() if v == max_gold]), min([k for k, v in total.items() if v == max_total]))

    print(Gold_list[0][0], Medal_list[0][0])



    print(ans_g[0], ans_m[0])


        print(f'{medals[0][2]} ', end='')
        print(medals[0][2])


    print(rbunshi / rbunbo, cbunshi / cbunbo)

    print(rbunshi / rbunbo, cbunshi / cbunbo)


    print(*an)



    print(r_numerator / r_denominator, c_numerator / c_denominator)

    
    print(viji/vij, vijj/vij)



  print(cnti / cnt, cntj / cnt)


    print("{:.10f} {:.10f}".format(r, c))



    print(r / total, c / total)


    print(r, c)


    print(dfs(h, w, s, 0))


    print(rec(0, bit))


    print(ans + n - len(LIS))


    print(inversion_number(p) + n - longest_increasing_subsequence(p))


            print('Yes')
            print(a + b)
print('No')


    print("No")
    print("Yes")
    print(ans)


            print("Yes")
            print(s1+s2)
print("No")

            print("Yes")
            print(x+y)

print("No")

            print('Yes')
            print(a + b)
print('No')


        print("No")
        print("Yes")
        print(Alpha[ans[0][0]],Alpha[ans[0][1]],sep="")

            print("Yes")
            print(s1+s2)
print("No")


print(res)
	print(name)


    print("Yes")
    print(ans)
    print("No")


    print('No')
    print('Yes')
    print(ans)



  print(a)

            print('Yes')
            print(c1,c2,sep='')
print('No')

  print("Yes")
  print("".join(min(s)))
            print('Yes')
            print("".join([x,y]));exit()
    print('No')




                print("Yes")
                print(x+y)

print("No")
    


    print('No')
    print('Yes')
    print(ans)


    

        print("Yes")
        print(a+sorted(list(not_used))[0])

print("No")

    print("Yes")
    print(S[0])
    print("No")

        print("Yes")
        print(ans)
print("No")


	print('Yes')
	print(chr(x[0] + 97) + chr(x[1] + 97))
	print('No')

    print('Yes')
    print(ans[0])
    print('No')

    print('Yes')
    print(sorted(list(ok))[0])
    print('No')

    print('Yes')
    print(chr(ord('a')+x[i][0])+chr(ord('a')+x[i][1]))
print('No')


      print("Yes")
      print(chr(ord('a')+i)+chr(ord('a')+j))
print("No")

    print("Bob")
    print("Alice")

  print('Bob')
  print('Alice')

    print("Bob")
    print("Alice")


print("Bob" if II()%3 == 2 else "Alice")


    print('Bob')
    print('Alice')

    print("Bob")
    print("Alice")

    print("Bob")
    print("Alice")


        print("Bob")
        print("Alice")
        print(i)
            print("Alice")
            print("Bob")



print('Alice' if solve(N-1,0,0) else 'Bob')


    print("ok")


    print(solve(N, As))


print((s & -s).bit_length()-1)


print(ans)




print(res)

print(res)


    print(n,m)
        print(n,m)
    print(solve(n,m)%mod)





    print((a[i] ** 2 + b[i] - c[i]) % MOD)


    print((tmp+p[i])%mod)
    



    print((c[i] + d[i]*d[i]) % mod)


print(res//2)



    print(ans)        




print(answer // 2)



print(ans)


print((ANS-N)//2)




print(ans)



print(ans//2)



print(ans)


print(ans)


print(ans // 2)



print(*ans, sep="\n")



print(*ans,sep="\n")






print(an)


            print(1, 3, 1, 3)
            print(1, 2, 1, 3)
            print(1, 2, 1, 2)
            print(1, 1, 1, 3)
            print(1, 1, 1, 2)
            print(1, 1, 2, 3)
            print(1, 1, 3, 3)
            print(1, 1, 2, 2)
        print(1, 3, 3, 3)
            print(1, 2, 3, 3)
            print(1, 3, 2, 3)
            print(1, 2, 2, 3)
            print(1, 2, 3, 2)
        print(1, 2, 2, 2)
        print(3, 3, 3, 3)
        print(2, 3, 3, 3)
            print(2, 2, 3, 3)
            print(2, 3, 2, 3)
        print(2, 2, 2, 3)
        print(2, 2, 2, 2)



  print(*ANS)

  print(1)
print(ANS)


print(ans)

    print(0)

print(ans)

    print(1)

print(ans)





print(ans)

    print(ans)

print(ans)

        print(i)
    print(la)

print(ans)

    print(0)
    print(ans)


print(i)


print(ans)


    print(0)
print(k)

            print(i)
        print(len(ba))
    print(0)

    print(1)

    print(ANS)



print(cnt)

        print(i)
print(L)

    print(1)
print(ans)


        print(1)
    print(ans)
        print(n-i-1)
    print(n)

                print(-1)
    print(ans)

print(dope)
        



        print(-1)

print(ans)


        print(-1)

print(ans)

      print(-1)
print(ANS)


        print(-1)

print(ans)

        print(-1)
print(ans)


        print(-1)
print(ans)



            print(-1)
print(ans)

        print(-1)

print(ans)


            print(-1)
print(ans)


print(res)
    



print(ans*pow(n*(n+1)//2,mod-2,mod)%mod)
print(ANS*pow(N*(N+1)//2,mod-2,mod)%mod)


    print("IMPOSSIBLE")

print(mi,ma)

    print(ans)
    print(x, y)









        print("IMPOSSIBLE")

    print(min_,max_)
    print("IMPOSSIBLE")
    print(min(LCM[N-1]),max(LCM[N-1]))


    print(min(dp[-1]), max(dp[-1]))
    print("IMPOSSIBLE")


    print("IMPOSSIBLE")

print(mi,ma)





  print('IMPOSSIBLE')
  print(min(D[-1]),max(D[-1]))

	print(min(ans),max(ans))
	print('IMPOSSIBLE')


print(ans)


print(sum(A))

print(sum(ans))

print(sum(F))


print(sum(F))
        



print(len(husei))

      


    print(ans)
print(len(ans))



print(len(ans))





print(sum(flag))

print(len(set(ans)))

print(ANS)


print(ans)






print(sum(ans))


print(res)



print(ans)


print(sum(ans))


print((c2-c1+1)*(r2-r1+1))

print((lis.index(c2)-lis.index(c1)+1) * (num.index(r2)-num.index(r1)+1))


print(x*y)


print((c-a)*(d-b))



print((c2-c1+1)*(int(r2)-int(r1)+1))




print((r2-r1+1)*(c2-c1+1))


print((c2-c1+1)*(r2-r1+1))

print((i2-i1+1)*(j2-j1+1))


print(tate*yoko)

print(k)


print(C*R)



print((abs(a - c) + 1) * (abs(b - d) + 1))



print((x+1)*(y+1))

print(ans)



    print(ans)
print((r2 - r1 + 1) * (cc2 - cc1 + 1))

print(ans)



print((d-b+1)*(r[c]-r[a]+1))


print(ans)


print(ans)

print(ans)





print(res)
        

print(dp[-1][-1])

print(DP[M][N])

print(ans)

print(dp[m][0])

        print(ans * pow(2, d, mod) % mod)
        print(dp_btm[x] * dp_btm[y] * pow(2, dst, mod) % mod)
        








    print(((DP2[x]-DP1[ff(x,y)]*2)*DP1[y]%mod)*P2[dist[y]-dist[x]]%mod)
    print((DP1[x]*DP1[y]%mod)*P2[dist[x]+dist[y]-dist[l]*2]%mod)

        print(ans)
        print(ans)









print(ans)


print(ans)


print(ans)



print(ANS)
    



print(ans)

print(ans)

    print(ans)
print(ans)



print(ans)

print(ans)


print(ans)

print(ans)


print(ans)


print(ans)


print(ans)


    print(ans)

print(ans)


print(ANS)


print(ans)

print(ans)


print(ans)


print(ans)


print(ans)

print(ans)

print(ans)

    print(1)
    print(n+1)
    print(pow(2, n, md))


    print(pow(2, N, P))
    print(1)
    print(N + 1)



print(gauss(A, Y)[D[(N, 0, 0)]] if N > 2 else 2)


print(ans)


    print(ans)
    print(0)
print(ans)


    print(ans)


print(ans)

print(ans)


print(ans)


print(answer)


print(ans%mod)


print(ans)



print(ANS*Combi(TWO+THREE,TWO)%mod)


    print(ans)
print(ans)


print(ans)


    print(ans)



print(ans)


print(u)

    print(ans)


    print(sum(a))
print(ans)

print(sum(a))


print(sum(A))


print(sum(A))

print(sum(ans))

print(ans)

            print('Yes')
    print('No')

            print("Yes")
    print("No")
    print("Yes")
    print("No")
    


        print("Yes")
        print("No")


    print(i)


            print("Yes")
    print("No")
    print('Yes')
  print(ans)

        
print(*ret,sep="\n")

            print('Yes')
    print('No')
        print("Yes")
        print("No")
        print("Yes")


            print("Yes")
        print("No")


        print("Yes")
        print("No")


        print("No")
print("Yes")

print(ans)

    print("Yes")
    print("No")
        


    print("Yes")
    print("No")

        print("No")
        print("Yes")
        print("No")
    print(an)


    print(cnt)

  print(ans)


    print(ans)

    print(i)


    print(x_max)

        print(maxcount + 1)

    print(ans)


        
        print(ans)


    print(max_counter)



        print(max(incl))


    print(max_count)


        print(dp[n - 1][0])


    print(ans)



        print(ans)



    print(ans)


print(min(x), max(x))

    print((b - a + 1) // n, (b - a + 1) // n)
    print((b - a + 1) // n, (b - a + 1) // n + 1)

    print(min,min)
    print(min,min+1)

        print(M//N, M//N)
        print(M//N, M//N+1)
    print(min(ctr), max(ctr))

    print(min(ctr), max(ctr))

print(min(v), max(v))



print(min(count),max(count))

print(min(cnt), max(cnt))

print(min(C), max(C))



print(min,max)
        

print(min_, max_)


print(min(cnt), max(cnt))



print(ans_l, ans_r)

        print(i*D)
        print(i*d)
        print(i*D)
print(ans)


        print(dist-D)
        print(D * i)
print(ans)

    print(ansx, ansy)


print(x,y)

print(G[0][0], G[1][0])


        print(f"{ps[v][0]:.15f} {ps[v][1]:.15f} {ps[v][2]:.15f}")


    print(ans)
    


    print(f"{Ps[v][0]:.5f} {Ps[v][1]:.5f} {Ps[v][2]:.5f}")


    print(*ans[ni])

    print(0)

print(ans)

  print(0)
print(ans)

  print(0)
print(ans)

print(G*(2*N+2)*F%mod)


print(((2*N+2)*e)%mod)




print((d[0]-1)%MOD)



print((d[0]-1)%MOD)


print(*result)

print(*res)




    

print(*ans)

print(*ans)

      print('No')
      print('Yes')
            print("Yes")
            print("Yes")
            print("No")


            print("Yes")
                print("Yes")
                print("No")

    print(query(x,y))



  print(ans)

print(res)

  print(1)

  print(pow(x,y,mod))  

print(pow(x,y,mod))


print(res)


print(ans)


print(ans)


print(l)

print(lcm_list(N))


print(G)

        print(1)
        print(-1)
        print(0)


        print(1)
        print(-1)
        print(0)


    print(int(ans))


	
	print(res)

            print(x%(1<<i))

print(x)

print(ans)


print(ans)


print(ans)


    print(s)



    print("".join(ans))
    



    print(res)


    print(lowerstring+upperstring+num)

        print(''.join(lower + upper + number))


    print(komoji + ans2 + ans3)

    print(''.join(komoji + oomoji + suuji))

    print(*lowl+upl+num, sep="")

    print(i)


    print("".join(ans))

    print(''.join(sorted(lower)) + ''.join(sorted(upper)) + ''.join(sorted(digit)))


    print(''.join(lower + upper + digit))


    print(''.join(ANS))


    print(an)


    print(m)

    print(i)


    print(ans)

    print(ans)


    print(ans)

        print(0, 1)
        print(1, 0)
    print(x, y)
        print(x1, y1)
        print(x2, y2)


    print(x, y)


    print("Wakkanai","Hakodate")
    print("Sapporo","Hakodate")

    print('Sapporo','Hakodate')
    print('Wakkanai','Hakodate')

    print(ans[a], ans[b])
print(cnt[0][1], end = " ")
print(cnt[1][1])



print(P[ANS[0]], P[ANS[1]])



print(c1,c2)


print(cnt[0][1],cnt[1][1])



print(*fa)


print(SityN[SityP[0][0]],SityN[SityP[1][0]])


    print(*A)
    print(*a)

        print(j,end="")
            print()
            print(" ",end="")

    print((1-ans_cos)%P)
    print((1-x)%p)

    print(pow(2,n,md))
print(ans[0][-1])


print(lis[0][N%K])

print(((6 * I()) / 3.141592653589793238) ** 0.5)

print(r)


print(r)


print(s**(1/2))



print(math.sqrt(6 * S / math.pi))


print(r)

print((s*6/pi)**0.5)


print(sqrt(s))


        print(2)
        print(1)
    print(0)
    print(DP[0]%M)
    print((DP[1]+DP[2])%M)
    print(DP[3]%M)
    print(sum(DP)%M)
    print(0)





print(solve(L, A))

        print(i)
print(a*2+b*3)


print(a*2+b*3)

print(2*a+3*b)

print(a*2+b*3)

print(a*2+b*3)

print(A*2+B*3)

print(a*2+b*3)

print(A * 2 + B * 3)

print(a*2+b*3)

print(a*2+b*3)

print(a * 2 + b * 3)

print(a * 2 + b * 3)


print(ans)

print(a * 2 + b * 3)

print(unit)



print(2*n+3*m)

print(a * 2 + b * 3)


print(2*a + 3*b)

print(a * 2 + b * 3)

print(2*a+3*b)

    print(2 * a + 3 * b)

    print(min((a * p + b) for a, b in x))

    print(min(a * p + b for a, b in (f[i] for i in range(l, r))))

    print(min(a * p + b for a, b in (F[i] for i in range(l - 1, r))))



        print(min_val)

    print(min)

    print(mi)


    print(ans)


    print(ANS)


    print(now)

    print(ans)

print(*ans, sep='\n')


    print(ans)

print(len(ans))
    print(x+1,y+1)


print(2*N-3)
  print(i,i+1)
  print(1,i)



print(len(Edge))
print('\n'.join(' '.join(map(str, a)) for a in Edge))

print(2 * N - 3)
    print(i + 1, i + 2)
    print(i + 1, N)

print(N+N-3)
    print(i+1,i+2)
    print(1,i+3)

print(len(P))
  print(*v)

print(2*(N-1)-1)
    print(i,i+1)
    print(i,N)
print(N-1,N)    

print(len(ans))
    print(v, w)


    print(ANS)


print(max([i + min(a, K) for i, a in enumerate(X)]))



print(ans)


print(ma)

print(pow(2,len(base),mod))


print(pow(2, vs.dimension(), 998244353))

print(pow(2,len(base),mod))

        print("X"*W)
    print("".join(MAP[i]))

    
    
    


        print(*i,sep="")
    print(*i,sep="")

            print(self.cost[(self.w + 2) * i:(self.w + 2) * (i+1)])
            print(t)
            print("".join(t))
        print(self.BIT)

        print("".join(ka))

        print("".join(ans[i]))
    print("".join(ans[i]))

        print(''.join(ANS[i]))

    print("".join(["#" if a else "X" for a in x]))

    print("".join(g[i]))

    print(*mp[i],sep="")

    print("".join(line))




    print("".join(L[i]))
  print("".join(L[i]))

    print(''.join(row))


    print("".join(i))

    print(ans)

    print(''.join(g))


    print("".join(ans[i]))


    print("".join(A[i][:W]))





            print(field[i][j], end="")
        print()

        print(L[i][j], end="")
        print()

        print('Yes' if solve(x, y) else 'No')

    print(sx,end=" ")
    print(sy,end=" ")
    print(tx,end=" ")
    print(ty,end=" ")
    print(R,end=" ")
    print(rate)
    print(Query)
            print("Yes")
            print("Yes")
            print("Yes")
        print("No")
        


    print("Yes" if query(a,b,c,R) else "No")

    print(ans)

        print("Yes")
        print("No")


	print("Yes" if J==1 else "No")

    print("Yes")
    print("No")


    print("Yes" if solve(qx, qy, sx ,sy, tx, ty, r) else "No")


        print("Yes")
        print("Yes")
        print("No")
        print("No")
    print("Yes")
    

                print("Yes")
                print("No")
                print("Yes")
                print("No")
        print("Yes")
            print("Yes")
            print("No")

        print("Yes")
        print("Yes")
        print("Yes")
        print("No")

		print("Yes")
		print("No")

        print("No")
        print("Yes")
        print("No")


    print(solve(qx,qy))



print(dp.max(n+1))


        print("debug")
        print([self.getvalue(i) for i in range(min(self.n, 20))])

print(st.getrange(0, M))

print(DP.segquery(0, n + 1))



print(seg.query(0,n))

print(st.all_prod())



print(ST.query(0, n + 1))


print(getvalue(N,seg_el))

    


print(ans)

print(query(seg,0,N+1))

            print(self.cost[(self.w + 2) * i:(self.w + 2) * (i+1)])
            print(t)
            print("".join(t))
        print(self.BIT)

            print(self.arr[idx - 1:idx * 2 - 1])

    print(dp.query(0, max(bn) + 1))


print(seg.get(0,len(s)+5))


print(l)


print(ans)

	print(l)

print(ok)
    


            print(self.cost[(self.w + 2) * i:(self.w + 2) * (i+1)])
            print(t)
            print("".join(t))
        print(self.BIT)

        print(0)
        print(mx)
        print(mn)



print(OK)
                
    


print(left-1)


print(left)


print(dp[-1])


print(res)
            






print(ans%M)

print(ans)

print((ans*pow(n-1,p-2,p))%p)

print((H + h - 1) // h * ((W + w - 1) // w))


print(((H+h-1)//h)*((W+w-1)//w))



print(ans)

    print(ans)



print(Hc * Wc)


print(((h1 - 1) // h2 + 1) * ((w1 - 1) // w2 + 1))

    print(((h+y-1)//y)*((w+x-1)//x))
print(ans)


print(((h1-1)//h2+1)*((w1-1)//w2+1))

print(nh * nw)

        print(i + 1)
    print("No")

        print(i+1)

print("No")


        print(i)
print("No")

    print(ans)
    print("No")

        print(i + 1)

print("No")


            print(i + 1)
    print("No")


        print(i + 1)
    print('No')

        print(i+1)
print("No")

        print(i + 1)
print("No")

            print(i+1)
    print("No")
        print(i)
    print("No")



print(answer)

    print(ans)

print(ans)



print(ans)


    print(ans)


print(ans)

print(ans)

print(ans)

print(ans)


print(ans)

        print("Yes")
        print("No")

print("Yes" if ma*k >= x*m else "No")


print("Yes" if max(As) * K >= X * M else "No")

print("Yes" if a * K >= X * M else "No")


print("Yes" if a*k >= x*m else "No")


    print("Yes")
    print("No")


        print("Yes")
        print("No")


    print('Yes')
    print('No')

    print("Yes")
    print("No")

    print(*ans_dict.get(T, (-1,)))

        print(*atoij[t])
        print(-1)


            print(-1)
            print(*ans)
            print(i + 1, j + 1)
            print(-1)


        print(*D[a])
        print(-1)

        print(x,y)
        print(-1)

        print(-1)
        print(*D[t])


    print(d[int(input())])

        print(*D[t][0])
        print(-1)

print("".join(ANS))

    print(*ans,sep="")
    print("".join(ans))



print("".join(ans))


print(*ans,sep="")


print(''.join(ANS))



print(''.join(answer_list))


        print(chr((ord(c) - 97 + d[idx]) % 26 + 97), end='')
print()

print(''.join(stack))       



print(BFS01())


    print(ans)
        print(d[x][y])
    print(-1)

        print(-1)
        print(ans)


        print(dp[gy][gx])
    print(-1)


print(ans)


print(answer)
        

print(ans)

print(ans)



print("Yes" if d0 >= 0 and d1 >= 0 else "No")



        print("No")
        print("No")
        print("Yes")


print("No" if dist[sij] == inf else "Yes")


        print("No")
        print("No")
        print("Yes")



print("Yes" if times[1][si][sj] < timelimits[i][j] else "No")
    print("No")
    print("No")
        print("Yes")
print("No")

    print("Yes")
    print("No")


print(calc(A, k))

    print(0)
print(ans)


print(ans)


        print(0)
    print(ans)
print(ans)    

print(ans)



print(answer)

    print(ans)
        
print(ans)

print(ans)



print(answer)


print(ans)


print(ans)



    print(*a)
print(*A)


print(*A)



print(*aa)


print(*Bs)


print(*A)


print(x*r,y*r)



print((3**0.5)*r*(x-y/2),3/2*r*y)

print(a, b)

print(f"{p.x:.06f} {p.y:.06f}")


print(px,py)


print( _X * (R * math.cos(math.pi / 6)) * 2, Y * (R + R * math.sin(math.pi / 6)))

print(*ANS)



print(ansX, ansY)

    print(A[i])

print("\n".join(str(p) for p in prime[left - 1:right]))


    print(a[i])


    print(ANS[i])



print(sum(dp)%md)


print(sum(DP) % mod)


print(solve(N,M,L,S,T))

    



print(solve(N,M,edge,K))
        
        



print(int((a+b)%6==0))

print(0 if sum([int(s) for s in input().split()]) % 6 else 1)

print(int((p + q) % 6 == 0))

    print(1)
    print(0)

    print(1)
    print(0)

    print(1)
    print(0)

print(result)


print(int((p + q) % 6 == 0))


    print(1)
    print(0)


    print(1)
    print(0)


    print(1)
    print(0)


print(1 if sum([int(i) for i in points]) % 6 == 0 else 0)

    print('1')
    print('0')

    print("1")
    print("0")

    print(1)
    print(0)
    

    print('1')
    print('0')


print(int((a+b)%6==0))

    print(1)
    print(0)

    print("1")
    print("0")

    print(1)
    print(0)

	print(1)
	print(3)
	print(2)

    print(1)
    print(2)
    print(3)


    print(1)
    print(3)
    print(2)


    print(1)
    print(3)
    print(2)


    print(1)
    print(2)
    print(3)

    print('1')
    print('2')
    print('3')





print(ans)

    print(1)
    print(1)
    print(3)
    print(2)

    print(1)
    print(3)
    print(2)


print(c * 6, c * 2, c)

print(6*h, 2*h, h)


print(l, l // 3, l // 6)


print('Yes' if solve(n, a) else 'No')

print(ans)


print(a % (n + 1))

print(int(A)%(int(N)+1))

print(a%(b+1))


print(a%(n+1))


print(A%n)

print(a%(n+1))

    print(a % (n + 1))


print(A%n)


print(a % n)

print(A%n)

print(a % (n + 1))

print(a % ti)



print(A % (N + 1))


print(a % (b+1))

print(A-all*s)

print(a%(n+1))

print(A % N) 

print(a%(n+1))

print(A % (N+1))

print(a%n)

    print(a)
    print(a%(n+1))
    



print(res)



print(remainder)

print(A%(N+1))

    print(a)
    print(a%n)
    

print(A%(N+1))

    print(q)
    print(0)

print(A%(N))

print(A%(N+1))

    print(solve(N, A))


print((A)%(N+1))


print(ans)


    print("Yes")
    print("No")


    print("Yes")
    print("No")

print("YNeos"[abs(x)+abs(y)>d :: 2])

    print("Yes")
    print("No")

        print("Yes")
        print("No")


    print("Yes")
    print("No")    

    print("Yes")
    print("No")

    print("Yes")
    print("No")

    print("Yes")
    print("No")

    print("Yes")
    print("No")

    print("Yes")
    print("No")

print("Yes" if abs(x) + abs(y) <= d else "No")

    print("Yes")
    print("No")


    print('Yes')
    print('No')

print("Yes" if d >= abs(x) + abs(y) else "No")


print(result)

    print("Yes")
    print("No")

    print('Yes')
    print('No')

print("Yes" if abs(x)+abs(y) <= d else "No")

    print("Yes")
    print("No")

    print("Yes")
    print("No")


  print("Yes")
  print("No")

print("Yes" if abs(x)+abs(y)<= d else "No")


  print("Yes")
  print("No")

print(*ans, sep="\n")


    print(b)
    print(s)

    print(b)
        print(b)
    print(b)
print(b)

        print(int(b / 2))
    print(b)
print(1)

print(b)
    print(b)

        print(a)
        print(a)
print(1)

    print(n)

print(1)


print(b)
        print(b)
print(b)
    print(b)
    print(b)
    print(int(b))
    print(b)
    print(b)
    print(b)
        print(b)
    print(b)
    print(b)
    print(b)
        print(b)

    print(b)
  print(b)
        print("No")
print("Yes")


    print("No")
    print("No")
    print("No")

print("Yes")


print(result)

        print("Yes")
        print("No")


            print("Yes")
            print("No")
        print("No")
    print("No")

  print("No")
    print("No")
  print("Yes")
  print("No")


    print("Yes")
    print("Yes")
print("No")


  print("No")
  print("Yes")
  print("No")

print(ans)


        print("Yes")
        print("No")
    print("No")


    print("Yes")
    print("No")


            print('Yes')
    print('No')


print("Yes" if ans == [1, 2] else "No")


  print("No")
    print("No")
      print("No")
  print("Yes")
      print("Yes")
  print("No")

        print("Yes")
        print("No")

            print("Yes")
            print("No")
print("No")


    print(-1)
    print(min(DP[-1][-1]) - 1)


print(-1 if res == INF else res)


    print(-1)
    print(min(filter(lambda x: x != -1, dist[H - 1][W - 1])))


    print(d)
print(-1)

print(result)

        print(time)
print(-1)


    print("No")
print("Yes")

        print("No")
print("Yes")


        print("No")

print("Yes")


        print("No")
print("Yes")



    print("Yes")
                print("No")
print("Yes")


print(f"{ans:.6f}")


print(ans)


print(ans * pow(total_perm, mod - 2, mod) % mod)


print(dp[T][N])

    print(''.join(ANS))


    
    print(''.join(waffle_row))

	print("#" * K if i%2 else "." + "#." * N)

    print(s)


        print(''.join(row))


    print('.',end='')
    print('#',end='')
  print('.')
    print('#',end='')
  print('#')
  
            print(".", end = "")
            print("#", end = "")
    
    print()

    print("No")
    print("Yes")

            print("Yes")
    print("No")


  print('No')
  print('No')
  print('Yes')

    print("Yes")
    print("No")

        print("Yes")
print("No")


print(max(cnt))


print(max(f(2, 0), f(2, 1), f(2, 2)))

print(1)



print(la[n])



print(fibo(int(input())))

        
        

    
print(b)

print(fib(n))


print(fib(n))
  



print(f(N))



print(fib(N))


print(dp[-1])


print(dp[n])



print(dp[n])

    
    print(dp[n])


    print(fib(n))
    
    print(n_list[n])
    print(n_list[n])

print(DP[n])

    print(1)
    
print(pre)

print(dp[-1])

    
print(dp[n])

print(fibonacci(n))

    print(1)
    
    print(DP[n])

    
print(dp[n])

print(sum(a))

print(fib[n])


print(fib(int(input())))


print(dp[n])

print(ans)

    print(solve_fibonacci(n))


print(dp[n])



print(fibonacci(int(input())))

print(n1)

print(F[n])



print(F[n])

print(fib[N])


print(fib[n])


print(fib(n))

    print(1)
    print(dp[n])

print(F[n])

            print(self.arr[i])

print(ans[0][0])



print(Fibonacci_dynamic(n))

print(fib(n))


print(dp[n])

print(fib[n])

print( fib(n))


print(fb[int(input())])


print(fib[-1])


print(dp[N])


    print(memo[0])


    print(arr[n])


print(x[n])

print(dp[-1])



print(dp[-1])


print(fib(n))

print(f(int(input())))

print(result)

    print(fibs[N])



print(l[N])


print(a[N])

    print(fibonacci(n))


print(fib(N))


    
print(dp[n])

print(fibonacci(n))


    print(fib[int(input())])
print(fib(int(input())))

print(dp[n])


print(fib[n])


print(dp[n])

print(cost)


print(dp[0][-1])



print(t[-1][0])


print(m[0][n])

        
print(dp[0][N-1])

print(m[0][n - 1])


print(dp[0][n-1])
      

    print(dp[0][-1])
    
    


print(n_mul(0, n))


    print(dp[1][n])


print(m[1][-1])


    print(dp[0][-1])
    print(dp[0][-1])
        print(*[str(x).rjust(7) for x in array[i]])
    print()

print(ans)



    print(dp[0][n-1])

print(dp[0][n-1])


print(dp[0][-1]) 


print(dp[0][N-1])


print(m[i][j])


print(m[1][n])

print(ans)


    print(dfs(0,n-1))


print(dp[0][-1])

print(dp[0][-1])

print(dp[0][-1])



print(dp[0][-1])

print(minMCM(mtx, n))


print(DP[0][l-1])



print(dp[0][N-1])

 print(m[r][c])
 print(m[r][c])
    print(memo[1][N])

 print(m[r][c])
        print(a)


    print(m[0][-1])


print(multiply(array, M + 1))


    print(solve(0, n - 1))


    print(run(RCs))


	print(matrixChainMultiplication())


    print(dp[0][n - 1])


    print(dp[0][N-1])

    print(dp[0][n - 1])


print(MatrixChainOrder(minfo, len(minfo)))

 print(m[r][c])
print(ans)


    print(matrixChainOrder(mat_dims))


print(ans)


print(mcmp(p))


print(chain_matrix(M))


print(m[1][n])







print(matrixchainorder())





print(int(get_min_mult_cnt_dp(0, num-1, mat_list)))

    print(ms[0][n - 1])



print(m[0][n-1])

print(dp[0][N-1])

print(m[0][N-1])

print(solve(n,mat))


print(dp[0][n-1])


print(func(n,m))



print(dp[0][n - 1])


print(dyna[0][n-1])


print(m[0][n])



print(m[0][n])

print(ans)

        print(solve(x, y))


    print(len(x) - bin(v).count('1'))


    print(llcs(X, Y))


        print(llcs(s1, s2))

    print(LCS(x, y))


        print(llcs(s1, s2))

    print(bisect_left(ans, INF))

    print(bisect_left(ans, INF))

    print(bisect_left(ans, INF))


    print(bisect_left(ans, INF))


        print(solve(X, Y))


    print(bisect_left(ans, INF))

    print(bisect_left(ans, INF))



print(*(lcs_hs(input(), input()) for _ in [0]*int(input())), sep="\n")

    print(lcs(a,b))

    print(main())
                 

        print(len(lis))
    print(*ans, sep="\n")

 print(a[1:])
 print(a[1:])
        print(lcs(str1, str2))

 print(a[1:])
 print(a[1:])
    print(*ans, sep="\n")


        print(lcs(s, t))

    print(solve(x,y))

    print(lcs2(s1,s2))



    print(bisect.bisect_left(dp, INF))

    print(len(lis))


        print(lcs(x, y))

    print(i)

    print(lcs_s(X, Y))


        print(lcs(x, y))


    print(lcs(X, Y))


    print(lcs(x, y))


        print(getLengthOfLcs(s, t))

    print(lcs(x, y))



    print(lcs(S, T))

    print(len(L))
    
    print(LCS(X,Y))

    print(lcs(x, y))




        print(lcs(x, y))



        print(lcs(x,y))


        print(lcs(S, T))



    print("\n".join(map(str, ans)))


        print(lcs(X, Y))

        print(lcs2(X, Y))



  print(lcs(X,Y))

        
    print('\n'.join(map(str,ans)))
                           
    print(lcs(x, y))

        print(lcs(x, y))

        print(lcs(x, y))

    print(lcs(X, Y))


	print(lcs(S, T))


    print(lcs(x, y))



    print(lcs(x, y))

    print(i)

        print(lcs(x, y))

	print(lcs(S,T))



    print(lcs(x, y))

        print(lcs(X, Y))


    print(longest(x, y))

  print(len(dp))

        print(lcs(S, T))


    print(lcs(x, y))

        print(lcs(x, y))

        print(lcs(x, y))

        print(lcs(X, Y))

    print(LCS(x, y))



    print(len(updated_lcs))


        print(lcs(x, y))

        print(lcs(X, Y))


    print(f'{expect_cost:.08f}')


print(dp[0][n])



print("%.8f" % ans_array[0][n])


print("%.10f\n" % C[0][N])




    print(culc_search_cost(lst_p,lst_q))


    print("(", end="")
        print(root, end="")
    print(")", end="")


    print(val)
    

print(C[0][N])



    print(f"{Exp[0][num_nodes]:.5f}")


print(C[0][N])




print(f"{C[0][n]:.5f}")

print(E[1,n][0])


print(E[1,n][0])

print(Q[1,n][0])

    
    print(OBST2(0, n))
print(E[1, n][0])

    print(run(PN, QN))



print(b[-1][0] / 10000)




    print("{:.5f}".format(OptimalBST(P, Q, n)[0][n]))



    print(dp[0][n + 1] / 10000)


    print(arrC[n][0] + sum(q))
            
    print(dp[n][0])

            
    print(dp[n][0])


    print(dp[n][0])

    print("{:.8f}".format(optimal_cost(n, ps, qs)))



    print("{:.8f}".format(optimal_cost(n, ps, qs)))


    print(E[1][-1])


print(e[0][n])


print(dp[0][n + 1] / 10000)


    print(E[1][-1])

print(mem[0][n])


print("{:.5f}".format(OptimalBST(p, q, n)[0][n]))



print("{:.5f}".format(OptimalBST(p, q, n)[0][n]))

        
print(T[1][n])

        print(*adj[i])

  print(*a)


    print(*row)


        print(*amr)

  print(*i)

    print(' '.join(m))

    print(*a)

    print(*h)


    print(*l)


    print(*i,sep=" ")

           print(G[i][j],end=" ")
           print(G[i][j])


    print(*adj[i])

    print(' '.join(map(str, row)))


        print(" ".join(map(str, row)))


    print(*adjancy_graph[i])
            
        



        print(" ".join(map(str, a)))
    print(*E)

    print(*output) 
    

  print(*A[i])

    print(*row)


    print(*Adj[x])


    print(*E)

  print(' '.join(map(str, row)))

    print(*x)


    print(*row)



    print(*A)


    print(*line)



        print(*i)

    print(*i)

    print(*row)


    print(" ".join(map(str, row)))

    print(*i)

    print(*Gi)

            print(adj_mat[i][j], end=' ')
            print(adj_mat[i][j])


    print(" ".join(map(str, row)))

    print(" ".join(map(str, row)))

    print(*adj)    


    print(" ".join(adj[i]))

        print(G[i*E+j], end="")
            print(" ", end="")
    print()

    print(*v)

    print(" ".join(matrix))

    print(*out)

        print(*row)

            print('DEBUG:{} -> {}'.format(name, val), file=sys.stderr)
        print(*edge[i])

    print(*a)

    print(*v)

    print(" ".join(map(str, Adj[i])))

        print(*GL[i])

        print(" ".join(list(map(str, adj[i]))))

        print(" ".join(map(str, row)))

    print(*row)

    print(*dp[i][:])

        print(*matrix)

    print(" ".join(a))

    print(' '.join(r))

    print(' '.join([str(_) for _ in row]))

    print(" ".join(L[i]))

        print(" ".join(map(str,T[i])))

    print(row)

    print(*adjacent[i])

    print(*a[u - 1])

    print(*a[u - 1])

    print(*i)

    print(*a[i])

    print(*out)

  print(" ".join(map(str,Ans[i])))

    print(i + 1, lc[i][0], lc[i][1])


        print('{0} {1} {2}'.format(i+1, d[i], f[i]))

    print(i + 1, d[i], f[i])


    print(i, discover[i], finished[i])


  print(*ans[i])
  

        print(i+1,d[i],f[i])

    

        print(i, *ans[i])
    
  print(i, f, e)

	print(f"{i+1} {d[i]} {f[i]}")





    print(i,d[i],f[i])

  print(u+1, d[u], f[u])


    print(i,seen[i],done[i])

        print(i, d[i], f[i])

    print(f"{u} {discovery_time[u]} {finish_time[u]}")


    print(f"{node.id} {node.t_visited} {node.t_complete}")


    print(i+1,d[i],f[i])

    print(i+1, visited[i], finished[i])

    print(i+1, d[i], f[i])

    print(i+1,time_s[i],time_f[i])

    print(g[i][0],d[i],f[i])

    print(*a)


        print(f"{vertex} {discovery_time[vertex]} {finish_time[vertex]}")

            print(f"{self.results[ver].id} {self.results[ver].discovery_time} {self.results[ver].finish_time}")

    print(v[i], d[i], f[i])

        print(node.uid, node.start, node.end)

    print(i+1,d[i],f[i])

    print(i+1, st[i], et[i])


    print(i, d[i], f[i])


    print(*args, end=end, file=sys.stderr, **kwargs)


        print(node_idx, *node_time)


    print(i+1,d[i],f[i])

    print(i+1, s[i], e[i])


    print(G[i].index,time[G[i].index-1][0],time[G[i].index-1][1])

    print(u+1,d[u],f[u])

        print(str(u+1) + ' ' + str(d[u]) + ' ' + str(f[u]))

    print(i+1,d[i],f[i])

    print(i+1, d[i], f[i])


    print(i+1, time_found[i], time_finished[i])

        print(f"{i} {d[i]} {f[i]}")


    print(i, *ans[i])

    print(v,d[v],f[v])


    print(i+1, pInfo[i][0], pInfo[i][1])



    print(v+1, d[v], f[v])



    print(i+1, discovered[i], finished[i])



    print(v+1,dv,fv)


        print(f"{i} {ts[i].d} {ts[i].f}")


    print(i + 1, S[i], F[i])

    print(v, discovery_time.get(v, 0), finish_time.get(v, 0))

    print(u + 1, d[u], f[u])


    print(f"{i} {d[i]} {f[i]}")


    print(v+1, dv, fv)




        print(i, discover_time[i], finish_time[i])


        print(vertex, discover[vertex], finish[vertex])

    print(f"{i} {d[i]} {f[i]}")


    print(v + 1, d[v], f[v])


        print(vertex, discover[vertex], finish[vertex])

        print(v, discover[v], finish[v])

    print(f"{i+1} {go_time[i]} {back_time[i]}")


    print(f"{i} {d[i]} {f[i]}")


    print(v+1,dv,fv)
   


    print(v, d[v], f[v])


    print(i, d[i], f[i])

        print(f"{i + 1} {d[i]} {f[i]}")


    print(f'{number} {start} {end}')


    print(f"{vertex_id + 1} {distance}")


    print(i+1, dist[i])

        print("%d %d" % (v + 1, dv))

    print(i, distances[i])


    print(f'{i+1} {d[i]}')

    print(u + 1, distance[u])


    print(*(v+1,d[v]))

    print("%d %d" % (v + 1, dv))


    print(i, d[i])

        print(u, distances[u])

        print(i + 1, -1)
        print(i + 1, distances[i])

    print(f"{u} {d}")


    print(*(v+1,a[v]))

 print(u + 1, dist)


    print(u + 1, dist)


    print(u + 1, dist)

    print(u + 1, dist)

    print(f"{v + 1} {dv}")

    print(i, length)

    print(f"{v + 1} {dv}")

    print(i + 1, lc[i])


        print('{0} {1}'.format(i, distance[i]))

    print(i, dist[i - 1])

    print(u, distances[u])



    print(u + 1, distances[u])


  print(i,dist[i])


        print(i+1,dist[i])



    print(i+1,j)

  print(i, d)

	print(f"{i+1} {d}")


    print(v+1,ans)
    
        

    print(id,d[id])

  print(v+1, d[v])


    print(i, distance)


        print(f"{u} {distances[u]}")

    print(f'{i+1} {dist[i]}')

    print(f"{node_list[i].id} {node_list[i].distance}")


    print(i+1, d[i])

    print(i,dis[i])

    print(g[i][0],d[i])

    print(f"{vertex} {distances}")


        print(f"{ver + 1} {dis[ver]}")

        print(node.uid, node.distance)


    print(i+1,d[i])

    print(i+1, dist[i])


        print(str(i+1) + ' ' + str(d[i]))


    print(i, dist[i])


    print(i,answer[i])

  print(i+1, dist[i])

            print(node_idx, -1)
            print(node_idx, dist)


        print(i+1,d[i])

    print(i+1,d[i])


    print(i+1, distance[i])


    print(G[i].index,d[G[i].index-1])

    print(i+1,visited[i])


    print(vertex_id, distances[vertex_id - 1])


        print(f'{u + 1} {d}')

        print(f'{u + 1} {d}')
 
    print(i+1, dist[i])

        print(i, -1)
        print(i, visited[i])

    print(v+1,d[v])


    print(i, dists[i])

        print(f"{i} {dist[i]}")


    print(i,visit[i])

        print(i, dists[i])


    print(i+1, d[i])

    print(u, d[u])
    

    print(v+1, d[v])

    print("%d %d"%(i+1, min_dist[i]))
        
    

  print(['no','yes'][C[a]==C[b]])
        print("yes")
        print("no")


            print('yes')
            print('no')

            print('yes')
            print('no')


        print(result)

    print("yes" if color[u] == color[v] else "no")


    print('yes' if ret else 'no')

    print("yes" if uf.issame(s, t) else "no")


    print("yes" if uf.same(s, t) else "no")


        print('yes')
        print('no')

        print('yes')
        print('no')


        print("yes")
        print("no")


            print("yes")
            print("no")
    print('Invalid input for n or m')



        print("yes" if uf.same(s, t) else "no")

        print("yes" if uf.root(a) == uf.root(b) else "no")


        print("yes")
        print("no")


        print("yes")
        print("no")


        print('yes')
        print('no')

        print("yes")
        print("no")



        print("yes")
        print("no")



    print('yes' if is_linked(s, t) else 'no')

  print(['no','yes'][C[a]==C[b]])
        print(solve(x, y))
  print(['no', 'yes'][C[a] == C[b]])
        print("yes")
        print("no")


  print(['no','yes'][C[a]==C[b]])
            print("yes")
            print("no")

            print('yes')
            print('no')

            print('yes')
            print('no')

                print('yes')
                print('no')
                print('yes')
                print('no')
            print('yes')
            print('no')

            print("yes")
            print("no")
            print("yes")   
            print("no")

            print('yes')
            print('no')


        print('yes')
        print('no')

            print('DEBUG:{} -> {}'.format(name, val), file=sys.stderr)

        print(ans)

            print('yes')
            print('no')

    print("yes")
    print("no")

        print("yes")
        print("no")


            print("yes")
            print("no")


            print("yes")
            print("no")    


            print('yes')
        print('no')

            print('yes')
            print('no')


        print('yes' if uft.is_same(s, t) else 'no')

  print("yes" if sp==tp else "no")


            print("yes")
            print("no")


            print('yes')
            print('no')

    print("yes" if uf.same(x, y) else "no")


            print("yes")
            print("no")

            print('yes')
            print('no')


        print('yes' if C[s] == C[t] else 'no')

        print('yes')
        print('no')


            print('yes')
            print('no')


        print("yes")
        print("no")

            print('yes')
            print('no')


        print('yes')
        print('no')

        print('yes')
        print('no')

    print('yes' if color[s]==color[t] else 'no')


            print("yes")
            print("no")


        print("yes" if group[s] == group[t] else "no")


            print("yes")
            print("no")
print('\n'.join(ans))

    print(cost)

print(weights)


    print(sum_cost)


print(ans)


    print(sw)


print(ans)


print(cnt)










print(prim(n, A))


print(sum(dist))


print(ans)


   
print(t_cost)


    print(ans)


    print(ans)


print(ans)


print(ans)


print(ans)


    print(sum(d))


            print('DEBUG:{} -> {}'.format(name, val), file=sys.stderr)
    print(ans)




print(prim())

print(prim())

print(sumLength)


print(ans)


    print(sum)


print(a)

print(ans)


print(sum)


    print(prim())


print(mst.min_cost())

    print(sum(costs))



print(sum)


print(ansswer)



print(prim(n, m))

print(c)

print(prim(n, m))


print(ans)


print(prim(n, A))

print(a)

print(f"{sum(d)}")

print(sum(d))


print(ans)


    print(prim(n))



print(sum(d))


print(s)

print(sum(itertools.islice(costs(), n - 1)))



                    
     print(ans)
                    

    print(prim(M))


    print(sum(prim(adj)))


    print(ans)


print(sum(d))


	print(prim())

print(cost)


print(prim(n))


print(cost_min)



print(ans)


    print(prim(n))


    print(ans)


    print(sum(d))


print(prim())


print(sum(distances))



print(sum)





















    print(sum(g.d for g in G))



print(sum(prim(int(input()))))

print(sum(d))

        print(i, d[i])
    


    print(i,memo[i])

    print(f"{node_list[i].id} {distanse_list[i]}")


        print(str(i) + ' ' + str(-1 if d[i] == INFTY else d[i]))

    print(i, ans[i])

    print(i, distance[i])

    print(v, d)


        print(v, dist[v])

        print(i, sw)

        print(i, dists[i])


    print(i, dist[i])


        print(i, di)
    print(i,c)

    print(i,d[i])




    print(i, c)

    print(v, d)

    print('{0} {1}'.format(i, d))

            print('DEBUG:{} -> {}'.format(name, val), file=sys.stderr)
        print(i, d[i])

 print("{} {}".format(i,v))

    print(i, di)

    print("{} {}".format(n, d[n]))

    print(i, distance[i])

    print(i, d[i])

    print(i,d[i])

    print("\n".join(" ".join(map(str, a)) for a in G))
        print(i, d[i])


        print(i, dist[i])


        print(i, d)


    print(i, d[i])

                    
                    

        print('---route---')
            print('{} -> '.format(node), end='')
            print(min_route[-1])


        print('---distance---')
        print(min_cost)

        print(i, cost)


    print(i, n)

    print(i, d)


    print(i,d[i])

        print('{0} {1}'.format(i, out))


    print(i,num)


    print(f"{i} {d[i]}")

    print(i, d[i])

    print(i, d)


    print('{} {}'.format(i, d[i]))

    print(i, ans[i])


    print(i, d[i])
                

        print(i, d)


    print(ni, D[ni])

    print("{} {}".format(i, d[i]))

    print(i, d[i])


    print(i, cost)


        print(i, d)


        print(i, di)

  print(i, d[i])


		print(f"{v} {d[v]}")

    print(v, d[v])

    print(i,d[i])

        print(i, val[0])


    print(v, d[v])











    print(i,distant[i])

    print(i, v)

    print(i, d[i])

    print(i, distance[i])

        print(i, d[i])

    print(i, ans[i])


        print(i, dists[i])


        print("\n".join(f"{i} {c}" for i, c in enumerate(d)))
 print('\n'.join(f'{i} {d[i]}'for i in range(n)))
    print(i, c)

    print(i,di)

    print(i, c)

    print(i, d[i])

    print(i, n)

    print(i, c)

    print(i, distance[i])



        print(i, sw)

        print(v, d)


    print(i,c)


    print(i, d[i])


  print(v, d[v])


  print(i, d[i])

























        print(i, d)


        print("\n".join(f"{i} {c}" for i, c in enumerate(d)))
        print(i, di)
print('\n'.join(f'{i} {d[i]}'for i in range(n)))


    print(i, d[i])


    print(i, dist[i])

        print('---route---')
            print('{} -> '.format(node), end='')
            print(min_route[-1])


        print('---distance---')
        print(min_cost)

        print(i, cost)


    print(i, dist[i])

    print(i, c)

        print(n, dist[n])


    print(i, e)


        print(i, d)


    print(i, distance[i])


        print(i, v)


        print(str(i) + ' ' + str(-1 if d[i] == infty else d[i]))


        print(i, ans[i])
        print(str(j)+" "+str(-1 if d[j]==float('inf') else d[j]))


        print(i, d)


            print(i, -1)
            print(i, d[i])

    print(i, d)

        print(i, v)

    print(i, dist[i])


    print(i, d)

            print(str(i) + ' ' + str(-1 if d[i] == INFTY else d[i]))

        print(str(u) + ' ' + str(dist))
        print(f"{i} {d}")


        print(i, d)


        print(f'{i} {d[i] if d[i] != INF else -1}')


    print(i, D[i])


    print(i, D[i])

    print(i, d)

        print("{} {}".format(i, dist[i]))


    print(i, D[i])

        print("{} {}".format(i, d[i]))

            print('DEBUG:{} -> {}'.format(name, val), file=sys.stderr)
        print(i, d[i])

    print(i, D[i])

    print(i, d[i])

    print(i, d[i])


                print('yeah')
        print(i, val[0])


        print(i, e)

    print(i, dist[i])


    print(i, ans_list[i])


    print(i,dist)



        print(i, dist[i])


    print(i,D[i])

        print(k, v)


    print(i,d[i])

    print(i, d)


    print(i, dists[i])

                print('Q', end='')
                print('.', end='')
                print()


        print(*row)

        print(''.join(row))
        
    print(*args, end=end, file=sys.stderr, **kwargs)


            print("".join(row))
            print(*board[r],sep='')
                    print(*b, sep="")
                print("Q",end="")
                print(".",end="")
        print()

        print(''.join(cb))

        print(k, end="")
    print("")

            print(".", end="")
        print("Q", end="")
            print(".", end="")
        print()


        print(*['.' * p + 'Q' + '.' * (7 - p) for p in place], sep='\n')
            print(queens[i][j], end='')
        print()

print(*("".join(m) for m in M), sep='\n')



    print(''.join(line))


            print("".join(F[i]))
        print("".join(k))
		print(row_string)



           print('Q', end='')
           print('.', end='')
           print('')

                print("".join(l))

                            print("".join(r))
        print("".join(r))
    print(''.join(board[i]))


            print("".join(X[i]))

        print("".join(row_data))
    
		print(''.join(map(str, out_raw)))



        print(line)


        print("".join(B[i]))

            print(''.join(X[i]))
                print('Q' ,end = "")
                print('.' ,end = "")
        print()

    print(tmp)

      print(''.join(board[i]))
            print(''.join(line))
            print('.' if board[i][j] else 'Q', sep='', end='')
        print()


                            print(haiti[o][p], end='')
                        print()
                print(haiti[o][p], end='')
            print()
        print("".join(c))

                print("Q", end='')
                print(".", end='')
        print("\n", end='')


                print("Q",end="")
        print()


                print('Q',end='')
                print('.',end='')
        print('',end='\n')
    
            print(''.join(X[i]))
                print("Q",end="")
        print()
 
 
            print(''.join(board[p]))
        print(''.join(s))

        print('\n'.join("." * r + "Q" + "." * (self.N - r - 1) for r in self.row))


            print(board[i][j], end='')
        print()
    
    print("Can't make chessboard.")
                    print("Q", end="")
                    print(".", end="")
            print()
            print(''.join(queen[i]))
    print(''.join(i))


    print("".join(area[i]))


    print("".join(a))

      print("".join(b))
    print(''.join(board[i]))


        print(output)

            print('Q', end="")
            print('.', end="")
    print('\n', end="")

       


                print("Q", end="")
                print(".", end="")
        print("")


      print(''.join(chess[j]))
                print("Q", end="")
                print(".", end="")
        print("")


        print(*map(lambda x: "".join(x), ans), sep="\n")
print(board)


    print(''.join(board[i]))


                print("Q", end='')
                print(".", end='')
        print()


            print(''.join(line))
            print(''.join(l))
        print(board[j][i], end='')
    print()

            print("."*ans[j]+"Q"+"."*(7-ans[j]))
                print(''.join(a))

        print('\n'.join([''.join(v) for v in g]))
        print("".join(a))

		print("".join(res[i]))

    print('.' * q[1] + 'Q' + '.' * (7 - q[1]))

        print(c[i][j], end='')
      print()

            print('Q', end='')
            print('.', end='')
    print()



print(solve(start))



print(solve(start))

    print(solve())
 
print(solve(start))

    print(resolve(board, height, width))



print(solve(start))


    print(0)
    print( search_puzzle(start_panel) )

    print(search(start))
        print(cnt)
print(ans)


        print('\n', 'Move', parent[v][1], '\n')
        print(v >> (4*i) & 15, end='')
    print(ans)
    print("unsolvable")


print(cnt)


        print(total_cost + appeared[not direction][board])
        print('\n', 'Move', parent[v][1], '\n')
        print(v >> (4*i) & 15, end='')
    print(ans)

    


            print(f'{puzzle[y][x]:2d}', end=' ')
        print('')

    print(min_num_moves)
    print(min_num_moves)

                print(cnt+1)
    print(0)

print(ans)


        print(p.g)
print(cnt)

    print(ans)


        print(cnt)

print(b_goal.g)

                print(self.board[i],end=' ')
                print('  ',end='')
                print()
        print()

    print(0)
    print(heuristic(initialPuzzle,h2))


        print(cost)
        print(d)

    print(solve(start))


        print(limit)

    print(dist[SOLVED])


    print(result)


    print(current_distance)


            print(limit)
    
    print(min_step)

    print(0)
                        print(trial + visited[perm][0])

    print(f"{solve_8puzzle(board)}")


  print(moves)

    print(ans)
    

print(solution)

    print(ans)


            print(distance[current_state])
    print(D['123456780'])

print(solve(init))


        print(cnt)


print(slove(board_input))


print(ans)

            print(c_depth)
        print(*board[i:i + 3])

print(step_q.popleft())

        print(count)
    print(0)
print(kariokiba)
        print(ANS)

print(ans)


print(ans)




print(d)



print(memo[goal])


print(ans)


    print(eight_puzzle.steps)


        print(cost)
print(ans)



print(count)

        print(cost)
        print(cost)
            print("Error")

            print(short_n[2])
    print(output)


    print(len(ans))

            print(dist)
        print('\n', 'Move', parent[v][1], '\n')
        print(v >> (4*i) & 15,  end=' ')
    print(ans)
    print("unsolvable")
    




    print(min_num_moves)

        print('\n', 'Move', parent[v][1], '\n')
        print(v >> (4*i) & 15,  end=' ')
    print(ans)
    print("unsolvable")
    


        print(cnt)
        print('\n', 'Move', parent[v][1], '\n')
        print(v >> (4*i) & 15,  end=' ')
    print(ans)
    print("unsolvable")
    



            print(dist)
            print(dist)
            print(current_distance)
        print(ANS)

    print(solve(start))


        print(l)
        print(l)
        print(l)
            print(l)
        print(l)
print(ans)

        print(l)
        print(l)
        print(l)
        print(l)
        print('\n', 'Move', parent[v][1], '\n')
        print(v >> (4*i) & 15, end='')
    print( ans )


        print(f"{board[i]:2d} ", end="")
            print()

print(solve(board))


        print(0)
            print(flg)
                                print(cost + 1)
        print(0)
            print(flag)
                                print(cost + 1)
        print(cnt)

    print(steps)

        print(estimation)
        print(estimation)
        print(estimation)
print(ans)


print(b_goal.move)

    print(puzzle.steps)


        print(estimation)
        print(l)

    print(result)

print(search(boad))
    print(search(start))
      print(move)
            print(move)
        print(i)
        
    

    print(n - 1)

        print(i + j)
        print(i)

        print(i)

            
            print(i)
        
            print(i)


            print(i)


        print(i)

        print(r)

  print(content)

    print(s)

        print(ans)
    print(a)

        print(t)
        print(i)

        print(idx)


            print(i)
        print(i)

            print(i-tmp+1)
            print(i)
    print(ans)


            print(index)


            print(i)


        print(i)
        

    print(index)


        print(i)


    print(ans)

	print(r)


        print(i)


    print(_)

        print(i)

        print(i)


        print(i)

        print(j)

        print(i)

		print(i)


        print(i)

        print("\n".join(ans))

            print(i)
        print(i)

        print(i)

        print(i)



            print(i)

        print(i)
        print(i)

            print(List[i])
    
      print(i)


        print(i)

        print(i)
        print(x)

        print(i)


        print(idx)
    print(x)

        print(x)

        print(i)


        print(ans)

        print(j)

        print(i)

    print(a)
            print(idx)
        print(i)

    print(re)

        print(i)

            
            print(i)
        
    print(ans)

        print(i)

    print("\n".join(map(str, ans)))	


    print(*result, sep='\n')

    print(*ans, sep="\n")



                print(text_pos-pattern_pos)
        print(match_idx)


    print(a)

            print(i - m)
        print(i)


            print("\n".join(ans))

    print(res_i)

            print(i)

            print(i)


                print(i)
        print(i)

        print(i)


        print(i)

        print(a)

            print(i-tmp+1)
    print(a)

            print(i)

            print(i)

            print(i)
            print(i)
                print(tpos - ppos)
            print(i)
            print(i)
    print(i)

        print(i)
    
    
    
    

            print(i)
            print(i)
        print(len(T)-lp)

    print(i)


            print(s)


            print(i)
        print(r)


            print(i)
            print(i)


        print(i)
    print(len(T)-lp)


            print(i)

            print(i)


        print(i)

            print(i)


    print(0)

        print(i-plen+1)

            print(start)
    print(i)


        print(i)

        print(i)


        print(i)

    print(ret)
        print(i0)

        print(i)








    print(i)

            print(idx)


        print(i)


        print(i)

    print(i)
        print(i)

                print(i)


        print(i)



            print(i)

    print(*item)

    print("\n".join(a for a in ans))

                print(i, j)

                    print(f"{r} {c}")


                print(h, w)
    
                print(i, j)

                print(y, x)

                print(i, j)


            print(i, j)


            print(i, j)

            print(i, j)


                print(row_n, column_n)


            print(i, j)

            print(i, j)



                print(i, j)


            print(i, j)



    print(h, w)

            print(i, j)


        print(i, j)


            print(i)
    print(i[0],i[1])

            print(hl, wl)


        print(1 if pos < n and p in s[pos] else 0)


    print(int(i < len(sa) and p in sa[i]))

        print(1)
        print(0)

        print(0)
        print(1 if l[i].find(p) >= 0 else 0)


            print(1)
            print(0)
        print(0)

        print(0)
            print(0)
            print(1)


                print(1)
                print(1)
                print(1)
                print(0)

        print(ans)
                print(0)
                print(1)
                print(0)
            print(0)
            print(0)
            print(1)
            print(1)
            print(0)

        print(int(T == S[sa[l] : sa[l] + k]))
                print(0)
                print(1)
                print(0)

        print(1 if is_found else 0)

    print(int(contain(S, sa, input().rstrip())))

        print(int(T == S[sa[l] : sa[l] + k]))
        print(1)
        print(0)


            print(0)
            print(1 if l[i][:len(p)] == p else 0)


        print(1)
        print(0)

            print(1)
            print(0)


            print("1")
            print("0")


        print(1)
        print(0)

            print(1)
            print(0)


    print(ans)

print('\n'.join(a))

print('\n'.join(map(str, a)))


            print(0)
            print(1)
            print(0)


print('\n'.join(map(str, a)))



print('\n'.join(map(str, a)))

print(min_coins(n))

print(ans)


print(ans)



print(sum(money))

print(a+b+c+n)

print(cnt)

print(result)    



print(count)

    print(run(N))


print(ans)


print(ans)



print(ans)



print(k+n)

print(cnt)

print(quarter+ten+five+n)


print(ans)

print(ans)



print(cnt)



print(ans)

print(ans)

    print(ans)



print(c1+c2+c3+c4)


    print(f"{twenty_five_n + ten_n + five_n + input_value}")


print(ans)


print(ans)


print(c)


print(ans)

print(ans)

print(ans)

print(ans)



    print(ans)

    
print(c)
    

print(coin + num)

print(sum_s)


print(cnt)


    print(cnt)


print(cnt)




print(n_25 + n_10 + n_5 + n_1)


print(ans)


print(ans)

print(cnt)

print(c)


print(cnt)




print(n_25 + n_10 + n_5 + n_1)

print(ans)

print(change)

print(solve(N))

    print(count)
    print(count)
    print(count)
    print(count)

print(ans)

print(a+b+c+d)

print(twentyfive+ten+five+one)

    print(res)

print(n // 25 + (n % 25) // 10 + (n % 25 % 10) // 5 + n % 5)

print(cnt)


print(ans)


print(c25 + c10 + c5 + c1)

print(ans)

print(ans)


print(ans)


print(total_coin)

print(m)

print(count)

    print(run(W, items))


    
print(max_value)

print(value)



print(t_val)

print(result)


print(obj.fractionalknapsack(W, arr, n))

    
    print(ans)



print(max_value(W, items))



print(result)



print(total)


print(ans)


    print(ans)


    print(resultado)
print(v)



    print(answer)



    print(resp)

print(V) 

            
            print('%.12f'%mochilaf(v_w,W))

    print(mochila)

print(ans)

            print(soma_total)

    print(val)

print(ans)


print(v_total)

print(ans)

print(ans)



print(ans)

print(ans)

    print(result)


print("{:.8f}".format(total))

print(t_val)



print(ans)



print(ans)

print(Sum)


print(val)



print(float(round(value,ndigits=8)))





print(ans)


    print(preco)
print(ansv)



        
    print(total_value)

    print(profit)



print(vtot)


    
    print(su)

    print(max_val)
    print(int(max_val))



print(sum)


print(ans)

print(ans)


        print(ans)


    print(max_value)


print(v)


    print(f"{total_value:.6f}")


print(ans)        


print(ans)


print(ans)



print(cnt)

    
    print(count)


    print(run(acts))


print(ans)


    print(counter)

print(ans)



    print(answer)


            

print(len(rps)) 


print(count)



    print(ans)

print(ans)


print(ans)


print(cnt)

print(ans)

print(ans)


print(ans)


    print(max_activities)

print(ans)

    
print(ans)
        

print(count)


print(ans)


print(ans)

    print(ans)


print(ans)

print(ans)


print(ans)


print(ans)

            
print(Sum)

print(ans)



print(len(ans))


print(cnt)


    print(res)


print(ans)



print(ans)



print(num_act)


    print(result)


print(ans)




print(ans)


print(cnt)



print(ans)

print(count)

print(len(stack))


    print(activity_num)


    print(l)


    print(A[i], end='')
  print()









print(ans)





print(ans)


    print(ans)

    print(len(string))
print(ans)


    print(result)


    
    print(ans)

    print(run(s))


    
print(Sum)

    




    print(code_length)

            print(huffman(input()))
    print(resultado)

print(ans)

    print(sum(C.values()))
print(ans)

        print(arv[0])
        print(resp)

    print(huffman(cs))
    print(total)
    
    
    print(tree.frequency)
    print(visit(tree, 0))

    print(len(S))
print(huffman)
print(ans)

        print(len(S))
    
    print(ans)


            print(counter)
    print(sum(C.values()))
print(ans)

    print(sum(C.values()))
print(ans)

    print(ans)


    print(ans)

print(ans)


    print(sum(C.values()))
print(ans)

        print(cnt[0][0])
    
    print(sum(bit[k] * v for k, v in cnr))

        print(sum(counter.values()))
    print(digits)


print(retval)



print(main())

    print(len(''.join(encoded)))

    print(huffman.get_encode_size())


    print(len(s))
print(ans)


        print(ans)
print(len(ans))


    print(len(s))

print(ans)

        print(ans)

print(solve(T[0], ''))

	print(heapq.heappop(que))
	
	print(ans)

            print(f"{prefix} : '{n.c}', {n.freq}")
print(len(ht.encode(S)))


print(l)

	print(len(S))
	print(count)



    print(f"{get_coded_str_len(nodes[0], '')}")


print(total_length)

        print(len(S) - 1)
    print(len("".join(answer)))


    print(lis[0])
print(ans)




    print(l)


    print(A[i], end='')
  print()







print(cnt)



print(ans)


    print(counts[0])
    print(answer)

		print(1)
			print(len(texto))

			print(len(huffman_str))

    print(1)
    print(len(S))
    print(ans)

    print(" ".join(x))
        print(" ".join(y))
    print(*B)
print(L)
    print(' '.join(list(map(str,L))))
    

  print(*a)
print(*a)

            print(A[k])
            print(A[k], end = ' ')

    print(*num_list,sep =' ')
    
print(*num_list,sep =' ')

        print(" ".join(map(str, arr)))

print(" ".join(map(str, sequence)))

print(*data)
    print(*data)

print(*l)
    print(" ".join(map(str,l)))

    print(" ".join(map(str,A)))

        print(print_str)
        
    print(" ".join(map(str, list)))
        print(" ".join(map(str, list)))

            print(f"{A[k]} ", end="")
            print(A[k])

print(' '.join(a))


    print(' '.join(a))

    print(*A)
       print(*A)

                print(a[i],end="")
                print(a[i],end=" ")
        print()


print(*A)

    print(*A)

        print(*A) 
            print(A[i])
            print(A[i], end=" ")


    print(*A)
        print(*A)


    print(" ".join(map(str, a)))


    print(*A)
        print(*A)


      print(lst[k],end=" ")
      print(lst[k])

      print(lst[k],end=" ")
      print(lst[k])

            print(A[j], end = ' ')
            print(A[j])

        
    print(*a)
    

        print(' '.join(map(str, A)))
print(' '.join(map(str, A)))
    print(*A)

    print(*A)

        print(*A)

print(*A)

    print(*A)

        print(' '.join(list(map(str, a))))


print(' '.join(list(map(str, a))))
    print(" ".join(map(str, array)))

        
    print(*a)
    

        print(' '.join(map(str, arr)))

        print(*A)
print(*A)
    print(*A)
        


    print(s)

    print(*a)


    print(*A)

        print(*A)
print(*A)
        print(i,end=" ")
        print(i)

            print(j,end=" ")
            print(j)
    

    print(*A)

    

    print(" ".join(map(str,card)))


      print(ten[n],end=" ")
print(ten[cnt-1])

      print(ten[n],end=" ")
    print(ten[cnt-1])

            print(num, end=" ")
            print(num)


        print(' '.join(list(map(str, A))))

        print(in_list[i], end=sep)


print(*a_list)
    print(*a_list)


      print(seq[i], end=' ')
      print(seq[i])


    print(*nums)

print(A)

print(y)

print(math.gcd(a, b))

print(x)

    print(gcd(a, b))



print(a)


print(y)


print(a)


print(gcd(x,y))

print(gcd(x,y))

print(x)

print(gcd(a,b))


print(gcd(x,y))

print(culc_gcd(x, y))

print(math.gcd(x, y))

print(result)



print(math.gcd(x, y))

print(gcd(a,b))

print(GCD(x, y))


print(x)



print(math.gcd(a,b))

    print(ans)

print(f)

	
print(X)


print(gcd(x,y))


print(math.gcd(x,y))

print(greatest_common)

print(gcd(x, y))

print(b)

print(math.gcd(x, y))


print(z)

print(math.gcd(x,y))

print(gcd(x,y))


print(math.gcd(x,y))

print(a)


    print(gcd(x, y))

print(gcd)

print(gcd(x,y))


    print(greate_common_div)


print(math.gcd(x, y))

print(gcd(x,y))


print(b)


print(a)

print(max(x, y))


print(my_gcd(*a))

print(result)


print(b)

print(gcd(x, y))

print(z)

print(z)


print(gcd(n, m))





    print(*a)
print(*a)
print(math.gcd(a,b))

print(count)
 

print(len([prime(e) for e in list(map(int, inp[1:])) if prime(e)==1]))

    print(cnt)

print(sum([isPrime(int(stdin.readline())) for _ in range(int(stdin.readline()))]))


print(ans)

print(count)
 

    print(ans)

print(len([prime(e) for e in list(map(int, inp[1:])) if prime(e)==1]))

    print(count)

print(len([prime(e) for e in list(map(int, inp[1:])) if prime(e)==1]))

print(len([prime(e) for e in list(map(int, inp[1:])) if prime(e)==1]))


    print(cnt)

print(len([prime(e) for e in list(map(int, inp[1:])) if prime(e)==1]))

print(a)

    print(cnt)

    print(cnt)

    
print(ans)

print(cnt)

print(count)

print(sum(1 for _ in range(int(input())) if p(int(input()))))


print(count)

print(cnt)

    print(i)

print(count)

print(sum(2 in[x,pow(2,x,x)]for x in map(int,sys.stdin)))


print(prime_num)


print(c)


print(sum(1 for _ in range(int(input())) if p(int(input()))))

print(count)

print(len([prime(e) for e in list(map(int, inp)) if prime(e)==True]))

print(sum(2 in[x,pow(2,x,x)]for x in map(int,sys.stdin)))



print(c)



print(b)


print(cnt)

print(count)


print(counter)


 
print(cnt)


print(c)


print(str(cnt))


print(len(prime_numbers))

print(sum(1 for n in range(int(input())) if f(int(input()))))

print(c)

print(sum(f(int(input())) for _ in range(int(input()))))


print(cnt)


print(c)

print(sum(1 for _ in range(int(input())) if p(int(input()))))

print(cnt)




    print(n_prime)


print(sum(2 in[x,pow(2,x,x)]for x in map(int,sys.stdin)))


print(total)

print(sum(1 for _ in range(int(input())) if p(int(input()))))

print(count)



    print(ans)


print(c)

print(c)

print(count)

print(count)

print(ans)


print(count)


print(len(tester))

    print(count)

    print(count)

 
print(len(r))

print(prime)


print(count)


    print(count)

print(prime)

print(answer)

    print(str(counter))


print(cnt)

print(len(list(filter(isprime, N))))

print(count)



print(ct)

print(b)

 print(b)
    print(b)


    print(between)


 print(b)
 print(b)
  print('false')


    print(max(diffs))



    print(max_value)

print(max_profit)


    print(max_diff)

    

print(max_val)


print(f)


    
print(maxv)

print(maxv)

print(x)

    print(solve())


    
print(max)

print(profit)

print(score)


print(profit)

print(mx)
    

print(gain)


print(c)

print(mx)

print(min_value)


    print(ans)



print(a)


    
print(maxv)

    
print(maxv)
    
    

  
print(maxv)
  


print(ans)

print(max_profit)




print(max_gap)

print(ans)


print(maxv)




        

        
        
        
print(maxv)
    
    


print(max_profit)


print(result)

print(max)

print(maximumProfit(R))

print(ans)


  
print(maxv)

    print(bigprice)



print(ans)


print(v)


print(maxv)


    print(max_profit)


print(maxv)


print(max)


print(maxv)

print(maxv)

print(max_diff)


print(maxv)



print(m)


print(revenue)


print(max_p)


  print(maxv)


print(dif)

print(' '.join(L))
print(count)
        

    print(" ".join(A))
    print(v)


print(*sort_list,sep=' ')
print(s)

print(*data)
print(count)


print(*l)
print(cnt)

        print(f"{A[j]} ", end="")
        print(A[j])


print(count)

print(*A); print(cnt)

    print(" ".join(map(str, list)))
    print(count)

    print(*A)
    print(cnt)

print(output)
print(count)

            print(a[k])
            print(a[k],end=" ")            
    print(count)

    print(*A)
    print(count)

print(*A)
print(count)

print(*A)
print(inv)


        print(A[i], end = ' ')
        print(A[i])


print(cnt)


print(*a)
print(cnt)

    print(x[i], end = ' ')
    print(x[i])


print(cnt)

print(*a)
print(counter)


print(' '.join(map(str, A_sort)))
print(count)

print(s)
print(cnt)

print(*array)
print(swap_count)

print(*A)
print(swap_cnt)

    print(" ".join(map(str, array)))




    print(count)
    


    print(*A)
    print(n)

         print(" ",end="")
     print(a[i], end="")
print()
print(change_count)


    print(*A)
    print(count)
        
    
print(*x)
print(sum)

print(*L)
print(sum)

    print(*A)
    print(ans)
    print(*A)
    print(ans)
    
print(*A)
print(c)


    print(' '.join(list(map(str,a))))
    print(sw)


print(" ".join(map(str, A)))
print(swap_count)



print(*l)
print(c)

            print(num, end=" ")
            print(num)

    print(ans)
      print(' '.join(list(map(str, ans))))
      print(count)


    


print(*a_list)
print(count)


    print(s[i], end=' ')
    print(s[i])
print(count)


print(*A)
print(cnt)

print(" ".join(map(str,lis)))
print(count)



print(*numbers)
print(count)

print(*a)
print(num)

print(*A)
print(cnt)

    print(a[i],end=" ")
print(a[n-1])
print(*al)
print(cnt)


print(ans['excahnge'])


print(*A)
print(na)

print(" ".join(map(str,lis)))
print(swap_count)


    print(A[0], end="")
        print(" "+str(A[i]),end="")
    print()

    print(count)

print(" ".join(map(str, sorted_array)))
print(swaps)



print(" ".join(map(str, l)))
print(c)

print(*a)
print(count)

            
print(*arr)
print(count)

print(*A)
print(count)


print(' '.join(map(str,A)))
print(ans)




print(*a)
print(count)


print(output)
print(count)
  



print(*a)
print(cnt)

print(*sorted_array)
print(swap_count)

print(*result)
print( cnt )


    print(*A)
    print(ans)



print(*sort_list,sep=' ')
print(change)

    print(" ".join(x))
    print(k)

print(*data)
print(count)

        print(f"{A[k]} ", end = "")
        print(A[k])
print(count)

        
    print(*A)
    print(cnt)


print(output)
print(count)

    
    print(*A)
    print(count)


            print(a[_])
            print(a[_],end=" ")
    print(count)

print(*A)
print(count)

print(*A)
print(count)


        print(ans[i], end=" ")
        print(ans[i])
print(cnt)


print(*a)
print(cnt)

    print(x[i], end = ' ')
    print(x[i])


print(cnt)

print(*a)
print(counter)


print(s)
print(cnt)        

print(*array)
print(swap_count)

print(' '.join(map(str, A_sort)))
print(count)

        
print(*A)
print(cnt)

    print(" ".join(map(str, array)))

    print(swap_count)

    print(*A)
    print(n)

    print(*A)
    print(count)

print(*a)
print(ans)


    
    
print(' '.join(list(map(str, a))))
print(change_count)

        
        
    
print(*x)
print(sum)

print(*L)
print(sum)



print(*A)
print(n)

        print(ns[i],end=' ')
print(ns[n-1])
print(ans)

print(*A)
print(cnt)



print(*l)
print(c)

                print(num, end=" ")
                print(num)
    print(ans)

      print(' '.join(list(map(str, ans))))
      print(count)


    


print(*a_list)
print(count)


      print(A[i], end=' ')
      print(A[i])
  print(count)

print(*a)
print(num)

    print(a[i],end=" ")
print(a[n-1])

print(*arr)
print(count)

print(*al)
print(cnt)



print(*A)
print(cnt)


print(' '.join(list(map(str, arr["arr"]))))
print(arr["exchange"])

    
print(" ".join(map(str,A)))
print(swap_count)

    print(A[0], end="")
        print(" "+str(A[i]),end="")
    print()

    print(count)

        print(a[i],end = " ")
        print(a[i])
print(cnt)
        
    


print(' '.join(map(str, sorted_array)))
print(num_swaps)


print(" ".join(map(str, l)))
print(c)

    
    
print(*num)
print(count)



print(*A)
print(c)

print(*a)

print(count)


print(output)
print(count)
  



print(*a)
print(cnt)

print(*sorted_array)
print(swap_count)

print(*result)
print( cnt )

        print(risuto[y])
        print(risuto[y], end=" ")


print(cnt)



print(*A)
print(na)

print(*a)
print(count)


print(' '.join(map(str,L)))
print(num)


print(" ".join(map(str,a)))
print(cnt)

	print(SB[i] + " " if i != N - 1 else str(SB[i]) + "\n", end='')
print("Stable")
	print(SI[i] + " " if i != N - 1 else str(SI[i]) + "\n", end='')
print("Stable" if SI == SB else "Not stable")




print(*BubbleSort(sort_list,num),sep=' ')
print('Stable')


print(*SelectionSort(another,num),sep=' ')
    print('Stable')
    print('Not stable')

        print("Stable")
        print("Not stable")


    print(*data_)
    print(*data_)
        print(f"{BS[pr]} ", end = "")
        print(BS[pr])
print("Stable")

        print(f"{SS[pr]} ", end = "")
        print(SS[pr])

    print("Stable")
    print("Not stable")

    print(*C)
    print(*D)
print("Stable")
    print("Stable")
    print("Not stable")

print(*CB)
print('Stable')

print(*CS)
    print('Stable')
    print('Not stable')


        print(bubblesort(c,n)[i])
        print(bubblesort(c,n)[i],end=" ")


print("Stable")

        print(selectsort(c_2,n)[i])
        print(selectsort(c_2,n)[i],end=" ")
        
    print("Stable")
    print("Not stable")

print(*c)
print("Stable")
 
print(*B)
  print("Stable")
  print("Not stable")

        


print(*b)
print('Stable')
print(*a)
print('Stable' if a == b else 'Not stable')

print(*bubble_array)
print("Stable")
print(*selection_array)
    print("Stable")
    print("Not stable")

print(*A_bub)
print("Stable")

print(*A)
print("Stable" if A == A_bub else "Not stable")


print(" ".join(bubble_sorted))
print(isStable(original, bubble_sorted))
print(" ".join(selection_sorted))
print(isStable(original, selection_sorted))

    print(*sorted_cards)
    print(stability)

    print(*sorted_cards)
    print(stability)

    print(*A)
    print(*A)
print('Stable')
print('Stable' if A==B else 'Not stable')   
            


print(*a1)
print("Stable")
print(*a2)

    print("Not stable")
    print("Stable")



print(*x)
print("Stable")
print(*y)
    print("Stable")
    print("Not stable")


print(' '.join(list(map(str, b))))
print("Stable")
print(' '.join(list(map(str, c))))
print("Stable" if c == b else "Not stable")

print(' '.join(a))
print('Stable')
print(' '.join(b))
    print('Stable')
    print('Not stable')

                print(num, end=" ")
                print(num)

print("Stable")
print(SS_ans)



print(*b)
print('Stable')
print(*s)
print(['Not s','S'][b==s]+'table')



print(*card_list)
print("Stable")


print(*card_list_copied)
    print("Stable")
    print("Not stable")


        print(i[0], end=" ")
    print(list[-1][0])

print(stableChecker(bubbleList))
print(stableChecker(selectionList))

print(*A)
print("Stable")

print(*B)
  print("Stable")
  print("Not stable")

print(*l)
            print("Not stable")
    print("Stable")
print(*l)
            print("Not stable")
    print("Stable")


print(*A_bub)
print("Stable")

print(*A)
print("Stable" if A == A_bub else "Not stable")



    print(A[0], end="")
        print(" "+str(A[i]),end="")
    print()
    
    print(A[0][0]+str(A[0][1]), end="")
        print(" "+A[i][0]+str(A[i][1]),end="")
    print()

print("Stable") if isStable(card_default, card) == True else print("Not stable")

print("Stable") if isStable(card_default, card2) == True else print("Not stable")

print(' '.join(bubble))
print(stableCheck(input_arr, bubble))

print(' '.join(select))
print(stableCheck(input_arr, select))


print(*bubbleSort_Card)
print(bubbleSort_Card_judge)
print(*selectionSort_Card)
print(selectionSort_Card_judge)


				print("Not stable")
	print("Stable")
				


print(*bubblecards)
print(*selectioncards)
print(*C)
print('Stable')

print(*c)
    print('Stable')
    print('Not stable')


print(' '.join(sb))
print("Stable")
print(' '.join(si))
print("Stable" if si == sb else "Not stable")

print(output)
print('Stable')

print(output)

  print('Stable')
  print('Not stable')
  


print(*[bi[2] for bi in b])
print("Stable" if is_stable(b) else "Not stable")


print(*[ci[2] for ci in c])
print("Stable" if is_stable(c) else "Not stable")


print(*bubble_array)
print("Stable")
print(*selection_array)
    print("Stable")
    print("Not stable")

    print(*ans)

print('Stable')

print('Stable' if r_bubble == r_select else 'Not stable')

        print(risuto[y])
        print(risuto[y], end=" ")


print("Stable")


        print(risuto2[y])
        print(risuto2[y], end=" ")

    print("Stable")
    print("Not stable")

print(*C)
print("Stable")

print(*b)
    print("Stable")
    print("Not stable")

print(" ".join(c))
print("Stable")


print(" ".join(c1))

    print("Stable")
    print("Not stable")


print(*A)
print("Stable")

print(*B)
    print("Stable")
    print("Not stable")

print(*bubble)
print('Stable')

print(*sorting)
    print('Stable')
    print('Not stable')

print(*A)
print("Stable")
print(*B)
print("Stable") if A == B else print("Not stable")

print(" ".join(map(str, ans1)))


print(check_stable(ans1, res))

print(" ".join(map(str, ans2)))
print(check_stable(ans2, res))

print(*bl)
print("Stable")
print(*sl)
    print("Stable")
    print("Not stable")
    



print(*BSA)
print('Stable')
print(*SSA)
    print('Stable')
    print('Not stable')

print(*bubble_sorted)
print("Stable")
print(*selection_sorted)
    print("Stable")
    print("Not stable")


    
    print(*tmp)    
    print(*tmp)
print(check(n,Bubble_list))
print(check(n,selection_List))

print(*a_bub)
print("Stable")

print(*a)
print("Stable" if a==a_bub else "Not stable")

print(*B)
    print('Stable')
    print('Not stable')

print(*S)
    print('Stable')
    print('Not stable')

        print(b_card[i], end=" ")
        print(b_card[i])
        print("Stable")

        print(s_card[i], end=" ")
        print(s_card[i])

    print("Stable")
    print("Not stable")



print(*new_Ab)
print("Stable" if b_flag else "Not stable")


print(*new_As)
print("Stable" if s_flag else "Not stable")


print(' '.join(map(str, bubbleSorted)))
print('Stable')
print(' '.join(map(str, selectionSorted)))
    print('Stable')
    print('Not stable')


print(' '.join(bubble_C))
print("Stable")

print(' '.join(selection_C))
    print("Stable")
    print("Not stable")




    print(lst[i],end=" ")
print(lst[n-1])
print("Stable")
    print(lst2[i],end=" ")
print(lst2[n-1])
    print("Stable")
    print("Not stable")

print(len(G))
print(*G)
print(cnt)
print("\n".join(map(str, a)))

print(m)
print(*G)
print(cnt)
print(*A, sep="\n")



print(m)
print(' '.join(map(str, G)))
print(cnt)
    print(a)


    print(1,1,0,A[0],sep='\n')

print(m)
print(*G)
print(cnt)
print(*ans,sep='\n')

    
print(len(G))
print(*G)
print(shellSort(l, n, G))
print('\n'.join(map(str, l)))

    print(m)
    print(*gaps)

    print(cnt)
    print(num)


print(m)
print(' '.join(map(str, G)))
print(cnt)
    print(a)


print(len(G))
print(' '.join(map(str, G)))
print(cnt)
    print(a)



    print(len(G))
    print(*G)
    print(ans)
        print(a)

    print(m)
    print(" ".join(map(str,G)))
    print(cnt)
        print(a)


print(m)
print(" ".join(map(str, G)))
print(cnt)
    print(a)


    print(m)
    print(*G)
    print(cnt)
        print(i)

    
    
    
print(m)
print(' '.join(list(map(str,G))))

    
    
print(count)
    print(i)

print(m)
print(' '.join(map(str, G)))
print(cnt)
    print(a)


    
    print(m)
    print(*G)
    print(cnt)

    print(A[i])


    print(m)
    print(*g)
    print(count)
    print(*array, sep='\n')


    print(string.join(map(str, array)))

    print(len(G))
    print(cnt)
print(len(gs))
print(*gs)
print(cnt)
    print(i)



print(m)
print(" ".join([str(g) for g in G]))
print(cnt)
    print(A[i])

print(m)
print(*G)
print(sum(insertion_sort(A, N, G[i]) for i in range(m)))
print(*A, sep="\n")



    print(m)
    print(*G)
    print(cnt)
    print(*A,sep="\n")

    print(1)
    print(A[0])
    print(0)
    print(A[0])
print(m)
        print(i, end=" ")
    print(G[-1])
    print(G[0])
print(cnt)
    print(i)


print(m)
print(*g)
print(cnt)

print(m)
print(*G)
print(cnt)
print(*A, sep='\n')

    print(m)
    print(' '.join(map(str, G)))
    
print(cnt)
    print(i)


print(m)
print(*G)
print(cnt)
    print(A[i])

print(m)
print(*G)
print(cnt)
    print(array[i])

print(len(G))
print(" ".join(map(str, G)))
print(cnt)
    print(a)



print(m_value)
print(*G_value)
print(cnt)

    print(x)

print(m)
print(*G)
print(cnt)
print(*A,sep='\n')


print(m)
print(*G)
print(cnt)
print(*A, sep='\n')


print(m)
print(" ".join(map(str, g)))
print(cnt)
    print(ai)

    print(m-1)
    print(" ".join(map(str,G)))
    print(cnt)
        print(l[i])


print(m)
print(" ".join(map(str,G)))
print(cnt)
    print(i)

    print(len(G_list))
    print(*G_list)
    print(cnt)
        print(a)


print(m)
print(*G)
print(cnt)
print(*A, sep='\n')


print(len(gaplist))

print(gapnums)


print(cnt)

  print(A[i])


  


    print(m)
            print(g[i])
            print(g[i],end=" ")
    print(cnt)
        print(i)

        
    print(len(G))
    print(*G[::-1])
print(cnt)
print(*A_sort, sep="\n")



print(m)
print(*gl)
print(cnt)
print(*al, sep="\n")


    print(m)
    print(' '.join(map(str, g)))
print(cnt)
    print(e)


    print(m)
    print(*G)
print(cnt)
print(*a, sep="\n")


    print(m)
    print(*G)
    
    print(cnt)
    print(*A)

print(len(G))
print(*G)
print(count)
print("\n".join(map(str, a)))


print(len(G))
print(*G)
print(ancer_cnt)
print(*l,sep="\n")

    print(m)
    print(*gaps)
    print(cnt)
        print(d)



    print(len(g_list))
    print(*g_list)
    print(counter)
    print(*a_list, sep='\n')

print(len(G))
print(*G)
print(count)
print("\n".join(map(str, a)))

    
print(len(G))
print(*G)
print(cnt)
print('\n'.join(map(str,A)))

print(len(G))
print(*G)
print(cnt)
print('\n'.join(map(str,A)))

print(len(G))
print(*G)
print(cnt)
print('\n'.join(map(str,A)))


print(len(G))
print(*G)
print(cnt)
print('\n'.join(map(str,A)))

print(len(G))
print(*G)
print(cnt)
print('\n'.join(map(str,A)))


print(len(G))
print(*G)
print(cnt)
print(*A, sep='\n')


print(stack[0])

print(stack[-1])

    print(translate_rpn(symbols))



print(calculator.pop())


        print("エラー（オーバーフロー）")
        print("エラー（アンダーフロー）")

print(pop())

    
    print(stoke[0])


print(stack[0])


print(stack.pop())


print(st.pop())



print(*a)

            print("Stack overflow!")
            print("Stack underflow!")
        
print(int(s.pop()))
        

print(stack[0])

print(stack.pop())

        
print(s.pop())

    print(ans)

  

print(stack.pop())

print(ans)

            print("エラー（オーバーフロー）")
            print("エラー（アンダーフロー）")
            print("無効な演算子です。")



    print(result)


print(A[0])



print(st[0])

print(stack[0])



print(stack[0])

        
        print(stack[0])
    print(result)


    print(nums[0])

print(calc(expression))

print(ans)


print(stack.pop())


print(s.pop())

print(ans)


print(result)



print(stack.Array[0])

        
print(stacks[0])

    
print(stack[0])


print(b[0])

    
print(*arr2)


print(stack[0])

print(MARIO[0])
        

print(*a)


print(stack[0])

            print("stack overflow")
            print("stack underflow")
print(calc_rev_polish(formula))

print(ans)

        print(risuto[x])
        print(risuto[x], end=" ")

print(result)



print(stack[0])


print(*stack)

print(*lst)
  

print(p[0])

        
print(st[-1])


print(ans.pop())



print(d[0])

print(a[0])

print(stack.pop())


print(s[0])


    print(result)


print(*calc)

print(output)


print(stack[0])


print(stack[0])


print(stack.pop())


            print(f"{name} {time}")
        print(f"{process_name} {finish_time}")

        print(row[0], row[1])

print(*ans, sep="\n")

        print(name, tot_time)
print(*ans, sep="\n")

        print(f"{name} {finish_time}")


    print(*item)


    print(name,time)

      print(f"{youso} {total}")

        print(name,cnt)
        print(name, now)
        print(temp[0], time)




        print(n, elapsed)
        print(p[0] + " " + str(t))
        print(lst[0], sum_time + lst[1])
        print(name[i], all_time)
        print(name, c + x)
        print(name, total_time)
        print(name, now)


        print(a[0], a[1]+count)
        print(name_p, cnt)



        print(f"{process} {t}")
        print(a[0] + ' ' + str(now))
    print(task[0], ans)
    

        print(pr[0], total)

        print(f"{name} {timer}")
        print(f"{name} {timer}")
        print(f"{name} {timer}")
        print(f"{name} {timer}")
        print(atop[0],t)
        print(atop[0],t)
        print(task[0], time)
 print('\n'.join(a))
    print("error")
    print("error")
        print("error")
        print("error")
    print("error")
            print(f"{names} {count}")


    print(' '.join(map(str, ans[i])))
        
    



 print('\n'.join(a))
            print("{} {}".format(answer[0], answer[1]))

  print("\n".join(ansl))
                print(name, sum_time)
        print(out[0], elapsed_time)
            print(p[0], t)
    print(*res, sep = "\n")

      print(t[0], time)

        print(u.name + ' ' + str(elaps))

    print(name2[k], time2[k])

            print(name, totaltime)
        print(n, t)

            print(process[0], c_time)
    print(process[0], timer)
            print(f'{p[0]} {ctime}')
            print(name, endtime)

            print(name,total_time + time)
            print(name, TIME)
        
        print(name, time)
            print(t_name, t_accu)
print(*ans, sep="\n")


            print("queue underflow")
            print("queue overflow")
            print("{} {}".format(now_p_name, time))

print("\n".join(output))

    print(" ".join(map(str, A_list)))
        print("13 7")
        print(" ".join(map(str, B_list)))

    print(" ".join(map(str, A_list)))
        print("13 7")
        print(" ".join(map(str, B_list)))



print(' '.join(map(str, dq)))


print(' '.join(map(str, dq)))



    print(" ".join(y))
    
    print(" ".join(d))


    print(" ".join(y))
    
    print(" ".join(y))
    
    print(" ".join(y))
    
    print(' '.join(A))

 print(*d)
  print(*d)

 print(*d)
 print(*d)
 print(*d)
 print(*d)
 print(*d)
 print(*d)

    print(*dll)


 print(*g)

    print(' '.join(deq))

    print(' '.join(deq))

    print(' '.join(deq))

print(' '.join(map(str, dq)))



print(' '.join(map(str, dq)))

print(*d)

print(*d)


print(*buffer)



print(*dq,)

print(*q)


print(*lst)


print(*que)


        
            
print(' '.join(que))


print(*que)

    
print(' '.join(doublyLinkedList))

print(*dq)

print(' '.join(map(str, A)))


print(*li)

    print(d_list.printLst())

    print(' '.join(deq))

            
print(' '.join(ans))

        
print(' '.join(A))
        


print(' '.join(LIST))




        
print(*q, sep=" ")

print(*linked_list)



print(*p)

        
print(' '.join(map(str, que)))


    print(*dll, sep=' ')


print(*q)



print(*d)

    print(*A)

print(" ".join(dll))
        

    
    print(*L)



print(*l)

print(ans)


print(*ans)



print(*q)

    print(*q)


print(*A)


print(*k)

print(sum(ans))
print(len(ans), *ans)

print(sum(ans))
print(len(ans), *ans)

print(sum(p[1] for p in ponds))
print(len(ponds), *(p[1] for p in ponds))


print(sum)
print(len(s2), *(a for j, a in s2))
        

    
    print(area_sum)
    print(num_entries, end="")
        print(" {}".format(stack_b[i].area), end="")
    print()

print(sum(arr))
print(*([len(ans)] + arr))



print(all)
    print('0')
    print(len(l), " ".join([str(x[1]) for x in l]))


        print(sum([lake.area for lake in self.stack]))
        
        print(len(self.stack), *[lake.area for lake in self.stack])


    print(sum(T))
    print(len(T), *T)
    print(0)
    print(0)



            
print(total_area)

print(total_mountain, *area_list)


    


        

print(total_sum)
    print(len(stack_sum))
    print(len(stack_sum),end=" ")
            print(stack_sum[i][2])
            print(stack_sum[i][2],end=" ")



print(total_area)
print(len(ans),*ans)
        
        
        
        


    print(sum)

    
    print(' '.join(output_line2))


    print(sum(T))
    print(len(T), *T)
    print(0)
    print(0)


print(sum_areas)
    print(len(stack2), end=' ')
    print(' '.join(str(area[1]) for area in stack2))
    print(len(stack2))


print(sum(ans))
print(' '.join(map(str, ans)))

print(total_area)
print(len(pond_stack), *[a for _, a in pond_stack])


    print(sum(area_list))
    print(len(area_list), *area_list)
    print(0)
    print(0)


print(a_sum)
print(len(a),*[s for i,s in a])


print(ans)
print(len(stack2), *[area for _, area in stack2])



print(a)
    print(len(stack2), " ".join([str(st[1]) for st in stack2]))
    print(0)

print(sum(ans))
print(len(ans), *ans)



print(sum(p[1] for p in ponds))
print(len(ponds), *(p[1] for p in ponds))




print(sum(ans))
print(len(ans), *ans)


print(A)
print(str(len(s2)), end="")
    print(" " + str(s2[i][3]), end="")
print()

        print(total_area)
        print('{0} {1}'.format(len(valid_areas), ' '.join(map(str, valid_areas))))
        print('0\n0')


	print(sum(pool))
	print(len(pool), *pool)


    print(sum)
    print(len(s2), end="")
        print(f" {x[1]}", end="")
    print()


print(ans)
    print(len(li2), *list(zip(*li2))[1])
    print(0)


print(a)
print(s)
print(len(b),*(d))


print(a)
print(k)
print(len(b),*(d))



print(sum([j[1] for j in L]))
    print(str(len(L))+ ' ' + ' '.join([str(i[1]) for i in L]))
    print(str(len(L)))


    print(_str)

    print(Area)
        print(len(stack))
        print(len(stack), end=" ")
            print(j[1])
            print(j[1], end=" ")    

                
    print(total_area)
print(sum(areas))
    print("0")
    print(len(areas), " ".join(map(str,areas)))

print(s)
print(len(b), *(d))


print(sum([j[1] for j in S2]))
    print(str(len(S2)) + ' ' + ' '.join([str(i[1]) for i in S2]))
    print(str(len(S2)))
        



print(total)
print(f"{flood_data_final}")


print(count)
print(len(area_pond),*(pending_area))


print(a)

print(all_sum)
print(str_esum)


print(A)
print(len(stack2), *(i[1] for i in stack2))

print(sum(L))
print(len(L), *L)

  print(area)
  print(len(S2), *[n[1] for n in S2])





print(a)
	print(len(p),*list(zip(*p))[1])
	print(0)



print(Asum)
print(len(A), *[S for i, S in A])


    print(total)
    print(' '.join([str(len(single_stack))] + [str(i[1]) for i in single_stack]))

print(point)

    print(len(stack_B),*[j for i,j in stack_B[::-1]])


print(sum(v))
print(*ans)


        print(ans)
        print(len(l))
    
    print(ans)
    print(len(areas),*areas)

print(sum(ans))
    print(len(ans),' '.join(map(str,ans)))
    print(0)

    print(area)
    print(str(count) + text)


    
    print(tot_area)
    print(str(tot) +  out)


    print(total_surface)
        print(len(s2), ' '.join(map(lambda x: str(x[1]), s2)))
        print(len(s2))


print(s)
print(len(b), *d)

print(cnt)
print(" ".join(map(str, res)))

print(a)
    print(len(p),*list(zip(*p))[1])
    print(0)


print(obs)

print(ans)

        
print(count)


print(a)

print(count)


print(count)


print(C)


        
print(cnt)

print(ans)


print(len(set(A)&set(B)))


print(count)


print(sum(int(val in s) for val in t))



print(len([i for i in t if i in s]))

print(c)



print(C)


print(cnt)

    
print(sum)



print(count)


print(A)


print(res)

print(len(s & t))


print(cnt)


print(count)

print(cnt)

print(l - len(S))


print(ans)

print(cnt)
        

print(len(s&t))

print(len(S & T))

print(result)

        
print(result)


    print(ans)
print(num)

print(C)

print(count)


print(len(S & T))


print(ct)

print(c)

print(ans)


print(c)


    
print(count)


print(count)


    print(cnt)

print(t)


print(len(S & T))


print(cnt)

print(sum(i in s for i in t))

print(len(s & t))

print(count)

    print(count)
  
print(cnt)

print(c)

        
print(count)


print(len(s & t))

print(len(C))

print(ans)


print(len(s & t))
    


print(A)

print(len(s & t))


print(len(s&t))

print(q-tan+sn)


    print(ans)
print(sum([x in n for x in q]))


print(a)

            
print(count)

print(cnt)

print(ct)


        
print(cnt)

print(c)



print(count)


print(ans)


print(ans)

print(ans)


    print(len(a.intersection(b)))


print(len(s&t))

    print(len(S & T))
    

print(len(set(S)&set(T)))

print(len(s&set(input().split())))

print(len(a&b))

print(len(A&B))


print(len(set(s)&set(t)))

print(len(n&set(input().split())))

print(len(s & t))

print(len(S & T))

print(len(s&i()))

print(len(set(a)&set(input().split())))

print(len(S & T))

print(len(S&T))

print(len(s & t))

print(input() and len(set(input().split()) & set(input() and input().split())))

print(len(set(S)&set(T)))

print(len(s & t))

print(len(S&T))

print(len(s & t))



print(len(set(A)&set(B)))


print(len(set(A)&set(B)))

print(len(O))


print(len(S & T))

print(len(common))


print(len(se & r))



print(len(T.intersection(S)))





print(len(s & t))

print(len(S&T))

print(len(n&set(input().split())))

print(len(s & set(input().split())))


print(cnt)    

print(len(s & t))


print(C)

print(C)


print(score)

     
print(ans)



print(count)


    print(ctr)


print(ans)


print(ans)


		
print(ans)

                print("yes")
                print("no")

            print('yes' if e[5:] in d else 'no')
        print(i)

    print("\n".join(ans))

                print("yes")
                print("no")

            print("yes")
            print("no") 

        print('yes' if i[5:] in dict else 'no')


            print("yes")
            print("no")
        print('yes' if line[5:] in D else 'no')
            print('yes')
            print('no')

            print('yes')
            print('no')

            print('yes')
            print('no')

                print('yes' if i[5:] in s else "no")
  print(ans)
            print('yes')
            print('no')



            print('yes' if s[5:] in dict else 'no' )
            print('yes')
            print('no')

                print("yes")
                print("no")

            print('yes')
            print('no')


        print("yes") if string in s else print("no")

        print("yes" if s[5:] in SET else "no")


            print('yes')
            print('no')


        
print("\n".join(ans))

  print(ans)
                print('yes')
                print('no')
        print('yes' if s in S else 'no')


            print("yes")
            print("no")

            print("yes" if value in a else "no")

        print("yes" if s[5:] in dic else "no")


            print('yes')
            print('no')

                print('yes')
                print('no')


        print("yes" if s[5:] in D else "no")


                print('yes')
                print('no') 

    print(a)



            print('yes')
            print('no')

        print(ans)

            print('yes')
            print('no')

            print('yes' if s in t else 'no')

            print("yes")
            print("no")

            print("yes")
            print("no")

            print('yes')
            print('no')

            print('yes')
            print('no')

                print("yes")
                print("no")
 
 
            print('yes')
            print('no')

        print('yes' if str in judge else 'no')

            print('yes')
            print('no')

print(p)


print(mx)


print(capa())

print(p)

print(min_p)

    print(min_max_load(weights, k))


print(min_load)

print(idx+1)
    

    print(b)
 print(r)
    print(r)


    print(solve(n, k, W))

print(b)

 print(r)
print(r)



    print(calculate_truck_size(truck_count, data_list))


    
    print(right)

    print(binary_search(max(weights), sum(weights)))


        print(min_load)

    print(max_load)

print(maxP)



print(right)


print(left)
    

    

    print(-1)


print(ans)



print(min_ok)


print(right)

print(right)

print(P_min)



print(binarysearch(max(w), sum(w)))


print(right)


  print(r)

    print(ans)

    
    

print(right)


    print(P)


 print(r)
        
print(pmax)


print(left)


print(r)

print(right)

  print(max(w))
    print(w[0])
    print(right)

print(ans)

print(right)



    print(ok)



print(Pmax)

print(ans)


print(ans)


print(right)



print(right)


    
print(right)

    
print(solve())

    print(ub)

print(r)


print(ans)


print(ans)


    print('yes' if m in s else 'no')

    print('yes')
    print('no')

        print("yes")
        print("no")

    print(('no', 'yes')[i in s])


    print("yes"*((bits >> q) & 1)or"no")


    print("yes"*((bits >> q) & 1)or"no")

            print("yes")
            print("no")
        print("yes")
        print("no")

        print("yes")
        print("no")

        print("yes")
        print("no")


        print('yes')
        print('no')



print(ans, end = '')

        print('yes')
        print('no')

        print('no')
        print('yes')
        print('no')

    print("yes"*((bits >> q) & 1)or"no")

            print('yes')
            print('no')

        print("yes")
        print("no")

            print("yes")
            print("no")


            print("yes")
            print("no")


    print('yes' if m in SET1 else 'no')

            print("yes")
            print("no")


    print("yes"*((bits >> m) & 1)or"no")

    print("yes"*((bits >> q) & 1)or"no")

    print(['no','yes'][(sum>>j)&1])

    print('yes' if (bits >> m) & 1 else 'no')

        print('yes')
        print('no')

    print("yes"*((bits >> q) & 1) or "no")


    print('yes' if (b >> m) & 1 else 'no')


    print("yes"*((bits >> q) & 1)or"no")

    print("yes" if f[0][t] else "no")

        print("yes")
        print("no")



        print("yes")
        print("no")

			print("yes")
			print("no")

            print("yes")
            print("no")

        print("no")
        print("yes")
        print("no")

        print("yes")
        print("no")

        print("yes")
        print("no")

        print('yes')
        print('no')


        print('yes')
        print('no')
        

        print('yes')
        print('no')

    print("yes")
    print("no")

    print(['no', 'yes'][tag])

        print("yes")
        print("no")


        print("no")
        print("yes")
        print("no")

    print("yes"*((bits >> q) & 1) or "no")
        print('yes')
        print('no')


        print("yes")
        print("no")

        print("yes")
        print("no")


        print("yes")
        print("no")


    print("yes") if m in R else print("no")

print(*["yes" if dp[i] else "no" for i in map(int, input().split())], sep="\n")


  print("yes" if m in yes_nums else "no")

        print('yes')
        print('no')

            print("yes")
            print("no")

        print("yes")
        print("no")

    print("yes"*((bits >> q) & 1)or"no")

    print("yes")
    print("no")

        print('yes')
        print('no')


        print('yes')
        print('no')

        print('yes')
        print('no')


	print("yes") if j in S else print("no")


print(' '.join(list(map(str,sorted(L)))))
print(count(N))

print(*sorted([int(s) for s in input().split()]))
print(t)


print(" ".join(list(map(str, S))))
print(count)

print(" ".join(map(str, sorted(map(int, input().split())))))
print(count(0, N))

print(*A)
print(Count(n))

print(*arr)
print(cnt)

print(*sorted(li))
print(count(0, N))

print(*sorted(li))
print(merge(0, N))


    
    print(*sorted_list)
    print(count)
    
print(*ANS)
print(ans)

print(*S)
print(count)

    print(*data)
    print(count)


print(" ".join(map(str, S)))
print(count)



print(" ".join([str(x) for x in mergeSort(s,0,n)]))
print(cnt)


print(' '.join(str(num) for num in A))
print(cnt)


print(*S)
print(num)

        print(A)
        print(L)
        print(R)
    
            print(f"{counts}回目")
            print(arr, L, R)

    print(*A, sep=" ")
    print(counts)

print(*S)
print(cnt)

    print(S[i],end=' ')
print(S[n-1])
print(sum)


        print(S[i])
        print(S[i], end=" ")
print(count)



print(*MergeSort(S))
print(c)


print(count)

print(*A)
print(cnt)

print(" ".join(map(str, array)))
print(merge_count)


print(*S)
print(cnt)


print(' '.join(map(str, A)))
print(cnt)

print(*arr)
print(count)

print(*A)
print(count)

print(" ".join([str(n) for n in a]))
print(ct)


print(*sl)
print(cnt)


print(*res)
print(count)


print(*s)
print(ans)

print(*S)
print(count)

    print(*sorted_S)
    print(compare_cnt)


print(' '.join(list(map(str, A))))
print(cnt)

    print(s[i], end = " ")
print(s[n - 1])
print(cnt)

print(*arr)
print(NUM_COMP)

print(*sorted_L)
print(count)

print(*a)
print(ans)

print(*a)
print(b)

      print(S[i])
    print(S[i],end=" ")
print(cnt)

  print(S[i], end = ' ')
print(S[n-1])
print(cnt)

print(*S, sep=" ")
print(counter)

        print(str(A[i])+" ",end = "")
        print(A[i])
print(cnt)

print(f"{' '.join(map(str, s))}\n{cnt}")

print(*s)
print(ct)


print(*A)
print(k)

            print(l[i],end=" ")
            print(l[i])

print(x)

print(" ".join(list(map(str, A))))
print(count)


print(*B)
print(comp)

print(*B)
print(comp)


print(" ".join(map(str, A)))
print(c)


print(*ANS)
print(ans)


print(*B)
print(comp)

 print(*d(list(map(int,input().split()))))
 print(c)
print(c)


print(mergeSort(A, left, right))


print(n_ivs)


    print(v)

print(merge_and_count(0, n, a, W))

print(count)
            

 
print(ans)

print(cnt)
        


print(inversions(a))

print(count)



print(ans)

print(cnt)

print(ans)
  
  


print(count)


    print(merge_sort(A, 0, len(A)))


print(ans)



print(ans)


print(cnt)


print(mergesort(a,0,n))

    print(count)
    
print(cnt)

print(NUM_INV)

print(cnt)



print(ans)


print(cnt)

print(cnt)

print(count)


print(inversion_number(a))



    print(str(count(an, sn)))


print(ans)
    




print(merge_sort(arr)[1])

print(ans)

print(ans)

    print(solve(a))

print(merge_sort(A, 0, n))


print(ans)

print(merge_sort(A, 0, n))


print(merge_sort(A, 0, n))



print(solve())


print(ans)

print(c)

print(c)

print(c)

print(ans)


    print(counter)


print(ans)

    print(c)

print(merge_sort(A, 0, n))

    print(ans)
print(ans)


print(rev_num(n,a,1))


print(cnt)

print(c)


print(number_of_inverse(a))


print(cnt)


    print(merge_sort(A, 0, n))

print(*B)

    print(*b)



    print(' '.join(b_list))

    print(' '.join(b))
        
 print(' '.join(B))
 print(' '.join(B))

    print(" ".join([f"{i}" for i in countingSort(dataCount, dataArray)]))
print(" ".join(B))


print(output[:len(output) - 1])


print(' '.join(b))




print(' '.join(b))


print(" ".join(B))

print(' '.join(map(str, A)))


print(*sorted(s))

print(' '.join(map(str, sorted_sequence)))


print(" ".join(B))


print(out[ : len(out) - 1])

    print(*ans)

    print(*counting_sort(nums, max(nums)))

print(" ".join(map(str, sorted_A)))


print(" ".join(map(str, B)))

print(*CountingSort(A, k))


print(*counting_sort(a, MAX, n))


    print(*sorted_a)


print(*ans)


print(C)

    print(" ".join(map(str, res)))

print(" ".join(map(str, B)))


print(" ".join([str(n) for n in x]))

print(' '.join(str(b) for b in B))


print(*B)

print(*B)

print(*B)

print(*csort(A,B,k))

print(" ".join(map(str, out)))


print(*ans)

    print(*B)


print(' '.join(list(map(str, B[1:]))))


print(' '.join(map(str, B[1:])))


print(*CountingSort(A, B, 10001)[1:])

print(*b_sorted,sep=" ")

print(' '.join(map(str, counting_sort(arr))))


print(*B)

    print(result)

            print(l[i],end=" ")
            print(l[i])


print(*B)

print(' '.join(list(map(str,S))))


print(*b)

print(" ".join(map(str,countingsort(A))))

print(' '.join(map(str,answer)))


print(*ans)


    print(" ".join([str(s) for s in CountingSort(a,max(a))]))

print(*B)

print(*ans)

print(' '.join(map(str, A[:q])), end=' ')
print(f"[{A[q]}]", end=' ')
print(' '.join(map(str, A[q+1:])))


print(" ".join(list(map(str, res[:r]))) + f" [{res[r]}] " + " ".join(list(map(str, res[r + 1 :]))))


print(' '.join(A))


print(*arr[0:base], end=" ")
print("[{}]".format(arr[base]), end=" ")
print(*arr[base+1:])

print(' '.join(ans))

print(*A)



print(f"{' '.join(map(str, A[:rtn]))} [{A[rtn]}] {' '.join(map(str, A[rtn+1:]))}")

print(' '.join(str(num) for num in A[:idx]), end='')
print(f' [{A[idx]:d}] ', end='')
print(' '.join(str(num) for num in A[idx+1:]))


print(ans)


    print(*data[:m], end=" ")
    print("[{}]".format(data[m]), end=" ")
    print(*data[m+1:])


print(*A[:i+1], f"[{A[i+1]}]", *A[i+2:])

print(" ".join( f"[{name}]" if  i == j else str(name)  for i,name in enumerate(l)))
 

print(*A)

print(*A)

    print(*A)
    
print(*a)


print(' '.join(formatted_output))


print(*a[0:p],sep=" ",end=" ")
print(f"[{a[p]}]",end=" ")
print(*a[p+1:n],sep=" ")

print(*A[:ret],'['+str(A[ret])+']',*A[ret+1:])

            print(f"[{x}]", end=" ")
            print(num[i], end=" ")
        print(f"[{x}]")
        print(num[-1])

print(*A[:ref_index], end='')
print(f' [{A[ref_index]}] ', end='')
print(*A[ref_index+1:])

    
    print(" ".join(B))


print(*partition(A,0,n-1))

print(" ".join([str(n) for n in c]))

        print(x, end=' ')
print(f'[{m}]', *b)


print(*(str(x) if i != idx else "[%d]" % x for i, x in enumerate(A)))

            print(f'[{A[i]}]', end = ' ')
            print(A[i], end = '')
            print(A[i], end = ' ')
    print()
    print(S[i],end=' ')
print("["+str(S[m])+"]",end=' ')
    print(S[i],end=' ')
print(S[n-1])

        print("[",x,"]",sep="",end=" ")
        print(x,end=" ")

    print(A[-1])
    print(A[-1])

        print(f"[{list[i]}]", end=' ')
        print(list[i])
        print(list[i], end=' ')



print(result_string)


        print('[', end = "")
        print(A[q], end = "")
        print(']', end = " ")
        print(A[i], end = " ")
print(A[n-1])

        print(A[i])
           print("[{}]".format(A[i]),end=" ")
            print(A[i],end=" ")
        print(A[i],end=" ")


                print("[", end="")
                print(A[i], end="")
                print("]", end="")
                print(A[i], end="")
                print(" [", end="")
                print(A[i], end="")
                print("]", end="")
                print("", A[i], end="")
    print()
            


    print("{0} [{1}] {2}".format(" ".join(map(str,A[:i+1])),str(A[i+1])," ".join(map(str,A[i+2:]))))

print(ans)

 print(" ".join(map(str,A[:i]))+" ["+str(A[i])+"] "+" ".join(map(str,A[i+1:])))
    print(' '.join(map(str,A[:i+1])), end= ' ')
    print('[', A[i+1], ']', sep='', end='')
        print(' ', end='')
    print(' '.join(map(str,A[i+2:])))


print(' '.join(map(str,A[:mid])),'['+str(A[mid])+']',' '.join(map(str,A[mid+1:])))

    print(' '.join( map(str, sequence)))

print(' '.join(str_lst))

    print(out)

print(' '.join(a))



print(" ".join(map(str, input_a[0:position])), end="")
print(f" [{input_a[position]}] ", end="")
print(" ".join(map(str, input_a[position+1:])))


print(" ".join(A))



print(' '.join(map(str,a[0:m]))+' ['+str(a[m])+'] ' +' '.join(map(str,a[m+1:])))

    print(' '.join(A))


print(" ".join(map(str, A)))

print(' '.join(A))

    print(" ".join(a))

print(string)



    print(" ".join(A))

print(" ".join(map(str, input_digits)))



print(" ".join(map(str, a)))



print(' '.join(map(str,A[:par])),end = ' ')
print(f'[{A[par]}]',end = ' ')
print(' '.join(map(str,A[par+1:])))


    print(" ".join(map(str,A)))

    print(" ".join(map(str, A)))
print("Stable" if A == A_stable else "Not stable")
    print(*i)

        print("Not stable")
    print("Stable")

    print(A[i][0],A[i][1])

                print("Not stable")
    print("Stable")
    print(C[i][1], C[i][0])


    print("Stable")
    print("Not stable")
    print(*C[i])



print("Not stable" if trump!=trump_origin else "Stable")
    print(*x)

    print("Stable")
    print("Not stable")

    print(A[i][0],A[i][1])



print(state)
    print(*an)


    print("Stable")
    print("Not stable")
    print(*C[i])



    print("Stable")
    print("Not stable")
    print(A[i][0],end=' ')
    print(A[i][1]) 

    print("Not stable")
    print("Stable")
    print(*A[i][0:2])

        print("Stable")
        print("Not stable")

        print("{} {}".format(card[0], card[1]))

print("Stable" if A == A_stable else "Not stable")
    print(*x)

    print("Stable")
    print("Not stable")
    
    print(f"{mark} {num}")


            print('Not stable')
        print('Stable')
    print(*A[i])

print("Stable" if stable else "Not stable")

    print(card.suit, card.value)



print("Stable") if isStable(card_default, card) == True else print("Not stable")
    print(*i,sep=" ")


print('Stable' if a == b else 'Not stable')
    print("Not stable")
    print("Stable")
    print("{} {}".format(picture[i], number[i]))
    print("Stable")
    print("Not stable")

    print("%s %d"%(table[i].mark,table[i].number))

    print("Stable")
    print("Not stable")

    print(*l[i])


        



            print('Not stable')
    print('Stable')
            
    print(' '.join(list(map(str, a))))

print('Stable' if original == A else 'Not stable')
    print(a,b)

    print("Stable")
    print("Not stable")
    print(card[i]["key"], card[i]["values"])



  print("Stable")
  print("Not stable")

  print(B[i][0], B[i][1])

        print("Stable")
        print("Not stable")
        print(*data[i])


print(s(A)+'table')
print('\n'.join(f'{a} {b}'for a,b,_ in A))

            print('Not stable')
        print('Stable')

    print('\n'.join(result))

print(s(A)+'table')
print('\n'.join(f'{a} {b}'for a,b,_ in A))

print(solve(A))
print('\n'.join(f'{a} {b}' for a,b,_ in A))

print(s(A)+'table')
print('\n'.join(f'{a} {b}'for a,b,_ in A))

print(isStable(A))
print("\n".join(f"{a} {b}" for a, b, c in A))


        print("Stable")
        print("Not stable")
    
        print(card.mark, card.num)

print("Stable") if A == B else print("Not stable")
print('\n'.join(A))


print('Stable' if stable else 'Not stable')
print('\n'.join(map(lambda x: ' '.join(map(str, x)), A)))


        print('Stable')
        print('Not stable')

        print('Stable')
        print('Not stable')

print('Stable' if A == B else 'Not stable')
    print(*A[i])

        print("Stable")
        print("Not stable")
        print(i[0], end = " ")
        print(i[1])


print('Stable' if is_stable else 'Not stable')
    print(*card)

    print('Stable')
    print('Not stable')
    
    print(*b)

    print("Not stable")
    print("\n".join([p[0]+" "+str(p[1]) for p in A]))
print("Stable")
print("\n".join([p[0]+" "+str(p[1]) for p in A]))

                print("Not stable")
        print("Stable")

        print(m, n)


        print("Stable")
        print("Not stable")
        print(*a)
    print("Stable" if all(i1 < i2 for (n1, i1), (n2, i2) in zip(cards2, cards2[1:]) if n1 == n2)
    print(*(cards1[i] for i in map(itemgetter(1), cards2)), sep="\n")

    print(res)
        print(a[0], a[1])
    
print(ans)
    print(i,j)

print('Stable' if stable else 'Not stable')
print('\n'.join(map(lambda x: ' '.join(map(str, x)), A)))

    print("Stable")
    print("Not stable")

    print(t[0], t[1])



    print("Stable")
    print("Not stable")

    print(*m)



print("Stable" if is_stable else "Not stable")
    print(card[0], card[1])


    print('Stable')
    print('Not stable')

    print(*x)

    print('Stable')
    print('Not stable')
 
    print(*x)

        print('Not stable')
    print('Stable')

    print(c[0],c[1])

    print("Stable")
    print(*i)




    print("Not stable")
        print("Stable")
        print("Not stable")
    print(*i)

            print('Not stable')
    print('Stable')
    print(*i)

        print("Stable")
        print("Not stable")
        print(b[0], b[1])

        print("{0} {1}".format(m, n))


        print("Stable")
        print("Not stable")


print(check_stable(A))

    print(*[a, num])

print(is_stable)

    print(a[i][0], a[i][1])


print(checkstable(a))

    print(line[0], line[1])

print("Not stable" if notstable else "Stable")
    print(f"{v[0]} {v[1]}")

print(is_stable(unsorted, A))
    print(A[i][0], A[i][1])
    

print(ans)
    print(i,j)


print(c)


        print(answer)
print(ans)

print(ans)






print(sum)

print(ans)

    
print(solve(A, sortA))

    
print(cost)



print(ans)

print(MinimumCostSort(w))


    print(ans)

print(ans)


print(ans)


    print(ans)


    print(ans)

print(solve())


    print(search_min_cost(w))

    print(calc_cost(hoge))

print(c)

    print(ans)


    print(min_cost(li, sli))


print(ans)

    

print(total)


print(ans)

print(ans)



print(swap_cost)


    print(min_cost)
print(solve(a,n,mn,mx))


print(silly_sort(t))


print(cost)



print(ans)

print(cost)


print(c)


    print(solve(a))

print(cost)


    
print(cost)

print(c)


print(cost_sum)

    
    print(ans)


print(CNT)


print(ans)
        
    
    



    print(solve(n, A))


	print(minCostSort(A, n))


print(ans)


print(cost.ans)

print(answer)


    print(cost)


    print(minimum_cost(A, min(A), max(A)))


print(ans)

    print(ans)


print(ans)

print(ans)



print(ans)

    print(ans)


print(cost)



print(c)


print(ans)



print(r)


print(ans)


print(ans)

print(cost)

        print("node {}: parent = {}, depth = {}, {}, {}".format(i, parents[i], depths[i], type(i), childs[i]))


    print(f'node {u}: parent = {parent[u]}, depth = {depth[u]}, {type}, {G[u]}')


    print('node %d: parent = %d, depth = %d, %s, %s'%(i,parent[i],depth[i],condition[i],children[i]))

        print(f"node {i}: parent = {nodes[i].parent}, depth = {nodes[i].depth}, {node_type}, {nodes[i].children}")

    print(f"node {i}: parent = {parent[i]}, depth = {depth[i]}, {typename[i]}, {treeDict[i]}")

     print("node {0}: parent = {1}, depth = {2}, {3}, {4}".format(i,parent[i],depth[i],status[i],tree[i][2:]))




    print("node %d: parent = %d, depth = %d, %s,"%(lst[i][0],lst[i][1],lst[i][2],lst[i][3]),lst[i][4])

    print(f'node {i}: parent = {p}, depth = {d}, {b}, {c}')

  print(f"node {id}: parent = {node.pa}, depth = {node.depth}, {kind}, {node.chs}")


    print(f'node {id}: parent = {node.pa}, depth = {node.depth}, {kind}, {node.chs}')

    print(f"node {node}: parent = {nodes[node].parent}, depth = {depths[node]}, {node_type}, {nodes[node].children}")

    print("node {}: parent = {}, depth = {}, {}, {}".format(i, t.parent, t.depth, t.type, t.children))

    print(f'node {node}: parent = {parent}, depth = {depth}, {type}, {c}')


  print(f'node {t["node"]}: parent = {t["parent"]}, depth = {t["depth"]}, {t["type"]}, {t["child"]}')

    print(node[key])

    print(n)

    print(ans)

print('\n'.join(f"node {i}: parent = {p[i]}, depth = {d[i]}, {'root'if'-1'==p[i]else'internal node'if t[i]else'leaf'}, [{', '.join(t[i])}]"for i in map(str,range(n))))

print('\n'.join(f"node {i}: parent = {p[i]}, depth = {d[i]}, {'root'if'-1'==p[i]else'internal node'if t[i]else'leaf'}, [{', '.join(t[i])}]"for i in map(str,range(n))))


    print(f"node {node.id}: parent = {node.parent}, depth = {node.depth}, {node.type}, {node.child}")

            print(f"node {node.id}: parent = {node.parent}, depth = {node.depth}, {node.type}, {node.children}")    
       
    print(f"node {lis[0]}: parent = {lis[1][0]}, depth = {lis[1][1]}, {lis[1][2]}, {lis[1][3]}")

    print("[", end='')
            print(f"{c}, ", end='')
            print(c, end='')
    print("]")


    print(f"node {i}: parent = {Tree[i].parent}, depth = {get_depth(i)}, {node_type(i)}, ", end='')
            print(', ', end='')
        print(str(c), end='')
    print('node ' + str(u) + ': ', end='')
    print('parent = ' + str(value['p']) + ', ', end='')
    print('depth = ' + str(D[u]) + ', ',end='')
    print(type + ', ', end = '')
    print('[',end = '')
    print(']')

    print("node "+str(i)+": parent = "+str(Nodes[i].p)+", depth = "+str(Nodes[i].depth)+", "+category+", "+str(Nodes[i].children))


    
        
        
        
    
    
    
    
    
        
            
        
        
        
    
    
    

    

print('\n'.join(f"node {i}: parent = {p[i]}, depth = {d[i]}, {'root'if'-1'==p[i]else'internal node'if t[i]else'leaf'}, [{', '.join(t[i])}]"for i in map(str,range(n))))

    print("node %d: parent = %d, depth = %d, "%(i,nodes[i].parent,nodes[i].depth),end="")
        print("root,",end = "")
            print("leaf,",end = "")
            print("internal node,",end = "")
    print(" [",end = "")
    print(', '.join(map(str,nodes[i].children)),end = "")
    print("]")
    

print('\n'.join(f"node {i}: parent = {p[i]}, depth = {d[i]}, {'root'if'-1'==p[i]else'internal node'if t[i]else'leaf'}, [{', '.join(t[i])}]"for i in map(str,range(n))))


        print(f'node {self.id}: ', end='')
        print(f'parent = {self.parent}, ', end='')
        print(f'depth = {self.depth}, ', end='')
        print(f'{self.type}, ', end='')

        print(f"[{str_children}]")


    print('node ' + str(node.number) + ':', end = ' ')
    print('parent = ' + str(node.parent),end = ', ')
    print('depth = ' + str(node.depth),end = ', ')
    print(node.nodetype,end = ', ')
    print(node.children_num)
    

print("\n".join(map(str, li)))


        print(f"node {i}: parent = {parents[i]}, depth = {depth[i]}, {type_[i]}, {children[i]}")


        print(text)


        print("node {0}: parent = {1}, depth = {2}, {3}, [{4}]".format(n[I], n[P], n[D], type, children))

            
        print(f'node {idx}: parent = {node["parent"]}, depth = {depth}, {node_type}, {node["children"]}')

    print('node %s: parent = %d, depth = %d, %s, %s'%(i, parentlist[i], depthlist[i]['depth'], depthlist[i]['type'], childlist[i]))

    print('node {}: parent = {}, depth = {}, {}, [{}]'.format(i, p[i], d[i], nodetype, children))

    print(f"node {i}: parent = {parent[i]}, depth = {depth[i]}, {type}, {G[i]}")

        print('node {0}: parent = {1}, depth = {2}, {3}, {4}'.format(i, parent[i], depth[i], node_type[i], children[i]))

        print("node {}: parent = {}, depth = {}, {},".format(i,parent[i],depth[i],get_attr(tree,i,_root)),tree[i])

        print(f"node {i}: parent = {nodeArray[i].parent}, depth = {nodeArray[i].depth}, {nodeArray[i].type}, {nodeArray[i].children}")



        print(f"node {i}: parent = {node.par}, depth = {D[i]}, {status}, {node.children}")


    print(f"node {id}: parent = {node.pa}, depth = {node.depth}, {kind}, {node.chs}")

        print("node {}: parent = {}, depth = {}, {}, {}".format(u,par[u],dep[u],typ[u],chi[u]))


        print('node {0}: parent = {1}, depth = {2}, {3}, {4}'.format(node, parent[node], depth, type, children[node]))


        print(ans.format(a[0], a[1], a[2], a[3], a[4]))


        print(f'node {self.id}: parent = {self.parent}, depth = {self.depth}, {self.type}, {self.children}')
        
        
  print("node {}: parent = {}, depth = {}, {}, {}".format(i,P[i],D[i],T[i],C[i]))


        print("node {0}: parent = {1}, depth = {2}, {3}, {4}".format(node, pa[node], dep, tp, ch[node]))


    
    print('node {}: parent = {}, depth = {}, {}, {}'.format(t_id, parent, depth, type_t, children))

    print(f'node {i}: parent = {p}, depth = {depth}, {root_or_node(depth, c)}, {"".join(str(c))}')

    print(f"node {i}: parent = {parent[i]}, depth = {depth[i]}, {types[i]}, {child[i]}")

        print('node {}: parent = {}, depth = {}, {}, [{}]'.format(i, x.parent, x.depth, x.typ, ', '.join(list(map(str, x.childlen)))))

    print(f"node {x['node']}: parent = {x['parent']}, depth = {x['depth']}, {x['type']}, {x['child']}")


    print("node %d: parent = %d, depth = %d, %s, %s" % (i, node_parent[i], node_depth[i], node_type,str(node_children[i])) )

    print("node {}: parent = {}, depth = {}, {}, {}".format(node.id, node.parent, node.depth, node.type, node.children))






    print(f"node {id}: parent = {node.pa}, sibling = {sib}, degree = {deg}, depth = {node.d}, height = {node.h}, {kind}")


    print(f"node {id}: parent = {node.pa}, sibling = {sib}, degree = {deg}, depth = {node.d}, height = {node.h}, {kind}")


    print(f'node {i}: parent = {p}, sibling = {s}, degree = {l}, depth = {d}, height = {h}, {b}')

        print(f"node {i}: parent = {nodes[i].parent}, sibling = {getSibling(nodes, i)}, degree = {int(nodes[i].left != -1) + int(nodes[i].right != -1)}, depth = {depths[i]}, height = {setHeight(nodes, i)}, {getType(nodes[i])}")

    print('node ' + str(u) + ': ', end = '')
    print('parent = ' + str(parent) + ', ', end = '')
    print('sibling = ' + str(sibling) + ', ', end = '')
    print('degree = ' + str(deg) + ', ', end='')
    print('depth = ' + str(depth) + ', ', end='')
    print('height = ' + str(height) + ', ', end = '')
    print(type)

    print(f'node {str(i)}: parent = {str(ans[i][0])}, sibling = {str(ans[i][1])}, degree = {str(ans[i][2])}, depth = {str(ans[i][3])}, height = {str(ans[i][4])}, {ans[i][5]}')

    print(f"node {i}: parent = {parent[i]}, sibling = {sibling[i]}, degree = {degree[i]}, depth = {depth[i]}, height = {height[i]}, {typename[i]}")

     print("node {0}: parent = {1}, sibling = {2}, degree = {3}, depth = {4}, height = {5}, {6}".format(i,parent[i],sibling[i],degree[i],depth[i],height[i],status[i]))




    print(f"node {id}: parent = {node.parent}, sibling = {sibling}, degree = {degree}, depth = {node.d}, height = {node.h}, {type}")

    print(ans)

    print("node {}: parent = {}, sibling = {}, degree = {}, depth = {}, height = {}, {}".format(i, t.parent, t.sibling, t.degree, t.depth, t.height, t.type))
    

    print(f"node {i}: parent = {T[i].parent}, sibling = {get_sibling(i)}, degree = {deg}, depth = {D[i]}, height = {H[i]}, ", end="")
        print("root")
        print("leaf")
        print("internal node")


    print('node %d: parent = %d, sibling = %d, degree = %d, depth = %d, height = %d, %s'%(i,pt[i],sibling[i],deg[i],depth[i],height[i],info[i]))
    

    print("node "+str(i)+": parent = "+str(Nodes[i].p)+", sibling = "+str(Nodes[i].sibling)+", degree = "+str(Nodes[i].degree)+", depth = "+str(Nodes[i].depth)+", height = "+str(Nodes[i].height)+", "+Nodes[i].category)


    


    print(f"node {lis[0]}: parent = {lis[1][0]}, sibling = {lis[1][2]}, degree = {lis[1][3]}, depth = {lis[1][4]}, height = {lis[1][5]}, {lis[1][6]}")

    print(n)

    print(f"node {nd.id}: parent = {nd.parent}, sibling = {nd.sibling}, degree = {nd.degree}, depth = {nd.depth}, height = {nd.height}, {nd.type}")          


        print(f'node {self.id}: ', end='')
        print(f'parent = {self.parent}, ', end='')
        print(f'sibling = {self.sibling}, ', end='')
        print(f'degree = {self.degree}, ', end='')
        print(f'depth = {self.depth}, ', end='')
        print(f'height = {self.height}, ', end='')
        print(f'{self.type}')


    print("node {}: parent = {}, sibling = {}, degree = {}, depth = {}, height = {}, {}".format(node.node_id, node.parent, node.sibling, node.degree, node.depth, node.height, node.typ))

    print(ans)


    print("node {0}: parent = {1}, sibling = {2}, degree = {3}, depth = {4}, height = {5}, {6}".format(i, T.parent[i], T.sibling[i], T.degree[i], T.depth[i], T.height[i], node))

        print("node {}: parent = {}, sibling = {}, degree = {}, depth = {}, height = {}, {}".format(i, node["parent"], node["sibling"], node["degree"], node["depth"], node["height"], node_type))
        print('node {0}: parent = {1}, sibling = {2}, degree = {3}, depth = {4}, height = {5}, {6}'.format(self.id, self.parent, self.brother, self.child, self.depth, self.height, self.type))

 
    print("node {}: parent = {}, sibling = {}, degree = {}, depth = {}, height = {}, {}".format(node.id, node.parent, node.sibling, node.degree, node.depth, node.height, node.type))


        print("node {}: parent = {}, sibling = {}, degree = {}, depth = {}, height = {}, {}".format(n[I], n[P], n[B], cnum, n[D], n[H], type))


        print("node {0}: parent = {1}, sibling = {2}, degree = {3}, depth = {4}, height = {5}, {6}".format(node, parent, sibling, degree, depth, height, _type))


print("\n".join(map(str, tree)))


 print('node {}: parent = {}, sibling = {}, degree = {}, depth = {}, height = {}, {}'.format(i,*t[i][2:],'root'if not t[i][5]else'internal node'if t[i][4]else'leaf'))

    print("node {0:}: parent = ".format(i.label), end = "")
        print(i.parent, end = "")
        print(i.parent.label, end = "")
    print(", sibling = {0:}, degree = {1:}, depth = {2:}, height = {3:}, {4:}".format(i.sibling, i.degree, i.depth, i.height, i.type_))

    print(out_str)
        
        


    print('node {}: parent = {}, sibling = {}, degree = {}, depth = {}, height = {}, {}'.format(line['node'], line['parent'], line['sibling'], line['degree'], line['depth'], line['height'], line['type']))


    print('node {0}: parent = {1}, sibling = {2}, degree = {3}, depth = {4}, height = {5}, {6}'.format(id, parent, sibling, degree, depth, height, type))


    print('node {}: parent = {}, sibling = {}, degree = {}, depth = {}, height = {}, {}'.format(i, p, s, deg, dep, h, 'root' if not dep else 'internal node' if deg else 'leaf'))

    print("node {}: parent = {}, sibling = {}, degree = {}, depth = {}, height = {}, {}".format(id, parent_id, sibling_id, degree, D[id], H[id], node_type))

	print(nodes[i])


    print(result)


        print("node {}: ".format(id), end="")
        print("parent = {}, ".format(T[id].p), end="")
        print("sibling = {}, ".format(sibling_of(T, id)), end="")
        print("degree = {}, ".format(degree_of(T, id)), end="")
        print("depth = {}, ".format(T[id].d), end="")
        print("height = {}, ".format(T[id].h), end="")
        print(type_of(T, id))

        print(tree.nodes[id])

    print(f"node {id}: parent = {-1 if tree[id].parent is None else tree[id].parent}, sibling = {get_sibling(id)}, degree = {get_num_child(id)}, depth = {tree[id].depth}, height = {tree[id].height}, {tree[id].type}")


        print('node 0: parent = -1, sibling = -1, degree = 0, depth = 0, height = 0, root')
            print('node {}: parent = -1, sibling = -1, degree = 1, depth = 0, height = {}, root'.format(i,height[i]))
            print('node {}: parent = -1, sibling = -1, degree = 2, depth = 0, height = {}, root'.format(i,height[i]))
            print('node {}: parent = {}, sibling = {}, degree = 1, depth = {}, height = {}, internal node'.format(i,par,sib,dep,h))
            print('node {}: parent = {}, sibling = {}, degree = 2, depth = {}, height = {}, internal node'.format(i,par,sib,dep,h))
        print('node {}: parent = {}, sibling = {}, degree = 0, depth = {}, height = {}, leaf'.format(i,par,sib,dep,h))
        

  print('node ',i,': parent = ',T[i].parent,', sibling = ',T[i].sibling,', degree = ',T[i].degree,', depth = ',T[i].depth,', height = ',T[i].height,', ',T[i].type,sep = '')


















    print("node", str(i)+":", "parent =", str(node_list[i].parent) + ",", "sibling =", str(getSibling(i)) + ",", "degree =", str(getDegree(i)) + ",", "depth =", str(getDepth(i)) + ",", "height =", str(setHeight(i)) + ",", getType(i))


  print(f" {i}", end="")
  print(f" {i}", end="")
  print(f" {i}", end="")


print("Preorder")
print()
print("Inorder")
print()
print("Postorder")
print()

print('Preorder')
print()
print('Inorder')
print()
print('Postorder')
print()

      print(order + "order\n" + walk(id, order))      
        print(" {}".format(p), end="")
        print(" {}".format(p), end="")
        print(" {}".format(p), end="")


    print("Preorder")
    print()
    print("Inorder")
    print()
    print("Postorder")
    print()


    print(['Preorder', 'Inorder', 'Postorder'][i])
    print('', *w[i])

        print('Preorder')
                print(' {0}'.format(node_id), end = '')
        print('')

        print('Inorder')
                print(' {0}'.format(node_id), end = '')
        print('')

        print('Postorder')
                print(' {0}'.format(node_id), end = '')
        print('')


print("Preorder")
print(" ", end="")
print(*ans_Pre, sep=" ")

print("Inorder")
print(" ", end="")
print(*ans_In, sep=" ")


print("Postorder")
print(" ", end="")
print(*ans_Post, sep=" ")



print("Preorder")
print(" " + " ".join(map(str, preorder(node_list, root))))
print("Inorder")
print(" " + " ".join(map(str, inorder(node_list, root))))
print("Postorder")
print(" " + " ".join(map(str, postorder(node_list, root))))


print("Preorder")
print(' ' + ' '.join(list(map(str, preoder))))


print("Inorder")
print(' ' + ' '.join(list(map(str, inorder))))


print("Postorder")
print(' ' + ' '.join(list(map(str, postorder))))



print("Preorder")
        print(f" {i}",end="")
print()


print("Inorder")
        print(f" {i}",end="")
print()


print("Postorder")
        print(f" {i}",end="")
print()

    print("Preorder\n" + tree_walk(i, "Preorder"))

    print("Inorder\n" + tree_walk(i, "Inorder"))
    
    print("Postorder\n" + tree_walk(i, "Postorder"))  

        print(" {}".format(id), end="")
        print(" {}".format(id), end="")
        print(" {}".format(id), end="")

    
print("Preorder")
print()


print("Inorder")
print()


print("Postorder")
print()

    print(' ' + str(u), end = '')
    print(' ' + str(u), end = '')
    print(' ' + str(u), end = '')


print('Preorder')
print('')


print('Inorder')
print('')


print('Postorder')
print('')

        print(index,end=" ")
        print(index)
        print(index,end=" ")
        print(index)
        print(index,end=" ")
        print(index)


print("Preorder")
print(end=" ")
print("Inorder")
print(end=" ")
print("Postorder")
print(end=" ")
print('Preorder')
print(' ',end='')
print(*preans)
print('Inorder')
print(' ',end='')
print(*inans)
print('Postorder')
print(' ',end='')
print(*postans)

print("Preorder")
print("", *pre_routes)

print("Inorder")
print("", *int_routes)

print("Postorder")
print("", *pos_routes)


print("Preorder")
    print(" %d"%i,end = "")
print()
print("Inorder")
    print(" %d"%i,end = "")
print()
print("Postorder")
    print(" %d"%i,end = "")
print()

    print(o)
    print()

    print(f' {node.id}', end='')
    print(f' {node.id}', end='')
    print(f' {node.id}', end='')



print('Preorder')
print('\nInorder')
print('\nPostorder')
print()


        print('Preorder')
                print(' {0}'.format(node_id), end = '')
        print('')

        print('Inorder')
                print(' {0}'.format(node_id), end = '')
        print('')

        print('Postorder')
                print(' {0}'.format(node_id), end = '')
        print('')


    print(" {}".format(i), end = "")
    print(" {}".format(i), end = "")
    print(" {}".format(i), end = "")


print("Preorder")
print()


print("Inorder")
print()


print("Postorder")
print()

print("Preorder")
print(preorder(r, T[:]))


print("Inorder")
print(inorder(r, T[:]))


print("Postorder")
print(postorder(r, T[:]))

    print(' ' + str(node), end = '')


    print(' ' + str(node), end = '')


    print(' ' + str(node), end = '')



print('Preorder')
print('')


print('Inorder')
print('')


print('Postorder')
print('')

    print(" ", end="")
    print(u, end="")
    print(" ", end="")
    print(u, end="")
    print(" ", end="")
    print(u, end="")



print("Preorder")
print("")
print("Inorder")
print("")
print("Postorder")
print("")


print("Preorder"),  walk(T, root_id, "pre"),  print()
print("Inorder"),   walk(T, root_id, "in"),   print()
print("Postorder"), walk(T, root_id, "post"), print()

        print(' ' + str(self.nodes[node].id), end='')
        print(' ' + str(self.nodes[node].id), end='')
        print(' ' + str(self.nodes[node].id), end='')

    print("Preorder")
    print()
    print('Inorder')
    print()
    print('Postorder')
    print()

        print('node {0}: parent = {1}, sibling = {2}, degree = {3}, depth = {4}, height = {5}, {6}'.format(self.id, self.parent, self.brother, self.child, self.depth, self.height, self.type))

print("Preorder")
print(" " + " ".join(pre))

print("Inorder")
print(" " + " ".join(ino))

print("Postorder")
print(" " + " ".join(pos))


print("Preorder")
print("", *pre_ordered_node_list)
print("Inorder")
print("", *in_ordered_node_list)
print("Postorder")
print("", *post_ordered_node_list)


print("Preorder\n ", end="")
print(*preorder(root_node))
print("Inorder\n ", end="")
print(*inorder(root_node))
print("Postorder\n ", end="")
print(*postorder(root_node))

    print(" {}".format(i), end = "")
    print(" {}".format(i), end = "")
    print(" {}".format(i), end = "")
    
print('Preorder')
print()


print('Inorder')
print()


print('Postorder')
print()


        print(' {}'.format(current_node.node_id), end='')


        print(' {}'.format(current_node.node_id), end='')


        print(' {}'.format(current_node.node_id), end='')

    
    print('Preorder')
    print('')


    print('Inorder')
    print('')


    print('Postorder')
    print('')

        print("",self.node_id, end="")
        print("",self.node_id, end="")
        print("",self.node_id, end="")


print("Preorder")
print("")


print("Inorder")
print("")


print("Postorder")
print("")

    print(' ', i, sep = '', end = '')
    print(' ', i, sep = '', end = '')
    print(' ', i, sep = '', end = '')
     
print('Preorder')
print()
 
print('Inorder')
print()
 
print('Postorder')
print()

    print(" {}".format(i), end = "")
    print(" {}".format(i), end = "")
    print(" {}".format(i), end = "")


print("Preorder")
print()
  
print("Inorder")
print()
  
print("Postorder")
print()

    print("Preorder")
    print(" " + " ".join(result))


    print("Inorder")
    print(" " + " ".join(result))


    print("Postorder")
    print(" " + " ".join(result))


    print(" " + str(u), end="")
    print(" " + str(u), end="")
    print(" " + str(u), end="")
    
    
    
    print("Preorder")
    print()
        
    print("Inorder")
    print()
    
    print("Postorder")
    print()
    

    print(f" {tree[id].id}", end="")
    print(f" {tree[id].id}", end="")
    print(f" {tree[id].id}", end="")
print("Preorder")
print("\nInorder")
print("\nPostorder")
print()


print('Preorder');p(r)
print('\nInorder');i(r)
print('\nPostorder');o(r)
print()


    print('Preorder')
        print(" {}".format(node), end="")
    print()
    print('Inorder')
        print(" {}".format(node), end="")
    print()
    print('Postorder')
        print(" {}".format(node), end="")
    print()


    print(" " + str(i), end ="")
    print(" " + str(i), end ="")
    print(" " + str(i), end ="")
    
    
        print("Preorder")
        print()
        print("Inorder")
        print()
        print("Postorder")
        print()

    print(' {}'.format(i), end='')
    print(' {}'.format(i), end='')
    print(' {}'.format(i), end='')

print('Preorder')
print()
print('Inorder')
print()
print('Postorder')
print()        



    print("Preorder")
    print("", " ".join([str(i) for i in pre_lst]))
    print("Inorder")
    print("", " ".join([str(i) for i in in_lst]))
    print("Postorder")
    print("", " ".join([str(i) for i in post_lst]))


print('Preorder')
print(' ', end='')
print(*order)
print('Inorder')
print(' ', end='')
print(*order)
print('Postorder')
print(' ', end='')
print(*order)


        print('Preorder')
        print()

        print('Inorder')
        print()

        print('Postorder')
        print()


        print(' {}'.format(self.no), end='')
        print(' {}'.format(self.no), end='')
        print(' {}'.format(self.no), end='')



print('Preorder')
print(' ' + ' '.join(out_list))


print('Inorder')
print(' ' + ' '.join(out_list))


print('Postorder')
print(' ' + ' '.join(out_list))


    print(" ", end="")
        print(x, end=" ")
    print(a[-1])



print("Preorder")

print("Inorder")

print("Postorder")
    print(' ' + str(id), end='')
    print(' ' + str(id), end='')
    print(' ' + str(id), end='')


print('Preorder')
print('')
print('Inorder')
print('')
print('Postorder')
print('')




print("Preorder")
print(" "+" ".join(map(str, preorder_list)))
print("Inorder")
print(" "+" ".join(map(str, inorder_list)))
print("Postorder")
print(" "+" ".join(map(str, postorder_list)))

	print(' ' + str(u), end='')
	print(' ' + str(u), end='')
	print(' ' + str(u), end='')

print('Preorder')
print()
print('Inorder')
print()
print('Postorder')
print()


    print(' %d' % u, end='')
    print(' %d' % u, end='') 
    print(' %d' % u, end='') 



print('Preorder')
print()
print('Inorder')
print()
print('Postorder')
print()

print("Preorder")
print(root.preo())
print("Inorder")
print(root.ino())
print("Postorder")
print(root.posto())

            print("Preorder", end="\n ")
            print(*A, sep=" ")
            print("Inorder", end="\n ")
            print(*B, sep=" ")
            print("Postorder", end="\n ")
            print(*C, sep=" ")

    print('', u, end='')
    print('', u, end='')
    print('', u, end='')

print('Preorder')
print('\nInorder')
print('\nPostorder')
print()

    print(f" {id}", end="")
    print(f" {id}", end="")
    print(f" {id}", end="")
    
    
print("Preorder")
print("")
print("Inorder")
print("")
print("Postorder")
print("")

    print(' ' + str(i), end = '') ##왼쪽 끝가지 간 후 print (더이상 왼쪽으로 갈 수 없을때 print)
        print('Preorder')
        print()
        print('Inorder')
        print()
        print('Postorder')
        print()

print("Preorder")
print(" " + " ".join(list_preParse))


print("Inorder")
print(" " + " ".join(list_inParse))
print("Postorder")
print(" " + " ".join(list_postParse))


  print(' '+ str(i), end="")
  print(' '+ str(i), end="")
  print(' '+ str(i), end="")

    print("Preorder")
    print()
    print("Inorder")
    print()
    print("Postorder")
    print()


    print(' {}'.format(n), end='')
    print(' {}'.format(n), end='')
    print(' {}'.format(n), end='')
    

print('Preorder')
print()
print('Inorder')
print()
print('Postorder')
print()

print(*ans)


print(' '.join(map(str, postorder)))

    print(*c)


print(*walked)



print(*t[::-1])

print(*Postorder_list, sep=" ")

    

    



print(*post_list)

print(*ans)

print(" ".join(postorder))

print(" ".join(map(str, ans)))

print(' '.join(str(post) for post in postOrder))



print(" ".join(map(str, ans)))


print(*postorder_elements)

    print(" ".join(ans))


print(*ans)

print(*get_postorder(PRE, IN))

print(' '.join(t))

print(" ".join(map(str,post)))

print(*post_order)

    print(" ".join(map(str, POST)))


    print(*get_postorder(preorder, inorder))

    print(*getPostorder(preorder, inorder))

    print(' '.join(L))

print(*get_postorder(pretree, inotree))


    print(" ".join([str(x) for x in result]))

print(*postorder(pre_tree[0]))

    print(" ".join([str(n) for n in tree.postorder()]))


print(" ".join(post))

        print(postorder[i], end='')
    print()

print(*o_ary)


        print(x, end=" ")
    print(a[-1])


print(post_order(root))

    print(' '.join([str(v) for v in post_order]))


print(ans[:-1])

print(*a)

print(" ".join(list(map(str,post_order))))

print(' '.join(map(str, postorder)))

    print(" ".join(map(str, postorder)))

print(' '.join(map(str, postorder)))

print(*posto)


print(*res)

print(' '.join(ans))




print(reconstruction(0, n).strip())


print(' '.join(map(str, postorder)))

print(*d)


print(*postorderList)


    print(' '.join([str(t) for t in recover(pre, ino)]))

print(" ".join(postorder(pre,inor)))

print(*answer)


print(" ".join(map(str, postorder)))

print(" ".join(post))

    print(f' {c_n.key}', end='')

    print(f' {c_n.key}', end='')
            print()
            print()

        print('', *t)
                print('', i[0], end='')
        print()

    print(' ' + str(u['key']), end='')
    print(' ' + str(u['key']), end='')
        print('')
        print('')

        print(" "+" ".join(inorder))
        print(" "+" ".join(preorder))

                print(" {}".format(x.key), end="")
                print(" {}".format(x.key), end="")
            print()
            print()
    print(f' {node.key}', end="")  
    print(f' {node.key}', end="")
            print()
            print()

            print(f' {node.key}', end='')
            print(f' {node.key}', end='')
        print()
        print()


    print(f' {root.key}', end='')
    print(f' {root.key}', end='')
        print()
        print()


        print(' ',end='')
        print(*inorder)
        print(' ',end='')
        print(*preorder)
        print(' ' + ' '.join(map(str, Inorder)))
        print(' ' + ' '.join(map(str, Preorder)))


    print()
    print()
    
        print(inorder(root))
        print(preorder(root))
        print(in_order(root))
        print(pre_order(root))

        print(inorder(root))
        print(preorder(root))

        print(inorder(root)); print(preorder(root))

        print(inorder(root))
        print(preorder(root))
        print(inorder(root))
        print(preorder(root))
        print(' '+' '.join(inorder_list))
        print(' '+' '.join(preorder_list))

            print("", *BST.print_inorder())
            print("", *BST.print_preorder())

        print("", *t.inorder())
        print("", *t.preorder())


        print(inorder(root))
        print(preorder(root))




        print(inorder(root))
        print(preorder(root))


        print(inorder(root))
        print(preorder(root))

  print()

  print()


        print(inorder(root))
        print(preorder(root))


        print(" " + " ".join(map(str, self._preorder(self.root))))

        print(" " + " ".join(map(str, self._inorder(self.root))))


            print('', *tree_.root.walk([], 1))
            print('', *tree_.root.walk([], 0))

            print(' ' + ' '.join(map(str, Ans_in)))
            print(' ' + ' '.join(map(str, Ans_pre)))

            print('', *tree.root.walk([], 1))
            print('', *tree.root.walk([], 0))


        print(f" {i}",end="")
        print(f" {i}",end="")
            print()
            print()

    print(" {}".format(node.data))
    print(" {}".format(node.data))
            print("\n")
            print("\n")

    print(" " + " ".join([str(val) for val in tree.inorder_walk()]))
    print(" " + " ".join([str(val) for val in tree.preoder_walk()]))



print("\n".join(output))                

        print(f' {node.key}', end='')
        print(f' {node.key}', end='')
    print()
    print()
  
  
  
        print("", *res)
        print("", *res)


        print(' ' + ' '.join(map(str, self.inorder)))
        print(' ' + ' '.join(map(str, self.preorder)))



                
                print("", *btp_vlist)


            print(" ", end="")
            print(*ino)
            print(" ", end="")
            print(*preo)
            print("", *inp)
            print("", *prp)
        print(" ", end="")
        print(*In_result)
        print(" ", end="")
        print(*Pre_result)


        print('', *(self.preorder_key))

        print('', *(self.inorder_key))

        print(T.to_string("in"))
        print(T.to_string("pre"))
        print("yes" if T.find(int(command[1])) else "no")

        print(' {}'.format(self.value), end='')
        print(' {}'.format(self.value), end='')
            print()
            print()

        
        print("", *in_order)
        print("", *pre_order)



    print(" " + " ".join(map(str, inorder[:-1])))


    print(" " + " ".join(map(str, preorder[1:])))


        print(" ",end="")
        print(*ans)
        print(" ",end="")
        print(*ans)

        print(inorder(root))
        print(preorder(root))


    print(f' {str(node.key)}', end='')

    print(f' {str(node.key)}', end='')
            print('')
            print('')


        print('',' '.join(map(str, tmp)))
        print('',' '.join(map(str, tmp_)))

    print(' ' + str(u['key']), end='')
    print(' ' + str(u['key']), end='')
            print('yes')
            print('no')
        print('')
        print('')

                print('yes')
        print('', *t)
                print('', i[0], end='')
        print()

                print(" {}".format(x.key), end="")
                print(" {}".format(x.key), end="")
                print("yes")
                print("no")
            print()
            print()


            print("yes")
        print("no")

        print(" "+" ".join(inorder))
        print(" "+" ".join(preorder))

        print(" ",end ="")
        print(*inorder(root,[]))
        print(" ",end ="")
        print(*preorder(root,[]))
            print("yes")
            print('no')

            print(f' {node.key}', end='')
            print(f' {node.key}', end='')
            print('yes')
            print('no')
        print()
        print()


        print("no")
        print("yes")
        print(' ' + ' '.join(map(str, Inorder)))
        print(' ' + ' '.join(map(str, Preorder)))
        print("no")
        print("yes")
        print(' ',end='')
        print(*inorder)
        print(' ',end='')
        print(*preorder)
        print(f' {node.key}', end='')
        print(f' {node.key}', end='')
            print()
            print()
                print('yes')
                print('no')


        print("", *t.inorder())
        print("", *t.preorder())
        print("yes" if res else "no")


    print()
    print() 
        
            print("yes")
    print("no")
    
            print("", *BST.print_inorder())
            print("", *BST.print_preorder())
                print("no")
                print("yes")

      print('yes')
  print('no')

  print()

  print()


  print("yes" if node else "no")

    print(walk(root, order))

            print("yes")
    print("no")
        
        print(inorder(root))
        print(preorder(root))
        print(find(int(e[5:])))
        print(inorder(root))
        print(preorder(root))

            print("yes")
    print("no")
        
        print(inorder(root))
        print(preorder(root))
            print("yes")
    print("no")
        
        print(inorder(root))
        print(preorder(root))
        print(" " + " ".join(map(str, self._preorder(self.root))))

        print(" " + " ".join(map(str, self._inorder(self.root))))

            print("yes")
            print("no")


            print('yes')
    print('no')
    

        print(' '+' '.join(inorder_list))
        print(' '+' '.join(preorder_list))

        print('yes' if find(int(e[5:])) else 'no')
        print(in_order(root))
        print(pre_order(root))

            print("no")
            print("yes")
        print(inorder(root))
        print(preorder(root))

        print(f" {i}",end="")
        print(f" {i}",end="")
            print("yes") if find(treeDict,i[1]) == True else print("no")
            print()
            print()

        print(['yes', 'no'][find(int(line[1]))])
        print(inorder(root))
        print(preorder(root))

            print('yes' if tree.find(int(cmd[1])) else 'no')
            print('', *tree.walk(1))
            print('', *tree.walk(0))

                print("yes")
                print("no")
            print(f' {" ".join(map(str, bst.inorder(bst.root)))}')
            print(f' {" ".join(map(str, bst.preorder(bst.root)))}')


        print(" " + " ".join(map(str, self.result)))
        print(" " + " ".join(map(str, self.result)))
        print("yes" if tree.find(int(com[1])) else "no")
        print(f' {node.key}', end='')
        print(f' {node.key}', end='')
    print()
    print()
  
  
    print(t)

            print("no\n")
                print("yes\n")
        print("no\n")
    print(" {}".format(node.data))
    print(" {}".format(node.data))
            print("\n")
            print("\n")

            print(find(D, z, root))
            print(' ' + ' '.join(map(str, Ans_in)))
            print(' ' + ' '.join(map(str, Ans_pre)))


print("\n".join(output))    

    print(" " + " ".join([str(val) for val in tree.inorder_walk()]))
    print(" " + " ".join([str(val) for val in tree.preoder_walk()]))


        print("yes")
        print("no")


            print(" ", end="")
            print(*ino)
            print(" ", end="")
            print(*preo)

                print("yes" if T.find(k) else "no")
    print("yes" if ret else "no")
    print(" " + " ".join(map(str, S1)))
    print(" " + " ".join(map(str, S2)))
    

        print(" ", end="")
        print(*In_result)
        print(" ", end="")
        print(*Pre_result)

        print(BST.find(int(method[1])))


            print('yes')
                print('no')
                print('no')
    print(' ' + str(num), end='')
    print(' ' + str(num), end='')
        print()
        print()
            print(f" {root.key}", end="")
            print(f" {root.key}", end="")
                print("yes")
                print("no")
            print()
            print()

        print(' {}'.format(self.value), end='')
        print(' {}'.format(self.value), end='')
                print('yes')
                print('no')
            print()
            print()

        print('', *(self.preorder_key))

        print('', *(self.inorder_key))

            print('yes' if tree.has(key) else 'no')

            print("yes")
            print("no")
        print(inorder(root))
        print(preorder(root))


    print(f' {str(node.key)}', end='')

    print(f' {str(node.key)}', end='')
            print(find(root_node, int(line[1])))
            print('')
            print('')


            print("yes")
            print("no")
    
        
        print("", *in_order)
        print("", *pre_order)


        print(find(int(l[5:]), root))
            print(rec(root, i))

    print(" ".join(map(str,ino)))
    print(" ".join(map(str,pre)))

            print(find(int(cmds[i][5:]),root))
        print(find(int(l[5:]), root))
            print(rec(root, i))



        print('yes' if x else 'no')
        print('',' '.join(map(str, self.root.inwalk())))
        print('',' '.join(map(str, self.root.prewalk())))
    
            print('yes')
    print('no')


        print('',' '.join(map(str, tmp)))
        print('',' '.join(map(str, tmp_)))

        print('yes')
        print('no')

        print('', *ino)
        print('', *preo)
            print(" " + " ".join(map(str, inorder)))
            print(" " + " ".join(map(str, preorder)))
                print('yes')
                print('no')


            print("", *inp)
            print("", *prp)
                print("yes")
                print("no")
                    print('yes')
        print('\n', *w)

                print(" {}".format(x.key), end="")
                print(" {}".format(x.key), end="")
                print("yes")
                print("no")
            print()
            print()


            print("yes")
        print("no")

        print(" "+" ".join(inorder))
        print(" "+" ".join(preorder))

        print("no")
        print("yes")
        print(' ' + ' '.join(map(str, Inorder)))
        print(' ' + ' '.join(map(str, Preorder)))

        print(f' {node.key}', end='')
        print(f' {node.key}', end='')
            print()
            print()
                print('yes')
                print('no')
        print("", *t.inorder())
        print("", *t.preorder())
        print("yes" if res else "no")
    print()
    print() 
        
            print("yes")
    print("no")

            print("", *BST.print_inorder())
            print("", *BST.print_preorder())
                print("no")
                print("yes")
  print("yes" if node else "no")

    print(walk(root, order))

        print(" " + " ".join(map(str, self._preorder(self.root))))

        print(" " + " ".join(map(str, self._inorder(self.root))))

            print("yes")
            print("no")
        print('yes' if find(int(e[5:])) else 'no')
        print(in_order(root))
        print(pre_order(root))

            print("no")
            print("yes")
        print(inorder(root))
        print(preorder(root))


            print('yes')
    print('no')
    
    
        print(' '+' '.join(inorder_list))
        print(' '+' '.join(preorder_list))

                print("yes")
                print("no")
            print(f' {" ".join(map(str, bst.inorder(bst.root)))}')
            print(f' {" ".join(map(str, bst.preorder(bst.root)))}')
        print(" " + " ".join(map(str, self.result)))
        print(" " + " ".join(map(str, self.result)))
        print("yes" if tree.find(int(com[1])) else "no")
          print('Check:', self.key, ': left key is invalid:', self.left.key)
          print('Check:', self.key, ': right key is invalid:', self.right.key)
  print('yes' if found else 'no')

  print()

  print()


            print("no\n")
                print("yes\n")
        print("no\n")
    print(" {}".format(node.data))
    print(" {}".format(node.data))
            print("\n")
            print("\n")


print("\n".join(output))    

    print(" " + " ".join([str(val) for val in tree.inorder_walk()]))
    print(" " + " ".join([str(val) for val in tree.preoder_walk()]))


        print("yes")
        print("no")


        print('yes' if f else 'no')
        print(' {}'.format(self.value), end='')
        print(' {}'.format(self.value), end='')
                print('yes')
                print('no')
            print()
            print()

        print('yes' if f else 'no')
        print('', *(self.preorder_key))

        print('', *(self.inorder_key))

            print('yes' if tree.has(key) else 'no')

        print(['yes', 'no'][tree_find(int(command[5:]))])
        print(tree_inorder(tree_root))
        print(tree_preorder(tree_root))


    print(f' {str(node.key)}', end='')

    print(f' {str(node.key)}', end='')
    print('')
    print('')


            print(find(root_node, int(line[1])))
            print("yes")
            print("no")
        print(inorder(root))
        print(preorder(root))


            print(find(D, z, root))
            print(' ' + ' '.join(map(str, Ans_in)))
            print(' ' + ' '.join(map(str, Ans_pre)))

        print('',' '.join(map(str, self.root.inwalk())))
        print('',' '.join(map(str, self.root.prewalk())))
    
        print('yes' if tree.find(int(line.split()[1])) else 'no')
            print(" " + " ".join(map(str, inorder)))
            print(" " + " ".join(map(str, preorder)))
                print('yes')
                print('no')
        print('',' '.join(map(str, self.root.inwalk())))
        print('',' '.join(map(str, self.root.prewalk())))
    
        print('yes' if tree.find(int(line.split()[1])) else 'no')
    print(''.join(' ' + str(key) for key in inorder(root)))
    print(''.join(' ' + str(key) for key in preorder(root)))


        print('yes' if find(root, int(args[0])) else 'no')
            print("", *inp)
            print("", *prp)
                print("yes")
                print("no")
            print("yes")
            print("no")
    
        
        print("", *ITW)
        print("", *PTW)
    

        print(""," ".join([str(sss) for sss in ss]))
        print(""," ".join([str(sss) for sss in ss]))
            print("yes")
            print("no")
        print(" ".join([str(jj) for jj in t]))
    print("yes" if find(key) else "no")
    print("",*in_l)
    print("",*pre_l)
            print("yes")
    print("no")



    print(" " + " ".join(map(str, inorder[:-1])))


    print(" " + " ".join(map(str, preorder[1:])))


            print("yes")
            print("no")
    
        
        print("", *ITW)
        print("", *PTW)
    


            print('yes')
        print('no')

        print(out)
        print(out)



        print('', *inorder)
        print('', *preorder)

                print('yes')
                print('no')
    
    print(out)

        print("",*in_l)
        print("",*pre_l)
            print(node.key, end = " ", file = self.output)
            print(node.key, end = " ", file = self.output)
        print(self.find(key))

        print(" ", end = "")
        print((b.ini_print_inorder())[:-1])
        print(" ", end = "")
        print(b.ini_print_preorder()[:-1])
        print('',*Inorder(root))
        print('',*Preorder(root))
            print("yes")
            print("no")
            print(end=" ")
            print(*result)

            print('no')
            print('yes')  
        print('', *In)
        print('', *Pre)

            print('yes')
            print('no')
        print("", *in_order)
        print("", *pre_order)

    print(" %d" % node.data,end="")
    print(" %d" % node.data,end="")
            print()
            print()
            print("yes" if ans!=None else "no")
        print(' ' + str(u['key']), end='')
        print(' ' + str(u['key']), end='')
                print('yes')
                print('no')
            print('')
            print('')
    print(' ' + str(u['key']), end='')
    print(' ' + str(u['key']), end='')
            print('yes')
            print('no')
        print('')
        print('')
                print("yes")
                print("no")
            print(' {}'.format(' '.join([str(n) for n in tree.inorder()])))
            print(' {}'.format(' '.join([str(n) for n in tree.preorder()])))
            print('no')
            print('yes')
        print(inorder(T.root))
        print(preorder(T.root))

        print(" " + " ".join(map(str, self.root.inorder())))
        print(" " + " ".join(map(str, self.root.preorder())))


                print("no")
                print("yes")
            print("yes")
            print("no")

        print(" ",end = "")
        print(*tree.inorder_ans)
        print(" ",end = "")
        print(*tree.preorder_ans)


        print('')
        print('')
            print('yes')
            print('no')
        print(f' {node.key}', end = '')
        print(f' {node.key}', end = '')
                print("yes")
                print("no")
            print(" " + " ".join(str(key) for key in inorder_keys))
            print(" " + " ".join(str(key) for key in preorder_keys))

        print(f' {node.key}', end='')
        print(f' {node.key}', end='')
            print()
            print()
                print('yes')
                print('no')
        print("no")
        print("yes")
        print(" "+" ".join(inorder))
        print(" "+" ".join(preorder))

                    print('yes')
        print('\n', *w)

          print('Check:', self.key, ': left key is invalid:', self.left.key)
          print('Check:', self.key, ': right key is invalid:', self.right.key)
  print()

  print()


    print('yes' if find(tree, int(toks[1])) else 'no')
        print("yes" if treap.find(key) else "no")
    print()
    print() 
        
            print("yes")
    print("no")

            print("", *Tr.print_inorder())
            print("", *Tr.print_preorder())
                print("no")
                print("yes")
        print("", *inorder_tree)
        print("", *preorder_tree)


            print("yes")
            print("no")

        print(find(node,int(q[1])))
        print(" "+" ".join(map(str, sorted(values))))
        print(" "+" ".join(map(str, values)))
        print(ans[i])

        print("", *inorder_tree)
        print("", *preorder_tree)


                print("yes")
                print("no")
            print("no\n")
                print("yes\n")
        print("no\n")
    print(" {}".format(node.key))
    print(" {}".format(node.key))
            print("\n")
            print("\n")

            
            print("", *btp_vlist)

                print("yes")
                print("no")
        
    print(i)

            print('no')
            print('yes')  
        print('', *In)
        print('', *Pre)

            print('no')
            print('yes')
        print(inorder(T.root))
        print(preorder(T.root))


        print(' ', end='')
        print(*node_path_list)

        print(' ', end='')
        print(*node_path_list)

            print('yes')
            print('no')
    print(' '.join(inorder))
    print(' '.join(preorder))
        print('yes' if k in tr else 'no')
            print("yes" if find(treap, key) else "no")
            print('', *log)
            print('', *log)

                print('yes')
                print('no')
            print('', *inout)
            print('', *preout)


        print(" ".join(answer))


        print(" ".join(answer))


                print("yes")
                print("no")
            print(" ", end="")
            print(*inans)
            print(" ", end="")
            print(*preans)
                print("no")
                print("yes")

        print('', *inorder)
        print('', *preorder)

                print('yes')
                print('no')
            print(" ", end="")
            print(*inans)
            print(" ", end="")
            print(*preans)
                print("no")
                print("yes")
            print(" ", end="")
            print(*inolder_result)
            print(" ", end="")
            print(*preolder_result)

                print("no")
                print("yes")
            print("yes")
            print("no")
        print(" ", end="")
        print(*tp.inorder_tree_walk())
        print(" ", end="")
        print(*tp.preorder_tree_walk())

            print("yes")
            print("no")
        print(" ",end="")
        print(*order[0])
        print(" ",end="")
        print(*order[1])

        print(" " + " ".join(list(map(str, inorder(root)))))
        print(" " + " ".join(list(map(str, preorder(root)))))
            print(find(root, m))
        print(f' {p.key}',end='')
        print(f' {p.key}',end='')
        print()
        print()


            
        print("no") if T.find(int(order[1]))[0] is None else print("yes")
        print(' {}'.format(inorder_str))
        print(' {}'.format(preorder_str))
                print('yes')
                print('no')
            print("yes")
            print("no")
        print(inorder(node))
        print(preorder(node))



        print(" ", end="")
        print(*ans)

        

        print(" ", end="")
        print(*ans)


        print(find(root,int(x)))
            print('', *result)
            
            print('', *result)

                print('yes')
                print('no')

            print("yes")
            print("no")
            print(end=" ")
            print(*result)

        print(' ' + print_inorder(tree).strip())
        print(' ' + print_preorder(tree).strip())
        print('yes' if Find(tree,int(ins[1])) else 'no')
            print()
            print('', ' '.join(map(str, self.root.inorder())))
            print('', ' '.join(map(str, self.root.preorder())))

            print("yes")
            print("no")
    print(" %d" % node.data,end="")
    print(" %d" % node.data,end="")
            print()
            print()
            print("yes" if ans!=None else "no")
        print('yes' if find(t, int(cmd[1])) else 'no')
        print('', *t.inorder())
        print('', *t.preorder())


    print(f' {node_.key}', end='')
    print(f' {node_.key}', end='')
    print(f' {node_.key}', end='')


    print()
    print()


                print("yes")
                print("no")
        print(" " + " ".join(map(str, self._inorder(root))))
        print(" " + " ".join(map(str, self._preorder(root))))

                    print("yes")
                    print("no")
    print("no" if node==None else "yes")
    print(" "+" ".join(list(map(lambda x:str(x.val), self.inorder))))
    print(" "+" ".join(list(map(lambda x:str(x.val), self.preorder))))
        print('yes' if find(t, int(v[0])) else 'no')
            print(' ', end='')
            print(*ki)
            print()

            print(' ', end='')
            print(*kp)
            print()


            print(" ", end="")
            print(*inans)
            print(" ", end="")
            print(*preans)
                print("no")
                print("yes")
    print(f" {root.data}", end="")
    print(f" {root.data}", end="")
        print("no")
            print("yes")
        print("no")
        print("")
        print("")


                print("yes")
                print("no")
            print("".join(map(lambda elm: " " + str(elm), treap.in_order())))
            print("".join(map(lambda elm: " " + str(elm), treap.pre_order())))


    print(" %d" % u.key, end="")
    print(" %d" % u.key, end="")
            print("no")
            print("yes")
        print()
        print()
        print(' ' + ' '.join(map(str, self.inorder)))
        print(' ' + ' '.join(map(str, self.preorder)))


        print('yes' if T.find(s[1]) else 'no')
        print(' ' + ' '.join(map(str, self.inorder)))
        print(' ' + ' '.join(map(str, self.preorder)))


        print('yes' if T.find(s[1]) else 'no')
    print('', t.key, end='')
    print('', t.key, end='')
        print('yes' if find(root, int(op[1])) else 'no')
        print()
        print()


        print(f" {root.key}", end="")
        print(f" {root.key}", end="")
                print("yes")
                print("no")

            print()
            print()



    print(" {}".format(t.key), end='')

    print(" {}".format(t.key), end='')

    print("\n", end='')
    print("\n", end='')
            print("yes")
            print("no")

        print(f" {t['key']}", end="")

        print(f" {t['key']}", end="")

                print("yes")
                print("no")

            print("")
            print("")
            
        


    

        print(f" {root.key}", end="")
        print(f" {root.key}", end="")
                print("yes")
                print("no")

            print()
            print()


                print("yes")
                print("no")
            print("no")
            print(root.ino())
            print(root.preo())
            print("None")
        print("yes")
        print("no")
    print('')
    print('')

    print(f' {t.key}', end='')
    print(f' {t.key}', end='')
        print(f' {t.key}', end='')
        print(f' {t.key}', end='')
            print('yes')
            print('no')
        print()
        print()


    print('node ' + str(n) + (':'), end = ' ')
    print('key = ' + str(key),end = ', ' )
        print('parent key = ' + str(parentkey), end = ', ')
        
        print('left key = ' + str(leftkey), end = ', ')
        
            print('right key = ' + str(rightkey), end = ', ')
            
    print()

        print("node {}: key = {},".format(i, heap[i-1]), end=" ")
            print("parent key = {},".format(heap[i//2-1]), end=" ")
            print("left key = {},".format(heap[2*i-1]), end=" ")
            print("right key = {},".format(heap[2*i+1-1]), end=" ")
        print()


    print(f'node {ni}: key = {heap[ni]}, ', end='')
        print(f'parent key = {heap[ni//2]}, ', end='')
        print(f'left key = {heap[ni*2]}, ', end='')
        print(f'right key = {heap[ni*2+1]}, ', end='')
    print()

        print(f"node {i+1}: key = {heap[i]}, ", end='')
        
            print(f"parent key = {heap[parent(i+1)-1]}, ", end='')
        
            print(f"left key = {heap[left(i+1)-1]}, ", end='')
        
            print(f"right key = {heap[right(i+1)-1]}, ", end='')
        
        print()

  print(f'node {i+1}: ' + ', '.join(attrs) + ', ')

    print(f'node {i}: key = {h[i]}, ', end='')
    print()

  print(f"node {i+1}: key = {heap[i]}, ", end="")
  print(f"parent key = {heap[(i-1)//2]}, " if i else "", end="")
  print(f"left key = {heap[2*i+1]}, " if 2*i+1 < N else "", end="")
  print(f"right key = {heap[2*i+2]}, " if 2*i+2 < N else "")


        print(f"node {node}: key = {key}, parent key = {parent},")
        print(f"node {node}: key = {key}, parent key = {parent}, left key = {left_key},")
        print(f"node {node}: key = {key}, left key = {left_key}, right key = {right_key},")
        print(f"node {node}: key = {key}, parent key = {parent}, left key = {left_key}, right key = {right_key},")



    print(f"node {i + 1}: ", f"key = {key}, ", parent, left, right)


  print(f'node {i+1}: key = {heap[i]}, ', end='')
  print(f'left key = {heap[2 * i + 1]}, ' if 2 * i + 1 < H else '', end = '')
  print(f'right key = {heap[2 * i + 2]}, ' if 2 * i + 2 < H else '')

    print(f'node {i+1}: key = {A[i]}, ', end = "")
    print(f'parent key = {A[(i-1)//2]}, 'if i else "", end = "")
    print(f'left key = {A[2*i+1]}, 'if 2*i+1<H else "", end = "")
    print(f'right key = {A[2*(i+1)]}, 'if 2*(i+1)<H else "")
    


    print(f"node {node}: key = {key}, ", end="")
        print(f"parent key = {parent_key}, ", end="")
        print(f"left key = {left_key}, ", end="")
        print(f"right key = {right_key}, ", end="")
    print("")


    print('node ' + str(i) + ': ',end = '')
    print('key = ' + str(A[i]) + ', ', end = '')
        print('parent key = ' + str(A[parent(i)]) + ', ', end = '')
        print('left key = ' + str(A[left(i)]) + ', ', end = '')
        print('right key = ' + str(A[right(i)]) + ', ', end = '')
    print('')

    print("node {}:".format(i+1),end=" ")
    print("key = {},".format(heap.key[i]),end=" ")
        print("parent key = {},".format(heap.parent[i]),end=" ")
        print("left key = {},".format(heap.child[i][0]),end=" ")
        print("right key = {},".format(heap.child[i][1]),end =" ")
    print()

    print(f"node {i}: key = {a[i]}, ", end="")
        print(f"parent key = {a[i//2]}, ", end="")
        print(f"left key = {a[i*2]}, ",end="")
        print(f"right key = {a[i*2+1]}, ", end="")
    print()


        print(node_info + ", ")
    print(p)

    print(ans)

    print(f"node {i+1}: key = {A[i]},", end="")
        print(f" parent key = {A[(i-1)//2]},", end="")
        print(f" left key = {A[2*i+1]},", end="")
        print(f" right key = {A[2*i+2]},", end="")
    print()


print("\n".join(output))

    print("node {0}: key = {1}, ".format(i+1, nodes[i].key), end="")
        print("parent key = {0}, ".format(nodes[i].parent), end="")
        print("left key = {0}, ".format(nodes[i].left), end="")
        print("right key = {0}, ".format(nodes[i].right), end="")
    print()

    print(f"node {i+1}: key = {n.key}, ", end = "")
    print()

        print(print_node(i, NODES))


    print(s)


    print('node {}: key = {}, '.format(i, key) + rel_nodes)

    print('node {0}: '.format(i), end = '')
    print('key = {0}, '.format(keys[i]), end = '')
        print('parent key = {0}, '.format(keys[i // 2]), end = '')
        print('left key = {0}, '.format(keys[left_index]), end = '')
        print('right key = {0}, '.format(keys[right_index]), end = '')
    print('')

    print(out_str)

    print(base + parent + left + right)

    print("node " + str(i) + ': key = ' + str(nodes[i-1]) + ', ',end = "")
        print("parent key = " + str(nodes[i//2 - 1]) + ", ",end = "")
        print("left key = " + str(nodes[i*2 - 1]) + ", ",end = "")
        print("right key = " + str(nodes[i*2]) + ", ",end = "")
    print("")

        print(ans)
        
        
            
        print('node {0}: key = {1}, '.format(i, data[i]), end='')
            print('parent key = {0}, '.format(data[i//2]), end='')
            print('left key = {0}, '.format(data[i*2]), end='')
            print('left key = {0}, right key = {1}, '.format(data[i*2], data[i*2+1]), end='')
        print('')


        print("node {}: key = {},{}{}{} ".format(node_index, key, parent, left, right))

        
    print("node {}: key = {}, " .format(i, heap[i]), end = '')
        print("parent key = {}, " .format(heap[i//2]), end = '')
        print("left key = {}, " .format(heap[i*2]), end ='')
        print("right key = {}, ".format(heap[i*2+1]), end='')
    print()

        print("node {}: key = {}, ".format(i+1, heap_array[i]), end='')
            print("parent key = {}, ".format(heap_array[(i-1)//2]), end='')
            print("left key = {}, ".format(heap_array[2*i+1]), end='')

            print("right key = {}, ".format(heap_array[2*i+2]), end='')
        print('')

    print('node ',i+1,':',sep = '',end = '')
    print(' key = ',data[i],',',sep = '',end = '')

        print(' parent key = ',data[(i-1)//2],',',sep = '',end = '')
    
        print(' left key = ',data[2*i+1],',',sep = '',end = '')
        print(' right key = ',data[2*(i+1)],',',sep = '',end = '')


    print(' ')

    print("node {}: key = {}, ".format(i, heap.heap[i]), end='')
        print("parent key = {}, ".format(heap.parent(i)), end='')
        print("left key = {}, ".format(heap.left(i)), end='')
        print("right key = {}, ".format(heap.right(i)), end='')
    print()

    print(ret)

    print(ans)
   

                print("node {}: key = {}, ".format(i+1, heap[i]))


        print("node {}: key = {}".format(node.id, node.key), end = "")
            print(", parent key = {}".format(node.parent.key), end = "")
            print(", left key = {}".format(node.left.key), end = "")
            print(", right key = {}".format(node.right.key), end = "")
        print(", ")

        print("{} ".format(" ".join(txts)))


        print(node + key + parent + left + right)


        print("node {}: key = {},".format(i, A[i]), end=" ")
            print("parent key = {},".format(A[parent(i)]), end=" ")
            print("left key = {},".format(A[left(i)]), end=" ")
            print("right key = {},".format(A[right(i)]), end=" ")
        print("")


    print(s)


 print(f'node {i}: key = {A[i]}, {f"parent key = {A[i//2]}, "if i>1 else""}{f"left key = {A[2*i]}, "if 2*i<H else""}{f"right key = {A[2*i+1]}, "if 2*i+1<H else""}')

        print(' '.join(output) + ' ')
    print(out)

    print("node {0:}: key = {1:}, ".format(i, a[i-1]), end = "")
        print("parent key = {0:}, ".format(a[i//2 - 1]), end = "")
        print("left key = {0:}, ".format(a[2*i - 1]), end = "")
        print("right key = {0:}, ".format(a[2*i]), end = "")
    print("")


        print(s)


    print(s)

    print('node %d: key = %d, '%(node, key), end='')
    print('')

    print(''.join(out_put))



            print('node {}: key = {}, '.format(node.id, node.key), end='')
                print('parent key = {}, '.format(node.parent_key), end='')
                print('left key = {}, '.format(node.left_key), end='')
                print('right key = {}, '.format(node.right_key), end='')
            print()


    print('node {}: key = {}, '.format(i,a[i-1]),end='')
        print('parent key = {}, '.format(a[parent(i)-1]),end='')
        print('left key = {}, '.format(a[left(i)-1]),end='')
        print('right key = {}, '.format(a[right(i)-1]),end='')
    print()


    print(s)
 
    print(make_row(id, heap))


    print("node {}: key = {}, ".format(ID,num) + p + l + r)


    print(s, ', ', sep = '')


    print()
        print( "node " + str(self.id) + ": key = " + str(self.key), end=", " )
            print( "parent key = " + str(self.pk), end = ", ")
            print( "left key = " + str(self.lk), end = ", ")
            print( "right key = " + str(self.rk) , end=", ")
        print()

                    print(", right key = "+str(plist[i+1][2*j+1])+", ")
                    print(", ")
	print(node)


    print(result)


print(" " + " ".join(map(str, A)))





print(' ' + ' '.join(map(str, A[1:])))

print('',*A)


print("", *A[1:])


    print(" " + " ".join(map(str, heap)))



print(" " + " ".join(list(map(str,arr))))




print("",*A[1:])    
    

        print(f' {A[i]}', end='')
    print()


print(*h)

    print(" ", end="")
    print(*data)


	print(f" {i}", end = "")
print()


    print(f" {a[i]}", end="")
print()

print(" ", end="")
print(*a)


        print(f' {h}', end='')
    print()

print(end=" ")
            print(heap[i])
      print(heap[i],end=" ")

    print("",A[i], end="")
print()

    print(f" {h}", end = "")
print()


print('', end=' ')
print(*heap)

print(""," ".join([str(-x) for x in H]))

print("", *[-x for x in H])

print("", *[-x for x in b])

print('', *[-x for x in H])


print('', *[-x for x in H])


print('', *[-x for x in H])

print('', *[-x for x in H])

print('', *[-x for x in H])


print('', *[-x for x in H])


    print('', *input_list)


print('', *[-x for x in H])

print("", *[-x for x in H])

    print(" {}".format(A[i]), end="")
        print()

    print(f' {A[i]}', end = "")
print()
    


print(''.join(map(lambda x: ' ' + str(x), build_max_heap(list(map(int, input().split()))))))

print("", *list(map(lambda x: -x, a)))


    print(' ' + ' '.join(map(str, array)))

print(' '+' '.join(map(str,A[1:])))

print(' '+' '.join(map(str,y[1:])))

print(' '+' '.join(map(str,A[1:])))


print(' '+' '.join(map(str,A[1:])))


print("", *heap)



print(' '+' '.join(map(str,A[1:])))

print('', ' '.join(map(str, A)))


print("", " ".join(map(str, L)))



print(' '+' '.join(list(map(str, a))))


print(" ",end="")
print(" ".join(map(str,A[1:])))

    
print(" " + " ".join(map(str, a[1:])))


print(" " + " ".join(map(str, tree[1:])))


print(" " + " ".join(map(str, tree[1:])))


print(" ", end = '')
print(' '.join(map(str, A)))

print(" " + " ".join([str(num) for num in A]))


    
print(" " + " ".join(map(str, b[1:])))

    
print(" " + " ".join(map(str, a[1:])))

print(' ' + ' '.join(map(str, A)))


print(" ",end="")
print(" ".join(map(str,A[1:])))


    
print(" " + " ".join(map(str, c[1:])))


print('',' '.join(map(str,A)))

print('',' '.join([str(s)for s in key]))

print(" " + " ".join(map(str, A[1:])))
    

print(" " + " ".join(map(str, Tree[1:])))


print(" " + " ".join(map(str, A[1:])))


print(' ' + ' '.join([str(v) for v in a[1:]]))


print(*ans, sep="\n")


    print(A[1])
        print(-1*heapq.heappop(A))
        print(x)

        print(-heappop(ans))
            print(-heappop(hq))


    print("\n".join(map(str, ans)))

        print(-heapq.heappop(pq))
        print(-heapq.heappop(q))
print("\n".join(map(str, S)))


    print(-heappop(heap))
        print(extractMax(heap))

        print(extractMax(S))
    
        print("insert xx または extract または end を入力してください")
    
            print(-heappop(Q))
        print(-heapq.heappop(heap_list))


        print(-heapq.heappop(h))


print("\n".join(map(str, ans)))

        print(*an,sep='\n')
print('\n'.join(map(str, ans)))


print("\n".join(map(str,result)))

        print(-e)
        print(-val)
        print(heapq.heappop(a) * (-1))

        print(-ret)
        print(heapq.heappop(a) * (-1))

            print(-heapq.heappop(key))
            print(extract())
        print(-val)
            print(-a)
        print(-heappop(hp))


        print(-heappop(pq))
            print(-heapq.heappop(a))

            print(-1 * heapq.heappop(heap))

    print(*res, sep = "\n")

        print(-heappop(heap))
        print(str(heapExtractMax(heap)))
        print(hq.heappop(a) * (-1))



        print(heapq.heappop(S) * (-1))
            print(-heapq.heappop(pq))
        print(hq.heappop(a) * (-1))


        print(-heappop(heap))

        print(-heapq.heappop(heap_data))
        print(-heappop(q))


        print(-heapq.heappop(A))



            print(-heappop(pri_que))
    print(-heappop(q))

        print(-heapq.heappop(l))
		print(-heappop(q))

        print(-1 * heappop(Q))


        print(-1 * heappop(Q))

print(*reverse_heap_sort(sorted(a)))

print(*a[1:])


    print(" ".join(map(str, An)))


print(*a)



print(*a[1:])

print(*listed_A)

    print(*solve(N,A))
    
print(*Ans)   


    print(*a_list)

    
    print(*a[1:])

    print(*A[1:])

    
    print(*a[1:])

    
    print(*a[1:])

        print(heapArray[i], end = " ")
    print(heapArray[-1])

    print(*P[1:])

print(*reverse_heap_sort(sorted(a)))


    print(*max_swap_heap[1:])



print(" ".join(map(str, A)))


    print(*result)


print(" ".join(map(str, s)))

	
print(" ".join(map(str, A[1:])))

    
    print(*A[1:])

print(*A[1:])

print(" ".join(map(str, ans)))
print(*A[1:])

print(*A[1:])


print(*A)


print(*A)


print(*A)


print(*ns[1:])


print(*A)



print(*A)



print(*keys)


print(*A)

print(*a[1:])


print(*a[1:])

print(*a[1:])



print(' '.join(map(str, B)))


print(*A)


print(" ".join(str(item) for item in S[1:n+1]))


print(*A[1:])


print(*A[1:])


print(*h_list[1:])


print(*A[1:])



print(*A[1:])

print(*A[1:])

    print(x, y)

    print(f'{result[0]:.10f} {result[1]:.10f}')


    print(x1 + ax * p, y1 + ay * p)

	print(ans.real, ans.imag)

        print(xp1+nx*bottom,yp1+ny*bottom)



        print(f'{point_p.x:.8f} {point_p.y:.8f}')


    print(f'{projected_point.x:.10f} {projected_point.y:.10f}')

    


    
    print(p1[0] + x, p1[1] +y) 


 


    print(f"{s:.10f} {t:.10f}")

    print(x,end=" ")
    print(y)
    

    print(ap.real, ap.imag)

    print(x+ans_x, y+ans_y)


        print(sx, y)
        print(x, sy)
        print(ans_x, ans_y)


        print("{:.10f} {:.10f}".format(*proj((px1, py1), (px2, py2), (x, y))))


    print(x1+dx*d, y1+dy*d)

        print(x_p1, y_p0)
        print(x_p0, y_p1)
        print(x, y)

        print(xx, yy)

    print(*L2[i])


	print(proj.real, proj.imag)

    print(*res)


        print(x1 + a[0] * t, y1 + a[1] * t)

    print('{:.10f} {:.10f}'.format(ans.x, ans.y))


    print(a+c*z,b+d*z)


    print(pt[i][0], pt[i][1])


    print(v1 + n * (n.dot(v)))


    print(v)


    print(a+c*z,b+d*z)


    print(ans[0],ans[1])
    print(a+c*z,b+d*z)


    print(f"{x_b} {y_b}")


    print(a+c*z,b+d*z)

    print(a+c*z,b+d*z)

    print(ansx,ansy)

        print(x, yp1)
        print(xp1, y)
        print(ans, p1p2slope*ans+b0)


    print(f"{x_b} {y_b}")

        print(x1,y[i])
        print(x[i],y1)
        print(px,py)

    print(*projection(x,y))

        print(f'{pp.real:.8f} {pp.imag:.8f}')

    print(f"{ansx:.8f} {ansy:.8f}")

        print(f"{s:.10f} {y1:.10f}")
        print(f"{x1:.10f} {t:.10f}")
        print(f"{(a * t + s - a * b) / (a**2 + 1):.10f} {(a**2 * t + a * s + b) / (a**2 + 1):.10f}")
    

    print(x, y)

    print("{0:.10f} {1:.10f}".format(xt,yt))

        print(x1,y[i])
        print(x[i],y1)
        print(px,py)

    print(a+c*z,b+d*z)

    print(o_p1 + p1_p.project_vector(p1_p2))

    print(a[0]*co+x1,a[1]*co+y1)

        print('%.8f'%ans_x, '%.8f'%ans_y)
    print('%.8f'%ans_x, '%.8f'%ans_y)


        print('{0:.10f} {1:.10f}'.format(v.x, v.y))

  print(a+c*z, b+d*z)



  print(a+c*z, b+d*z)



    print(str(result[i][0]) + ' ' + str(result[i][1]))


    print(ans[0]+p[0], ans[1]+p[1])
    

        print(x_p1 + p1p2[0] * r, y_p1 + p1p2[1] * r)


    print(x.x, x.y)








    print(ans[0], ans[1])

        print(projection.x, projection.y)


    print(x1+dx*d, y1+dy*d)

    print(vo + v2.project(v1))
    

        print('{:.10f}'.format(a),end=" ")
    print()

    print(*projection(p1, p2, p3))


    print(f"{x_b} {y_b}")

    print(reflection.real, reflection.imag)
 


        print(f'{point_r.x:.8f} {point_r.y:.8f}')


    print(ref_x, ref_y)

    print(f'{reflected_point[0]:.10f} {reflected_point[1]:.10f}')

    

        print(s,t)

        print(s,t)

        print(s,t)
    


    print(mx + x , my + y)


 


	print(f'{ans.real:.15f} {ans.imag:.15f}')

    print('{:.11f}'.format(2 * xp1 + 2 * x_1 * vector - xp0), '{:.11f}'.format(2 * yp1 + 2 * y_1 * vector - yp0))



    print("{0:.10f} {1:.10f}".format(xt,yt))

    print("{0:.10f} {1:.10f}".format(xt,yt))

        print("{:.10f} {:.10f}".format(*refl((x1, y1), (x2, y2), (x, y))))


        print("{:.10f} {:.10f}".format(*refl((x1, y1), (x2, y2), (x, y))))


        print("{:.10f} {:.10f}".format(*refl((x1, y1), (x2, y2), (x, y))))


        print(x_p0 + 2 * proj_v[0], y_p0 + 2 * proj_v[1])


    print(*res)


            print(xp + 2 * (x1 - xp), yp)
            print(xq, yq)

    print(p.real,p.imag)

    print(ref.real, ref.imag)

        print("%.16f %.16f" % reflection(((x0, y0), (x1, y1)), (x, y)))
    print(p.real,p.imag)

    print(x+ans_x, y+ans_y)
    print(a,b)

    print(rfx,rfy)

    print(*gm.reflect(seg1,(x,y)))


        print(-x[i],y[i])
        print(x[i],-y[i])
        print(s+(s-x[i]),-1/a * (s+(s-x[i])) + k)

        print("%.16f %.16f" % reflection(((x0, y0), (x1, y1)), (x, y)))
        print("%.16f %.16f" % reflection(((x0, y0), (x1, y1)), (x, y)))
		print("{:.8f} {:.8f}".format(p + (xp1 - p) * 2, q))
		print("{:.8f} {:.8f}".format(p + (x - p) * 2, q + (y - q) * 2))

        print(f'{pr.real:.8f} {pr.imag:.8f}')

    print(o_p - r_v.mul(2))

    print("{0:.10f} {1:.10f}".format(p1.real, p1.imag))

    print(isec[0]+c[0],isec[1]+c[1])

    print(*reflect(x,y))

    print(ans.real,ans.imag)

    print(x1 + bx + 2 * dx, y1 + by + 2 * dy)

    print(vo - rv.mul(2))
    

    print(*reflect(p1, p2, p3))


        print('{:.10f} {:.10f}'.format(cross.real, cross.imag))


    print(x, y)




    print(f"{x.x} {x.y}")

    print(reflection(p1, p2, p))

    print(o)

        print(*point.reflect(vector1))

        print(reflection.x, reflection.y)

        print("%.16f %.16f" % reflection(((x0, y0), (x1, y1)), (x, y)))
        print(x1 * 2 - x_i, y_i)

        print(x_i, y1 * 2 - y_i)

        
        print(q_x * 2 - x_i, q_y * 2 - y_i)


        print(-x[i],y[i])
        print(x[i],-y[i])
        print(s+(s-x[i]),-1/a * (s+(s-x[i])) + k)

        print(-x[i],y[i])
        print(x[i],-y[i])
        print(s+(s-x[i]),-1/a * (s+(s-x[i])) + k)

    print(p.real,p.imag)

        print('{0:.10f} {1:.10f}'.format(v.x, v.y))

  print(p.real, p.imag)

        print(-x, y)
        print(x, -y)
        print(ans_x + diff_x, ans_y + diff_y)


        print('{:.10f} {:.10f}'.format(*Reflection((x1,y1,x2,y2),(x3,y3))))

    
        print(*point.reflect(vector1))

    print('{:.10f} {:.10f}'.format(p_ref.x, p_ref.y))


    print(f'{ans[0]:.8f} {ans[1]:.8f}')
    
    print(p.real,p.imag)

    print(*L3[i])


    print(x.x, x.y)








    print(v1 + u)


    print(ans[0],ans[1])
    print('{:.13f} {:.13f}'.format(ans[0],ans[1]))

    print(x, y)


        print("%.16f %.16f" % reflection(((x0, y0), (x1, y1)), (x, y)))
    print(*reflection(x1, y1, x2, y2, x, y))


    print(f"{ansx:.8f} {ansy:.8f}")

        print('{:.10f} {:.10f}'.format(cross.real, cross.imag))


        print("{:.10f} {:.10f}".format(t.real, t.imag))


        print(orientation[result])
        

    print(ccw(vec_a, vec_b))


        print() 

        print("COUNTER_CLOCKWISE")
        print("CLOCKWISE")
            print("ONLINE_BACK")
            print("ONLINE_FRONT")
            print("ON_SEGMENT")






 


        print("COUNTER_CLOCKWISE")
        print("CLOCKWISE")
        print("ONLINE_BACK")
        print("ONLINE_FRONT")
        print("ON_SEGMENT")



    print(ccw(p0, p1, p2))

        print("COUNTER_CLOCKWISE")
        print("CLOCKWISE")
            print("ONLINE_BACK")
            print("ONLINE_FRONT")
            print("ON_SEGMENT")

            print('COUNTER_CLOCKWISE')
            print('CLOCKWISE')
            print('ONLINE_BACK')
            print('ONLINE_FRONT')
            print('ON_SEGMENT')

        print("COUNTER_CLOCKWISE")
        print("CLOCKWISE")
            print("ONLINE_BACK")
            print("ONLINE_FRONT")
            print("ON_SEGMENT")

            print("COUNTER_CLOCKWISE")
            print("CLOCKWISE")
                print("ONLINE_FRONT")
                print("ON_SEGMENT")
            print("ONLINE_BACK")
        print("COUNTER_CLOCKWISE")
        print("CLOCKWISE")
        print("ONLINE_BACK")
        print("ONLINE_FRONT")
        print("ON_SEGMENT")

        print('COUNTER_CLOCKWISE')
        print('CLOCKWISE')
        print('ONLINE_BACK')
        print('ONLINE_FRONT')
        print('ON_SEGMENT')


        print('COUNTER_CLOCKWISE')
        print('CLOCKWISE')
        print('ONLINE_BACK')
        print('ONLINE_FRONT')
        print('ON_SEGMENT')


            print('ONLINE_FRONT')
            print('CLOCKWISE')
            print('ON_SEGMENT')
            print('COUNTER_CLOCKWISE')
            print('ONLINE_BACK')


        print('CLOCKWISE')
        print('COUNTER_CLOCKWISE')
        print('ONLINE_BACK')
        print('ONLINE_FRONT')
        print('ON_SEGMENT')


            print("ONLINE_BACK")
                print("ON_SEGMENT")
                print("ONLINE_FRONT")
        print("CLOCKWISE")
        print("COUNTER_CLOCKWISE")

        print("COUNTER_CLOCKWISE")
        print("CLOCKWISE")
        print("ONLINE_BACK")
        print("ONLINE_FRONT")
        print("ON_SEGMENT")
    
    
    print(checkccw(AB,AP))

    print(ccw(p1, p2, p3))


    
    print(ans)



        print("COUNTER_CLOCKWISE")
        print("CLOCKWISE")
        print("ONLINE_BACK")
        print("ONLINE_FRONT")
        print("ON_SEGMENT")


        print("CLOCKWISE")
        print("COUNTER_CLOCKWISE")
        print("ONLINE_BACK")
        print("ONLINE_FRONT")
        print("ON_SEGMENT")


        print('COUNTER_CLOCKWISE')
        print('CLOCKWISE')
        print('ONLINE_BACK')
        print('ONLINE_FRONT')
        print('ON_SEGMENT')

        print('ONLINE_BACK')
        print('COUNTER_CLOCKWISE')
        print('CLOCKWISE')
            print('ONLINE_FRONT')
            print('ON_SEGMENT')
 

		print("ON_SEGMENT")
		print("ONLINE_BACK")
			print("ON_SEGMENT")
			print("ONLINE_FRONT")
		print("COUNTER_CLOCKWISE")
		print("CLOCKWISE")

            print('ON_SEGMENT')
            print('ONLINE_BACK')
            print('ONLINE_FRONT')
            print('COUNTER_CLOCKWISE')
            print('CLOCKWISE')

        print("COUNTER_CLOCKWISE")
        print("CLOCKWISE")
            print("ONLINE_BACK")
                print("ONLINE_FRONT")
                print("ON_SEGMENT")

            


        print("COUNTER_CLOCKWISE")
        print("CLOCKWISE")
        print("ONLINE_BACK")
        print("ONLINE_FRONT")
        print("ON_SEGMENT")

        print('ON_SEGMENT')
            print('ONLINE_FRONT')
            print('ON_SEGMENT')
        print('ONLINE_BACK')
        print('COUNTER_CLOCKWISE')
        print('CLOCKWISE')


        print(place)


  print(CCW[ccw(a,b,c)])


        print(pos.name)


    print(x+ans_x, y+ans_y)
    print(a,b)
                print("ON_SEGMENT")
                print("ONLINE_FRONT")
            print("ONLINE_BACK")
        print("COUNTER_CLOCKWISE")
        print("CLOCKWISE")


            print("ONLINE_BACK")
                print("ONLINE_FRONT")
                print("ON_SEGMENT")
        print("CLOCKWISE")
        print("COUNTER_CLOCKWISE")


        print("COUNTER_CLOCKWISE")
        print("CLOCKWISE")
        print("ONLINE_BACK")
        print("ONLINE_FRONT")
        print("ON_SEGMENT")




    print(text[clockwise(v1,v2)])
    
    

        print("COUNTER_CLOCKWISE")
        print("CLOCKWISE")
        print("ONLINE_BACK")
        print("ONLINE_FRONT")
        print("ON_SEGMENT")

    print(ccw(v1,p))

        print(answer.upper())

    print(clockwise(x0, y0, x1, y1, x2, y2))

		print("COUNTER_CLOCKWISE")
		print("CLOCKWISE")
			print("ONLINE_BACK")
			print("ONLINE_FRONT")
			print("ON_SEGMENT")

        print(ans[iSP(P0, P1, P2)])

        print(self.x, self.y)

        print(ans[Point.ccw(p1, p2, p)])

                print('ONLINE_FRONT')
                print('ONLINE_BACK')
                print('ON_SEGMENT')
            print('CLOCKWISE')
            print('COUNTER_CLOCKWISE')


        print(v)

            print("ON_SEGMENT")
                print("ON_SEGMENT")
                print("ONLINE_FRONT")
            print("ONLINE_BACK")
        print("COUNTER_CLOCKWISE")
        print("CLOCKWISE")


            print("COUNTER_CLOCKWISE")
            print("CLOCKWISE")
            print("ONLINE_BACK")
            print("ONLINE_FRONT")
            print("ON_SEGMENT")

        print('COUNTER_CLOCKWISE')
        print('CLOCKWISE')
        print('ONLINE_BACK')
        print('ONLINE_FRONT')
        print('ON_SEGMENT')


        print(solve(Vec(x1, y1), Vec(x2, y2), Vec(x, y)))


        print(*value, sep=sep, end=end)


        print("COUNTER_CLOCKWISE")
        print("CLOCKWISE")
                print("ONLINE_FRONT") 
                print("ON_SEGMENT") 
            print("ONLINE_BACK")

        print("COUNTER_CLOCKWISE")
        print("CLOCKWISE")
        print("ONLINE_BACK")
        print("ONLINE_FRONT")
        print("ON_SEGMENT")

        print("{}".format(result))
    

        print("COUNTER_CLOCKWISE")
        print("CLOCKWISE")
            print("ONLINE_BACK")
                print("ONLINE_FRONT")
                print("ON_SEGMENT")


                print("ONLINE_BACK")
                print("ONLINE_FRONT")
                print("ON_SEGMENT")
            print("COUNTER_CLOCKWISE")
            print("CLOCKWISE")


		print("COUNTER_CLOCKWISE")
		print("CLOCKWISE")
			print("ONLINE_BACK")
			print("ONLINE_FRONT")
			print("ON_SEGMENT")


            print('ONLINE_FRONT' if abs(p0p1) < abs(p0p2) else 'ON_SEGMENT')
            print('ONLINE_BACK')
        print('COUNTER_CLOCKWISE' if prod_cross > 0 else 'CLOCKWISE')

            print("COUNTER_CLOCKWISE")
            print("CLOCKWISE")
            print("ONLINE_BACK")
            print("ONLINE_FRONT")
            print("ON_SEGMENT")


        print(dic[a])


        print('COUNTER_CLOCKWISE')
    
        print('CLOCKWISE')
        
            print('ONLINE_BACK')     
            print('ON_SEGMENT')
            print('ONLINE_FRONT')
            
       

	print(solve(p, q, r))

		print(1)
		print(2)
		print(0)


        print(2)
        print(1)
        print(0)


            print(2)
            print(1)
            print(0)


            print("1")
            print("0")

    
    print(parallel_orthogonal())


    print(*answer, sep="\n")

        print(1)
        print(2)
        print(0)


        print(2)
        print(1)
        print(0)

        print(2)
        print(1)
        print(0)


        print(2)
        print(1)
        print(0)


            print(1)
            print(2)
            print(0)


        print(2)
        print(1)
        print(0)


        print(1)
        print(2)
        print(0)

        print(1)
            print(2)
            print(0)

        print(2)
        print(1)
        print(0)

    print(1 if (c - a) * (g - e) == -(d - b) * (h - f) else (2 if (c - a) * (h - f) == (d - b) * (g - e) else 0))


            print(2)
            print(1)
            print(0)

    
    print(ans)

    print(1 if (c-a)*(g-e)==-(d-b)*(h-f) else(2 if (c-a)*(h-f)==(d-b)*(g-e) else 0))

    
    print(pr)

        print(1)
        print(2)
        print(0)


    print(solve(s1_x, s1_y, s2_x, s2_y))

        print(2)
        print(1)
        print(0)

    
    print(ans)


  print(res)


    
    print(ans)

    print(1)
    print(2)
    print(0)

    print(1)
    print(2)
    print(0)

		print(2)
		print(1)
		print(0)

			print(2)
			print(1)
			print(0)
			print(1)
			print(2)
			print(0)
		print(0)
			print(2)
			print(1)
			print(0)


        print(decide_2lines_relation(p0, p1, p2, p3))

        print(1)
            print(2)
            print(0)

    print(result)



    print(result)



print('\n'.join(map(str, answers)))

    print(i)


    print(i)

            print('1')
            print('2')
            print('0')
            print('1')
            print('2')
            print('0')
        print(2)
        print(1)
        print(0)

    print(2 if abs(prod.imag) < 1e-6 else 1 if abs(prod.real) < 1e-6 else 0)

        print(1)
        print(2)
        print(0)

        print(v)

                print('1')
                print('2')
                print('0')
    print(x+ans_x, y+ans_y)
    print(a,b)
                print("ON_SEGMENT")
                print("ONLINE_FRONT")
            print("ONLINE_BACK")
        print("COUNTER_CLOCKWISE")
        print("CLOCKWISE")
        print(2)
        print(1)
        print(0)


        print(2)
        print(1)
        print(0)


        print(2)
        print(1)
        print(0)





























        print("2")
        print("1")
        print("0")

        print(1)
        print(2)
        print(0)

        print(1)
    
        print(2)

        print(0)


print("\n".join(map(str, ans)))

        print(2)
        print(1)
        print(0)

        print(2)
        print(1)
        print(0)



    
    print(ans)



    print(1 if (c-a)*(g-e)==-(d-b)*(h-f) else(2 if (c-a)*(h-f)==(d-b)*(g-e) else 0))

    print(o)

        print(2)
        print(1)
        print(0)

    print(i)

        print(2)
        print(1)
        print(0)

    print(o)


  print(list1[j])


            print(2)
            print(1)
            print(0)



        print(1)
        print(2)
        print(0)


        print(2)
        print(1)
        print(0)

    print(+is_intersection((x0, y0), (x1, y1), (x2, y2), (x3, y3)))

        print(1)
        print(0)

    print(int(gm.intersect(seg1, seg2)))


    print(int(gm.intersect(seg1, seg2)))


print("\n".join(map(str,ans)))

    print(1 if intersect(p1, p2, p3, p4) else 0)

    print(ans) 



        print(0)
        print(0)
        print(0)
    print(1)



print('\n'.join(str(main()) for _ in range(int(input()))))


		print(1)
		print(1)
		print(0)

            print(1)
            print(0)

            print(1)
            print(1)
            print(0)
        print(1)
        print(0)

        print(main())

            print(0)
            print(1)
            print(1)
            print(0)
    

    print(1 if intersect4(p0, p1, p2, p3) else 0)

        print("0")
        print("1")
        print("0")

    print(1 if do_intersect([x1, y1], [x2, y2], [x3, y3], [x4, y4]) else 0)

            print(1)
            print(0)

	print(solve(p[0], p[1], p[2], p[3]))


print("\n".join(map(str, ans)))

        print(1)
        print(0)

            print(1)
            print(0)
        
    

    print(int(gm.intersect(seg1,seg2)))

            print(1)
            print(0)

            print(1)
            print(0)
            print(1)
            print(0)

  print('{:.10f}'.format(x),'{:.10f}'.format(y))

    print(1)
    print(0)

    print(1 if intersect([xp0, yp0], [xp1, yp1], [xp2, yp2], [xp3, yp3]) else 0)

  print(+is_intersection((x0, y0), (x1, y1), (x2, y2), (x3, y3)))


            print(1)
            print(0)


            print(0)
            print(1)
        print(0)


    print("1" if intersect(p0, p1, p2, p3) else "0")


    print(int(s1.intersects_with(s2, allow_side=True)))


        print(1)
        print(0)




            print(1)
            print(0)

        print(1)
        print(0)

        print(1)
        print(0)

    print(int(pg.intersection(p0, p1, p2, p3)))


        print(1 if is_intersected_ls(p0, p1, p2, p3) else 0)


        print('1')
        print('0')

        print(int(v))

        print(1)
        print(0)

        print(1)
        print(0)
        
        print(1)
        print(0)

        print(1)
        print(0)


        print(1)
        print(0)
    
            print(g(y0, y1, y2, y3))
            print(g(x0, x1, x2, x3))
    
        print(1)


    print(int(l1.is_intersection(l2)))



        print(1)
        print(0)



        print(1)

       print(1)
    
        print(1)
                
        print(1)


        print(1)
                
        print(1)

       print(0)
       

        print(solve(Vec(x0, y0), Vec(x1, y1), Vec(x2, y2), Vec(x3, y3)))


        print(*value, sep=sep, end=end)


        print(1)
        print(0)


print(*res, sep="\n")


        print(1 if L1.isCross(L2) else 0)

        print(0)
        print(int(result))


        print(1)
        print(0)

        print(1 if isSegCross(seg1, seg2) else 0)



        print(int(intersect(s1, s2)))


            print(0)
        print(projection(l, p))

        print(reflection(l, p))

            print("COUNTER_CLOCKWISE")
            print("CLOCKWISE")
            print("ONLINE_BACK")
            print("ONLINE_FRONT")
            print("ON_SEGMENT")

            print(2)
            print(1)
            print(0)

            print(1)
            print(0)
    print(1 if intersect_p((p1x,p1y),(p2x,p2y),(p3x,p3y),(p4x,p4y)) else 0)

    print(1 if intersection(list(map(int,input().split()))) else 0)

        print(1)
        print(0)

    print(int(Segment(p0, p1).is_intersect(Segment(p2, p3))))


            print(1)
            print(0)


        print(1)
        print(0)


        print(1)
        print(0)



        print(int(seg_1.is_intersected_with(seg_2)))
    print(intersect(l1,l2))








	print(f'{ans.real:.15f} {ans.imag:.15f}')

  print("%.08f %.08f" % intersection_ll((x0, y0), (x1, y1), (X0, Y0), (X1, Y1)))


    print(x0 + u*(x1 - x0), y0 + u*(y1 - y0))


    print(*res)


print(*ans,sep="\n")


    print(*solve(p))
    
    




    print(XX,YY)

        print(f'{pc.real:.8f} {pc.imag:.8f}')

    print(f"{ansx:.8f} {ansy:.8f}")

    print("{0:.10f} {1:.10f}".format(cp.real, cp.imag))

    print("{0:.10f} {1:.10f}".format(p.real, p.imag))

    print((E*D+F*B)/G,(E*C+F*A)/G)

        print("{:.10f} {:.10f}".format(x, y))


    print(f'{ans[0]:.8f} {ans[1]:.8f}')

	print(ans.real, ans.imag)

    print('{:.10f} {:.10f}'.format(ans.x, ans.y))


  print('{:.10f} {:.10f}'.format(c1.real,c1.imag))


    print('{:.08f}'.format(x), '{:.08f}'.format(y))

    print("%.16f %.16f" % (cx, cy))

    print(*cross_point(p1, p2, p3, p4))

    print("{:.10f} {:.10f}".format(ans[0], ans[1]))
    

    print(*gm.get_cross_point(seg1,seg2))



  print(*r)

    print(*cross_point(x1, y1, x2, y2, X1, Y1, X2, Y2))

        
    print("{:.10f} {:.10f}".format(x, y))
                    
    print(x,y)


  print('{:.10f}'.format(x),'{:.10f}'.format(y))

    print(pg.cross_p(p0, p1, p2, p3))


    print(c.real, c.imag)

    print("%.10f %.10f" % (x, y))

        print('{:.10f} {:.10f}'.format(result.x, result.y))


    print(x[0],x[1])

        print("{:.12f} {:.12f}".format(p0.x,p0.y))
        print("{:.12f} {:.12f}".format(p1.x,p1.y))
        print("{:.12f} {:.12f}".format(rt.x,rt.y))


        print('{0:.10f} {1:.10f}'.format(v.x, v.y))

        print("{0:0.10f} {1:0.10f}".format(p.x, p.y))

        print(f"{ans.real} {ans.imag}")


        print('{:.10f} {:.10f}'.format(result.x,result.y))
        

    
    print(ans_x, ans_y)


        print(x, y)


        print(*result)

        print(L1.getCrossPoint(L2))

        print('{:.10f} {:.10f}'.format(c1.real, c1.imag))


        print(*p2)
        print(*p3)
        print(*ans)


    
    print("{} {}".format(ans.x,ans.y))

            print(str(x) + ' ' + str(y))
            print(str(x) + ' ' + str(y))
            print(str(x) + ' ' + str(y))

print(calipers(P))
    print(crossPoint(AB,CD))

    print('{:.10f} {:.10f}'.format(result.x, result.y))

    print(get_cross_point(Segment(p0, p1), Segment(p2, p3)))


        print("%.16f %.16f" % (cx, cy))


        print(p.x, p.y)

    print(get_cross_point(s1, s2))

    print(p.x, p.y)

    print(Segment(p0, p1).cross_point(Segment(p2, p3)))


        print(x.x, x.y)


    print('%.8f %.8f'%(x, y))

    print(getCrossPoint(s1, s2).x, getCrossPoint(s1, s2).y)






    print(*cross_point(v0,v1,v2,v3))

        print(p.x, p.y)


        print(projection(l, p))

        print(reflection(l, p))

            print("COUNTER_CLOCKWISE")
            print("CLOCKWISE")
            print("ONLINE_BACK")
            print("ONLINE_FRONT")
            print("ON_SEGMENT")

            print(2)
            print(1)
            print(0)

            print(1)
            print(0)


        print(crosspoint_ss(s1, s2))  

    print(x[0], x[1])

    print('{:.13f} {:.13f}'.format(x,y))

        print(f'{pt.x:.10f} {pt.y:.10f}')
    print(*Intersection(p0,p1,p2,p3).tolist())    


        print(*solve(Vec(x0, y0), Vec(x1, y1), Vec(x2, y2), Vec(x3, y3)))


        print(*value, sep=sep, end=end)


    print(res.x , res.y)

    print(*S1.intersect_point(S2))
    

    print(f'{ans:.10f}')


	print(f'{ans:.15f}')

        print("0.0000000000")
        print("{0:.10f}".format(d))


    print("{0:.10f}".format(getDistances(s1, s2)))


    print('{:.10f}'.format(d))


	print(SegmentSegmentDistance(p[0], p[1], p[2], p[3]))

            print(0)
        print(ans)


        print("0.0000000000")
        print("{0:.10f}".format(d))
        
        print(f'{dist:.8f}')

  print('{:.10f}'.format(x),'{:.10f}'.format(y))

  print('{:.10f}'.format(x))

    print("%.010f" % dist_ll((x0, y0), (x1, y1), (X0, Y0), (X1, Y1)))

  print("%.010f"%dist_ll((x0,y0), (x1,y1), (X0,Y0),(X1,Y1)))


    print(gm.get_distance_SS(seg1, seg2))


  print("{:.10f}".format(distance(p0,p1,p2,p3)))

    print("%.010f" % dist_ll((x0, y0), (x1, y1), (X0, Y0), (X1, Y1)))
    

        print(0)

    print(ans)




    print(gm.get_distance_SS(seg1,seg2))

        print(0)
    
        print(min(a, b, c, d))


        print("{:.10f}".format(main()))

        print('{0:.10f}'.format(v))

    print(f"{distance(p0, p1, p2, p3):.10f}")


        print("{0:0.10f}".format(d))

    print(getDistanceSS(s1, s2))






    print("%.010f" % dist_ll((x0, y0), (x1, y1), (X0, Y0), (X1, Y1)))

    print(calc(p1,p2,p3,p4))

            print(0.00)
            print("{:.12f}".format(S1.seg_seg_distance(S2)))


             print(0)
            print(f"{ans:.10f}")
        print(0)
        print(f"{ans:.10f}")

    print(mi)


        print('{:.10f}'.format(distance(p0, p1, p2, p3)))

        print(0)

    print(min(starmap(point_to_segment, ((p0, p1, p2), (p0, p1, p3), (p2, p3, p0), (p2, p3, p1)))))


        print("{:.10f}".format(s0.distance(s1)))


    print(dist_SS(p1, p2, p3, p4))

    print(get_distance(Segment(p0, p1), Segment(p2, p3)))


    print(line_dist(x0, y0, x1, y1, x2, y2, x3, y3))

        print(L1.getDistanceL(L2, mode=3))

            print(str(x) + ' ' + str(y))
            print(str(x) + ' ' + str(y))
            print(str(x) + ' ' + str(y))
    
            print(0.0)
            print(min(d))
            
    print("{:.12f}".format(res))

    
    print(min(D0,D1,D2,D3,D4))

    print(getDist(s1, s2))

    print('%.9f'%dist)


    print(get_distance(s1, s2))

        print('{:.10f}'.format(result))
        


    print(Segment(p0, p1).distance_ss(Segment(p2, p3)))


        print(0.0)
    print(min(DIST))


        print(f'{seg_1.segment_distance(seg_2):.10f}')
    print(s1.dist_segment(s2))


    print('{:.10f}'.format(distanceST(AB,CD)))

        print('{:.10f}'.format(result))

        print(s1.distance_with_segment(s2))


        print(get_distance(s1, s2))

        print(self.x, self.y)

        print(seg1.distance_from_Segment(seg2))


        print(getDistance(s1, s2))


    print(d)

    print(segment_segment_distance(list(map(int,input().split()))))

    print(pg.dist_seg(p0, p1, p2, p3))


    print(getDistance(p1, p2, p3, p4))

        print(0)
    print(Segment.getDistance(s1 , s2))

    

        print(solve(Vec(x0, y0), Vec(x1, y1), Vec(x2, y2), Vec(x3, y3)))


        print(*value, sep=sep, end=end)


        print(projection(l, p))

        print(reflection(l, p))

            print("COUNTER_CLOCKWISE")
            print("CLOCKWISE")
            print("ONLINE_BACK")
            print("ONLINE_FRONT")
            print("ON_SEGMENT")

            print(2)
            print(1)
            print(0)

            print(1)
            print(0)


        print(crosspoint_ss(s1, s2))  

        print("{:.8f}".format(distance_ss(s1, s2)))

    print('{:.13f}'.format(get_distance([(p1x,p1y),(p2x,p2y)],[(p3x,p3y),(p4x,p4y)])))


    
    print(min(ans))











        print(float(_distance_square_segment_segment(ss[0], ss[1])) ** 0.5)

        print(float(_distance_square_segment_segment(ss[0], ss[1])) ** 0.5)


print(polygon_area(points))

print('{:.1f}'.format(PL.calc_area()))



print(f'{area(n, g):.1f}')


print(a)

print(_*0.5)


print(abs(answer)/2)

print(area)


print(-1 * round(s,1))


    print("{:.1f}".format(area(ps)))


print("%.1f" % (abs(total)/2.0))


print('{:.1f}'.format(area / 2))


print(f'{abs(Sum):.1f}')


print("%.1f" % (abs(total)))

print(S)


print(Area(dots))

print(sum([(points[i][0]*points[i+1][1] - points[i+1][0]*points[i][1]) / 2 for i in range(len(points) - 1)]))




print(round(total,1))

print(abs(ans))


print("{:.1f}".format(S))

print(abs(S)/2)

print('{:.1f}'.format(abs(total)/2.0))


print(abs(ans))


print("%.1f" % (abs(sum)/2.0))


print(polygonArea(P))


print(area(vs))


print(polygon_area(N,P))

    print(area(input_()))


print(abs(total))

print("%.1f" % (total/2.0))

print(abs(s)/2)

print(solve())


print('{:.1f}'.format(ans))



print(abs(total)/2.0)

    print(res)

print(ans / 2)



print(poly.area())

print(polygon_area(p))


print(polygon_s(l))

print("%.1f" % (abs(total)/2.0))

print(total)


print(total / 2.0)

print("%.1f" % (abs(total)/2.0))

print("%.1f" % (abs(s)))


print(abs(ans))



print(ans)

    
    print(get_area_by_points(points))

print('{:.1f}'.format(area))

	
print("{:.1f}".format(abs(area)/2))

print(area(points,N))

    
print(abs(area)/2)

print(s)    



print(1*int(pl.is_convex()))
 

        print(1)
        print(0)



print(1 if is_convex else 0)


print(cnt)

	print(1)
	print(1)
	print(0)

    print(1)
    print(0)
        
    


            print(0)

    print(1)


print(int(polygon.is_convex(allow_straight=True, allow_collapsed=True)))


      print("0")
  print("1")


print(int(isConvex(P)))


print(1 if is_convex(vs) else 0)


print(ans)


        print(0)

print(1)


        print("1")
        print("0")

    print(1 if is_conv else 0)


print(Poly.is_convex(p))


print(1 if convex_flag == True else 0)

        print(1)
        print(0)

print(S)


print(convex)

        print(1)
        print(0)
print(isConvex)

print(convex)     



        print(0)
print(1)


print(t)

print(1 if is_convex(P) else 0)

    print(1)
    print(0)

        print(projection(l, p))

        print(reflection(l, p))

            print("COUNTER_CLOCKWISE")
            print("CLOCKWISE")
            print("ONLINE_BACK")
            print("ONLINE_FRONT")
            print("ON_SEGMENT")

            print(2)
            print(1)
            print(0)

            print(1)
            print(0)


        print(crosspoint_ss(s1, s2))  

        print("{:.8f}".format(distance_ss(s1, s2)))

    print(1 if isConvex(Points) else 0)

    print(len(Qs))
    print("\n".join([str(p.x) + " " + str(p.y) for p in Qs]))

    print(Intersect_cc(Circle(Point(c1x, c1y), c1r), Circle(Point(c2x, c2y), c2r)))

        print(*Points)

    print(*Points)  

    print(*Points, sep="\n")    


        print(1)
        print(0)
    print(1)

    print(0)

print(int(isConvex(P)))

    print(1 if P.isConvex() else 0)

        print(self.x, self.y)

    print(int(Polygon(p).is_convex()))

print(int(pg.is_convex(p)))


print(1 if is_convex(p) else 0)

    print(solve(N, P))


        print(*value, sep=sep, end=end)



print(is_convex(P))

    print(0)
    print(1)


  print('{:.10f}'.format(x),'{:.10f}'.format(y))

  print('{:.10f}'.format(x))

  print(1)
  print(0)

        print(0)
    print(1)


print(int(is_convex(polygon, True)))

    print(inside_polygon(Q, P))


        print(inside_polygon(p0, qs))
        print(inside_polygon(r, p))


    print(contains(polygon, t))

        print(inside_polygon(p, qs))
    print(is_contained(p, g))


	print(IsPointInPolygon((x, y), n, p))

    print(contains(pg, complex(x, y)))

        print(inside_polygon((x, y), polygen))


            print(1)
        print(2 if counter % 2 else 0)

        print(polygon_contains_point(polygon, t))

        print(1)

        print(2)

        print(0)


        print(is_included(p, n, p_list))

            print(1)
        print(2 if counter % 2 else 0)

  print('{:.10f}'.format(x),'{:.10f}'.format(y))

  print('{:.10f}'.format(x))

  print(isContained(g,point(x,y)))

    print(inside_polygon(x,y))


		print(checkio([poly,[float(e) for e in raw_input().split()]]))

print(*ans, sep="\n")

                print(1)
            print(2 if counter % 2 else 0)


		print(checkio([poly,[float(e) for e in raw_input().split()]]))
    print(isContain(ecp, cp))


    print(Poly.in_polygon(p, (x, y)))

    print(solve(p))

    print(1 if on_polygon_line(xy, p) else 2 if in_polygon(xy, p) else 0)

    print(contains(vs, p))


    print(contains(g, [x,y]))


        print(1)
        print(1)
        print(2)
        print(0)

            print(1)
        print(projection(l, p))

        print(reflection(l, p))

            print("COUNTER_CLOCKWISE")
            print("CLOCKWISE")
            print("ONLINE_BACK")
            print("ONLINE_FRONT")
            print("ON_SEGMENT")

            print(2)
            print(1)
            print(0)

            print(1)
            print(0)


        print(crosspoint_ss(s1, s2))  

        print("{:.8f}".format(distance_ss(s1, s2)))

    print("{:.1f}".format(S))

    print(1 if isConvex(Points) else 0)

        print(contains(Points, p))

    print(len(Qs))
    print("\n".join([str(p.x) + " " + str(p.y) for p in Qs]))

    print(Intersect_cc(Circle(Point(c1x, c1y), c1r), Circle(Point(c2x, c2y), c2r)))

        print(*Points)

    print(*Points)  

    print(*Points, sep="\n")    


        print(v)

    print(pol_contains(g, p))

    print(round(p1.x, 8), round(p1.y, 8), round(p2.x, 8), round(p2.y, 8))


    print(result)









        print(P.enclose(A))

        print(pos.value)


        print(contains(g, Vector2(c, d)))


    print(pol.contains(Point(x, y)))


    print(contains(P,Point(x,y)))

        print(contains(g, p))

    print(contains(arr,p))


        print(ret)
    print(is_ppc(P,p))

        print(1)
        print(0)
        print(2)











        print(result)


    print(ret)

        print(result)


        print(x)


    print(ans)


        print(ans)

        print(solve(N, P, Vec(x, y)))


        print(*value, sep=sep, end=end)


        print(result)

    print(result)

        print(1)
        print(2)
        print(0)


    print(contain(G,p))

    print(contains(G, p))

    print(polygon_content(Vector(x,y)))

    print(contains(G, p))


    print(point_in_polygon(P, [x, y]) + 1)

    print(contains(gs, p))

        print(int(polygon.contains(Point(x, y))))


    print(pg.p_contain(p, Point(*map(int, input().split()))))


        print(self.x, self.y)

        print(p.is_contain_Point(q))

    print(contains(polygon, Point(x, y)))



print(len(ret))
	print(int(z.real),int(z.imag))

    print(len(convex_hull))
        print(x, y)

    print(len(convex_hull))
        print(x, y)

print(len(ans))
    print(x, y)

    print(len(q) - 1)
        print(*i)


print(len(convex_points))
    print(f"{point[0]} {point[1]}")

print(len(hull))
    print(x, y)

print(len(lst))

    print(*row)

print(len(result_points))
    print(int(result_point.real), int(result_point.imag))


print(len(P))

    print(len(convex))
        print('{} {}'.format(*p))


    print(len(ans))
        print(int(coordinate.real), int(coordinate.imag))


print(len(ANS))
    print(x, y)


print(lr)
    print(int(p.real), int(p.imag))


    print(len(Apoints))
        print(Apoints[i][0],Apoints[i][1])
print(lr)
    print(int(p.real), int(p.imag))

print(len(ans))

  print(int(i.real), int(i.imag))



print(len(ch))
    print(*res)

print(l)
    print(result[(i + min_idx) % l][0], result[(i + min_idx) % l][1])

    print(len(res))
        print(f'{r[0]} {r[1]}')


print(len(lst))
    print(x,y)


print(len(ans))
print(len(ch))
	print(round(v.real), round(v.imag))

print(len(ans) - 1)
    print(*x)


    print(len(answer))
        print(p[0], p[1])


print(len(convex))
	print(x, y)

  print('{:.10f}'.format(x),'{:.10f}'.format(y))

  print('{:.10f}'.format(x))

    
print(m)
  print(*res[(idx+i)%m])


print(len(s))

  
  print(a, b)


print(len(result))
    print("{} {}".format(r[0], r[1]))


print(len(ans))
    print(len(ans))
        print(y, x)


print(len(result))
  print(item[0],item[1])

print(len(res))
    print(f'{r[0]} {r[1]}')


print(len(p))
    print(int(pi.real), int(pi.imag))

    print(len(pch_list))
        print(int(p.real), int(p.imag))

        print(N_vertex)
            print("{0} {1}".format(point_pairs[0][0],point_pairs[0][1]))
            print("{0} {1}".format(point_pairs[1][0],point_pairs[1][1]))
            print("{0} {1}".format(point_pairs[2][0],point_pairs[2][1]))
            print("{0} {1}".format(point_pairs[0][0],point_pairs[0][1]))
            print("{0} {1}".format(point_pairs[1][0],point_pairs[1][1]))
            print("{0} {1}".format(point_pairs[2][0],point_pairs[2][1]))
        print(convex_hull_valid_num)
            print("{0} {1}".format(convex_hull[i][0],convex_hull[i][1]))


    
print(len(over) + len(under) - 2)
    print(v[0], v[1])

    
    
    print(v[0], v[1])

    print(len(ans))
        print(i, j)



print(num)
    print(*C[x])


print(len(ans))
    print(x, y)


    print(len(ans))
      print(*i)


print(len(convex_hull))
    print(p[0],p[1])

print(len(ans))
    print(int(ans[i].real), int(ans[i].imag))


print(len(over) + len(under) - 2)
    print(v[0], v[1])

    print(v[0], v[1])
          


print(len(k))

    print(int(i.real),int(i.imag))



print(le)
    print(*s.popleft())





print(len(p))
    print(*p[i + si])

    print(N)
print(len(ans))
    print(int(p.x), int(p.y))


    print(len(P_rev))
        print("{0} {1}".format(i.x, i.y))

print(m)
    print('{} {}'.format(convex_points[i%m].x,convex_points[i%m].y))

print(len(ret))
    print(*ri)

print(len(res)-1)
    print(x,y)

    print(len(H))
        print(H[i])


print(len(A), *A, sep='\n')



print(len(A))
  print(' '.join(map(str,p)))


    print(n)
        print(f'{pt.x} {pt.y}')


    print(len(l))
        print(i.x, i.y)
        print(i.x, i.y)
    


    print(len(ans))
        print('{0} {1}'.format(v.x, v.y))


    print(len(ans))
        print(int(p.x), int(p.y))

    print(len(ans))
        print(p.x, p.y)


    print(len(ch))
        print(int(p.x), int(p.y))

    print(len(convex_hull))
        print(x, y)


    print(round(p1.x, 8), round(p1.y, 8), round(p2.x, 8), round(p2.y, 8))



print(len(l))
    print(l[i].x, l[i].y)






















    print(len(ps))
        print(y,x)
    print(len(convex))
        print(p.x, p.y)
        print(p.x, p.y)


    print(len(ans))
        print(p.x, p.y)


        print(*value, sep=sep, end=end)


print(len(q))
print(*q, sep="\n")


print(len(ans))
    print(int(i.x),int(i.y))

print(len(ans))

    print(f"{ans[(i+si)%len(ans)][0]} {ans[(i+si)%len(ans)][1]}")


print(ans)


print('{:f}'.format(ans))

    print(f'{max_dist:6f}')

print(diameter)


    print(rotating_calipers(p))


  print('{:.10f}'.format(x),'{:.10f}'.format(y))

  print('{:.10f}'.format(x))


print("{:.12f}".format(ConvexDiameter(dots)))

print('{:.6f}'.format(convex_diameter(p)))

    print("%.09f" % rotating_calipers(points))



    print("{:.10f}".format(rotating_calipers(ps)))


    print(math.sqrt(res))


    print(ans)



print(max**0.5)


print(tentative_diameter)

print(ans)


print(ans**0.5)


print(res)

print(ans)


print(ans)


print(convex_diameter_square(polygon)[2] ** 0.5)

print(diameter(points))


print(pol.diameter)


print(pg.p_diameter(p))


    print(P.getDiameter())

print(calipers(P))




print(calipers(convex))

    print(solve(N, P))


        print(*value, sep=sep, end=end)


        print("{:.10f}".format(area(cut(ps, (x1, y1), (x2, y2)))))


    print(area(Q))

    print(Poly.cut_polygon(points, x1, y1, x2, y2))

        print(f'{area:.5f}')

    print(polygon_area(m, Q))


    print(area / 2)
    print("{:f}".format(ans))

        print(area / 2)
    print(f"{ans:.8f}")    


        print('{:.6f}'.format(vector.polygon(left)))
		print(0)
		print(Area(res))


        print(l.area())
        print(0)


        print(l.area())
        print(0)


    print(float(area(convex_cut(polygon, l))))


    print(polygonArea(cutPolygon(P,Segment(Point(a,b),Point(c,d)))))

  print('{:.10f}'.format(x),'{:.10f}'.format(y))

  print('{:.10f}'.format(x))

    print(pg.convex_cut(p, Point(x0, y0), Point(x1, y1)))


    print(polygonArea(cutPolygon(P,AB)))


        print(self.x, self.y)

            print(0)
            print(left.area())

        print(solve(N, P, Vec(x1, y1), Vec(x2, y2)))


        print(*value, sep=sep, end=end)


print('{:.10f}'.format(ntp(Points)))


    print("{:.10f}".format(solve(a)))

print('{0:.15f}'.format(r))



print('{:f}'.format(ans))

print('%.16f' % math.sqrt(ans))


    print(f'{min_dist:.6f}')

    print('{:.10f}'.format(ans))


print('{:.012f}'.format(closest_pair(points)[0]))

    print("{:.8f}".format(ClosestPair(Points)))

        print(ans)
        print(d)



print(f'{find_distance(p, q):.10f}')


  print(f"{ans:.12f}")
print(f"{closest_pair(P):.6f}")



    print("{:.10f}".format(closest_distance(ps)))



print(f"{f(arr):.10f}")


print("{:.09f}".format(closest_pair(ps)))


print('{:.10f}'.format(rec(Ax, Ay, 0)))


print('{:.10f}'.format(closestPair(P)))

    print('{:.6f}'.format(closest_pair(p)))
print('{:.10f}'.format(d))

print('{:.10f}'.format(closestPair(P)))

print('{:.12f}'.format(d2**0.5))

print("{:.10f}".format(closest_pair(0, n)))

print('{:.10f}'.format(closestPair(P)))


        print(self.x, self.y)

    print(f"{d: .10f}")

        print(self.x, self.y)

    print(f"{d: .10f}")

print(cnt)


print(cnt)

       
print(ans)


    print(line_sweep(q_list, len(x_set)))

print(cnt)

print(cnt)


    print(ans)


        
print(ans)



print(ans)

print(ct)

    print(intersection)
    print(cross_count)



print(count)

    print(ans)

    print(ans)


    print(manhattanIntersection(S))


print(ans)



    print(cnt)


print(ans)


        
print(ans)


print(ans)



    print(count_intersections(segs))



print(-ans)


print(manhattanIntersection(P))

print(manhattanIntersection(S))

    print(count)

    print(4)
    print(3)
    print(1)
    print(0)
    print(2)

    print(4)
    print(3)
    print(2)
    print(1)
    print(0)

  print(4)
  print(3)
    print(2)
    print(1)
    print(0)

    print(0)

    print(1)

    print(4)
    print(3)
    print(2)
    print(1)
    print(0)


    print(4)
    print(3)
    print(2)
    print(1)
    print(0)

        print("4")
        print("3")
        print("2")
        print("1")
        print("0")


            print("4")
            print("3")
            print("2")
            print("1")
            print("0")
        print(4)
        print(3)
        print(2)
        print(1)
        print(0)


    print(4) 
    print(3) 
    print(2) 
    print(1) 
    print(0)



  print(4)
  print(3)
  print(2)
  print(1)
  print(0)
  

    print(4)
    
    print(3)
    
    print(1)
    
    print(0)
    print(4)
    print(3)
    print(1)
    print(0)
    print(2)

	print(3)
	print(1)
	print(4)
	print(0)
	print(2)

    print(4)
    print(3)
    print(2)
    print(1)
    print(0)




print(output)

    print(4)
    print(3)
    print(1)
    print(0)
    print(2)

    print(4)
    print(3)
    print(1)
    print(0)
    print(2)




print(result)


        print(4)
        print(3)
        print(2)
        print(1)
        print(0)



print(ans)


print(c1.intersection(c2))

    print(tangent(c1,c2))


    print(4)
    print(3)
        print(1)
            print(0)
        print(2)

    print(4)
    print(3)
    print(1)
    print(0)
    print(2)
    

	print(4)
	print(3)
	print(2)
	print(1)
	print(0)

    print(0)

    print(1)
    print(2)
    print(3)
    print(4)


    print("4")

    print("3")


        print("1")

        print("0")

        print("2")


    print(result)


        print(4)
        print(3)
        print(2)
        print(1)
        print(0)


print(ans)

        print(4)
        print(3)
            print(2)
            
            print(1)
            print(0)
    

        print("4")

        print("3")


            print("1")

            print("0")

            print("2")


            print("1")

            print("0")

            print("2")

        print("3")
        print("4")

    print(4)
    print(3)
    print(2)
    print(1)
    print(0)


    print(answer)
    

print(C.intersection(x1, y1, r1, x2, y2, r2))

        print(4)
        print(3)
        print(1)
        print(0)
        print(2)

	print(4)
	print(3)
	print(2)
	print(1)
	print(0)

    print(4)
    print(3)
    print(1)
    print(0)
    print(2)

print(c1.circle_type(x2, y2, r2))


print(check_intersection_of_circles(d, r1, r2))


        print(2)
        print(1)
        print(0)
        print(4)
        print(3)
        print(2)

    print("4")
    print("3")
    print("2")
    print("1")
    print("0")


  print('4')
  print('3')
  print('1')
  print('0')
  print('2')

    print(tan_count(read_line(), read_line()))

print(result)





    print(4)
    print(3)
    print(1)
    print(0)
    print(2)

    print(4)
    print(3)
    print(2)
    print(1)
    print(0)



print(ans)

        print(4)
        print(3)
        print(2)
        print(1)
        print(0)

print(ans)

            print("1")

            print("0")

            print("2")

        print("3")
        print("4")

print(result)


    print(4)
    print(3)
    print(2)
    print(1)
    print(0)



    print(circle_intersection(c1, c2).value)


print(c1.ctc(c2))


        print(projection(l, p))

        print(reflection(l, p))

            print("COUNTER_CLOCKWISE")
            print("CLOCKWISE")
            print("ONLINE_BACK")
            print("ONLINE_FRONT")
            print("ON_SEGMENT")

            print(2)
            print(1)
            print(0)

            print(1)
            print(0)


        print(crosspoint_ss(s1, s2))  

        print("{:.8f}".format(distance_ss(s1, s2)))

    print(intersect_cc(Circle(Point(c1x, c1y), c1r), Circle(Point(c2x, c2y), c2r)))

print(isIntersectCC(Circle(Point(x1,y1),r1),Circle(Point(x2,y2),r2)))

    print(4)
    print(3)
        print(2)
        print(1)
        print(0)

    print(0)
    print(1)
    print(4)
    print(3)
    print(2)


print(c1.is_intersect(c2))

    print(C1.intersectionCircle(C2))

print(C1.is_intersect(C2))

    print(4) 
    print(3) 
    print(2) 
    print(1)  
    print(0) 

        print("4")
    
        print("3")

            print("2")

            print("1")

            print("0")


print(pg.intersection_c(Circle(Point(x1, y1), r1), Circle(Point(x2, y2), r2)))


print(len(result))


        print(self.x, self.y)

    print(c1.tangents_num_with_Circle(c2))

        print(4)
        print(3)
        print(2)
        print(1)
        print(0)



print(number_of_common_tangents(c1, c2))


print(number_of_common_tangents(c1, c2))


  print('{:.10f}'.format(x),'{:.10f}'.format(y))

  print('{:.10f}'.format(x))

print(IsIntersectCircle(c1,c2))

print(f'{c.real:.15f} {c.imag:.15f} {r:.15f}')


print(cx, cy, r)

    
    print(x, y, r)

print('{:.7f}'.format(cx), '{:.7f}'.format(cy), '{:.7f}'.format(r))

print(f"{nx:.10f} {ny:.10f} {r:.10f}")

print(cx, cy, r)


print(inscribedCircle(P))

print(inscribedCircle(P))

    print(f'{xc:.6f} {yc:.6f} {r:.6f}')

    print(Pl.getIncircle())


print("{:.8f} {:.8f} {:.8f}".format(x, y, r))

print(*t[0].value, t[1])


print(c)


    print(*c, point_line_distance(*c, *two_point_linear2(*p[:2])))


        print(self.x, self.y)

    print(f"{c.centre.x: .10f} {c.centre.y: .10f} {c.radius: .10f}")

  print('{:.10f}'.format(x),'{:.10f}'.format(y))

  print('{:.10f}'.format(x))

print(x,y,C.r)

    print("%.16f %.16f %.16f\n" % (x, y, r))


print(x, y, r)


print(f'{c.real:.15f} {c.imag:.15f} {r:.15f}')

    print(center.x, center.y, r)


print('{:.7f}'.format(cx), '{:.7f}'.format(cy), '{:.7f}'.format(r))

    print(f'{xc:.6f} {yc:.6f} {r:.6f}')


print(f"{gx:.10f} {gy:.10f} {r:.10f}")

print(c)



print(cx, cy, r)

print(circumscribedCircle(P))

print(circumscribedCircle(P))

    print(Pl.getCircumcircle())


print("{:.8f} {:.8f} {:.8f}".format(x, y, r))

        print(self.x, self.y)

    print(f"{c.centre.x: .8f} {c.centre.y: .8f} {c.radius: .8f}")

print(float(circ.center.x), float(circ.center.y), float(circ.radius_square) ** 0.5)

    print("%.16f %.16f %.16f\n" % (x, y, r))


  print('{:.10f}'.format(x),'{:.10f}'.format(y))

  print('{:.10f}'.format(x))

print(x,y,C.r)

    print("%.08f %.08f %.08f %.08f" % (p0 + p1))


	print(f'{ans[0].real:.15f} {ans[0].imag:.15f} {ans[1].real:.15f} {ans[1].imag:.15f}')

        print(p1,k*p1+d,p2,k*p2+d)
        print(x1[i],p1,x1[i],p2)

    print(x1 + dx * t1, y1 + dy * t1, x1 + dx * t2, y1 + dy * t2)

    print("%.08f %.08f %.08f %.08f" % (p0 + p1))

    print("{:.10f} {:.10f} {:.10f} {:.10f}".format(ppp.fi.real, ppp.fi.imag, ppp.se.real, ppp.se.imag))

    print(' '.join([str(round(i,8)) for o in ans for i in o]))

        print('{0[0]:.8f} {0[1]:.8f} {0[2]:.8f} {0[3]:.8f}'.format(v))

  print(x1+dx*t1, y1+dy*t1,x1+dx*t2,y1+dy*t2)



        print("{:.8f} {:.8f} {:.8f} {:.8f}".format(*p1, *p2))


    print(ans.strip())


        print("{0:0.8f} {1:0.8f} {2:0.8f} {3:0.8f}".format(x1, y1, x2, y2))

    print(round(p1.x, 8), round(p1.y, 8), round(p2.x, 8), round(p2.y, 8))

        print(p1.x, p1.y, p2.x, p2.y)
        print(p2.x, p2.y, p1.x, p1.y)
            print(p1.x, p1.y, p2.x, p2.y)
            print(p2.x, p2.y, p1.x, p1.y)
            print('{:.8f} {:.8f} {:.8f} {:.8f}'.format(ans1.real, ans1.imag, ans2.real, ans2.imag))
            print('{:.8f} {:.8f} {:.8f} {:.8f}'.format(ans1.real, ans1.imag, ans2.real, ans2.imag))
            print('{:.8f} {:.8f} {:.8f} {:.8f}'.format(ans2.real, ans2.imag, ans1.real, ans1.imag))


            print('{:.8f} {:.8f} {:.8f} {:.8f}'.format(ans1.x, ans1.y, ans2.x, ans2.y))
            print('{:.8f} {:.8f} {:.8f} {:.8f}'.format(ans1.x, ans1.y, ans2.x, ans2.y))
            print('{:.8f} {:.8f} {:.8f} {:.8f}'.format(ans2.x, ans2.y, ans1.x, ans1.y))


    print("{:.7f} {:.7f} {:.7f} {:.7f}".format(*i))


        print(cp1, cp2)

        print(*cps, *cps)

    print('{:.7f}'.format(a1x), '{:.7f}'.format(a1y), '{:.7f}'.format(a2x), '{:.7f}'.format(a2y))

    print(f"{cpx1:.10f} {cpy1:.10f} {cpx2:.10f} {cpy2:.10f}")

            
    print('{:.8f} {:.8f} {:.8f} {:.8f}'.format(res1.x, res1.y ,res2.x, res2.y))

            print('{:.8f} {:.8f} {:.8f} {:.8f}'.format(ans1.x, ans1.y, ans2.x, ans2.y))
            print('{:.8f} {:.8f} {:.8f} {:.8f}'.format(ans1.x, ans1.y, ans2.x, ans2.y))
            print('{:.8f} {:.8f} {:.8f} {:.8f}'.format(ans2.x, ans2.y, ans1.x, ans1.y))


        print("{:.8f} {:.8f} {:.8f} {:.8f}".format(ans[0].x, ans[0].y, ans[1].x, ans[1].y))


	print("{:.10f} {:.10f} {:.10f} {:.10f}".format(*a))

        print('{:.10f}'.format(res[i]), end=' ')
    print('{:.10f}'.format(res[-1]))


        print('{:.8f} {:.8f} {:.8f} {:.8f}'.format(x, y, x, y))
        print('{:.8f} {:.8f} {:.8f} {:.8f}'.format(x1, y1, x2, y2))
        print(projection(l, p))

        print(reflection(l, p))

            print("COUNTER_CLOCKWISE")
            print("CLOCKWISE")
            print("ONLINE_BACK")
            print("ONLINE_FRONT")
            print("ON_SEGMENT")

            print(2)
            print(1)
            print(0)

            print(1)
            print(0)


        print(crosspoint_ss(s1, s2))  

        print("{:.8f}".format(distance_ss(s1, s2)))

    print(intersect_cc(Circle(Point(c1x, c1y), c1r), Circle(Point(c2x, c2y), c2r)))

        print(*Points)

            
            print(ans1.x, ans1.y, ans2.x, ans2.y)
            print(ans2.x, ans2.y, ans1.x, ans1.y)

    print(min(ans), max(ans))

        print('{} {} {} {}'.format(a.x,a.y,b.x,b.y))
        print('{} {} {} {}'.format(b.x,b.y,a.x,a.y))
            print('{} {} {} {}'.format(a.x,a.y,b.x,b.y))
            print('{} {} {} {}'.format(b.x,b.y,a.x,a.y))

    print('{:f} {:f} {:f} {:f}'.format(x1[0], x1[1], x2[0], x2[1]))

            print('{:.7f} {:.7f} {:.7f} {:.7f}'.format(result1.x,result1.y,result2.x,result2.y))
            print('{:.7f} {:.7f} {:.7f} {:.7f}'.format(result1.x,result1.y,result2.x,result2.y))
            print('{:.7f} {:.7f} {:.7f} {:.7f}'.format(result2.x,result2.y,result1.x,result1.y))


        print(f'{pi_list[0].real:.6f} {pi_list[0].imag:.6f} {pi_list[1].real:.6f} {pi_list[1].imag:.6f}')

        print(*sorted(C.getCrossPointL(L)))

	
	print("{:.8f} {:.8f} {:.8f} {:.8f}".format(ax, ay, bx, by))
	
    print(*pg.cross_c_str(c, Point(x1, y1), Point(x2, y2)))



        print(*list(map('{:.6f}'.format, [pre.real, pre.imag, post.real, post.imag])))

    print("{:.7f} {:.7f} {:.7f} {:.7f}".format(*ics[0],*ics[1]))


        print(self.x, self.y)

        print(f"{a.x: .8f} {a.y: .8f} {b.x: .8f} {b.y: .8f}")

        print("{:.6f} {:.6f} {:.6f} {:.6f}".format(*a))


    print("%.08f %.08f %.08f %.08f" % (p0 + p1))


  print('{:.10f}'.format(x),'{:.10f}'.format(y))

  print('{:.10f}'.format(x))

    print(str_float(x),str_float(y),str_float(x),str_float(y))
    print(str_float(q1[0]),str_float(q1[1]),str_float(q2[0]),str_float(q2[1]))

print(*ANS1, *ANS2)


print(f'{ans[0].real:.15f} {ans[0].imag:.15f} {ans[1].real:.15f} {ans[1].imag:.15f}')

    print(x0.x, x0.y, x1.x, x1.y)


print(ix1 + c1x, iy1 + c1y, ix2 + c1x, iy2 + c1y)

print(' '.join([str(round(i, 9)) for o in ans for i in o]))


    print('{0[0]:.8f} {0[1]:.8f} {0[2]:.8f} {0[3]:.8f}'.format(ans))

print(ix1 + c1x, iy1 + c1y, ix2 + c1x, iy2 + c1y)



    print("{:.8f} {:.8f} {:.8f} {:.8f}".format(*p1, *p2))


print("{0:0.8f} {1:0.8f} {2:0.8f} {3:0.8f}".format(x1, y1, x2, y2))

print("{0:0.8f} {1:0.8f} {2:0.8f} {3:0.8f}".format(x1, y1, x2, y2))

    print(round(p1.x, 8), round(p1.y, 8), round(p2.x, 8), round(p2.y, 8))


print(min(ans), max(ans))

            print('{:.8f} {:.8f} {:.8f} {:.8f}'.format(ans1.real, ans1.imag, ans2.real, ans2.imag))
            print('{:.8f} {:.8f} {:.8f} {:.8f}'.format(ans1.real, ans1.imag, ans2.real, ans2.imag))
            print('{:.8f} {:.8f} {:.8f} {:.8f}'.format(ans2.real, ans2.imag, ans1.real, ans1.imag))


print('{:f} {:f} {:f} {:f}'.format(x1[0], x1[1], x2[0], x2[1]))

        print('{:.8f} {:.8f} {:.8f} {:.8f}'.format(ans1.x, ans1.y, ans2.x, ans2.y))
        print('{:.8f} {:.8f} {:.8f} {:.8f}'.format(ans1.x, ans1.y, ans2.x, ans2.y))
        print('{:.8f} {:.8f} {:.8f} {:.8f}'.format(ans2.x, ans2.y, ans1.x, ans1.y))


print(ix1+x1, iy1+y1, ix2+x1, iy2+y1)

print("{:.7f} {:.7f} {:.7f} {:.7f}".format(res1.x, res1.y, res2.x, res2.y))


    print(cp1, cp2)

    print(*cps, *cps)

print('{:.7f}'.format(a1x), '{:.7f}'.format(a1y), '{:.7f}'.format(a2x), '{:.7f}'.format(a2y))

print(f"{cp1.real:.10f} {cp1.imag:.10f} {cp2.real:.10f} {cp2.imag:.10f}")

print(fstr(u[0]), fstr(u[1]), fstr(v[0]), fstr(v[1]))


    print('{:.10f} {:.10f} {:.10f} {:.10f}'.format(p.real, p.imag, q.real, q.imag))
    print(x1+x,y1+y,end=' ')
    print(x1+z,y1+w)

    print(x1+z,y1+w,end=' ')
    print(x1+x,y1+y)
    print(x1+x,y1+y,end=' ')
    print(x1+z,y1+w)
    print(x1+z,y1+w,end=' ')
    print(x1+x,y1+y)

print("%.08f %.08f %.08f %.08f" % (p0 + p1))

print(*map('{:.10f}'.format, (cpc.fi.real, cpc.fi.imag, cpc.se.real, cpc.se.imag)))

        print('{:.8f} {:.8f} {:.8f} {:.8f}'.format(ans1.x, ans1.y, ans2.x, ans2.y))
        print('{:.8f} {:.8f} {:.8f} {:.8f}'.format(ans1.x, ans1.y, ans2.x, ans2.y))
        print('{:.8f} {:.8f} {:.8f} {:.8f}'.format(ans2.x, ans2.y, ans1.x, ans1.y))


print(ans.strip())


    print('{:.10f}'.format(res[i]), end=' ')
print('{:.10f}'.format(res[-1]))


    print('{:.8f} {:.8f} {:.8f} {:.8f}'.format(x, y, x, y))
    print('{:.8f} {:.8f} {:.8f} {:.8f}'.format(x1, y1, x2, y2))
        print(projection(l, p))

        print(reflection(l, p))

            print("COUNTER_CLOCKWISE")
            print("CLOCKWISE")
            print("ONLINE_BACK")
            print("ONLINE_FRONT")
            print("ON_SEGMENT")

            print(2)
            print(1)
            print(0)

            print(1)
            print(0)


        print(crosspoint_ss(s1, s2))  

        print("{:.8f}".format(distance_ss(s1, s2)))

    print(intersect_cc(Circle(Point(c1x, c1y), c1r), Circle(Point(c2x, c2y), c2r)))

        print(*Points)

    print(*Points)  

    print(*p1,*p2)
print("{:.7f} {:.7f} {:.7f} {:.7f}".format(*p1,*p2))


    print('{} {} {} {}'.format(a.x,a.y,b.x,b.y))
    print('{} {} {} {}'.format(b.x,b.y,a.x,a.y))
        print('{} {} {} {}'.format(a.x,a.y,b.x,b.y))
        print('{} {} {} {}'.format(b.x,b.y,a.x,a.y))

        print('{:.7f} {:.7f} {:.7f} {:.7f}'.format(result1.x,result1.y,result2.x,result2.y))
        print('{:.7f} {:.7f} {:.7f} {:.7f}'.format(result1.x,result1.y,result2.x,result2.y))
        print('{:.7f} {:.7f} {:.7f} {:.7f}'.format(result2.x,result2.y,result1.x,result1.y))


print(*ans[0], *ans[1])


    print(*x[0], *x[1])


    print(f'{pi_list[0].real:.6f} {pi_list[0].imag:.6f} {pi_list[1].real:.6f} {pi_list[1].imag:.6f}')


print("{:.8f} {:.8f} {:.8f} {:.8f}".format(xa, ya, xb, yb))


print(*pg.cross_c_c(c1, c2))


            
print('{:.8f} {:.8f} {:.8f} {:.8f}'.format(res1.x, res1.y ,res2.x, res2.y))





        
        print(ans1.x, ans1.y, ans2.x, ans2.y)
        print(ans2.x, ans2.y, ans1.x, ans1.y)
        

        print(self.x, self.y)

    print(f"{a.x: .8f} {a.y: .8f} {b.x: .8f} {b.y: .8f}")


    print(" ".join(map('{:.10f}'.format, [pt1.x, pt1.y, pt2.x, pt2.y])))

print(*map("{:.12f}".format, p1), *map("{:.12f}".format, p2))

  print('{:.10f}'.format(x),'{:.10f}'.format(y))

  print('{:.10f}'.format(x))

  print(x,y,x,y)
  print(str_float(p0[0]),str_float(p0[1]),str_float(p1[0]),str_float(p1[1]))

    print(x, y)


print(f'{ans[0].real:.15f} {ans[0].imag:.15f} {ans[1].real:.15f} {ans[1].imag:.15f}')

    print(x0.x, x0.y)
    print(x1.x, x1.y)



    print("{:.10f} {:.10f}".format(*p1))
    print("{:.10f} {:.10f}".format(*p2))


    print(x1, y1)
    print(x2, y2)

print(ix1 + cx, iy1 + cy)
print(ix2 + cx, iy2 + cy)

        print(projection(l, p))

        print(reflection(l, p))

            print("COUNTER_CLOCKWISE")
            print("CLOCKWISE")
            print("ONLINE_BACK")
            print("ONLINE_FRONT")
            print("ON_SEGMENT")

            print(2)
            print(1)
            print(0)

            print(1)
            print(0)


        print(crosspoint_ss(s1, s2))  

        print("{:.8f}".format(distance_ss(s1, s2)))

    print(intersect_cc(Circle(Point(c1x, c1y), c1r), Circle(Point(c2x, c2y), c2r)))

        print(*Points)

    print(*Points)  

    print(*Points, sep="\n")    

    print('{:.7f}'.format(x), '{:.7f}'.format(y))

print(ix1 + cx, iy1 + cy)
print(ix2 + cx, iy2 + cy)

print('{:.8f} {:.8f}'.format(*p1))
print('{:.8f} {:.8f}'.format(*p2))


        print(f'{pt.real:.5f} {pt.imag:.5f}')


print("{:.8f} {:.8f}\n{:.8f} {:.8f}".format(xa, ya, xb, yb))

print(f"{cp1.real:.10f} {cp1.imag:.10f}")
print(f"{cp2.real:.10f} {cp2.imag:.10f}")

print(f'{p0.x:.10f} {p0.y:.10f}\n{p1.x:.10f} {p1.y:.10f}')


print(*pg.tan_to_circle(c, Point(px, py)), sep="\n")


print(ix1 + cx, iy1 + cy)
print(ix2 + cx, iy2 + cy)


    print("{:.6f} {:.6f}".format(*p1))
    print("{:.6f} {:.6f}".format(*p2))


  print('{:.10f}'.format(x),'{:.10f}'.format(y))

  print('{:.10f}'.format(x))

    print(x, y)

	print(f'{x.real:.15f} {x.imag:.15f}')

        print("{:.10f} {:.10f}".format(*map(eliminate_minus_zero, p)))


    print('{:.7f}'.format(x), '{:.7f}'.format(y))

        print(f'{tx:5f} {ty:.5f}')

    print(f'{u:.10f} {v:.10f}')

    print('{:.10f} {:.10f}'.format(x, y))


print(*ans, sep="\n")


        print("{:.6f} {:.6f}".format(*p))


        print("\n".join("%.08f %.08f" % p for p in res))


  print('{:.10f}'.format(x),'{:.10f}'.format(y))

  print('{:.10f}'.format(x))

print(f'{ans:.6f}')



    print("{:.10f}".format(eliminate_minus_zero(intersection((0, 0, r), ps))))


    print(f'{area:5f}')



print(area)



print(solve())



    print("{:.6f}".format(intersection((0, 0, r), ps)))


print(circles_intersection_area((x1, y1), r1, (x2, y2), r2))


print(f'{ans:.15f}')


    print(f'{calc_area_of_intersection_between_two_circles(x0, y0, r0, x1, y1, r1):.6f}')

print(f"{area:.16f}")

        print("%.16f\n" % circles_intersection_area(x1, y1, r1, x2, y2, r2))

print(fstr(ret))

        print(f"{self.x: .9f} {self.y: .9f}")

    print(f"{s: .09f}")



print(coin_changing(n, coins[:], n))


print(roop(n,m,c,0,0,n,n))

print(cs(n, 0, c))


print(coin(n, 0, mon))


print(dp[n])
            
        

    print(dp[-1])
    print(table[payment])
print(lilas(n,l))

    print(dp[n])



    print(dp[n])


    print(dp[n])
    
print(minM(n))


print(cnt[-1])


print(dp[n])


print(mm[V])

 
 
print("%d"%(table[n]))


print(dp[0])



print(dp[n])

print(dp[n])

    print(ans)
print(dp[n])

      
print(DP[-1])

		
		
print(dp[N])

print(dp[N])

    print(res)

        
            
    
print(dp[-1])


print(DP[m][n])

        


print(dp[-1][-1])


print(dp[-1][-1])


print(dp[n])

    
print(dp[n])

    
    print(dp[m][n])




print(dp[m-1][n])

        print(*[str(x).rjust(3) for x in array[i]])

print(dp[m][n])

print("%d"%(dp[N]))


print(ANSLIST[n])

    print(dp[n])
print(l[n])

print(dp[m][n])

print(dp[S][N])


print(s[m][n])

print(dp[-1])

print(dp[-1])

print(ans)


print(dp[M-1][N])


print(dp[m][n])

print(dp[N][M])

print(N[m][n])
    

print(data[n])


print(ncoin[n])

print(array[n])

    print(dp[-1])
print(dp[n])

    print(table[n])

print(dp[-1])



print(dp[m][n])


print(ans)

    print(dp[w])
print(values[0])


    print(max(dp))
    
    print(C[0])


    print(max(dp))
 print(C[W])

print(solve_small_weight_knapsack_problem_1D(N, W, items))


print(value[-1])

print(Bag[W])

    print(max(dp))

print(max(dp))

    print(dp[W])

            
print(dp[W])
            


print(dp[-1])

    print(dp[N][W])


    print(dp[N][W])


    print(dp[N][W])


print(dp[-1])


print(max(la))


print(max(dp))

print(result)

    print(dp[W])
    print(dp[N][W])


print(dp[-1][-1])



    
print(dp[n][max_w])

print(dp[-1][-1])



print(dp[N][W])

print(dp[N][W])

    print(ans)

print(dp[N][W])

    print(v[w][n])
print(dp[-1][-1])

print(dp[N][W])

      
print(DP[n][-1])
  

print(ans)


print(DP[N][W])

print(max(A)[0])
    

print(solve(W,A))


    
    print(dp[N][W])

print(V[N][W])


print(dp[N][W])

print(dp[N][W])


print(V[N][W])
    

print(dp[n][w])

print(dp[N][W])


print(dp[W])


    print(max(dp))

print(knapsack(N, W))

print(max(dp[-1]))

        print(*array[i])

print(max(dp[-1]))

print(max(list(map(lambda x: max(x),dp))))



    print(max_value(t, vs))


    print(res)



print(dp[N][W])


    print(dp[W])

    print(dp[W])



print(max(dp[-1]))


print(max(box[-1]))

print(l[W])

    print(ans)



print(mm[0][M])

    print(dp[n][max_W])


print(dp[N][W])

    print(knapsack(n_goods, weight))


    print(dp[-1])

    print(dp[-1])

print(dp[N][W])

            
print(dp[W])

	print(max(dp))


print(dp_table[-1])


        
            
print(dp[W])
            


    print(dp[w])

    print(dp[max_W])


    print(max(dp))
    
print(solver.solve(W))

print(lala(w,l))

    print(max(dp))

print(knapsack(N,W))

print(max(dp))

        
print(value[-1])




print(ans)




print(dp[W])

print(dp[W])
      


print(dp[W])

print(Bag[W])

           
print(solve(W,A))


print(DP[-1])


print(dp[W])

print(dp[W])

print(max(dp))

print(dp[-1])

print(dp[-1][-1])


print(max(dp))

print(value[W])



print(dp[-1][W])


print(max(la))



print(dp[n][maxw])

print(dp[-1])


print(DP[N][W])

    print(dp[W])
print(dp[-1][-1])


print(dp[N][W])

	print(max(dp))


            
print(dp[N][W])
        

print(dp[N][W])


print(V[N][W])
    


print(dp[N][W])

print(dp[N][W])

    print(solve(N, W, data))
    print(dp[-1])
    print(C[W])

print(dp[W])


    print(max(dp))



print(max(dp[N-1]))


print(dp[N][W])

    print(max(dp))
print(max(dp))


    print(dp[-1])


    print(dp[N][W])


print(dp[-1])


print(max(dp))


    print(dp[W])

print(ans[W])

print(ans)


print(rec(n, W))
   




print(DP[N][W])

print(solve(n, w, bl, al))



print(res)

    print(dp_table[W])


    print(dp[-1])

print(dps[W])

  print(solve(items, dp, w))

    print(dp[W])



    print(dp[-1])


print(max(dp))

    print(knapsack(n_goods, weight))



print(dp[W])


    
    print(max(dp))


    print(ans)



    print(max_value(t, vs))


    print(dp[-1])



    print(ans)


    print(max(dp))

    
    print(ans)


    print(len(lis))


    print(len(m))
print(len(dp))


    print(ans)


    
print(len(LIS))

print(lis(a))



print(LIS_length(A))



print(len(A))

print(ans)


print(len(lis))


print(bisect.bisect_left(dp[1:], infinity))


    print(ans)


print(LIS(a))



print(len(L))
        
        



print(bisect.bisect_left(dp, inf))

    print(length)

        
print(dp[n])

print(LIS.index(float('inf')))

            print(i)
    print(max_length)

    print(len(L))


print(LIS(A))

    print(bisect_left(dp, INF - 1))


    print(len(LIS))

print(LIS(A,1))


    print(len(L))


print(result)


print(len(A))

    print(len(LIS))


    print(LIS.index(INF))


print(solve(n, a))



print(LIS())

    print(ans)


    print(ans)

print(ans)



    print(result)



print(result+1)


print(len(L))

print(len(D))

    print(bisect_left(dp, INF))



print(len(L))

print(len(dp))

print(bl(r,1e9))

    print(len(l))


    print(len(x))


print(len(l))

    print(ans)
    print(bisect.bisect_left(dp, INF))


print(len(lis))


    print(bisect.bisect_left(dp, 1 << 60))


            print(i)

    print(n)

            print('DEBUG:{} -> {}'.format(name, val), file=sys.stderr)
    print(LIS2(X))

    
    print(dp[-1][-1])


    print(dp[-1][-1])



print(Levenshtein(input(),input())[-1][-1])

            
                print(levenshtein(s1, s2))
print(dp[-1][-1])


print(dp[-1][-1])

print(Map[LB][LA])

print(search(a,b))




print(levenshtein_distance(S, T))


    print(levenshtein_distance(s1, s2))



print(ans)

    print(A[-1])

print(distance(s1, s2))



print(delta(s1, s2))


print(levenshtein(s1, s2))


print(edit_dist(s,t))

    print(edit_dist(s0, s1))


print(edit_dist(s,t))


print(search(X,Y))



    print(dp[N][M])


print(L_distance(s,t))

  print(dp[-1][-1])
    
	print(Levenshtein(input(),input()))
	
print(e(s1,s2))

print(edit_distance(a,b))


print(ld(0, 0))


    print(dp[-1][-1])


print(ans)


print(minDistance(s1,s2))



print(levenshtein(input(), input()))

    print(dp[-1][-1])
     print(ED())

print(levenshtein_distance(s1, s2))

    print(dp[N][M])


  print(dp[-1][-1])
    
print(l_dist)

    print(EditDistance(a,b))


print(edit_dist(input(), input()))

    print(res)


    print(dp[ls1][ls2])


    print(dp[n][m])


    print(dp[-1][-1])

print(solve())

print(levenshtein_distance(s1, s2))


print(c)

    print(tb[l1-1][l2-1])


print(Levenshtein_d(s1,s2))



    print(editDist(s1, s2))

    print(ans)


print(ans)

        print(dp[len(self.s1)][len(self.s2)])





    print(levenshtein(s1, s2))

    


print(Edit_dis(s,t))


print(edit_dist(s1, s2))



    print(levenshtein(s1, s2))
    
print(ED(a,b))


print(edit(s1,s2))



print(levenshtein(s1, s2))

print(dp[-1][-1])

    

print(levenshtein(s, t))


print(ans(n, m))


print(levenshtein(s1, s2))


print(levenshtein(X,Y))


print(solve(a,b))



    print(dp[ls][lt])
    
print(levenshtein_distance(a, b))

    print(l)


    print(A[i], end='')
  print()













print(ans)






print(levenshtein_distance(s1, s2))


print(levenshtein(s1, s2))


  
print(arr1[-1])

print(Levenshtein(S, T))


print(solve_small_value_knapsack_problem_1D(N, W, items))

print( max([v for v,w in dp.items() if w <=W]) )

    
    print(ans)


    
    print(ans)


    print(ans)

        
print(ans)
        


        print(v)
        print(v)

print(next(filter(lambda i: isfinite(dp[i]), range(dpn, -1, -1))))

            print(v)
    print(bu(n, w, vw))


print(ans)



    print(max_value(t, vs))


        print(i)
            print(i)
print(ans)

print(sack(N,W,vlist,wlist))

            print(i)

    print(knapSack(vw, n, W))

            print(i)
            print(i)
  print(max(dp.values()))

print(solve1())


print(bl(dp,float("inf"))-1)


print("{:d}".format(max([i for i in range(len(table)) if table[i] <= W])))


print(ans)

print(v)


    print(i)
print(ans)


        print(j)
        print(V-i)
        print(10000-i)
    print(ans)

    print(bisect.bisect_right(dp, W) - 1)


print(max(i for i in range(V+1) if dp[i] <= W))

print(max(i for i in range(V+1) if dp[i] <= W))

print(knapsack_val(W, items))


print(vp)


print(ans)

        print(ans)
print(ans)

print(knapsack(n, w, info))



print(Knapsack(N, W, v, w))

print(max(ans))


print(max_v)

print(ans)


print(ans)


            print(value)
    print(j)
    print(ans)

print(ans)

        print(i)

print(max(j for j in range(V+1) if dp[j] <= W))


print(ans)


    print(ans)


print(ans)    



print(i)


print("%d"%(ans))

        print(i);exit()



    print(ans)



    print(result)

        print(i)
        print(i)
        print(j)

    print(ans)



print(max([v for n in range(N) for v, w in enumerate(dp[n]) if w <= W]))


print(max(v for v, w in enumerate(dp) if w <= W))



print(max(i for i, x in enumerate(dp[N]) if x <= W))


        print(v)
print(sack(N,W,vwmlist))

print(sack(N,W,vwmlist))

    print(max(dp))


print(ans)

    print(dp[-1])

  print(opt_value(w, items))

print(ans)



print(SWM_knapsack(n, w, data))


print(knapsack_limited(v,w,m,W))

  print(ans)
print(number_limit_knapsack(N, W))

print(ans)



print(max(dp))

    print(dp[-1])

    print(max(dp))


print(max(dp[n]))


print(dp[W])

print(result)


    print(max(dp))



print(ans)

  
  print(dp[w])

print(dp[W])





print(value[-1])

    print(dp[W])


    print(max_value(t, vs))



print(max(dp))

print(dp[W])

print(ans)

    print(ans)


            
print(dp[-1])


print(max(dp))



    print(dp[W])



print(max(dp))




print(dp[W])


print(Knapsack(V, W, M, Z, N))

print(dp[W])


print(dp[-1])



print(max(dp))


print(solve(N, W, ws, vs, ms))

    print(dp[m])



print(solve(N, W, ws, vs, ms))


print(knapsack_weight_num())

print(solve(n,WL,VM,WM,MM))



    print(max_value(t, xs))


	print(branchAndBound(N, items, lim_w))


        print(ans)
        print(v*int(w<=W))
print(ans)


    print(max_value(t, xs))


  print(ans)
  print(ans)

    print(-vm1)



print(BB(A))     


    print(max_value(W, items))


print(ans)


    
    print(ans)


    print(ans)


print(ans)

print(ans)


print(max(solve(T0, T1)))



print(ans)


print(res)


    print(ans)


print(main())





            print(v_list[0])
            print(0)

        print(max_v)

print(ans)


print(ans)

                print(ans)
    print(ans)


print(ans)




print(ret)
print(dp[n])

print(max(dp))
print(dp[w])
print(bisect.bisect_left(dp,100000000000000))
print(dp[n][m])
print(bisect.bisect_right(dp,W)-1)
print(ans)
    print(-1)
    print(ans)
print(ans**2)
print(ans)
print(ans)
print(ans%1000000007)
    print(0)
print(ans)
print(ans)
    print(0)
print(comb(k,n))
    print(0)
print(comb(n-1,n-k))
print(ans)



print(ans)



print(solve(make(A[:n//2]),make(A[n//2:])))



print(ans)



print(ans)



    print(ans)

print(ans)


	print(ans)

print(ans)


print(knapsack_meetinthemiddle(N, W, item))

    print(ans)



print(ans)

print(ans)


    print(-max_cost)


    print(max_value(t, xs))



    print(-um)




    print(max_value(W, items))


print(BB()) 


print(solve(n, w, ws, vs, ms))



    print(ans)

  print(ans)

    print(result if result < float("inf") else -1)


        print(-1)
        print(ans)

print(dp[-1][0] if dp[-1][0] != infinity else -1)


    print(ans if ans<INF else -1)

    print(ans if ans!=INF else -1)
    print(-1)
    print(rlt)

print(ans if ans < 15001 else -1)

print(m if m != INF else -1)



print(ans if ans < INF else -1)

    print(-1)
    print(ans)


    print(ans if ans<INF else -1)

print(ans if ans != INF else -1)

    print(ans)
    print(-1)

        print(dp[2**V-1][0])           
        print(-1)
                        



print(dp[(1<<N)-2][0] if dp[(1<<N)-2][0] != INF else -1)


    print(-1)
print(ans)

    print(-1)
print(dp[B-1][0])
print(ans if ans != INF else -1)

  print(-1)
  print(ans)

print(int(ans))


print(ans)

    print(ans)
    print(-1)
    print(ans)

    print(ans)
    print(-1)

    print(-1)
    print(res)


    print(-1)
    print(result)


print(dp[-1][0] if dp[-1][0] < inf else -1)


print(dp[2**N-1][0] if dp[2**N-1][0]!=INF else -1)




    print(-1)
    print(ans)

  print(-1)
  print(res)



    print(ANS if ANS != INF else -1)


    print(-1)
    print(ans)

    print(-1)
    print(dp[(1 << n)-1][0])



    print(dp[0][-1] if dp[0][-1] < INF else -1)


    print(-1)
    print(result)



    print(dp[-1][0] if dp[-1][0] != float('inf') else -1)

    print(-1)
    print(ans)


print(ans if ans != INF else -1)

    print(-1)
    print(ans)

    print(-1)
    print(ans)


        print(result)
        print(-1)

        print(-1)
        print(answer)            


        

    


    print(-1)
    print(-1)
    print(ans)





        print(-1)
        print(ans)
print(ans if ans < INF else -1)


    print('-1')
    print(ans) 


    print(-1)
    print(ans)


print(ans if ans < INF else -1)







































        print(-1)
        print(ans)

        print(-1)
        print(ans)


print(ans)

    print(-1)
    print(dp[(2**v-1)][0])

print(-1 if isinf(ans) else ans)

    print(-1)
    print(r)


        print(-1)
        print(DP[2**V-1][0])
    print(-1)
    print(ans)


print(-1 if ans == INF else ans)


        print(ans)
        print(-1)

    print(res)

    print(ans)
    print(-1)

  print(ans2)
  print(-1)
      
    
  

        print(-1)
        print(ans)


print(dp[2**v-1][0] if dp[2**v-1][0]!=inf else -1)
  print(ans)
    print(-1)
    print(ans)
    

        




print(ans)


    print(ans if ans < INF else -1)

        print(ans)

    print(ans)


print(solve(A))

    print(ans)
    print(ans)

        print(ans)
        print(ans)


print(ans[0]+tmp)

    
    print(dp[-1]+ans)


    print(sum_d + p_cost)

    
print(chinese_postman(G))


print(sums + mini)



print(solve(v, dists, total_d, [i for i, v in enumerate(odd_vertices) if v]))


print(solve())

print(min_cost + sum(d for x, y, d in edge))


print(cost + ccp(distance_table, point_size, v))

print(ANS[need_visit] + base)



print(ans + dp[mask])


print(cost0 + cost1)

print(ans[sum(odd_node)]+base)

    print(bitonic_tsp_distance(points))



print(calc(0, 0, 0))

print(min(min(s, t) + dist(PS[i], PS[N-1]) for i, (s, t) in enumerate(zip(S, T))))


    print(ans)



    print(ans)



    print(f'{result:.4f}')

print(dp[n - 2][n - 1] + dist[n - 2][n - 1])


	
print("{:.5f}".format(ans))

print(DP()) 

print(ans)


print(btsp())

    print(tsp(0,0,0))


print(dp[N-2][N-1]+dist(N-2,N-1))

print(result)


print(ans**2)

print(side_length**2)

    
    print(ans**2)


print(l**2)



    print(ans**2)




    print(side_length ** 2)

print(L*L)

		
print(ans)













print(a**2)


print(max_d**2)


print(max_square ** 2)



print(solve())


        print(d)


        print(0)
    print(max(list(map(lambda x: max(x), dp)))**2)


    print(max([max(p) for p in dp]) **2 )
    

    print(max([max(item) for item in dp])**2)


print(ans)



    print(largest_square ** 2)


print(max([max(a) for a in dp])**2)


print(max_square(h, w, G, 1)**2)


        

print(max_area)
    

    

print(a*a)
            



print(max(max(i) for i in dp) ** 2)

print(side_length**2)


    print(ans ** 2)

print(max([max(x) for x in dp])**2)

        



print(ans**2)

print(max(max(dp[h])for h in range(H+1))**2)


    print(ans**2)


print(str(ans))

print(solve(h, w, grid))

print(ans**2)


    print(ret*ret)


print(mx**2)



print(max(map(max,dp))**2)





    print(ans * ans)



    print(max_len ** 2)

print(ans**2)


print(ans)


print(ans * ans)


print(ans**2)

print(get_ans)


print(mx ** 2)



    print(max_edge_length**2)

print(ans)


print(result**2)


print(ans**2)


    print(ans ** 2)


print(mx**2)



    print(getLargestSquare(h, w, c))

print(ans ** 2)


print(a ** 2)


print(ans**2)

print(Largest_Square(grid))




print(ans**2)

    print(max_width**2)



print(maxsquare**2)

    print(largest_square(h, w, c))



print(r**2)

print(ans*ans)


print(ans ** 2)


print(max_width**2)

    
    print(ans)


               
print(ans)     



print(max(map(largestRectangleArea, hist)))


print(result)



    print(ans)


    print(ans)



print(result)


    print(result)



print(result)


print(max_area)



















print(result)

    print(ans)


print(result)

    
print(result)


print(result)

    print(max_area)

print(ans(C))


print(ans)

print(ans)

print(ans)

print(max_rect(h, w, G, 1))




print(Largest_Rectangle(C,h,w))
print(ans)


print(ans)

    print(ans)

    print(solve(H, W, C))



print(ans)


print(ans)

    print(largest_rectangle_grid(grid, ok=0, ng=1))



    print(max_area)

    print(max(max_rect_in_hist(c) for c in C))
print(ans)

    
    print(ans)
    
        
print(max_area)

print(ans)




    print(largest_rectangle(h, w, c))


    print(calc_largest_rect_in_hist([int(x) for x in input().split()]))


    print(ret)



print(result)



print(ans)



print(ans)







print(max_rectangle(C, 0))




print(max_rectangle(G,H,W))

print(max_rect)

    print(ret)


print(ans)


        
        
print(maxrectangle())

    print(ans)



print(ans)





print(ans)



print(ans)


print(result)

            

print(max_S)
                









print(max_s)


print(mx)




print(solve())


print(ans)



    print(getLargestRectangle(h, w, c))

        
print(ans)
        

    print(l)


    print(A[i], end='')
  print()










print(ans)




print(m)

            
print(maxv)


    print(max_area)







print(cost)

    
    print(ans)


print(result)

print(ans)

    print(ans)


print(ans)

    print(ans)

            
print(histmaxmodify(A,N))


print(ans)


print(square(li))

print(ans)


print(square(C))


    print(calc(H))

print(largest(A))

print(Largest_Rectangle_in_a_Histogram(n,h))


print(ans)



    print(ans)


    print(ans)


print(largest_rectangle(h[:]))

print(maximum_rectangle(a))

    print(ans)



    print(ans)
print(get_largest_rectangle(h))


    print(max_area)

    print(calc_largest_rect_in_hist([int(x) for x in input().split()]))



print(ans)


print(ans)

print(square(li))

print(max_rect(H))


print(largest_rectangle_area(histogram, n))

print(max_hist(A))



print(ans)

print(max_rectangle(a))

    
print(ans)

 
print(ans)

print(ans)

print(ans)


print(ans)



print(ans)

print(max_hist_rectangle(hist))

    print(ans)



print(max_num)


print(ans)

print(m)



print(ans)


print(ANS)



print(max(ans.values()))


print(max(ans))
    

print(ar)

print(S_max)

print(S)


print(max(c))


print(ans)



print(ans)


print(ans)


print(ans)



print(answer)

print(ans)

    print(solve(h=h))


    print(ans)

print(ans)

print(ans)


    print(ans)


        
        
print(ans)


print(sum(g*cd[v-f] for f,g in ab.items() if v-f in cd))



    print(sum(mp[v - val1 - val2] for val1 in a for val2 in b))


    print(sum(sum_dic[v - a - b] for a in a_list for b in b_list))

    print(ans)


print(ans)


    
    print(ans)

    
print(ans)


print(cnt)

print(sum(t * cd[v - k] for k, t in ab.items() if v - k in cd))


    print(sum(v * db[V-k] for k, v in da.items()))


print(ans)



print(solve(n, v))

print(cnt)


print(ans)



print(ans)



print(ret)


print(ans)


print(ans)

print(dp[n])

print(max(dp))
print(dp[w])
print(bisect.bisect_left(dp,100000000000000))
print(dp[n][m])
print(bisect.bisect_right(dp,W)-1)
print(max(dp))
print(ans**2)
print(ans)
print(ans)
print(ans%1000000007)
print(ans)
print(ans)
    
    print(ans)


print(ans)



    print(ans)

print(ans)    

print(ans)


print(ans)



print(ans)

print(ans)

    
print(ans)


    print(count)



print(ans)


print(ans)


print(ans)


print(ans)


print(ans)


    print(ans)


    
    print(ans)

    print(ans)


print(solve())


print(ans)


    print(counter)


    print(ans)


        
    print(sm)



print(ans)


print(ans)


print(ans)





print(ans)


print(f(r)-f(l-1))



print(total)

print(ans)

    print(ans)

print(ans)

        print(int(l <= a[0] <= r))
    
    print(ans)

print(ans)


    print(ans)
print(ans)


print(ans)


print(ans)

print(ans)


print(ans)


print(ans)

print(ans)



print(ans)

print(ans)


print(solve())

    print(ans)

    print(ans)
print(ans)


    print(ans)


print(ans)


    print(ans)


    print(ans)

    print(ans)
    print(ans)


    print(ans)


print(ans)


print(ans)

print(ans)



    print(count)

print(ans)

    


print(ans)
    
  




print(answer)

print(pow(K,N,MOD))

    print(ans)

print(ans)

print(pow(k,n,10**9+7))

	print(k**n % MOD)
print(pow(k,n,10**9+7))

print(ans)


print(pow(K, N, MOD))


print(pow(m,n,mod))

print(pow(k,n,1000000007))

print(pow(k,n,10**9+7))


print((k**n)%(pow(10,9)+7))

print(pow(k,n,1000000007))

print(ans)

 
print(pow(K, N, MOD))

print(pow(k,n,1000000007))

print(k ** n % (10**9+7))

print((k**n)%1000000007)

print(ans)

    print(ans)


print(pow(k, n, mod))


    print(ans)


print(ans)

print(ans)



print(pow(k,n,1000000007))


    print(pow(K, N, mod))

    print(pow(k,n))


print(way1(n, k))

print(ans)


print(pow(k, n, 10 ** 9 + 7))

print(pow(K, N, MOD))


print(pow(b,a,10**9+7))

    print(k**n % 1000000007)


print(ans)

print(pow(k, n, 1_000_000_007))


print(ans % mod)

print(pow(k, n, 10**9 + 7))


print(ans)


print(pow(k,n,10**9+7))

print(pow(B,A,10**9+7))

print(pow(k, n, 10 ** 9 + 7))



print(k ** n % (10 ** 9 + 7))


print(pow(k,n,1000000007))

print(k ** n % 1000000007)

print(pow(k,n,10**9+7))

print(ans)

print(pow(k, n, mod))


    print(pow(K, N, 10 ** 9 + 7))


print(pow(K, N, MOD))

print(pow(k, n, mod))


print(pow(k,n,mod))

print(pow(k,n,10**9+7))


print(main(sys.stdin))


print(pow(b, a) % 1000000007)


print(pow(k, n, MOD))


print(pow(k,n,mod))

print(pow(k, n, mod))


    print(result)

print(pow(k, n, 10 ** 9 + 7))


    print(pow(k, n, mod))

print(ans)

print(ans)


print(modpow(k, n, mod))

print(pow(k, n, MOD))


print(ret)


    print(pow(k,n,d))
    


print(res)


print(permutation_mod(n, k))

        print(0)
    
    print(ans)


print(BC.P(k,n))

		print(0)
		print(ans)
    print(0)
    print(a%(10**9+7))

print(ans%1000000007)

    print(0)
    print(ans)


print(P(k,n)%(pow(10,9)+7) if k >= n else 0)

    print(0)
    print(ans)

    print(math.factorial(k) // math.factorial(k-n) % MOD)
    print(0)

    print(0)
    print(result%1000000007)

print(ans)

    print(ans)


    print(ans)


        print(0)

    print(ans)

        print(0)

    print(ans)


        print(0)
        print(x)

print(ans)


        print(0)

    print(ans)

	print(0)
	print(r)

    print(0)
    print(ans)

    print(e.permutate(k, n))



print(ans % mod)

print(perm(k, n))





print(perm(k, n))


print(ans)


    print(0)
print(ans)

print(ans)


    print(0)
    print(ans)

    print(0)
print(fact[k] * finv[k - n] % mod)


        print(0)
        
        print(ans)


print(Ans)

    print(0)
    print(ans)

    print(perm(k, n))


    print(0)
    print(val)


print(ans)


print(ans)

        print(0)
    print(result)

    print(0)

print(ans)



    print(perm_count(k, n) % mod)

print(ans)

print(answer)


print(ans)

    print(a)
    
    
print(ans)

print(comb.P(k, n))



    print(0)

print((facts[k]//facts[k-n])%mod)


    print(0)
    print(fac[k] * pw[k-n] % mod)


print(per.perm(k,n))

    print(Fermat.perm(k, n))

print(ans)


    print(0)
    print(pow(int(factorial(k) // factorial(k - n)), 1, 10 ** 9 + 7))


print(ans)

print(ans)


print(main(sys.stdin))



print(way2(n, k))


    print(ans)




print(P(k,n))


    print(0)
    print(fact[k] * fact[-(k - n)] % mod)


print(ans)

print(ret)



print(t.solve(n, k, 0, 0, 1, 0))

    print(0)

print((res-f(1))%MOD)

print(comb.balls_and_boxes_3(n, k))


        print(0)
        print(factorial(N) % mod)

    print(ans)

        print(0)
        print(ans)

print(ans%MOD)



print(ans % MOD)


print(ans)

print(Ans)

        print(0)
    print(ans % MOD)


    print(0)
    print(ans % MOD)


print(ans)

    print(0)
    print(ans % MOD)

print(ans)

    print(0)
print((total - ng) % mod)


    print(0)
    print(ans)

print(twelvefold3(n,k))

print(x)

    print(0)
    print(ans % MOD)


print(ans)

print(dp[n])

print(max(dp))
print(dp[w])
print(bisect.bisect_left(dp,100000000000000))
print(dp[n][m])
print(bisect.bisect_right(dp,W)-1)
    print(-1)
    print(ans)
print(ans**2)
print(ans)
print(ans)
print(ans%1000000007)
    print(0)
print(ans)
print(ans)
print(ans)

print(way3(n, k))

    print(0)
print(ans)


	print(0)

print(ans)


    print(fact[K]*S(N,K) % mod)



    print(0)

print(ans)


  print(ans % 1000000007)

        print(st2(n,k))
    print(0)
    

    print(ans)


print(calc(n,k)%(pow(10,9)+7) if n > k else factorial(n)%(pow(10,9)+7) if n == k else 0 )

print(ans%mod)




print(all)


print(ans % mod)


print(main(sys.stdin))



    print(ans)

print(ans%mod)

print(ans)



print(ans)

    print(0)

print(f(n,k)%mod)


    print(0)
    print(a[k]%(10**9+7))

print(ans)

print(Q(n,k,mod))



    print(result)


print(ans)

    print(ans)


print(ans)


        print(0)
        
        print(ans)


print(t.solve(n, k, 0, 0, 0, 1))

print(int(ans))

    print(ans % mod)

print(a%(10**9+7))

print(ans)



print(p * pow(q, MOD-2, MOD) % MOD)


print(comb(n + k - 1, k - 1) % 1000000007)


print(H(k,n)%MOD)

 
print(p * pow(q, MOD-2, MOD) % MOD)

print(comb(n + k - 1, k - 1) % MOD)


print(comb(n + k - 1, k - 1) % MOD)


print(ans)

print(comb.H(k, n))


print(cmb.comb(n+k-1, n))

print(ans)


print(factorial(N + K - 1) * pow(factorial(N), MOD - 2, MOD) * pow(factorial(K - 1), MOD - 2, MOD) % MOD)


print(mod_cmb(N+K-1,N))

print(t.solve(n, k, 1, 0, 0, 0))

print(ans%mod)

    print(e.choose_with_duplicates(n, k))


print(comb(k + n - 1, k - 1))


print(mod_binomial(n+k-1,n,10**9+7))


print(comb(n + k - 1, n))


print(nCr(N + K - 1, N))


    print(ncr(N + K - 1, N))


    print(hom(k, n))


print(ans)

print(comb(N+K-1, K-1)%(10**9+7))


print(fcb(K, N-1+K)//fcb(1, N) % MOD)


    print(result)

    print(comb_count(n+k-1, n) % mod)

print(ans)

print(com.com(n+k-1, k-1))


print(combinations_count(N+K-1, N)%(10**9+7))


print(permutations_count(N+K-1,K-1)//math.factorial(K-1)%1000000007)

print(ans)



print(combination(n+k-1,n)%mod)



    print(cmb(N+K-1, N) % mod)


print(fac[n+k-1]*pw[n]*pw[k-1] % mod)



print(way4(n, k))

print(fct[n + k - 1] * ict[n] * ict[k - 1] % MOD)


print(pcq(n+k-1,k-1))

    print(factorial(n+k-1)//(factorial(n)*factorial(k-1))%d)

    print(ans)

print(comb(n + k - 1, k - 1))



print(cmb(n+k-1, k-1))


print(cmb(n + k - 1, k - 1, mod))



print(C(n+k-1,k-1,))


    print(0)
    print(fact[n]*(fact_inv[k]*fact_inv[n-k]%MOD)%MOD)



    print(cmb(n+k,k))

print(nHk(k, n))

    print(ans)


print(c(n + k - 1, n))


    print(0)
    print(a%(10**9+7))

    print(0)

    print(p * pow(q, MOD-2, MOD) % MOD)


  print(0)
  print(comb(k, n) % 1000000007)


print(C(k,n)%MOD if n < k else 0 if n > k else 1)

print(ans)

    print(0)
 
    print(p * pow(q, MOD-2, MOD) % MOD)

print(comb(k, n) % MOD)


print(ans)

print(comb.C(k, n))


        print(0)
    print(a%p * b%p * c%p)
    
        print(0)

    print(cmb(K, N) % mod)

print(ans)


    print(0)
    print(factorial(K) * pow(factorial(N), MOD - 2, MOD) * pow(factorial(K - N), MOD - 2, MOD) % MOD)


	print(0)
print(mod_cmb(K,N))

    print(0)
    print(ans%mod)


print(ans % mod)

print(comb(k, n))


    print(0)
print(fct[k] * ict[n] * ict[k - n] % MOD)


print(mod_binomial(k,n,10**9+7))

print(nCr(K, N))

    print(0)
    print(pcq(k,n))

    print(cmb(k, n) if k >= n else 0)


print(comb(K, N)%(10**9+7) if K >= N else 0)


    print(0)
    print(fcb(K-N+1, K)//fcb(1, N) % MOD)


        print(0)
    print(result)

    print(comb_count(k, n) % mod)

print(ans)

print(ans)


        print(0)
    print(combi(k,n)%d)
print(int(ans))

    print(ans)


print(CBF.comb(k, n))

    print(0)
    print(fac[n]*pw[k]*pw[n-k] % mod)


    print(0)


print(combination(k,n)%mod)



print(way5(n, k))

print(t.solve(n, k, 1, 0, 1, 0))

    print(e.choose(k, n))


    print(0)

print(comb(k, n))


        print(0)
        print(ncr(K, N))



print(cmb(k,n))

print(dp[n])

print(max(dp))
print(dp[w])
print(bisect.bisect_left(dp,100000000000000))
print(dp[n][m])
print(bisect.bisect_right(dp,W)-1)
    print(-1)
    print(ans)
print(ans**2)
print(ans)
print(ans)
print(ans%1000000007)
    print(0)
print(ans)
print(ans)
    print(0)
print(comb(k,n))

    print(ans)

    print(0)
    print(comb(k, n))


    print(0)
    print(fact[n]*(fact_inv[k]*fact_inv[n-k]%MOD)%MOD)




print(cmb(k, n, mod))


        print(0)
    print(nCk(K,N))




print(C(k,n))



print(ans)

        print(0)
        print(cmb(k,k-n))

print(nCk(k, n))

    print(ans)


print(c(k, n))


print(cmb(n-1, k-1, mod))

    print(0)
    print(a%(10**9+7))

    print(0)

    print(p * pow(q, MOD-2, MOD) % MOD)


    print(0)
print(ans)

  print(0)
  print(comb(n - 1, k - 1) % 1000000007)

print(H(k,n-k)%MOD if n >= k else 0)

    print(0)
 
    print(p * pow(q, MOD-2, MOD) % MOD)

print(comb(n-1, k-1) % MOD)

    print(ans)
    print(0)

        print(0)

    print(cmb(N-1, N-K) % mod)

print(ans%MOD)


	print(0)
print(mod_cmb(N-1,K-1))

    print(0)
    print(ans%mod)


print(comb(n - 1, k - 1))


    print(0)
print(fct[n - 1] * ict[k - 1] * ict[n - k] % MOD)


print(mod_binomial(n-1,k-1,10**9+7))

    print(0)

print(comb(n + k - 1, n))


print(nCr(N - 1, K - 1))

        print(0)
        print(ncr(N - 1, N - K))


        print(0)
    print(cmb(n - 1, k - 1))


print(comb(N-1, K-1)%(10**9+7) if N >= K else 0)


    print(0)
    print(fcb(N-K+1, N-1)//fcb(1, K-1) % MOD)


        print(0)
    print(result)

print(ans)

        print(0)
    print(combi(n-1,k-1)%d)
    
print(ans)

print(comb.H(k, n-k))


    print(0)



print(combination(n-1,k-1)%mod)



print(way6(n, k))

print(t.solve(n, k, 1, 0, 0, 1))

    print(0)
    print(pcq(n-1,k-1))


print(cmb(n-1,k-1))

print(ans)

print(dp[n])

print(max(dp))
print(dp[w])
print(bisect.bisect_left(dp,100000000000000))
print(dp[n][m])
print(bisect.bisect_right(dp,W)-1)
    print(-1)
    print(ans)
print(ans**2)
print(ans)
print(ans)
print(ans%1000000007)
    print(0)
print(ans)
print(ans)
    print(0)
print(comb(k,n))
    print(0)
print(comb(n-1,n-k))

    print(ans)

    print(0)
    print(comb(n + k - 1, k - 1))

    print(0)
    print(fact[n]*(fact_inv[k]*fact_inv[n-k]%MOD)%MOD)




print(cmb(n - 1, k - 1, mod))


        print(0)
        print(1)
    
    print(nCk(N-1,K-1))


    print(0)
    print(ans)


print(C(n-1,k-1))


print(ans)

        print(0)
        print(cmb(n+k,k))

print(nHk(k, n - k))


    print(ans)


    print(ans)


print(answer)


print(ans)

print(ans)

print(Ans)

print(bell(n,k))
print(ans)



print(bell(n,k))


    print(ans)


print(bell(n,k))

    print(sum(a[:k + 1]) % (10 ** 9 + 7))


print(ans)

print(ans)

print(sum(a[:k+1])%(10**9+7))


print(B(n,k))


print(StirlingNumber(n, k))



    print(sum(dp[N]) % mod)

print(sum(dp[N&1])%MOD)


print(sum(D[N]) % MOD)

print(sum(D[N]) % MOD)



    print(result)

    print(ans)



print(ans % mod)


    print(ans)


print(ans)


print(way7(n, k))


print(sum(S[-1]) % mod)


print(ans)

print(sum(S[N][:K+1])%mod)

print(ans)


print(sum(DP[n]) % mod)


print(sum(D[N])%MOD)

    print(bell(n,k)%d)
    

print(sum(rec(n, kk) for kk in range(k+1)) % MOD)

        
print(B[N][K])

print(ans)

print(ans)

print(ans)


print(retval%mod)


print(ans)


print(comb.bell(n, k))


    print(ans % MOD)


print(t.solve(n, k, 0, 1, 0, 0))

print(ans)

        print(0)
        print(1)


print(int(a<=b))

print(+(N<=K))


print(0 if n > k else 1)

    print(1 if N <= K else 0)

print(1 if n <= k  else 0)

print(ans)

print(+(N <= K))

print(0 if n > k else 1)

    print(ans)


    print(1)
    print(0)


    print(1)
    print(0)

    print(0)
    print(1)

    print(1)
    print(0)


    print(0)
    print(1)


    print(1)
    print(0)


    print(1 if N <= K else 0)


print(way8(n, k))

print(int(eval(input().replace(" ","<="))))

    print(ans)


print(int(n <= k))


    print(0)
    print(1)


print(int(n <= k))


print(int(N <= K))

        print(1)
        print(0)


    print(1)
    print(0)

    print(1 if k >= n else 0)


print(1 if N <= K else 0)


        print(0)
        print(1)

    print(1 if n <= k else 0)

    print(1)
    print(0)

print(ans)

        print(0)
    print(1)
    
    print(1)
    print(0)

print(t.solve(n, k, 0, 1, 1, 0))

    print(0)
    print(1)

    print(1)
    print(0)


print(ans)

	print(1)
	print(0)

print(0 if n>k else 1)


    print(ans)

    print(0)
    print(1)

    print(1)
    print(0)


print(1 if k>=n else 0)


print(int(n <= k))


print(ans)

print(comb.stirling_second(n, k))


        print(0)
    print(ans % MOD)


print(ans)


print(Ans * KaijoInv[K] % MOD)

print(sterling2(n,k))


    print(ans)



print(stirling(n,r))


print(all // (math.factorial(k)) % MOD)

    
    print(S[N][K]%mod)


    print(0)
    print(ans)




print(ans * pow(inv, MOD - 2, MOD) % MOD)


    print(dp0[K] % mod)
    print(0)
    print(search(n,k))

    print(strec(n,k)%d)
    
print(ans)


print(rec(n, k))

    print(0)
    print(a[k]%(10**9+7))

print(StirlingNumber(n, k))


    print(0)

print((f(n,k)//facts[k])%mod)


print(S(n,k))


   print(0)
        
print(S[N][K])


    print(s[num_balls][num_boxes])

print(Stirling(n,k))



print(dp[k][n])

print(D[N][K])

    print(ans)


print(D[N][K])


print(dp[-1][-1])


print(ans)


print(way9(n, k))


    print(dp[-1][-1])


print(S[-1][-1])

print(S[N][K])


print(dp[n][k])


print(D[N][-1])


print(dp[n][k])


print(dp[n][k])



print(dp[-1][-1]) 


print(dp[n][k])

print(ans)


print(t.solve(n, k, 0, 1, 0, 1))

    
    print(P[N][K])


        print(1)

    print(sum(dp[N]) % mod)

print(sum(dp[N])%MOD)



    print(p[num_balls][num_boxes])

    print(DP[N][K]%MOD)
print(P(n,k))



print(way10(n, k))


    print(ans)



print(dp[k][n])

print(D[N][K])

print(D[N][K])


    print(ans)



print(dp[k][n])


    print(dp[-1][-1])

print(ans)


    
print(divide(n+k,k)%d) 

print(dp[k][n])


print(partition(n,k))

	
print(dp[n][k])

print(dp[n][k])



print(p[n][k])


print(partition(n,k))

print(PartitionNumber(n + k, k))


print(partition[n][k])

print(ans)

print(ans)


print(dp[n][k]%mod)





print(P[n][k] % mod) 

print(dp[n][k])


print(partition(n+k, k))


print(P[N][K])

print(ans)

print(P[N][K])

		
print(dp[n][k])

print(dp[n][k])

print(t.solve(n, k, 1, 1, 0, 0))

        print(0)
        print(1)


print(result % (10 ** 9 - 7))

print(0 if n > k else 1)

print(int(a<=b))

print(+(N <= K))

print(0 if n > k else 1)

    print(1 if N <= K else 0)

print(1 if n <= k else 0)

print(ans)

print(+(N <= K))

print(0 if n > k else 1)

    print(ans)


    print(1)
    print(0)


    print(1)
    print(0)


    print(0)
    print(1)


    print(1)
    print(0)

        print(0)
    print(1)


print(way11(n, k))

print(int(eval(input().replace(" ","<="))))

print(t.solve(n, k, 1, 1, 1, 0))

    print(0)
    print(1)

    print(ans)


    print(1)
    print(0)


print(int(n <= k))


    print(0)
    print(1)


        print(1)
        print(0)


    print(1)
    print(0)

    print(1 if k >= n else 0)


print(1 if N<=K else 0)


        print(0)
        print(1)

print(0 if n > k else 1)

    print(1)
    print(0)

        print(1)
        print(0)
    
    print(0)
    print(1)

print(int(n <= k))


print(ans)

	print(1)
	print(0)

    print(0)
    print(1)


    print(ans)

    print(0)
    print(1)


    print(1)
    print(0)

print(1 if n<=k else 0)



print(int(n <= k))


        print(0)
        print(1)

    print(dp[N][K] % mod)

        print(0)

    print(ans)


        print(0)

    print(p[num_balls - num_boxes][num_boxes])

        print(0)
    
    print(P[N-K][K])



print(ans)

    print(dp[k][n])


        print(dp[-1][-1])
        print(0)

print(P(n-k,k))


print(partition(n, k))


    print(ans)
    print(0)


    print(0)
print(dp[-1][-1])


	print(0)
	
	print(dp[n-k])

    print(0)

print(p[n][k])


    
print(divide(n,k)%d)  

print(PartitionNumber(n, k))


print(ans)

print(dp[N][K]%MOD)


    print(0)
    print(1)
    print(ans)

print(P[N][K])


print(D[N][K] % MOD)

print(D[N][K] % MOD)



print(way12(n, k))

    print(0)
print(dp[n][k])


print(dp[k][n])

    print(ans)


    print(0)
    print(D[N-K][K] % MOD)

print(dp[n - k][k] if n >= k else 0)


    print(0)
    print(partition[n-k][k])

    print(0)

print(dp[n-k][k]%mod)





    print(0)
    print(dp[n - k][k])


	print(dp[n-k][k])
	print(0)

print(t.solve(n, k, 1, 1, 0, 1))

            print(1 if find(parent,x)==find(parent,y) else 0)
    print(*ans, sep="\n")


        print(1 if uf.same(x,y) else 0)



print(*lc, sep="\n")


        print(1 if uf.same(int(q[1]), int(q[2])) else 0)


        print('1') if same(x, y) else print('0')

    print(an)



print(*ans_list, sep='\n')


        print(int(find(x)==find(y)))


        print(1 if uf.issame(x,y) else 0)
        print(1 if uf.same(x,y) else 0)

        print(1 if uf.same(x, y) else 0)


            print(1)
            print(0)

        print(1 if uf.same(x, y) else 0)

            print(1)
            print(0)
    
        print(1 if uf.same(x,y) else 0)



        print(int(UF.same(x,y)))

        print(r)

        print(1 if ds.is_in_same(x, y) else 0)

        print(result)

            print(1)
            print(0)
        print(int(uf.same(query[1], query[2])))

        print(int(same(x, y)))


            print(1 if uf.same(x, y) else 0)

            print(1)
            print(0)

			print(0 + uf.isSame(x,y))

    print(*ans, sep='\n')

            print('DEBUG:{} -> {}'.format(name, val), file=sys.stderr)
    print(int(uf.same(x,y)))
    print(uf.same(x, y) * 1)




    print(*result, sep="\n")

    print(*ans, sep="\n")


print("\n".join(ans))


            print(1)
            print(0)
            print(1)
            print(1 if uf.is_same(x, y) else 0)
                print(1)
                print(0)

    print(1 if xp==yp else 0)
print(*ans, sep='\n')

                print(1)
                print(0)


            print(1)
            print(0)


            print(int(uf.same(u, v)))
  print("\n".join(ansl))
        print(same(x, y))
        print(1 if uf.find(int(x)) == uf.find(int(y)) else 0)

            print((px == py)*1)


                print(1)
                print(0)


            print(1)
            print(0)

        print(1)
        print(0)
            print([0,1][root(x) == root(y)])
            print(1 if uf.same(x, y) else 0)


            print(1)
            print(0)
            
    
        print(1 if uf.is_same(u,v) else 0)
        


            print(1)
            print(0)

    print(e)


			print(1)
			print(0)


            print(1)
            print(0)        


                print(1)
                print(0)
                
            print(int(uf_tree.have_same_root(x, y)))

        print(int(uf.same(x, y)))
        print(1 if unionfind.same(x, y) else 0)

            print(int(u.same(x, y)))


        print(wuf.diff(x,y) if wuf.same(x,y) else '?')


            print("?" if res == None else res)


            print(ans)
            print("?")

        print(r)

            print(uf.diff(x,y))
            print("?")


            print("?")
            print(uf.diff(x, y))


print(*ans_list, sep='\n')

    print(*ans, sep="\n")

    print('\n'.join(map(str, ans)))


        print("?" if diff is None else diff)


                print("?")
                print(ans)


                print(gragh.diff(query[1],query[2]))
                print("?")
        print(diff(query[1],query[2]))
        print(unionfind.diff(*data))

            print(uf.diff(a,b))
            print("?")
  print(v[x] - v[y] if tn_x==tn_y else "?")

        print('?')
        print(diff)

                print(uf.diff(x, y))
                print("?")


                print(weight[y]-weight[x])
            print(tree.diff(x, y))
            print('?')



print('\n'.join(res))

                print("?")
                print(ans)


        print(res if res is not None else '?')


            print(diff(x,y))
            print("?")

            print(u.Diff(p[0],p[1]))
            print("?")

            print(weight[u] - weight[v]) 
            print('?')

            print('?')
            print(diff(x,y))


                print(diff_w)
                print('?')

        print(ans)


                print(uf.diff(x, y))
                print("?")


            print(uft.diff(query[1], query[2]))

            print(wuf.get_diff(*x))


        print(uf.diff(b, c))
        print("?")

                print(uf.diff(x, y))
                print('?')
 print(ans)

        print(ufw.diff(x,y) if ufw.diff(x,y) != INF else '?')


print("\n".join(map(str, res)))


                print(ans)
                print("?")

    print(i)


    print(i)

                print(wuf.diff(x, y))
                print('?')

            print("?")
            print(ans)

                print(wuf.diff(x, y))
                print("?")


    print(r)



  print(output, end="")

    print(i)


        print(uf.diff(x, y))


      print('?' if ans is None else ans)
        print(a)


            print("?")
            print(forest.w[y]-forest.w[x])        


            print(d if d is not None else '?')
        print(diff(x, y))



                print("?")
                print(uf.dist(y, x))


                print(dsu.diff(x, y))
                print("?")


            print("?")
            print(diff(query[i][2], query[i][1]))   

print(*ans,sep='\n')

            print(diff)
            print("?")


            print(find(query[2])[1]-find(query[1])[1])
            print("?")

            print(find_diff(nodes[command[1]], nodes[command[2]]))


print(*ans,sep='\n')


            print('?')
            print(wuf.diff(x, y))

            print(res)



            print(diff(q[idx_x], q[idx_y]))
            print("?")


            print(w[x] - w[y])
            print("?")


    print(query(x,y+1))

        print(find(x,y))

        print(ans)

        print(ret)

        print(query(x,y+1))

            print(seg.prod(x, y + 1))



            print(st.query(x, y+1))
    


         print(seg.find(x,y+1))

    

        print(segtree.query(x, y + 1))


        print(st.prod(x, y + 1))

        print(sg.prod(xi, yi + 1))

        print(seg.prod(x, y + 1))


        print(segtree.query(x, y+1))
        



        print(seg.query(x,y+1))

        print(seg.query(x, y+1))


        print(seg.query(x,y+1))


            print(seg[x : y + 1])


        print(ans)

		print(seg.query(x,y+1))

        print(st.prod(x,y+1))


        print(getmin(x, y+1))



    print(*ans, sep="\n")

      print(fm(1,0,m))
        print(seg.query(x, y + 1, 0, seg.size, 1))

        print(find(x, y))
            print(result)

            print(A[c+j],end=" ")
        print()    
        print(min(query(seg,x,y)))

        print(self.a)

            print(ans)


        print(ans)


            print(s.query(x, y + 1))


        print("layer0=", self.layer0)
        print("layer1=", self.layer1)

    print("\n".join(map(str, Ans)))


        print("layer0=", self.layer0)
        print("layer1=", self.layer1)

    print("\n".join(map(str, Ans)))


print("\n".join(map(str,ans)))

    print(res)

    print(*x, file=sys.stderr)
            print(range_reduce(table, x, y + 1, min, INF))


    print("compiling")
        print("testing")
        print(self.tree[self.elem_size : self.elem_size + self.real_size])

        print(S.get_value(x, y + 1))

    print(*ans, sep='\n')


	print(*ans, sep="\n")


        print(segt.min(x, y + 1))




        print(find(x,y+1))

            print(find(x,y+1))


            print(seg.folded(b, c))
            print(seg.folded(x, y+1))


            print(T.find(x, y))

print(*res, sep="\n")


    print('<SegmentTree> [\n' + '\n'.join(map(str, ret)) + '\n]')


      print(seg.prod(x, y+1))
print("\n".join(ans))

        print(s.getmin(a,b+1))
        print(seg.query(x,y+1))
            print(st.fold(i, x+1))

        print(ans)


        print(self.tree)

        print(segt.find(x, y+1))



        print(segtree.find(x, y+1))

        print(st.get_val(x, y+1))

        print(seg.query(x,y+1))
            print(seg.query(x, y + 1))


        print(ins.get_interval(X,Y+1))

                print(min(A[i1][j1:j2 + 1]))
                print(min([min(A[i1][j1:]), min(S[i1 + 1:i2] + [INF]), min(A[i2][:j2 + 1])]))

        print(T.query(x, y+1))
    print(ans)


        print(sgt.query(x, y + 1))




print("\n".join(ans))


    print(i)

        print(query(x[i], y[i]+1))


        print(seg.sum(x - 1, y))

print("\n".join(map(str,ans)))
    
    

        print(tree.sum(y)-tree.sum(x-1))

            print(bit.get_sum(y) - bit.get_sum(x - 1))


        print(T.get(x,y))
        
        
        

        print(getsum(x, y+1))


		print(bit.getsum(x,y))



        print(getSum(x,y))

    print(a)
        print(get_sum_range(x, y))


    print(get_sum(x,y+1))

        print(getSum(x, y+1))

        print(res)
            


            print(st.query(x-1, y))
    


        print(segtree.query(x-1, y))
        
        



        print(ans)

        print(segtree.query(x, y + 1))


        print(ans)


            print(seg.prod(x, y))



        print(seg.query(x,y+1))


        print(seg.query(x,y+1))

        print(seg.getSum(x,y+1))


        print(st.prod(x, y))

            print(seg[x : y + 1])


    print(*ans, sep="\n")


        print(seg.query(x, y))

        print(seg.prod(x, y))

        print(st.prod(x,y+1))


        print(b.get(x, y + 1))
        print(bit.sum(y) - bit.sum(x - 1))

        print(sg.prod(xi - 1, yi))

        print(bitree.getsum(y-1) - bitree.getsum(x-2))
        

            print(bt.sum(c)-bt.sum(b-1))



    print(*result, sep="\n")

            print(ans)


        print(bit.sum(l, r+1))

                print(sum(A[i1][j1:j2 + 1]))
                print(sum(A[i1][j1:]) + sum(S[i1 + 1:i2]) + sum(A[i2][:j2 + 1]))

        print(bit.cum(x,y+1))

            print(result)

        print(bit.range_sum(x, y))


            print(res)


    print('[' + ', '.join(map(str, [self.pref(i) for i in range(self._size)])) + ']')

      print(fw.sum(x-1, y))

            print(sum(y) - sum(x - 1))


        print(" ".join(map(str, l)))
        print(bit_tree.get_sum(y) - bit_tree.get_sum(x-1))


        print(sum_a(y) - sum_a(x-1))





print(main())

        print(getSum(x, y))

    print(*ans_list, sep='\n')


      print(bit.sum(y - 1) - bit.sum(x - 2))

    print(bit.sum(y)-bit.sum(x-1))



        print(a)


    print(res)

            print(bit.sum(x, y))
    
print(*ans,sep="\n")

            print(ans)

    print(elem)

print(*solve(),sep='\n')

            print(bit.sum(x, y))
    
            print(result)








        print(b_sum(t) - b_sum(s))


    print(*x, file=sys.stderr)
            print(range_reduce(table, x, y + 1, add, 0))


    print("compiling")
        print("testing")
            print(result)

print(*ans,sep='\n')

        print(tree.query(x, y+1))

        print(fen.get(x-1,y))

                
            print(t_sum - s_sum)

    print(i)


    print(ans)


    print('\n'.join(map(str, A)))


    print('\n'.join(map(str, A)))

    print(ss, end="")


            print(idx)
        print()



    print('\n'.join(map(str, A)))

        print(*r,sep='\n')
        print()

    print(*res,sep="\n")
print('\n'.join(map(str, A)))

            print(ans_i)
        print()


            print(id)
        print()


      print('\n'.join(map(str, ret)))
    print()
            print('\n'.join(map(str,ans)))
        print()
        print(ans_i)
    print()


            print('\n'.join(map(str, ret)))
        print()

            print("\n".join(map(str, ans)))
        print()


            print(ans)
        print('')
            print('\n'.join(map(str,ret)))
        print()

            print('\n'.join(map(str,ret)))
        print()
        print(k)
    print()


            print('\n'.join(map(str, ret)))
        print()


        print('\n'.join(map(str,ret)))
    print()



        print(S[j])

        print(find(query[i][1]-1))

        print(seg._get(l[1]) & msk)


        print(RUQ[i])

print('\n'.join(map(str,ans)))

print('\n'.join(map(str,ans)))



    print(*ans, sep="\n")


        print(query(p[0]))

print('\n'.join(map(str,res)))

print("\n".join(ans))


        print(tree.query(q[1]))

        print(ruq.query(l[1]))
print(*result, sep='\n')


        print(find(l[1]))
        print(segtree.point_query(query[1]))


        print(RUQ.query(i))


        print(seg.get(i))
        print(ans[i])

print(*ans, sep="\n")

        print(find(idx))




    print(i)

    print(i)

      print(qd[i])

        print(seg_tree.query_value(i))


        print(find(i)[1])


        print(result)


    print(an)


        print(result)


        print(result)


        print(seg.query(x[0]))

        print(query(a[0]))

print(*ans, sep='\n')

        print(query(qry[1])[1])

 

        print(find(com[1]))


    print(k[0])
		print(seg.find(c[1]))

        print(self.inner_array)

            print(ruq.find(i))

            print(seg.find(query[1]))


        print(get(i))



            print(z)
        print(find(i))


        print(res[1])


        print(st.find(i))


        print(st.query(i)[1])
        print(result)

            print(seg_tree.query(args[0]))


            print(x.find(q[1])[1])

        print(find(q[1], 0, 0, N))




        print(find(q[1], 0, 0, N))

    print(lazy[k])
        print(st.find(query[1]))

        print(st.find(1, 0, n - 1, int(query[1])))

        print(o)

        print(ruq.range(i, i + 1))


            print(t.get(i))


        print(seg[i])

        print("####")
                print(" ",end=" ")
                print(a,end=" ")
        print("\n####")
                print(" ",end=" ")
                print(a,end=" ")
        print("\n####")
        print()

        print(ST.find_query(qry[1]))


    print(get(query[1]))


            print(t.get(i))


        print(lseg.get(arg[0]))


        print(find(q[1]))


        print(find(q[1]))


        print(seg.get(i))

        print(get(a[1]-1))

        print(get(a[0]))


        print(seg.get(l[1] - 1))

    print(a)
        print(seg._get(l[1] - 1))


        print(S[j])

        print(get(nex[1],nex[1]))
       

		print(ans)
            print(raq.get(q[1] - 1))



print(*res, sep="\n")



    print(*ans, sep="\n")

        print(bit.get_val(i-1))

        print(RAQ[i])

print(*result, sep='\n')


        print(raq.get_value(i))



            print(ft.get_sum(i))


        print(segtree.point_query(j-1))

        print(query(p[0]))

print(*ans,sep="\n")

            print(get(ind))
    
        print(get(qi[1]))
        print(find(l[1]-1))
        print(getSum(query[1]))


        print(segt.get(i))


        print(get(t[1]))
            print(get(qi[1]))
        print(bit.sum(idx))

        print(BT.bsum(read[1]))

        print(lseg.query(i-1,i))


        print(get(com[1]))


        print(seg.query(i-1,i))

        print(ls.query(t-1,t))

        print(get(case[1]))


        print(bit.getsum(i))


        print(b.sum(p[1]))

        print(get(i))


    print(get(int(s[2:])))

    print(phenik.sum(i))


        print(get(id))

        print(FT.get_val(L[1] - 1))



        print(ans)

        print(get(ind))


        print(ans)

        print(Get(c[1]))





        print(bit.sum(i - 1))
        



            print(seg.get(query[1]))


        print(get(i))
    



        print(seg.one(t[1]-1))

        print(query(i))


        print(query(qry[1]))

 

        print(B.sum(x))


        print(BIT.sum(op[1]-1))

        print(get(i))

		print(bit.sum(v[1]-1))

print('\n'.join(ans))

        print(get(L[1]))

        print(st.query(i))
        print(get(t))


    print(fw.sum(0,qq[1]-1))


            print(ans)


        print(tree.query(tmp[1]))



print('\n'.join(ans))


        print(Get(ind))

            print(raq.get(i-1))


print("\n".join(map(str,ans)))
    

        print(ans)


        print(ans)
        

        print(ls.query(s,t+1))

        print(seg.query(s,t+1))

        print(lseg.query(Q[1]-1, Q[2]))

        print(seg._get(s, t + 1))


        print(result)

      print(qd.prod(s, t+1))

    print(res)

        print(ruq.range(i, j + 1))


        
print('\n'.join(map(str,ans)))

    print(get_range_min(l,r+1))



print("\n".join([str(ans) for ans in ANS]))


print(*ans, sep="\n")

            print(lst.query(s, t + 1))


print("\n".join(ans))

        print(range_query(s, t+1))


print(*ans, sep="\n")




print(*ans, sep="\n")


print('\n'.join(map(str, Ans)))

        print(seg_tree.query_rmin(a[1], a[2]+1))



        
print("\n".join(ans))

print(*ans, sep='\n')


        print(lseg.prod(s, t + 1))


    print(query(l,r+1))


print(*ans, sep='\n')


        print(" ".join(map(str, self.data[self.size:])))



        print(ruq.query(l, r))

            print(ans[i])


    print(*ans, sep='\n')


    print(find(left, right+1))


        print(query(s,t+1))


    print("\n".join(ans))

print("\n".join(map(str, ans)))

        print(query(s,t+1))

   

        

            print(rmq.query(s, t + 1))


        print(lazy_segtree.query(s, t + 1))


    print(i)

      print(result)



        print(find(q[1], q[2]+1))



      print(result)

      print(result)


      print(result)


        print(seg.query_recursion(left, right + 1))


        print(lst.query(s, t+1))

print(*ans, sep='\n')

            print(seg.query(l,r+1))
            print(tree.min(s, t))


print('\n'.join(ans))


            print(str(L.query(a,b+1))+"\n")
    print(*result, sep="\n")


    print("testing")
        print(v)

        print(lst.query(s, t+1))
        print("{}".format(res))


            print(segtree.min(v[0], v[1]))


        print("####")
                print(" ",end=" ")
                print(a,end=" ")
        print("\n####")
                print(" ",end=" ")
                print(a,end=" ")
        print("\n####")
        print()

        print(ST.min_query(qry[1],qry[2]))


        print(r)


        print(query(s, t + 1))

        print(sg.query(l,r))


    print(ans)

        print(query(qry[1],qry[2]+1))

        print(get(nex[1],nex[2]))
       

		print(ans)
    print(bit.sum(que[1], que[2]+1))


print('\n'.join(ans))

            print(rmq.query(s - 1, t))


        print(bit.query(s, t+1))


        print(lazyBit.get_sum(s, t+1))


print('\n'.join(map(str, ans)))

      print(fw.sum(s, t+1))

print(*solve(),sep='\n')



            print(bit.sum(t) - bit.sum(s-1))



print('\n'.join(map(str, res)))


print("\n".join(map(str, ans)))



            print(ras_q.get_sum(s, t))

        print(bit.rangesum(s, t))


            print(res)

print(*ans, sep="\n")


        print(bit.sum(t) - bit.sum(s-1))


        print(*ans, sep="\n")


        print(tree.get_sum(t)-tree.get_sum(s-1))


        print(res)
    print(ans)

            print(bit.get_rsum(a[1], a[2]))


		print(raq.sum(s-1,t))

        print(query(s, t + 1))


        print(*(self.get_sum(i, i) for i in range(self.n + 1)))


print('\n'.join(map(str, buf)))

    print(sum_bit(bit1,a[2])*a[2]+sum_bit(bit0,a[2])
        print(bit.get_sum(l-1, r))

        print(ans)


print('\n'.join(map(str, ans)))


        print(tree.Sum(b[0],b[1]))

        print(ans)

            print(getSum(s,t+1))

            print(getSum(s, t + 1))

        print(ans)


        print(bit.sum(s - 1, t))

            print(r.sum(s, t))


        print(bit.sum(i - 1, j))


            print(rq.sum(v[0], v[1]))


            print(bit.sum_until(x))
            print(bit.sum_acc(x, y))


        print(bit.sum(t)-bit.sum(s-1))

        print(rbit.sum(t)-rbit.sum(s-1))

            print(m)


        print(seg._get(s - 1, t) >> bl)


            print(ft.get(s, t))
    print('\n'.join(map(str, answ)))

      print(get_query(s,t+1))
print()




    print(*ans, sep="\n")

    print(*x, file=sys.stderr)


    print(*result, sep="\n", file=sys.stderr)


    print("testing")
print(*ans, sep='\n')


        print(seg.query(s - 1, t))


print('\n'.join(map(str, ans)))

print(main())

print('\n'.join(map(str, ret[:j])))

        print("####")
                print(" ",end=" ")
                print(a,end=" ")
        print("\n####")
                print(" ",end=" ")
                print(a,end=" ")
        print("\n####")
        print()

        print(ST.sum_query(qry[1]-1,qry[2]-1))


    print(an)


        print(st.query(s,t+1))


		print(seg.query(s,t+1))


        print(query(qry[1],qry[2]+1))


print("\n".join(map(str, ans)))

print('\n'.join(map(str, ans)))

        print(result)




print("\n".join([str(ans) for ans in ANS]))


            print(self.data[i:2 * i])
        print('--------')
            print(self.lazy[i:2 * i])
        print()
        print(seg.query(x[0],x[1]+1))

            print(segtree.query(s+1, t+2))



print("\n".join(ans))


      print(get_query(s,t+1))
    print(res)

print('\n'.join(map(str, Ans)))


    print('\n'.join(map(str, answ)))

        print(range_query(s, t+1))

        print(lazyseg.query(s, t+1))


        print(seg_tree.query_rmin(a[1], a[2]+1))




        print(lazy_segtree.query(s, t + 1))


    print("\n".join(ans))
            print(rmq.query(s, t + 1))



print("\n".join(ans))


    print("\n".join(map(str, ans)))

    print(*x, file=sys.stderr)


    print(*result, sep="\n", file=sys.stderr)


    print("testing")
        
print('\n'.join(map(str,ans)))

        print(sst.query(s, t+1))

print('\n'.join(ans))



    print(*ans, sep='\n')


        print(a.range_ope(s, t + 1))


print(main())
        print(query(L[1], L[2] + 1))

print(*ans, sep='\n')


            print(str(L.query(a,b+1))+"\n")
        print(seg.query(s, t + 1))

        print(seg.query(s, t + 1))


        print("####")
                print(" ",end=" ")
                print(a,end=" ")
        print("\n####")
                print(" ",end=" ")
                print(a,end=" ")
        print("\n####")
        print()

print(*ans,sep='\n')



print(*res, sep='\n')

        print(lst.query(_q_l[1], _q_l[2] + 1))
print(*ans, sep='\n')


    print("\n".join(map(str, ans)))


print('\n'.join(map(str, ans)))

        print(lseg.query(s, t + 1))


    print(get_min(l,r+1))

        print(query(qry[1],qry[2]+1))
        


        print(seg.query(s, t + 1))


    print("\n".join(map(str, ans)))

print('\n'.join(map(str,ans)))

    print(get_query(s,t+1))
    print(get_query(s,t+1))
    print(*x, file=sys.stderr)


    print(*result, sep="\n", file=sys.stderr)


    print("testing")
            print(rmq.query(s, t + 1))


    print('\n'.join(map(str, res)))

print("\n".join(ans))

        print(range_query(cmd[0], cmd[1]+1))       
    print(qd.prod(q[1], q[2]+1))


    print('\n'.join(map(str, answ)))

    print('\n'.join(map(str, answ)))

    
print("\n".join([str(ans) for ans in ANS]))


print(*ans, sep='\n')



print("\n".join(map(str, ans)))

            print(tree.sum(s, t))


print(*ans, sep='\n')

        print("####")
                print(" ",end=" ")
                print(a,end=" ")
        print("\n####")
                print(" ",end=" ")
                print(a,end=" ")
        print("\n####")
        print()

        print(ST.sum_query(qry[1],qry[2]))


print('\n'.join(map(str, ans)))

                print(seg.get_interval(l,r))
print('\n'.join(ans))


print("\n".join(ans))


        print(seg_tree.query_rsum(a[1], a[2]+1))


            print(segtree.sum(v[0], v[1]))


        print(a.range_ope(s, t + 1))



print(ans if ans<10**10 else 0)
    

print(0 if ans == INF else ans)


print(ans if min_len == float('inf') else min_len)

    print(0)
    print(length)


    print(0)
    print(ans)



        print(0)
        print(min_length)


    print(ans if ans < float('inf') else 0)

    print(ans)


    print(0)
    print(ans)


    print(0)
    print(ans)



print(main(sys.stdin))


print(ans if ans != float("inf") else 0)


print(min_length if min_length < float("inf") else 0)


    
    print(ans if ans != float('inf') else 0)


print(smallest_window(A, S))

        print(0)
        print(current_length)



    print(min_l if min_l != float('inf') else 0)

print(ans)

print(ans if ans < INF else 0)


print(ans if ans < 1e6 else 0)


print(ans)

    print(0)
    print(ans)

print(ans % (n + 1))


    print(0)
print(ans)

    print(0)
    print(ans)

print(mn)

    print(min)
    print(0)


print([cnt, 0][cnt == float('inf')])


print(ans)

print(ans if ans < N+1 else 0)


print(ans)

print(ans)


print(ans if ans < n+1 else 0)


print(ans)




print(res if res != INF else 0)

    print(0)
    print(ans)


    print(0)
    print(ret)

print(ans if ans < INF else 0)

print(ans if ans != float('inf') else 0)


    print(min(count))
    print('0')


print(ans%(2<<20))


print(min_l)


            print(1)
            print(0)
        print(mi)
    print(1)
    print(0)
print(ans)
print(max(num))

print(ans)
    print(0)
    print(ans)


    print("0")
    print("%d"%(ans))


print(ans)

    print("0")
    print("%d"%(ans))




print(ans if ans <= n else 0)


        print(0)
        print(1)

    print(j)



print(0 if ans == 10 ** 6 else ans)

        print(0)
        print(ans)



print(ans if ans < n+1 else 0)


print(0 if ans == INF else ans)


print(ans if min_len == float('inf') else min_len)

    print(0)
    print(ans)

print(result)
        print(0)
        print(current_length)



    print(ans if ans < float('inf') else 0)


    print(min_l if min_l != float('inf') else 0)


print(min_length if min_length < float("inf") else 0)


    print(ans)


print(ans if ans < INF else 0)



print(min_l)


print(ans % (n + 1))


            print(0)

    print(min_length)



print(ans if ans < INF else 0)



print(res if res <= N else 0)

print(smallest_window(A, set(range(1, K+1))))


print(ans if ans < 1e6 else 0)

print(ans if ans < N+1 else 0)



print(ans if ans < N+1 else 0)



print(ans if ans <= n else 0)


print([cnt, 0][cnt == float('inf')])


print(ans)

    print('0')
    print(length)


print(ans)


print(ans)

            print(1)
            print(0)
        print(mi)
    print(1)
    print(0)
print(ans)
    print(1)
    print(0)
print(ans)


print(max(num))

print(ans)
print(ans if ans != float('inf') else 0)


    print(0)
    print(ret)



        print(0)
        print(min_)


print(ans)

    print(0)
print(min(L))    
    

    

print(mn)

    
    print(ans if ans != float('inf') else 0)


print(ans if ans < n+1 else 0)



print(main(sys.stdin))                
            
    
    print(*answers, sep='\n')

        print(solve(i,n,A))

    print(shakutori(n))

	print(shaku(x))

        print(patterns)


    print(zen(lsta,i))


        print(res)


    print(res)
    
    print(*answers, sep='\n')

    print(Two_Pointer_Technique(a,x_i))




    print(ans)

    print(res)



print('\n'.join(res))

        print(cnt)
        
    print(solve(a, x_i))

        print(ans)


        print(ans)


        print(ans)
    
        print(ans)


    print(solve(N,x,A))

    print(solve(A, x))


        print(ans)
        print(ans)
    print(count_two_idx(A,q))


        print(counter)

    print(solve(A, x))


  print(solve(a,x[i]))



    print("\n".join(map((lambda t: str(sum(t))), map(solve, x))))



        print(ans)
        print(ans)    

    print(count_two_idx(A,q))

        print(cnt)



        print(ret)


    print(solve(A, x))


    print(count(x))

    print(two_pointers(s))

        print(ans)


        print(count(sums, 0, n, v))


        print(count(sums, 0, n, v))


    print(ans)

print(*ans)



print(*ans[L-1:])



print(*ans)



    
print(" ".join(sliding_minimum_dq(A,N,Q)))

	print(*slide_min(l,a))

print(*slido_minimum(tuple(map(int,input().split() )),k))

	print(*slide_min(l,a))


print(*solve(n, l, a))

print(*ans)



print(*ans)

  print(" ".join(str(elt) for elt in ans))
print(*slide_min(A, l))

print(*ans)

    print(*slide_min(a, L))


print(*slidemin(a, k))


    print(*b_list)

print(*res)   

print(str(swmin(n, k, aa))[1:-1].replace(',',''))



print(*ans[L-1:])



print(*ans[L-1:])


print(*ans[L-1:])




print(*ans[L-1:])


        
print(*ans[L-1:])

    print(*answer)


print(*ans)



    print(" ".join([str(elem) for elem in ans[L - 1:]]))



print(*ans,sep=" ")


print(*ans[L-1:])




print(*b)


print(*ans[L-1:N])


print(*ans)


print(ans[-1])


print(*ans)

print(*ans)


print(*ans)

print(ans[-1])

            print(*self.ans_list, sep='\n')
            print(*self.ans_list)

    
print(*minlis)
    


    print(*ans[:n-k+1])


print(*ans)



print(*ans)

    print(output)



            print(((folded >> 32) * k[0] + (folded & mask)) % MOD)

    print(*ans)


  print(alist[arr[0]], end=' ')
print(alist[arr[0]])


print(*ret)



print(*res)


print(*ans)



print(*res)


print(*ans)

    print(" ".join(result))



print(*ans)



print(*ans)


    print(*ans[k-1:])
    print(*ans)
print(*ans)


print(*p)

        print(str(b[i]), end='')
        print(str(b[i]) + " ", end='')
print("\n", end='')


    print(*ans)


    
    print(*ans)


    print(*res)

    print(*arr)
    print(rects.total_area())



    print(rects.area())



    print(ans)



print(ans)


  
  
  

 


print(ans)


    print(total_area)


print(area)


    print(ans)
    print(main())

    print(main())
    
    


print(solve(n, rects))


    print(answer)

    print(ans)



print(main(sys.stdin))

    print("\n".join(map(str, output)))



    print(ans)



    print(S)

    print(ans)



    print(ans)


    print(ans)

    print(calc_area(grid, x, y))



print(ans)


print(count)


print(ans)


print(sm)


print(ans)

print(ans)

        
print(ans)


print(ans)

print(ret)



print(res)


print(ans)


print(ans)


print(ans)



print(ans)


            
print(S)    


print(ans)

print(ans)


print(ans)



print(ans)

print(ans)

            
print(ans)

print(ans)


print(ans)

print(ans)


print(ans)

print(count)


print(ans)


print(ans)

print(ans)


print(ans)


print(ans)




print(total_area)

            
print(ans)


print(ans)



print(ans)

print(ans)

print(ans)


print(ans)



print(ans)


    
    print(ans)
    



    print(max(accumulate(deiri)))


print(ans)

print(max(imos))


print(max(tl))



print(max(ruisekiwa))

print(max(imos))

print(max(ac))


print(max(accumulate(time)))


    print(max(list(accumulate(num_customers_list))))


print(smax)


print(solve(n, t, customers))

    
    print(max(accumulate(L)))
    


print(max(a))


    
print(max(customer))


print(max(imos))

    print(main(sys.stdin))
    print(ans)
    

print(max(li))


print(max(accumulate(a)))

print(max(a))

print(max(time))


print(mx)



print(max(data))


print(max(num))


print(max_n)


print(max(a))

print(max(timeline))


print(max(dp))


print(m)

    print(maxc)


print(max(accumulate(timeline)))

print(max(Ans))

print(ans)

print(max(list(itertools.accumulate(ans))))

print(mx)

print(max(day))

print(max(D))


print(max(accumulate(T)))


print("%d"%(ans))



    
print(ans)

print(ans)


print(ans)


print(max(tm))



print(ans)


print("%d"%(ans))




print(mx)


print(ans)
    


    print(ans)




print(max(people_number))

    print(ans)


    
print(max(ans, p))

print(ans)

print(ans)

    
    print(ans)


print(ans)


print(ans)


    print(ans)
    

print(max(map(max, map(accumulate, zip(*map(accumulate, im))))))

print(max(map(max, map(accumulate, zip(*map(accumulate, a))))))

print(ans)


print(solve(n, rects))


    print(max_num_overlaps)

print(mx)



print(ans)


print(max(itertools.chain.from_iterable(G)))

print(max(m))


print(res)

    print(max(map(max, imos.data)))


  print(ans)

print(max([max(l) for l in A]))



print(max_num)
        


print(papers)


print(ans)


print(max(max(d) for d in D))


    print(ans)



print(ans)


print(ans)



    print(max(max(val) for val in table))


print(max(max(d) for d in D))



    print(ans)


print(ans)


print(ret)


print(ans)

print(ans)


print(ans)


print(ans)

print(ans)



print(ans)



    print(max_overlap)


            print("INF")
            print(d)


        print(distance)

        print("INF" if dist_to_point == float('infinity') else dist_to_point)

            print("INF")
            print(d)

            print("INF")
            print(distance)

	print(e if e != INF else "INF")

   print(dist[i] if dist[i] < INF else "INF")

            print("INF")
            print(distance)

            print('INF')
            print(ans)

            print("INF")
            print(distance)

        print("INF")
        print(dist)


        print("INF")
        print(distance)

    print(dist[i] if dist[i] < g.INF else 'INF')

    print(i if i<10**18 else 'INF')

        print("INF")
        print(x)


        print("INF")
        print(i)
            

    print("INF" if d == float('inf') else d)


        print('INF')
       print(connect[i])

    print(dist[i] if dist[i]!=INF else 'INF') 
    


        print("INF")
        print(d)
    



    print(res)


        print('INF')
        print(time[i])

        print("INF")
        print(d)
    



    print(dist[i] if dist[i]!=INF else "INF")


    print(i if i != INF else "INF")

  print(dist[i] if dist[i] != 10**18 else "INF")
  
  


  


	print(dist[i] if dist[i] != 10**10 else "INF")

  print("INF") if tc==1e10 else print(tc)

        print('INF')
        print(di)

        print("INF")
        print(n)

        print("INF")
        print(i)


        print(dist[i])
        print('INF')

        print("INF")
        print(d[i])







        print("INF")
        print(i)

            print("INF")
            print(d[i])

        print("INF")
        print(cost)


			print("INF")
			print(i)

    print(dist)

        print(*[str(x).rjust(2) for x in array[i]])
    print()

        print('INF')
        print(kyori[i])

    print("\n".join(map(str, d.cost)).replace(str(INF), "INF"))


    print("INF")
    print(omomi[i])
  

			print("INF")
			print(i)

        print(s if s!=INF else "INF")
            print("INF")
            print(d)

        print('INF')
        print(c)


        print("INF" if a > INF else a)



        print(d[i])
        print("INF")


    print(d[i] if d[i] != float("inf") else "INF")


    print(*["INF" if x == inf else x for x in dp], sep="\n")



        print('\n'.join(map(lambda x: str(x) if x != self.inf else 'INF', self.dist)))

        print(d)
        print('INF')


            print("INF")
            print(d)


        print(decided_cost[v])
        print("INF")

print(*ansL, sep='\n')

        print(distance) if distance != float('inf') else print('INF')

    print("INF"if -1==i else i )


      print('INF')
      print(c)

    print('INF' if i == float('inf') else i)


  
    print(*args, end=end, file=sys.stderr)
        print('INF' if i==INF else i)
    print(d)


    print(ans if ans != INF else 'INF')


        print('INF')
        print(di)

            print("INF")
            print(d)


        print('INF')
        print(v)


        print("INF")
        print(dist)

    print(*res, sep = "\n")

        print("INF")
        print(dist[i])

print('\n'.join([str(n) if n!= inf else 'INF' for n in dist]))

            print("INF")
            print(Ans[i])
        print(di if di < inf else 'INF')

        print(i if i!=inf else "INF")

    print("NEGATIVE CYCLE")
        print(dist[i] if dist[i] < INF else "INF")

		print("NEGATIVE CYCLE")
			print("INF" if x==float("inf") else x)
			
    print('\n'.join(map(str, res)))
    print('NEGATIVE CYCLE')

        print("NEGATIVE CYCLE")
            print("INF")
            print(p)

        print("NEGATIVE CYCLE")
    print(*["INF" if x == inf else x for x in dp], sep="\n")



                print('NEGATIVE CYCLE')

    print(*['INF' if d == INF else d for d in D], sep='\n')


            print("INF")
            print(i)
    print("NEGATIVE CYCLE")


        print('NEGATIVE CYCLE')
                print('INF')
                print(j)
    


    print('NEGATIVE CYCLE')
    print(dist[v] if dist[v] < g.INF else 'INF')

                        print("NEGATIVE CYCLE")
            print("INF")
            print(d)


        print("NEGATIVE CYCLE")
print(*["INF" if d == INF else d for d in dist], sep="\n")


            print("NEGATIVE CYCLE")
            print("INF")
            print(d)

        print("NEGATIVE CYCLE")
        print("INF" if a > INF else a)


    print("NEGATIVE CYCLE")

            print("INF")
            print(cost)


    print("NEGATIVE CYCLE")
        print("INF") if d == INF else print(d)

        print("NEGATIVE CYCLE")
                print("INF")
                print("{:d}".format(w))


                print('NEGATIVE CYCLE')
            print('INF')
            print(dist[i])


    print("NEGATIVE CYCLE")
            print("INF")
            print(i)

    print("NEGATIVE CYCLE")
            print("INF")
            print(d)





    print("NEGATIVE CYCLE")
            print("INF")
            print(i)

            print("NEGATIVE CYCLE")
        print("INF")
    print("NEGATIVE CYCLE")
    print(*ret, sep="\n")

    print('NEGATIVE CYCLE')
        print('INF' if a==float('inf') else a)

    print('INF' if d == INF else d)



        print("\n".join(map(lambda x: str(x).upper(), total_costs)))


                print("NEGATIVE CYCLE")
        print("INF")
        print(di)



                print("INF")
                print(dist[i])
        print("NEGATIVE CYCLE")


  print("NEGATIVE CYCLE")
      print("INF")
      print(d)


    print('NEGATIVE CYCLE')
            print('INF')
            print(d)


    print('NEGATIVE CYCLE')
            print('INF')
            print(i)


    print('NEGATIVE CYCLE')
            print('INF')
            print(ans[i])

    print('NEGATIVE CYCLE')
            print('INF')
            print(a)

        print("NEGATIVE CYCLE")
                print("INF")
                print(cost)


                print("NEGATIVE CYCLE")
    print("INF" if costs_from_start[v] == float("inf") else costs_from_start[v])

        print("NEGATIVE CYCLE")
            print("INF")
            print(dist[i])


    print("NEGATIVE CYCLE")
    print(*[d if d != INF else "INF" for d in dist], sep="\n")

    print('NEGATIVE CYCLE')
            print('INF')
            print(dist)


        print("INF")
        print(a)

    print("NEGATIVE CYCLE")
            print("INF")
            print(temp)
            


    print("NEGATIVE CYCLE")
      print('INF' if ans[i] == INF else ans[i])

                    print("NEGATIVE CYCLE"); exit()
            print("INF")
            print(d)

        print("NEGATIVE CYCLE")
            print("INF")
            print(i)
    print('NEGATIVE CYCLE')
            print('INF')
            print(d[i])

    print('NEGATIVE CYCLE')
    print(c)


    print("NEGATIVE CYCLE")
  print("NEGATIVE CYCLE")
    print(d[i]if d[i]!=float("inf")else"INF")


    print('NEGATIVE CYCLE')
    print(ans)

    print("NEGATIVE CYCLE")
            print("INF")
            print(d)


  print('NEGATIVE CYCLE')
      print('INF')
      print(i)

        print(i if i != float("inf") else "INF")
		print('NEGATIVE CYCLE')
		print('\n'.join(map(lambda x:'INF' if x == INF else str(x),dist)))
    print("NEGATIVE CYCLE")
        print("INF" if v == float("INF") else v)


    print("NEGATIVE CYCLE")
        print(i if i != INF else "INF")
    print("NEGATIVE CYCLE")


  print("NEGATIVE CYCLE")  
      print("INF")
      print(dist[i])

    print("NEGATIVE CYCLE")
  print('NEGATIVE CYCLE')
      print('INF')
    print(dist[i])

    print("NEGATIVE CYCLE")
        print(d[i]) if d[i] != float("inf") else print("INF")


    print('NEGATIVE CYCLE')
            print(d)
            print('INF')





        print("NEGATIVE CYCLE")
            print(dist[i] if dist[i]!=inf else "INF")

    print(ans)
        print(ans[v])

        print("NEGATIVE CYCLE")
                print("INF")
                print(result[i])
            print("NEGATIVE CYCLE")
        print(w if w < INF else 'INF')


        print("NEGATIVE CYCLE")
            print(' '.join(ans))


    print("NEGATIVE CYCLE")
        print(" ".join(map(lambda n: str(n) if n!=inf else "INF", row)))

        print(*["INF" if x == inf else x for x in dr])



            print('NEGATIVE CYCLE')
        print(*ans)

    
        print(result)
                    print(" ", end="")
                    print("INF", end="")
                    print(result[i][j], end="")
            print()

        print(result)
                    print(" ", end="")
                    print("INF", end="")
                    print(result[i][j], end="")
            print()

            print("NEGATIVE CYCLE")
        print(*row)


    print(result)
                print(" ", end="")
                print("INF", end="")
                print(result[i][j], end="")
        print()

            print("NEGATIVE CYCLE")
        print(" ".join(str(i) if i!=INF else "INF" for i in sub))
  print('NEGATIVE CYCLE')
    print(' '.join(map(lambda n:str(n) if n!=inf else "INF", row)))


            print("NEGATIVE CYCLE")
        print(' '.join( ('INF' if isinf(dij) else str(dij) for dij in mi)))


        print("NEGATIVE CYCLE")
                print('INF', end='')
                print(' INF',end='')
                print('%d'%(dist[i][k]),end='')
                print(' %d'%(dist[i][k]),end='')
    print()


    print("NEGATIVE CYCLE")
        print(*map(lambda x: x if x != float("inf") else "INF", d))


    print("NEGATIVE CYCLE")
        print(" ".join(map(lambda n: str(n) if n!=INF else "INF", row)))

        print(result)
        print(" ".join(map(lambda x: "INF" if x == float('inf') else str(x), row)))


            print('NEGATIVE CYCLE')
        print(' '.join(map(lambda x: str(x) if x < INF else 'INF', d)))


	print("NEGATIVE CYCLE")
		print(*dp[i])

    print("NEGATIVE CYCLE")
        print(" ".join(map(str, i)).replace("inf", "INF"))


        print("NEGATIVE CYCLE")
    print(*ans)

        print("NEGATIVE CYCLE")
    print(*res)


        print("NEGATIVE CYCLE")
    print(*["INF" if d == INF else d for d in dl])


            print('NEGATIVE CYCLE')
    print(*dpi)


            print("NEGATIVE CYCLE")
    print(*temp)

        print("NEGATIVE CYCLE")
            print(tmp)


    print(' '.join(c))

        print('NEGATIVE CYCLE')
        print(' '.join(map(lambda x: 'INF' if x == float('inf') else str(x), d[i])))

			print("NEGATIVE CYCLE")
		print(" ".join(["INF" if x > 1 << 40 else str(x) for x in l]))


            print('NEGATIVE CYCLE')
        print(*['INF' if R == INF else R for R in r], sep=' ')


        print("NEGATIVE CYCLE")
    print(*di)


            print("NEGATIVE CYCLE")
    print("\n".join(ansl))      


            print("NEGATIVE CYCLE")
                    print("INF", end=" ")
                    print("INF", end="")
                    print(dist[i][j], end=" ")
                    print(dist[i][j], end="")
        print("")

    print('NEGATIVE CYCLE')
  print(' '.join(map(f, i)))


            print(*row)

        print("NEGATIVE CYCLE")


    print("NEGATIVE CYCLE")
        print(*["INF" if dd>=float("inf") else dd for dd in d])

            print("NEGATIVE CYCLE")
        print(*i,sep = " ")
    print('NEGATIVE CYCLE')
        print(*[x if x != INF else "INF" for x in d])

        print('NEGATIVE CYCLE')
    print(*ans)

  print("NEGATIVE CYCLE")
    print(*G[i])
  

    print("NEGATIVE CYCLE")
        print(*[e if e < INF else "INF" for e in cost[i]])

            print('NEGATIVE CYCLE')
                print('INF', end=" ")
                print(result[i][j], end=" ")
                print('INF', end="")
                print(result[i][j], end="")
    print()

        print(res.strip())
    print("NEGATIVE CYCLE")

        print(' '.join(['INF' if math.isinf(dij) else str(dij) for dij in di]))
    print('NEGATIVE CYCLE')

            print("NEGATIVE CYCLE")
        print(' '.join(('INF' if isinf(dij) else str(dij) for dij in di)))

                print("NEGATIVE CYCLE")
    print(*ans)

        print("NEGATIVE CYCLE")
    print(" ".join(list(map(str, temp))).upper())
    

    


        print('NEGATIVE CYCLE')
            print(*a)


        print(*value, sep=sep, end=end)


    print("NEGATIVE CYCLE")
    print(*xx, sep=" ")



        print("NEGATIVE CYCLE")
            print(put.rstrip())

        print("NEGATIVE CYCLE")
            print(*[ w if w!=inf else "INF" for w in res[i] ])



    print('NEGATIVE CYCLE')
        print(*res)

				print("NEGATIVE CYCLE")
	print(*d[i])










    print(' '.join(dis))

            print("NEGATIVE CYCLE")
            print(self.list_to_str(self.vertices_dist_array[i]))


  print("NEGATIVE CYCLE")
    print(*D[i])

    print('NEGATIVE CYCLE')
        print(*d)


            print('NEGATIVE CYCLE')
        print(*l)


        print("NEGATIVE CYCLE")
    print(*map(lambda x: "INF" if x>=int(1e+10) else x, row))

        print('NEGATIVE CYCLE')
    print(' '.join( ('INF' if isinf(dij) else str(dij) for dij in di)))

                print("NEGATIVE CYCLE")
        print(*res)


            print("NEGATIVE CYCLE")
        print(" ".join([str(j) if j != float('inf') else "INF" for j in i]))
    
    
    
    
        print('NEGATIVE CYCLE')
            print(' '.join(map(str, G[i])).replace('inf', 'INF'))


        print('NEGATIVE CYCLE')
    print(*i)

    print('NEGATIVE CYCLE')
        print(' '.join(map(str, d)).replace('inf', 'INF'))


        print('NEGATIVE CYCLE')
    print(*[x if x != INF else 'INF' for x in warshalld_graph[i]], sep=' ')


        print(*("INF" if g[j]==INF else g[j] for j in range(V)))
    print("NEGATIVE CYCLE")


        print(*x)
    print("NEGATIVE CYCLE")


        print("NEGATIVE CYCLE")
    print(*["INF" if j>=inf//2 else j for j in i])

        print('NEGATIVE CYCLE')
    print(*ans)


    print(ans)


    print(ans)

print(ans)



print(total)



print(total_weight)


    print(mst_weight)

    print(MST(N, STW)[0])


    print(mst_weight)


    print(mst_weight)

    print(mst_weight)

    print(cost)


print(mst.minimum_spanning_tree())



print(kruskal(n_V, Edges))

print(total)




print(cost)


print(ans)


		
print(ans)







    
    print(prim(v))


print(answer)



print(ans)


print(ans)

print(ans)


print(ans)



print(Kruskal(V,edges))




print(ans)


print(kruskal(V, es))

    print(ans)


print(res)

print(prim(n, edges))

print(ans)



print(mst)




print(mst)




print(mst)



print(total)


print(ans)
  
    
  


    print(ans)

    print(0)

print(sum_w)


print(kruskal(V, edges))


print(prim(G))


print(ans)




print(ans)

    print(ans)



  print(ans)

print(ans)
		



    print(ans)
   


    print(ans)

    print(ans)

    print(ans)


print(cost)

    print(k.min_cost)


    print(res)
    

print(ans)


print(total)

    print(kruskal(v,edges))


    print(ans)
    print(ans)
    print(msg, *x, file=sys.stderr)


    print(solve(V, E, edges))


            print(k)
        print("testing")
  print(kruskal(es,V,E))
    print(Ans)
    print(ans)
    print(ans)



print(total)    
    


print(total)

print(total)



print(total)

    print(res)


    print(weight)

print(sum(K))


    print(sum(item[1] for item in union_find_tree))




print(ans) 



print(solve(V,es,r))



print(B)

    print(res)
print(ans)


print(dg.chu_liu_edmonds(R))


           print(-1)
print(res)



print(Chu_Liu_Edmonds(n, edges, root))


print(ans)

    print(calc_min_cost_arborescence(num_vertexes, edges, root))

print(solve(n,edge,r))


print(solve(V, es, r))


    print(ans)

print(edmonds_branching(G, r, 0))


print(solve(V, es, r))

    print(ans)



print(ans)


  print(cost)

print(cost)


    print(-1)
    print(ans)

print(chi_liu(edges, n, r))




print(chu_liu_edmond(set(range(nv)), 0))


print(solve(V, Edge, r))



print(chu_liu_edmonds(v, edges, r))


    print(edmonds_branching(G, r, 0))


print(chi_liu_edmonds(g, v, r))


    print(mca_chu_liu_edmonds(graph, r))


	
print(cle.solve())

        print(i)
        

    print(a)

    print(*sorted(ans), sep="\n")


    print(*sorted(res), sep="\n")


    print(v)


		print("\n".join(map(str, sorted(articulation))))


    print(u)

        print(a)


            print(v)
        print(v)


        print(i)


        print(ans)

        print(i)


    print(i)



    print(*ans, sep = '\n')

        print(ap)

    print(*result, sep = '\n')

    print(p)


    print(i)


    



    print(*res, sep="\n")


    print(v)


        print(*articulation, sep = '\n')
        print(ap[i])
         
    print(v)

        print(v)

        print(i)

        print(v)


    print(n)

        print(a)
      print(u)

        print(v)


        print(*sorted(articulations), sep="\n")


    print('\n'.join(map(str, res)))

        print(ap)


        print(point)

        print(i)

        print(p)


    print(a)
  
    print(a)

    print(i+1)

  print(i)


    print(ap)


    print(i)

        print(i)


            print(i)


    print(x)


    print(i)

    print(ans)

        print(i)

        print(vertex)

        print(*edge)


        print(point)


        print("%d" % t)

    print(i)

    print(*ret,sep='\n')


    print(*out, sep='\n')
    print(i)


            print(i)
    print(i)

        print(point)


            print(p)

    print(p)



    print(*ans, sep = '\n')

        print(line)


    print("\n".join(list(map(str, answer))))




    print(*ans, sep='\n')
        print(i)


        print(ap[i])

    print(s,t)

        print(*i)
    
    print(*an)


        print(*i)


    print(*e)


		print(x, y)


    print(i, j)

    print(u,v)

        print(*i)


            print(s, t)


    print(*x)


  print(*i)


    print(s, t)


    print(a, b)

    print(*b)

        print(u, v)


    print(s, t)


        print(bridge[0], bridge[1])

        print(a, b)


        print(*i)
    print(s,t)


    print(u, v)

    print(*br)

        print(i[0], i[1])

            print(*t)
    print(*a)

        print(bridge[0], bridge[1])

        print(u, v)
    print(i, j)

    print(*br)


        print(vertex)

        print(*edge)


        print(bridge[0],bridge[1])

    print(i[0], i[1])

    print(*i)



    print(u, v)


    print(x,y)


        print("P, E =")
            print(i, P[i], E[i])


        print("ord =", order)
        print("low =", low)
    
    print(*i)

    print(bridge[0], bridge[1])


    print(*bridge)


    print(bridge[0], bridge[1])


    print(x, y)


    print(*bridge)

            print(bridge[0], bridge[1])

        print(f'{edge[0]} {edge[1]}')


    print(*bri)

        print(bridge[0], bridge[1])
            

    print(*bridge)

    print(u, v)


    print(u, v)

        print(f'{sorted_bridge[i][0]} {sorted_bridge[i][1]}')
         

        print(f"{points[0]} {points[1]}")


  print(i[0],i[1])

    print(s, t)

    print(i,j)

    print(*v)

        print(*i)
    print(a, b)

    print(*i)

    print(*bridge)

    print(s, t)


            print("{} {}".format(s[0], s[1]))


                print(edge[0],edge[1])
        print(k,n)

        print(*ans)


    print(x, y)


        print(art_points[i])

        print(bridges[i][0], bridges[i][1])


        print(1 if components[u] == components[v] else 0)


            print(1)
            print(0)


    print(int(gr[u] == gr[v]))

    print(int(uf.check(u, v)))


        print(1 if res[u] == res[v] else 0)



print('\n'.join(map(str, res)))


    print('\n'.join(map(str, answers)))

            print(0)
            print(1)
            print(0)


        print(1)
        print(0)

print(*ans, sep='\n')


        print(int(tpl_orders[a] == tpl_orders[b]))


    print(1 if SCC_root[u]==SCC_root[v] else 0)


        print(1 if (grp[u] == grp[v]) else 0)


            print(1)
            print(0)

        print(1)
        print(0)

        print(1)
        print(0)

    print(1 if group[u]==group[v] else 0)

            print(1)
            print(0)

        print(int(group[u] == group[v]))

    print(*ans, sep="\n")


print(*ans, sep='\n')

        print(1)
        print(0)


        print(1)
        print(0)

        print(1)
        print(0)

		print(1)
		print(0)

        print(1)
        print(0)

        print(1)
        print(0)




        print(1)
        print(0)


        print(int(color[u] == color[v]))
        print(1)
        print(0)


    print(1 if components[u] == components[v] else 0)


print(main())
    print(1 if C[x] == C[y] else 0)

        print(1)
        print(0)

        print(1)
        print(1)
        print(0)




    print(int(idx[a] == idx[b]))

    print(1 if scc.uf.same(u, v) else 0)



print(*ans, sep='\n')


  print(a)


       print(1)
       print(0)

    print(a)


    print('\n'.join(ans))
        print(1)
        print(0)


        print(1 if lowest[u] == lowest[v] else 0)
  print(1 if uf.same(u, v) else 0)


            print(1)
            print(0)


    print(int(ans[u]==ans[v]))

            print(1)
            print(0)


    print(1 if parent[u] == parent[v] else 0)

		print("1" if c[a]==c[b] else "0")

		print("1" if c[a]==c[b] else "0")

print(*ans, sep='\n')

        print(1)
        print(int(scc.order[u] == scc.order[v]))


    print(1 if parent[u]==parent[v] else 0)

        print(1)
        print(0)

    print(1 if comp_idx[u] == comp_idx[v] else 0)



            print(1)
            print(0)

    print("\n".join(result))


            print('1')
            print('0')

        print(int(res[u] == res[v]))


    print([0,1][c[a]==c[b]])

    print(int(group[x] == group[y]))


            print(1)
    print(ans)


    print(cycle_detection(g))


                print(1)
    print(0)


                print(1)

print(0)

                print(1)
print("0")

    print(ans)



print(ans)


print(f)


      print(1)
    print(0)

print(1 if has_cycle else 0)


    print(jdg)
 
 



                print("1")
print("0")


print(f)

                print(1)
                print(1)
            print(0)


    print(solve(V, E, G))


        print(*value, sep=sep, end=end)


        print(1)
print(0)


		print(1)
print(0)

print(solve(v,e,g))


    print(int(len(closed(g)) > 0))


    print(int(cd.forward_init()))



print(solve())


    print(1 - all(dfs(v) for v in range(n)))
                print(1)
    print(0)


            print(1)
print(0)


        print(1)
    print(0)


print(int(not label == V))


            print(1)
print(0)

        print(0)
        print(1)
    

    print(0)
    print(1)


    print(ans)
print(int(label == n) ^ 1)

	print(cycle)

    print(1)
    print(0)



                print("1")
print("0")

    
    print(int(found))

    print(1)
    print(0)

                print(1)

print(0)



    print(1 if is_there_cycle(num_vertexes, adjacency_list) else 0)

                 print(1)

print(0)

    print(1)
    print(0)

            print(1)
print(0)


print("1" if cycle else "0")

    print(1)
    print(0)

    print(1)
    print(0)


    print(test())



            print("1")
    print("0")


print(d[GV])

                print(1)
    print(0)

        print(1)
    print(0)

print(result)


        print("1")
        print("0")


print(result)


        print("1")
        print("0")


print(1 if topological_sort(V, E) is None else 0)

		print(1)
		print(0)
    print(0)
    print(1)    


print(0 if len(A)==V else 1)

            print(1)
print(0)


        print("1")
        print("0")


    print(0)

    print("1")
    print("0")

print(0 if n == cnt else 1)



print(1 if cycle(es) else 0)


    print(1)
    print(0)


	print("1")
	print("0")



    print(1 if ans else 0)

        print(1)
        print(0)


print(1-t_sort(n,node)[0])

    print(i)

        print(i)


        print(i)


    print(vertex)

        print(s)


	print("\n".join(map(str, topologicalSort(g, deg))))

    print("%d"%(node_id))
print(*ans, sep = '\n')


print(*l, sep="\n")



print(*ans)


    print(ans[i])
           

    print(a)

    print(r)

    print(*reversed(ans), sep='\n')

    print(i)

    print(*sorted_vertex_list)


print(*out, sep = '\n')

        print("loop")


    print(*topological_index,sep="\n")



	print(x)

        print(val)


    print(v)

print(*out, sep='\n')

print(*ans, sep='\n')


        print(p)

        print(r)



print(*topological_sort(es),sep="\n")


    print(item)

    print(*solve(V, E, G), sep='\n')


        print(*value, sep=sep, end=end)


    print(x)

    print(v)

                print(dist, q)
print(lis)
    print(str(i).upper())
    print("NEGATIVE CYCLE")
        print(str(i).upper())
        print("NEGATIVE CYCLE")
            print(str(i[j]).upper(), end = " ")
            print(str(i[j]).upper())
print(ans)
        print(1)
print(0)
    print(i)

print(max(d2))
    print(max(s))
print(ford_fulkerson(0,n-1,c,n))
print(ford_fulkerson(0,x+y+1,c,x+y+2))
    print(ans[i])


print(*ret,sep='\n')


    print(i)



    
    print(*ansL, sep='\n')
    

print(*ans, sep='\n')

    print(i)


    print(tps.Tp[i])




print(*G.order, sep="\n")

            print(s)


        print(res[i])

	print(-1)
	print(*ans, sep="\n")



        print(i)



print(topo_dfs())

    print(vi)


        print(vertex)

        print(node)

print("\n".join(map(str, topo[::-1])))

        print(v)



    print(*result[::-1])


            print()


print(*ans[::-1], sep="\n")

        print(v)

    print(ans[i])
    



    print(*result, sep="\n")

        print(resLi[- i - 1])

        print(v)


print(*ret, sep='\n')

        print(i)



        print(vertex)

    print(i)

  print(i)


    print(max(ans))


print(max(d))


print(max(Dists))

	print(ans)


print(ans)


    print(treeHeight(n, edges))


print(ans)



print(max(f(0)))


    print(dfs(V, dfs(V, 0)[1])[0])



print(diameter_of_tree(es, weight=1))


print(D)


    print(diameter)

print(ans)


print(ans)


print(t.diam())

  print(ans)

    
    print(ans)


print(ld)


    print(max(distance))


        print(0)
    print(k)


print(d)


print(max(d))



print(d)


    print('lca', self.get_lca(u, v))
print(tree.get_diameter())


print(x)


print(tree_diameter(n, G))
print(tree_heights(n, G))


        print(diameter)
print(ld)


    print(max_weight)



print(d)

print(d)

    print(max(ret))


    print(ans)


print( diameter( N, E, D))


print(ans)
    



    print(deepest[1])


print(max(dist))

print(max(ans,BFS(add)[1]))


print(ans)

    print(mdis)


print(ans)

print(ld)

print(max(dp))


print(max(reroot.ans))


print(max(distance))


print(yw)


print(w)


print(max(D))

        





print(max(dp))


print(max(Dists))


    print(solve(*input(f)))


print(r2)

print(h_v)

    print(max(ans))


print(max(dist))

    print(tree_diameter(n, edges))

    print(r)


print(Dist[u])


print(d)

print(max(d))

    print(max(d))


print(max(tree.res))

print(max(res))
    

print(ans)


    print(max(d2))


print(max(dist))


print(max(cost2))

print(ans)


print(dfs(ind))
        
            
        
        
        
        

print(max(res))


  
  print(max(cost2))
        print(a)

    print(depth2[i])
print(depth)
print(left)
print(right)




        
        

    print(*height_list, sep='\n')

	print("\n".join(map(str, ans)))


    print(max(cost2[i], cost3[i]))
    print(num)

        print(max(s, t))


    print(a)


    print(max(v2[i], v3[i]))


    print(ans)

print(*h,sep='\n')

    print(D[n])
    

        print(i)
    print(max(dp1[i], dp2[i]))


    print(max(ans_i[i], ans_j[i]))



print('\n'.join(map(str, tree_height(n, G))))



print("\n".join(map(str, [max(a, b) for a, b in zip(d2, d3)] )))

print(*height, sep='\n')

    print(max(costs1[i], costs2[i]))



print('\n'.join(map(str, res)))

  print(max(ds, dt))



    print(max(dist_from_x[i], dist_from_y[i]))


    print(max(distance2[i], distance3[i]))


print(*ans, sep="\n")

    print('\n'.join(map(str, height)))


        print(max(lca.dist(i, start), lca.dist(i, end)))


	print(i)


        print(max(cost2[i], cost3[i]))


    print(h)

    print(*dp, sep='\n')


    print('\n'.join(map(str, ans[:n])))


print(*ans_list, sep='\n')


    print(solver.solve(i))


    print(ans)



        print(w)


    print(ans)

    print(*args, end=end, file=sys.stderr, **kwargs)


        print(calc_lca(doubling, depth, u, v))


    print(0)
print("\n".join(map(str,ans)))
  

		print(x)
		print(x)

    print(query(a, b))


print(*ans, sep='\n')

    

        print(lca.query(u,v))
  

    print(r)

    print(lca(u,v))

    
    print(lca)

    print(LCA(at,bt))
    
    





    print(hld.lca(a,b))


            print(u)
        print(par[u])

    print(*res, sep="\n")


  print('\n'.join(map(str, (lca.lca(list(map(int, input().split()))) for _ in range(int(input()))))))
print("\n".join(map(str, ans)))


            print(u)
        print(parent[u][0])

            print(u)
            print(root[0][u])


print(*A,sep='\n')

        print(lca.qry(u,v))

print(*res,sep="\n")


	print(n-lca(n-x-1,n-y-1)-1)

    print(ans[1])

    print(msg, *x, file=sys.stderr)


        print(query(*q))


            print(k)
        print("testing")
print(*res, sep="\n")


        print(query(u,v))

        print(lca.query(u, v))


    print(ac.lca(u,v))
    print(solver.lca(u, v))


    print(a)


    print(lca(ui, vi))

        print(lca.get_lca(u, v))

print(*ans, sep="\n")


        print(ld.getLca(u, v))
    
    print(ans)

    print(lca.find_lca(u, v))

    print(LCA(a, b))

print(*ans, sep='\n')


print(*res, sep="\n")

    print(lca.get_lca(u,v))

    print(lca)



print(*ans_list, sep="\n")

            print(u1)
            print(parents[u1])

	print(_lca)


    print(G.get_lca(u, v))

    print(lca.query(u, v))

    print(query(u,v))


    print(lca.lca(u, v))

    print(hld.lca(u, v))

    print(*slv(N, KC, Q, UV), sep='\n')


  print(lca.query(u,v))

        print( hld.get_lca(a,b) )


    print(p)   

    print(hld.lca(u, v))

    print(lca(*map(int, input().split())))


    print(get(*map(int, input().split())))

    print(lca.lca(*map(int,input().split())))

    print(ui)
  print(lca)

  print(lca(x,y))
        print(rmq.find(l, r)[1])
 
 
        print(lca(u, v))


    print(lca.find_lca(u, v))
        

    print(LCA.same(a, b))

    print(lca.get(u, v))


        print(lca(x,y))


    print(lca.get(u, v))


    print(query(u, v))


    print(tr.lca(u, v))

    print(lca.get(u, v))

print(*ans, sep='\n')



            print(bit.sum(IN[u]+1))



        print(RQT_getSum(query[1]))
            print(rsq_tree.get_sum(num_nodes))

        print(seg.raq(a))

        print(bit.sum(IN + 1))


        print(Object.getSum(right[alist[1]] - 1))



        print(Object.getSum(right[alist[1]] - 1))

        print(ans_i)


		print(bit.get_sum(r[line[1]] - 1))
        print(Object.getSum(right[alist[1]] - 1))

        print(ans)


        print(bit.get_sum(r[line[1]] - 1))
        print(bit.get_sum(r[line[1]] - 1))
        print(Object.getSum(right[alist[1]] - 1))

        print(hld.sum(x))


        print(ans)

        print(" ".join(map(str, l)))
            print(bit.get_sum(right[query[1]] - 1))
		print(rqt.sum(query[1]))
	


print('\n'.join(map(str, res)))

            print(raq.get(u))
    print('lca', self.get_lca(u, v))
    print(cost)


            print(seg.query( 0, visit[u] +1))


print("\n".join(ans))



print("\n".join(ans))


        print(ans)

            print(hld.get_sum(v))


print('\n'.join(map(str, res)))

        print(s)

            print(ps.get(u))
        print(hld.sum(x))


            print(tmp)




print(g.flow(0, n - 1))



print(f)

print(ans)

print(res)

    print(max_flow)


print(ans)


print(total_flow)

print(g.flow(0, V - 1))


    print(F.calc(0, n - 1))


            print(fmt.format(*args), file=sys.stderr)
            print(fmt, file=sys.stderr)


    print(ff.flow(0, N-1))


print(dinic.flow(0,v-1))

print(g.flow(0, v - 1))

    print(flow.solve(0, n - 1))

print(mfg.flow(0, V - 1))


print(ans)

print(dinic(0, V - 1))


    print(dinic.max_flow(0, V - 1))


    print(mf.solve(0, n-1))

print(flow)

    print(dinic.solve(0, V-1))


print(flow)


print(max_flow(0, n - 1, n))


print(dinic.solve(0, v-1))



print(dinic.max_flow(0, N-1))


print(Dinic(graph=graph).maximum_flow(0, V - 1))


print(pl.flow(0, N-1))


    print(ans)


print(ans)


        
                    

    print(ans)

    print(ans)


print(dinic.maximum_flow(0, v - 1))


print(dinic.flow(0, n-1))

    print(MF.compute(0,v-1))

print(di.max_flow(0, N-1))


    print( Ford_Fulkerson(N,E,capacity,0,N-1))
        
    
    print(max_flow(0, V - 1))


print(ans)

    print(F.max_flow(0, N-1))


    print(res)


    print(mf.flow(0, V-1))


print(ans)


print(mfg.max_flow(0,N-1))


print(d.max_flow(0, N - 1))

    
print(dinic.max_flow(0,V-1))


print(edmonds_karp(G, 0, n-1))


print(g.max_flow(0, N - 1))

print(flow.compute(0,v-1))


print(dinic.flow(0,V-1))

print(max_flow(graph, 0, n - 1))



print(mf.max_flow(0, n-1))


print(dinic.max_flow(0,V-1))

print(G.max_flow(0, v - 1))

    print(graph.flow(0,v-1))

print(max_flow)


print(mf.flow(0,N-1))

print(ans)







    print(answer)


print(f)


print(mf.flow(0, V-1))

print(dinic.flow(0, N - 1))


print(max_flow)

print(ans)



print(f)

print(dinic.flow(0,n-1))

print(ff.flow(0,N-1)) 

print(ans)

            

print(ANS)



print(dinc.flow(0, v-1))



print(mf.min_cost_flow(0, n-1, f))

        print(ans)
        print(-1)


    print(f[1] if f[0] == F else -1)



print(graph.minCostFlow(0, V-1, F))

print(ans)


    print(mc.cal(0,n-1,f))

    
    print(fl.min_cost_flow(0, V-1, F))

	print(minimumCostFlow(N, G, 0, N - 1, F))


print(ans)

    print(H)
    print(-1)

print(ans if flow == f else -1)

    print(-1)
    print(cost)


print(cost if flow == F else -1)

    print(-1)
    print(ans[1])


    print(cost if f == F else -1)


print(mcf.flow(0, V-1, F))

    print(-1)
    print(ans[1])

    print(ans)


  print(-1)
  print(ans)

    print(-1 if flow < F else mincost)

print(ans)

    print(-1)
    print(ANS[1])


print(graph.minCostFlow(0, n-1, f))

    print(ans)
    print(-1)

    print(ans)

print(cost if flow == f else -1)


    print(ret[-1][1])
    print(-1)

  
  print(minCostFlow(graph, 0, V-1, F))


print(min_cost_flow_dijkstra(E, 0, N-1, F))


print(mcf.solve(0,v-1,f))



print(T.get_mf(0, N-1, F))

  print(ans)

  
      
      
         
      
      
    
    
  
    
    


print(graph.solve(F))
    

print(mcf.flow(0, N-1, F))

    print(-1)
    print(flow)


    print(-1)
    print(ans[1])


    print(-1)
    print(ans)

print(ans[1] if ans[0] == F else -1)

	
print(mincost.flow(0, V-1, F))


    print(mcf.calc_min_cost_flow(start, goal, flow))


print(mcf.run(0, n-1, f))


print(minimumCost(g,0,V-1,F))




print(minimum_cost_flow(graph, 0, n - 1, f))


    print(cost)


    print(-1)
    print(cost)

	print(-1)
	print(c)
	

print(cost)
print(res)

    print("".join(b))




    
print(ans.min_cost_flow(0,v-1,f))


print(min_cost_flow(0, n - 1, f))


print(MCF.minCostFlow(0,n-1,f))

    
print(mcf.min_cost_flow(0,V-1,F))


        print(-1)
        print(ans[1])


print(ans if ans is not None else -1)


print(mcf.flow(0, V-1, F))


        print(-1)
    print(ans)

print(mcf.min_cost_flow(0, V-1, F))

            print(-1)
        
    print(totalcost)
    


print(main())
print(g.minimum_cost_flow(0, N-1, F))


print(dijks(0, V - 1,F))


    print(min_cost_flow(0, n - 1, f))


    print(ans)

    print("-1")
    print(ans)


    print(-1)
    print(ans)

        print(-1)
print(total_cost)


        print(-1)
        print(answer)
print(res)

    
    print(HK.flow())
    



print(ans)

    print(ans)


print(max_flow(x+y,x+y+1))


  



    print(MCBM)

    print(sum(flow.matching()))
    
print(ans//2)

print(mmatch.matchnum())

    print(BPM(edmonds_matrix=edmonds_matrix, X=X, Y=Y).execute())



print(bm.solve())


    print(bm.bipartite_matching())

    print(ff.flow(0, X + Y + 1))


    print(f)


print(g.flow(X + Y, X + Y + 1))


print(dinic.flow(s,t))

        
print(matching()) 

    print(bm.solve())

print(ans)


        
                    


print(D.max_flow(s, t))


print(sum(mG[0].values()))


print(bm.bipartite_matching())


print(bm.bipartite_matching())


print(dinic.flow(0,X+Y+1))


print(count)

print(answer)


print(sum(dfs(s, set()) for s in range(xn)))

    print(b.maximum_matching())


print(cnt)


    

print(ans)

print(ans)


    print(dinic.solve(source, sink))

print(mb.max_flow())

print(dinic.solve())




print(HK.flow())


print(maximum_matching_bipartite_graph(X,Y,E))

                    print(u,end=' ')
print(g.MaximumBipartiteMatching(x,y))


print(solver.flow(0, X + Y + 1))


    print(bg.solve())



    print(ans)


print(ans if ans < INF else -1)
    



    print(mf.solve(snode, tnode))

    print(mf.solve(0, 4-1))


    print(mf.solve(0, n-1))

    print(mf.solve(0, x+y+1))



print(dinic.max_flow(s, t))

print(BM.matching)


print(dinic(s, t))


print(graph.maxFlow(s, t))


print(dinic.flow(s,t))


print(dinic.flow(s,e))

	
print(bm.solve())

    print(bm.solve())


    print(bm.run())


print(graph.solve())
    

    
print(G.max_flow(s, g))
    






    
    print(res)

    print(sum(map(dfs, range(xn))))


        
print(ans)




print(max_bipartite_matching(edges))


    print(bp_match(Ss, Ts, Es))

    print(ans)



print(dinic.flow(0, X + Y + 1))



print(B.flow())



    print(ans)

print(ans)


print(1)

print(2)

print(5)

print(3)

print(1 + 3)

print(3)

print(0)

print(0)

print(1)


print(3)

print(3)

print(3)

print(89)

print("3")

print(1)

print(3)

print(3)

print(10)

print(10)

print(99)

print(89)

print(14)

print(100)

print(55)

print(2)

print(46)

print(14)

print(100)

print(77)

print(55)

print(7)

print(3)

print(3)

print(3)

print(86)


print(32)


print(3)

print(86)

print(3)

print(4)

print(3)


print(3)

print(3)


print(3)

print(1)

print(3)

print(66)

print(3)

print(1)

print(3)

print(7)

print(3)

print(3)

print(3)

print(3)

print(3)

print(86)

print(3)

print(3)

print(3)

print(1)

print(3)

print(86)

print(3)

print(6)

print(3)

print(3)

print(3)

print(3)

print(3)

print(3)

print(1)

print(3)

print(75)

print(3)

print(96)

print(3)

print(3)

print(5)

print(3)

print(8)

print(3)

print(3)

print(86)

print(7)
print(36)

print(3)

print("a")

print("hi")

print('starless')

print("programming")

print("programming")

print('a')

print("programming")


print("programming")

print("abc")

print("python")

print("programming")

print("programming")

print("proguramming")

print("sanatyan")

print("aizu")

print("hiromu")

print("aaaaa")

print("fukusina")

print("karinrin")

print("aiueo")

print("somas")

print("programimming")

print("aizu")

print("pannakotta")

print("pomupomupurinn")

print("supra")

print("soma")

print("aizu")

print("programming")

print('programing')

print("prigramming")

print("programing")


print("programming")

print("aiueo")

print("programming")

print("good")

print('programming')

print("programming")

print('hello')



print("programming")

print("programming")

print("programming")

print("programming")

print('programming')

print("programming")

print("cat")

print("programming")

print("programming")

print("programing")

print("hello")

print("programming")


print("programming")

print("programming")

print("programming")

print("programming")

print("programming")

print("hello")

print("programming")

print("apple")

print("a")

print("programming")

print("apple")

print("programming")

print("sakana")

print("programming")

print("akateniyada")

print("programing")

print("goodmorning")

print("programming")

print("programming")

print("programming")

print("programming")

print("programming")

print("programming")

print("programming")

print("hello")

print("smile")

print("programming")


print("programming")

print(a)


print("programming")

print('icecream')
print("programming")

print("programming")

print("hello")

print("bakame")

print("wads")

print("programming")

print("programming")

print(1, 2)

print(1, 2)

print(2 , 3)

print("1 3")

print(f"{num1} {num2}")

print(1,1)

print(1,3)


print(1,3)

print(integer1, integer2)

print(1,3)

print(4,3)

print(2,3)

print(1,3)

print(1, 2)

print(12,23)

print(1,2)

print(2,5)

print(55,77)

print(1, 1)

print(9,7)

print(1,3)

print(1,2)

print(1,3)

print(4,8)

print(1,2)

print(5,100)

print(1, 3)

print(1,3)

print(1,3)

print(1,2)


print(1, 3)

print(a,b)

print(a,b)

print(1,3)

print(a,b)

print(4,3)

print(1,3)

print(1,3)

print("1 3")

print(1,3)

print(1,3)

print("1 3")

print(1,3) 

print(1,3)

print(a,b)

print(1,3) 

print(1,3)

print(1,3)

print(a,b)

print(1,3)

print(1,3)

print(1,3)


print(34 ,42)

print(1,3)

print(a,b)

print(1, 3)


print(2,4)

print(2,3)

print(1,3)

print(0,8)

print(1,3)

print(1,3)

print(1,3)

print(1,3)

print(1,3)


print("13 14")

print(a,b)

print("1 3")

print("9 6")

print(8,7)
print("67 85")

print("13 14")

print(a,b)


print(1,3)

print(1,3)

print(1,3)

print(2,4)

print(1, 3)


print(1,3)

print(1,3)

print(1,3)

print(1,3)

print(1,3)

print(1,3)

print(8, 6)

print(1,5)

print(5,4)

print(a,b)


print(1,3)

print(1)

print(3)

print(int(38))

print(3)

print(0)

print(1)

print(1)


print(3)

print(3)

print(1)

print(7)

print(3)

print(55)


print(12)

print(9)

print(5)

print(1)

print(3)

print(3)

print(55)

print(3)

print(3)

print(50)

print(3)

print(3)

print(3)

print(1)


print(3)

print(b)

print(3)

print(3)

print(3)


print(3)

print(3)

print(3)

print(3) 

print(3)

print(a)

print(3)

print(3)

print(3)

print(3)

print(3)




print(3)

print(4)


print(3)

print(9)

print(3)


print(2)

print(2)

print(3)

print(96)


print(3)

print(3)


print(a)

print(3)

print(3)

print("3")

print(3)

print(3)

print(3)

print(a)

print(3)


print(7)
print(a)

print(3)

print(3)

print(3,)

print(13)


print(3 )

print(a)



print(3)

print(8)


print(3)

print(3)

print(3 )

print(3)

print(3)


print(3) 

print(3)

print(a)


print(3)
print(3)


print(3)


print(3)

print(a)

print(3)

print(3)


print(3)

print(3)

print(a)


print(1)
print(2)
print(3)

print("0\n0\n0")

print(('3\n4\n5'))

    print(a+1)

print(1)
print(2)
print(3)

print(1,1,1, sep='\n')

print(1)
print(2)
print(3)

print(1)
print(2)
print(3)

print(3)
print(2)
print(1)

print(1)
print(2)
print(3)

print(7)
print(66)
print(77)

print(55)
print(66)
print(77)

print(1)
print(2)
print(3)

print(1)
print(2)
print(3)

print(12)
print(12)
print(12)

print(10)
print(20)
print(30)


print(14)
print(20)
print(27)

print(1)
print(2)
print(3)

print(1)
print(2)
print(3)

print(5)
print(4)
print(3)

print(1)
print(2)
print(3)

print(1)
print(2)
print(3)

print(1)
print(2)
print(3)

print(2)
print(4)
print(6)

print(10)
print(20)
print(30)

print('%d\n%d\n%d' %(1,2,3))

print(1)
print(2)
print(3)

print(1)
print(2)
print(3)

print(1)
print(2)
print(3)


print(1)
print(2)
print(3)

print(1)
print(2)
print(3)

print(a)
print(a)
print(a)

print(3)
print(6)
print(9)

print(1)
print(2)
print(3)

print(1)
print(2)
print(3) 

print(1)
print(2)
print(3)

print(1)
print(2)
print(3)


print(1)
print(2)
print(3)

print(1)
print(2)
print(3)

print(1)
print(2)
print(3)

print(1) 
print(2)
print(3)

print(1)
print(2)
print(3)

print(a)
print(a)
print(a)

print(1)
print(2)
print(3)

print(1)
print(1)
print(2)

print(a)
print(b)
print(c)

print(1)
print(2)
print(3)

print(1)
print(2)
print(3)


print(4)
print(97)
print(3)

print(1)
print(2)
print(3)

print(1)
print(2)
print(3)

print(1)
print(2)
print(3)

print(1)
print(2)
print(3)

print(a)
print(b)
print(c)

print(2) 
print(6)
print(4)

print(1)
print(2)
print(3)

print(1)
print(2)
print(3)

print("1")
print("2")
print("3")

print(1)
print(2)
print(3)

print(1)
print(2)
print(3)

print(a)
print(a)
print(7)

print(1)
print(2)
print(3)

print(13)
print(14)
print(15)

print(1)
print(2)
print(3)

print(1)
print(2)
print(3)

print(a)
print(ｂ)
print(ｃ)

print(1)
print(2)
print(3)

print(a)
print(b)
print(c)




print(1)
print(2)
print(3)

print(1)
print(2)
print(3)

print(1)
print(2)
print(3)

print(8)
print(9)
print(4)


print(1)
print(2)
print(3)

print(1)
print(2)
print(3)

print(a)
print(a)
print(a)

print(1)
print(2)
print(3)

print(1)
print(2)
print(3)

print(1)
print(2)
print(3)


print(1)
print(2)
print(3)

print(1)
print(2)
print(3)

print(1)
print(2)
print(3)

print(1) 
print(2)
print(3)

print(1)
print(2)
print(3)

print(1)
print(2)
print(3)

print(1)
print(2)
print(3)

print(a)
print(a)
print(a)

print(1)
print(2)
print(3)

print(1)
print(2)
print(3)

print(a)
print(b)
print(c)

print(1)
print(2)
print(3)

print(1)
print(2)
print(3)

print(1)
print(2)
print(3)

print(a)
print(b)
print(c)

print(1)

print(a)

print(a)

print(a)

print(a)

print(a)

print(a)

print(a)

print(a)

print(a)

print(a)

print(a)


print(a)

print(a)

print(a)

print(a)

print(a)

print(a)

print(a)

print(b)

print(a)

print(a)

print(a)

print(a)


print(a)

print(a)

print(b)

print(a)


print(a)

print(a)

print(a)

print(a)

print(a)


print(a)

print(a)

print(b)

print(a)

print(a)

print(a)

print(a)

print(a)

print(a)

print(a)

print(a)

print(a)

print(a)

print(a)

print(a)

print(a)
print(a)

print(b)

print(a)

print(a)

print(a)

print(a)


print(a)


print(a)

print(a)

print(b)

print(b)

print(a)

print(b)


print(a)

print(a)




print(a)

print(18)

print(a)

print(a)

print(a)

print(a)

print(a)

print(a)


print(a)

print(a)

print(a)

print(a)

print(a)

print(b)

print(a)

print(a)

print(18)

print(a)

print(a)

print(a)

print(a)

print(a)

print(a)

print(a)



print(a)








print(a)


print(a)

print(a)

print(a)

print(1)
print(2)

print(a)
print(a)

print(a)

print(a)

print(a)
print(a)

print(a)

print(a)

print(a)
print(a)

print(a)
print(a)


print(a)
print(a)

print(a)
print(a)

print(a)
print(a)

print(a)
print(b)


print(a)
print(a)

print(a)
print(a)

print(a)
print(a)

print(a)
print(a)

print(a)
print(a)

print(a)
print(a)

print(a)
print(a)

print(a)
print(a)

print(a)
print(a)

print(a)
print(a)

print(a)
print(a)

print(a)
print(a)

print(a)
print(a)

print(a)

print(a)

print(a)
print(a)

print(a)
print(a)

print(a)
print(a)

print(a)
print(a)

print(a)
print(a)

print(a)
print(a)

print(a)
print(a)

print(a)
print(26)

print(a)
print(a)

print(a)
print(a)

print(b)
print(b)

print(a)
print(a)

print(a)
print(a)

print(a)
print(a)


print(a)
print(a)

print(a)
print(a)

print(a)
print(a)

print(a)
print(a)

print(a)
print(a)

print(a)
print(a)

print(a)
print(a)

print(a)
print(a)

print(a)
print(a)

print(a)
print(a)

print(a)
print(a)

print(a)
print(a)

print(a)
print(a)

print(a)
print(9)

print(a)
print(a)

print(a)
print(a)

print(a)
print(a)

print(a)
print(a)


print(a)
print(a)

print(a)
print(a)



print(b)
print(d)


print(a)
print(a)

print(a)
print(a)

print(a)
print(a)

print(a)
print(a)


print(a)
print(a)

print(a)
print(a)

print(a)
print(b)

print(a)
print(a)

print(a)
print(a)

print(a)
print(a)

print(a)
print(a)

print(a)
print(b)

print(a)
print(a)

print(a)
print(a)

print(a)
print(t)

print(a)
print(a)

print(a)
print(a)

print(a)
print(a)



print(a)
print(a)

print(a)
print(a)

print(a)
print(a)

print(a)
print(a)

print(a)
print(b)












print(a)
print(a)

print(a)
print(a)

print(a)
print(a)


print(a)
print(a)

print(a)
print(a)

print(a)
print(5)


print(18)
print(26)

print(a)
print(a)

print(a)
print(a)

print(a)
print(a)

print(a)
print(a)

print(a)
print(a)

print(a)
print(a)

print(1, 2)
print(2, 1)

print(a, b)
print(b, a)

print(a, b)
print(b, a)

print(a, end = " ")
print(b)
print(b, end = " ")
print(a)


print(f"{a} {b}")
print(f"{b} {a}")


print(a,b)
print(b,a)

print(a,b)
print(b,a)



print(a, b)
print(b, a)

print(a,b)
print(b,a)


print(a,b)
print(b,a)

print(a,b)
print(b,a)


print(a,b)
print(b,a)

print(a, b)
print(b, a)

print(a,b)
print(b,a)

print(a,b)
print(b,a)

print(a,b)
print(b,a)

print(a, b)
print(b, a)

print(a, b)
print(b, a)

print(a,b)
print(b,a)

print(a,b)
print(b,a)

print(a,b)
print(b,a)

print(a,b)
print(b,a)

print(a,b)
print(b,a)

print(a,b)
print(b,a)


print(a, b)
print(b, a)

print(a, b)
print(b, a)

print(a,b)
print(a,b)

print(a,b)
print(b,a)

print(a, b)
print(b, a)

print(a,b)
print(a,b)

print(a,b)
print(b,a)

print(a,b)
print(b,a)

print(a,b)
print(b,a)



print(a,b)
print(b,a)

print(a,b)
print(b,a)

print(a, b)
print(b, a)


print(a,b)
print(b,a)

print(a,b)
print(a,b)

print(a,b)
print(b,a)


print(a,b)
print(b,a)

print(a,b)
print(a,b)

print(a,b)
print(a,b)

print(a , b)
print(b , a)


print(a,b)
print(b,a)

print(a,b)
print(b,a)

print(a,b)
print(b,a)

print(a,b)
print(b,a)

print(a,b)
print(a,b)

print(a,b)
print(a,b)

print(a,b)
print(a,b)

print(b,a)
print(a,b)

print(a,b)
print(b,a)

print(a,b)
print(b,a)

print(a,b)
print(a,b)


print(a,b)
print(b,a)

print(a,b)
print(b,a)

print(a, b)
print(b, a)

print(1,8)
print(8,1)

print(a, b)
print(c, d)

print(a,b)
print(b,a)

print(a,b)
print(b,a)

print(a,b)
print(a,b)

print(a,b)
print(b,a)

print(a,b)
print(b,a)

print(a,b)
print(a,b)

print(a,b)
print(b,a)

print(a,b)
print(b,a)




print(5,8)
print(8,5)

print(a,b)
print(b,a)

print(a, b)
print(b, a)

print(a, b)
print(b, a)


print(a,b)
print(b,a)

print(1,8)
print(8,1)

print(a,b)
print(b,a)


print(a,b)
print(b,a)

print(a,b)
print(b,a)

print(a,b)
print(b,a)

print(a,b)
print(b,a)

print(1,8)
print(8,1)

print(1,8)
print(8,1)

print(a,b)
print(b,a)

print(a,b)
print(a,b)

print(a,b)
print(b,a)

print(a,b)
print(a,b)

print(a,b)
print(a,b)

print(a,b)
print(b,a)

print(a,b)
print(a,b)

print(a,b)
print(a,b)

print(1, 8)
print(8,1)


print(a,b)
print(b,a)

print(a,b)
print(b,a)

print(a,b)
print(b,a)

print(a,b)
print(b,a)

print(a,b)
print(b,a)

print(a, b)
print(b, a)

print(a, b)
print(b, a)

print(1, 2)
print(2, 1)

print(a, b)
print(a, b)

print(a, b)

print(a, b)


print(a, end = " ")
print(b)


print(c, end = " ")
print(d)


print(f"{a} {b}")


print(f"{a} {b}")


print(a,b)


print(a,b)

print(a,b)
print(b,a)



print(a, b)
print(a, b)

print(a,b)
print(b,a)

print(a,b)
print(b,a)


print(a,b)
print(b,a)


print(a,b)
print(a,b)

print(a, b)
print(b, a)

print(a,b)
print(a,b)

print(a,b) 
print(b,a)


print(a,b)
print(b,a)

print(a,b)
print(b,a)

print(a, b)
print(a, b)

print(a,b)
print(a,b)

print(a,b)
print(a,b)

print(a,b)
print(b,a)

print(a,b)
print(a,b)

print(a,b)
print(a,b)

    print(a, b)
print(a, b)
print(a, b)

print(a,b)
print(a,b)

print(a,b)
print(a,b)

print(8,1)
print(1,8)

print(a,b)
print(a,b)

print(a,b)
print(a,b)

print(a,b)
print(a,b)


print(a, b)
print(a, b)


print(a,b)
print(a,b)

print(a,b)
print(a,b)

print(a,b)
print(b,a)


print(a,b)
print(a,b)

print(a,b)
print(a,b)

print(a,b)
print(a,b)

print(a,b)
print(a,b)

print(a,b)
print(a,b)

print(a,b)
print(a,b)

print(a,b)
print(a,b)

print(a,b)
print(a,b)

print(a,b)
print(a,b)

print(a,b)
print(a,b)


print(a, b)
print(a, b)

print(a,b)
print(a,b)


print(a,b)
print(a,b)

print(a,b)
print(a,b)

print(a,b)
print(b,a)

print(a,b)
print(a,b)

print(a,b)
print(a,b)

print(a,b)
print(a,b)

print(a,b)
print(a,b)

print(5,7)
print(7,5)

print(a,b)
print(b,a)

print(a, b)
print(a, b)


print(a, b)
print(a, b)

print(a,b)
print(a,b)

print(1,8)
print(8,1)

print(a,b)
print(a,b)

print(a,b)
print(a,b)

print(1,8)
print(8,1)

print(a,b)
print(a,b)



print(a,b)
print(a,b)

print(a,b)
print(a,b)

print(a,b)
print(a,b)

print(a,b)
print(a,b)

print(a,b)
print(a,b)


print(a,b)
print(a,b)

print(a,b)
print(b,a)


print(a,b)
print(a,b)

print(a,b)
print(a,b)

print(a,b)
print(a,b)

print(1,8)
print(8,1)

print(a,b)
print(a,b)

print(b,a)
print(a,b)

print(a,b)
print(a,b)

print(a,b)
print(b,a)


print(a, b)
print(b, a)

print(a, b)
print(a, b)

print(a + ' ' + b)
print(b + ' ' + a)

print(a,b)
print(a,b)


print(1,8)
print(8,1)

print(a,b)
print(a,b)

print(a,b)
print(a,b)


print(a,b)
print(a,b)

print(1,8)
print(8,1)



print(a,b)

print(a,b)

print("1 8")
print("8 1")

print(a,b)
print(a,b)

print(a,b)
print(b,a)

print(a,b)
print(b,a)

print(a,b)
print(a,b)

print(a,b)
print(a,b)

print(a,b)
print(b,a)


print(n)

print(a)
print(int(input()))

print(a)

print(input())

print(a)


print(a)

print(a)

print(a)

print(a)

print(a)

print(a)

print(a)

print(a)

print(a)

print(a)


print(a)

print(a)

print(a)

print(a)

print(a)

print(a)

print(a)

print(a) 

print(a)

print(a)


print(input())

print(a)

print(a)

print(a)

print(input())

print(a)


print(a)

print(a)
print(a)

print(int(input()))

print(a)

print(a)

print(a)


print(a)

print(a)


print(a)


print(a)


print(a)

print(a)

print(input())

print(a)

print(a)

print(a)


print(a)


print(a)

print(input())

print(a)

print(a)

print(a)

print(a)

print(a)



print(a)

print(a)

print(a)

print(a)

print(a)

print(a)

print(a)

print(a)

print(a)

print(a)

print(a)

print(input())

print(a)

print(a)

print(input())

print(a)

print(a)

print(a)
print(a)

print(a)


print(a)

print(a)

print(a)

print(a)

print(a)

print(a)

print(a)

print(input())

print(a)

print(a)

print(a)

print(a)

print(a)

print(a)

print(a)

print(a)

print(a)

print(a)


print(a)

    print(input())

print(a)
print(b)


    print(int(input()))


print(a)
print(b)

print(input())
print(input())

print(a)
print(b)



print(a)
print(b)

print(a)
print(b)

print(a)
print(b)

print(a)
print(b)

print(a)
print(b)

print(a)
print(b)

print(a)
print(b)

print(a)
print(b)

print(a,b)

print(a)
print(b)


print(a)
print(b)

print(a)
print(b)

print(a)
print(b)

print(a)
print(b)


print(a)
print(b)

print(a)
print(b)

print(input())
print(input())


print('%d\n%d' %(a, b))

print(a)
print(b)

print(a)
print(b)


print(input())
print(input())

print(a)
print(b)

print(a)
print(b)

print(a)
print(b)


print(a)
print(b)


print(a)
print(b)
print(int(input()))
print(int(input()))

print(a)
print(b)

print(a)
print(b)

print(a)
print(b)

print(a)
print(b)

print(a)
print(b)

print(a)
print(b)


print(a)
print(b)

print(a,b)

print(a)
print(b)

print(input())
print(input())

print(a)
print(b)

print(a)
print(b)

print(a)
print(b)

print(a)
print(b)


print(a)
print(b)

print(a)
print(b)

print(a)
print(b)

print(a,b)

print(a)
print(b)

print(a)
print(b)

print(a)
print(a)

print(a)
print(b)




print(a)
print(b)

print(a)
print(b)

print(a)
print(b)

print(a,b)

print(a)
print(b)

print(a)
print(b)

print(a)
print(b)

print(a)
print(b)

print(a)
print(b)

print(a)
print(b)

print(a)
print(b)

print(input())
print(input())

print(a)
print(b)

print(a)
print(b)

print(a)
print(b)

print(a)
print(b)
print(a)

print(b)

print(input())
print(input())

print(a)
print(b)

print(a)
print(b)

print(a)
print(b)

print(a)
print(b)

print(a)
print(b)

print(a)
print(b)

print(a)
print(b)

print(a)
print(a)

print(input())
print(input())

print(a)
print(b)

print(a)
print(b)

print(a)
print(b)

print(a)
print(b)

print(a)
print(b)

print(a)
print(b)

print(a)
print(b)

print(a)
print(b)

print(a)
print(b)

print(a)

print(b)

print(a,b)

print(a)
print(b)

print(a)
print(b)

print(a)
print(b)

    print(a[-1-i])

print(c)
print(b)
print(a)


    print(a[c])


print(c)
print(b)
print(a)



print(c,b,a, sep='\n')

print(c)
print(b)
print(a)



print(c)
print(b)
print(a)


print(c,b,a)

print(c)
print(b)
print(a)

print(c)
print(b)
print(a)

print(c,b,a)

print(c)
print(b)
print(a)


print(c)
print(b)
print(a)

print(c)
print(b)
print(a)

print(c)
print(b)
print(a)


print(c)
print(b)
print(a)

print(c)
print(b)
print(a)

print(c)
print(b)
print(a)

print(c)
print(b)
print(a)

print(c)
print(b)
print(a)


print(c)
print(b)
print(a)

print(c)
print(b)
print(a)

print(c)
print(b)
print(a)



print('%d\n%d\n%d' %(c, b, a)) 

print(c)
print(b)
print(a)

print(c)
print(b)
print(a)


print(c)
print(b)
print(a)

print(c)
print(b)
print(a)

print(c)
print(b)
print(a)

print(c)
print(b)
print(a)


print(c)
print(b)
print(a)
print(c)
print(b)
print(a)

print(c)
print(b)
print(a)


print(c)
print(b)
print(a)

print(c)
print(b)
print(a)

print(c)
print(b)
print(a)


print(c)
print(b)
print(a)

print(c,b,a)

print(a)
print(b)
print(c)

print(c)
print(b)
print(a)

print(c)
print(b)
print(a)

print(c)
print(b)
print(a)

print(c)
print(b)
print(a)



print(c)
print(b)
print(a)

print(c)
print(b)
print(a)

print(c)
print(b)
print(a)

print(c)
print(b)
print(a)

print(c)
print(b)
print(a)

print(a)
print(b)
print(c)

print(c)
print(b)
print(a)

print(c,b,a)

print(c)
print(b)
print(a)

print(c)
print(b)
print(a)

print(c)
print(b)
print(a)

print(c)
print(b)
print(a)

print(c)
print(b)
print(a)

print(c)
print(b)
print(a)

print(c)
print(b)
print(a)

print(c)
print(b)
print(a)

print(c,b,a)

print(c)
print(b)
print(a)

print(c)
print(b)
print(a)


print(c)
print(b)
print(a)
print(a)
print(b)
print(c)

print(c)
print(b)
print(a)

print(c)
print(b)
print(a)

print(c)
print(b)
print(a)

print(c)
print(b)
print(a)

print(c)
print(b)
print(a)

print(c)
print(b)
print(a)

print(a)
print(b)
print(c)

print(c)
print(b)
print(a)

print(c)
print(b)
print(a)

print(c)
print(b)
print(a)

print(c)
print(b)
print(a)

print(c)
print(b)
print(a)

print(c)
print(b)
print(a)


print(c)
print(b)
print(a)

print(c)
print(b)
print(a)

print(c)
print(b)
print(a)

print(c)
print(b)
print(a)


print(c)
print(b)
print(a)

print(c)
print(b)
print(a)

print(c,b,a)

print(c)
print(b)
print(a)

print(a)
print(b)
print(c)

print(c)
print(b)
print(a)

print(c)
print(b)
print(a)

print(c)
print(b)
print(a)

print(c)
print(b)
print(a)

print(c)
print(b)
print(a)

print(c)
print(b)
print(a)

print(c)
print(b)
print(a)

print(c)
print(b)
print(a)

print(c)
print(b)
print(a)

print(c,b,a)

print(*s[::-1])

print(*v)

print(d,c,b,a,sep=' ')

print(d,c,b,a)


print(d, c, b, a)

print(ans)


print(f"{d} {c} {b} {a}")



print(*A[::-1])

print(d, c, b, a)



print(d, c, b, a)

print(int(d), int(c), int(b), int(a))

print(d,c,b,a)

print(d,c,b,a)

print(d,c,b,a)

print(d,c,b,a)

print(d,c,b,a)

print(d,c,b,a)

print(d,c,b,a)

print(d,c,b,a)

print(d, c, b, a)


print(d, c, b, a)

print(d,c,b,a)

print(d,c,b,a)

print(d,c,b,a)

print(l[3], l[2], l[1], l[0])


print(d, c, b, a)

print(d, c, b, a)




print(d,c,b,a)

print(d,c,b,a)

print(d,c,b,a)

print(d, c, b, a)


print(d,c,b,a)


print(d,c,b,a)

print(d,c,b,a)

print(a,b,c,d)

print(a,b,c,d)

print(d,c,b,a)

print(a,b,c,d)

print(d,c,b,a)

print(d, c, b, a)

print(d,c,b,a)

print(d, c, b, a)


print(d,c,b,a)

print(d,c,b,a)

print(d,c,b,a)

print(d,c,b,a)

print(d,c,b,a)

print(d,c,b,a)

print(d,c,b,a)

print(d,c,b,a)


print(a,b,c,d)

print(list[-1],list[-2],list[-3],list[-4])


print(d,c,b,a)

print(d,c,b,a)


print(d,c,b,a)

print(d,c,b,a)

print(d, c, b, a)



print(d,c,b,a)

print(d,c,b,a)


print(d,c,b,a,)



print(d,c,b,a)

print(d,c,b,a)

print(d,c,b,a)

print(d,c,b,a)

print(d,c,b,a)



print(d,c,b,a)

print(d,c,b,a)


print(d,c,b,a)




print(d,c,b,a)

print(d,c,b,a)

print(d,c,b,a)

print(d,c,b,a)

print(d,c,b,a)

print(d,c,b,a)

print(d,c,b,a)

print(d,c,b,a)

print(a,b,c,d)

print(a,b,c,d)

print(d,c,b,a)

print(d,c,b,a)

print(d,c,b,a)

print(d, c, b, a)

print(d,c,b,a)

print(d,c,b,a)

print(d,c,b,a)

print(d,c,b,a)

print(d,c,b,a)

print(d,c,b,a)

print(d,c,b,a)

print(d,c,b,a)

print(d,c,b,a)

print(d,c,b,a)

print(d,c,b,a)

print(d,c,b,a)

print(d,c,b,a)

print(d,c,b,a)

print(d,c,b,a)

print(d,c,b,a)

print(e, d, c)
print(b, a)

print(*a[-1:-4:-1])
print(*a[-4::-1])

print(e,d,c,sep=' ')
print(b,a,sep=' ')


print(e, d, c)
print(b, a)



print(str(e) + " " + str(d) + " " +str(c))
print(str(b) + " " + str(a))


print(f"{e} {d} {c}")
print(f"{b} {a}")


print(e,d,c)
print(b,a)


print(e, d, c)
print(b, a)

print(e, d, c)
print(b, a)

print(int(e), int(d), int(c))
print(int(b), int(a))

print(e,d,c)
print(b,a)

print(e,d,c,)
print(b,a)

print(e,d,c)
print(b,a)

print(e,d,c)
print(b,a)

print(e,d,c)
print(b,a)

print(e,d,c)
print(b,a)

print(e,d,c)
print(b,a)

print(e,d,c)
print(b,a)

print(e,d,c)
print(b,a)

print(e, d, c)
print(b, a)


print(e,d,c)
print(b,a)

print(e,d,c)
print(b,a)

print(e,d,c)
print(b,a)


print(e, d, c)
print(b, a)

print(e,d,c)
print(b,a)

print(e,d, c,)
print( b, a)



print(e,d,c)
print(b,a)

print(e,d,c)
print(b,a)

print(e,d,c)
print(b,a)

print(e, d, c)
print(b, a)


print(e,d,c)
print(b,a)

print(e,d,c)
print(b,a)

print(y[1],y[0],x[2])
print(x[1],x[0])


print(c,d,e)
print(a,b)

print(e,d,c)
print(b,a)

print(a,b,c)
print(d,e)

print(e, d, c)
print(b, a)

print(e,d,c)
print(b,a)

print(e, d, c)
print(b, a)


print(e,d,c)
print(b,a)

print(e,d,c)
print(b,a)

print(e,d,c)
print(b,a)

print(e,d,c)
print(b,a)

print(e,d,c)
print(b,a)



print(e,d,c)
print(b,a)

print(e,d,c)
print(b,a)

print(e,d,c)
print(b,a)

print(e,d,c)
print(b,a)



print(e,d,c)
print(b,a)


print(de[-1],de[-2],abc[-1])
print(abc[-2],abc[-3])


print(e,d,c)
print(b,a)

print(e,d,c)
print(b,a)

print(e,d,c)
print(b,a)

print(e,d,c)
print(b,a)

print(e, d, c)
print(b, a)




print(e, d, c + '\n' + b, a)

print(e,d,c)
print(b,a)


print(e,d,c)
print(b,a)


print(e,d,c)
print(b,a)

print(e,d,c)
print(b,a)

print(e,d,c)
print(b,a)

print(e,d,c)
print(b,a)

print(e,d,c)
print(b,a)

print(e,d,c)
print(b,a)

print(e,d,c)
print(b,a)


print(e,d,c)
print(b,a)




print(e,d,c)
print(b,a)

print(e,d,c)
print(b,a)

print(e,d,c)
print(b,a)

print(e,d,c,)
print(b,a)

print(a,b,c)
print(d,e)

print(e, d, c)
print(b, a)


print(e, d, c)
print(b, a)


print(e,d,c)
print(b,a)

print(e,d,c)
print(b,a)

print(e, d, c)
print(b, a)

print(e,d,c)
print(b,a)

print(e,d,c,)
print(b,a)

print(e,d,c)
print(b,a)

print(e,d,c)
print(b,a)

print(e,d,c)
print(b,a)

print(e,d,c)
print(b,a)

print(e,d,c)
print(b,a)

print(e,d,c)
print(b,a)

print(e,d,c)
print(b,a)

print(e,d,c)
print(b,a)

print(e,d,c)
print(b,a)

print(e,d,c)
print(b,a)

print(e,d,c)
print(b,a)

print(e,d,c)
print(b,a)


print(e,d,c)
print(b,a)

print(e,d,c)
print(b,a)

print(e,d,c)
print(b,a)

print(e,d,c)
print(b,a)

print(e,d,c)
print(b,a)

print(e,d,c)
print(b,a)


print(e,d,c)
print(b,a)

print(e,d,c)
print(b,a)

print(sum(a))

print(A + B)


print(A + B)


print(ans)


print(A + B)


print(a+b)

print(a+b)

print(a + b)

print(a + b)

print(A+B)

print(a + b)

print(A+B)

print(A+B)

print(A+B)


print(A + B)


print(A + B)

print(a+b)

print(a+b)

print(A+B)


print(C)

print(A+B)

print(a+b)


print(A+B)

print(A+B)





print(int(input())+int(input()))

print(A + B)



print(c)

print(a + int(input()))

print(A+B)

print(a+b)

print(A+B)

print(A+B)

print(A+B)

print(A+B)

print(a+b)

print(a+b)

print(a+b)

print(A+B)


print(C)

print(A+B)

print(A+B)

print(a+b)

print(A+B)

print(a+b)

print(a+b)

print(a+b)

print(a+b)

print(a+b)

print(A+B)

print(a+b)

print(A+B)

print(A+B)

print(A+B)

print(A+B)

print(A+B)

print(a+b)


print(A+B)

print(a+b)

print(C)


print(A+B)

print(a+b)

print(A+B)

print(A+B)

print(A+B)

print(C)

print(A+B)

print(A+B)

print(a+b)

print(A+B)

print(A+B)


print(A+B)


print(a+b)

print(A+B)

print(c)

print(A+B)

print(a+b)

print(C)

print(a+b)


print(a+b)


print(a+b)


print(a+b)



print(A+B)

print(A+B)

print(A+B)


print(a+b)



print(a + b)

print(a+b)

print(a+b)



print(a+b)

print(a+b)


print(A+B)

print(A+B)

print(C)

print(A+B)

print(a- b)

print(A - B)


print(A - B)


print(ans)


print(A - B)


print(a-b)

print(a-b)

print(a - b)

print(a - b)

print(a - b)

print(A-B)

print(A-B)

print(A-B)

print(A-B)


print(A - B)


print(A - B)

print(a-b)

print(a-b)

print(A-B)

print(a-b)

print(A-B)

print(A-B)

print(A-B)

print(c)


print(A-B)

print(A-B)





print(int(input())-int(input()))

print(A-B)



print(c)

print(a - int(input()))

print(A-B)

print(a-b)

print(A-B)

print(A-B)

print(A-B)

print(A-B)

print(a-b)

print(a-b)

print(C)

print(A-B)

print(A-B)

print(A-B)

print(a-b)

print(A-B)

print(a-b)

print(a-b)

print(a-b)

print(a-b)

print(a-b)

print(A-B)

print(a-b)

print(a-b)

print(a-b)


print(A-B)

print(A-B)

print(A-B)

print(a-b)

print(a-b)

print(int(input())-int(input()))


print(a-b)

print(A-B)

print(A-B)

print(A-B)

print(C)

print(A-B)

print(A-B)

print(A-B)

print(a-b)

print(A-B)

print(A-B)


print(A-B)


print(a-b)

print(A-B)

print(c)

print(A-B)

print(a-b)

print(a-b)


print(a-b)


print(a-b)


print(a-b)



print(A-B)

print(A-B)

print(a - b)

print(a-b)



print(A-B)


print(a-b)

print(a-b)


print(a-b)

print(a-b)


print(A-B)

print(A-B)

print(C)

print(A-B)

print(A - B)

print(A-B)

print(a*b)


print(A * B)

print(ans)


print(A * B)


print(a*b)

print(a*b)

print(a * b)

print(a * b)

print(A*B)

print(a * b)

print(A*B)

print(A*B)

print(A*B)


print(A * B)


print(A * B)

print(a*b)

print(a*b)

print(a*b)

print(A*B)

print(A*B)

print(A*B)

print(A*B)

print(c)


print(A*B)

print(A*B)





print(int(input())*int(input()))

print(A*B)



print(c)

print(a * int(input()))

print(A*B)

print(a*b)

print(A*B)

print(A*B)

print(A*B)

print(A*B)

print(a*b)

print(a*b)

print(C)

print(A*B)

print(A*B)

print(A*B)

print(A*B)

print(a*b)

print(a*b)

print(a*b)

print(a*b)

print(a*b)

print(a*b)

print(A*B)

print(a*b)

print(a*b)

print(a*b)


print(A*B)

print(A*B)

print(A*B)

print(a*b)

print(a*b)

print(a * b)


print(a*b)

print(A*B)

print(A*B)

print(A*B)

print(C)

print(A*B)

print(A*B)

print(A*B)

print(A*B)

print(A*B)


print(A*B)


print(a*b)

print(A*B)

print(c)

print(A*B)

print(a*b)

print(a*b)


print(C)

print(a*b)


print(a*b)


print(a*b)



print(A*B)

print(A*B)

print(a * b)

print(A*B)


print(a*b)



print(a*b)

print(a*b)

print(a*b)


print(a*b)


print(A*B)

print(A*B)

print(C)

print(A*B)

print(A*B)

print(A*B)

print(A*B)

print(a//b)


print(int(A / B))

print(a[0] // a[1])


print(A // B)


print(a//b)

print(a//b)

print(a // b)

print(a // b)

print(A//B)

print(a // b)

print(A//B)

print(A//B)

print(A//B)


print(A // B)


print(A // B)

print(a//b)

print(A//B)

print(a//b)


print(A//B)

print(A//B)

print(A//B)

print(c)


print(int(A/B))

print(A//B)





print(int(int(input())/int(input())))

print(A//B)



print(c)

print(a // b)

print(A//B)

print(a//b)

print(A//B)

print(A//B)

print(A//B)

print(A//B)

print(a//b)

print(a//b)

print(C)

print(A//B)

print(A//B)

print(A//B)

print(A//B)

print(a//b)

print(a//b)

print(a//b)

print(int(a/b))

print(a//b)

print(a//b)

print(A//B)

print(A//B)

print(int(a/b))


print(a//b)

print(A//B)

print(A//B)

print(a//b)

print(a//b)

print(a // b)


print(A//B)

print(A//B)

print(a//b)

print(A//B)

print(A//B)

print(C)

print(A//B)

print(A//B)

print(A//B)

print(A//B)

print(A//B)

print(A//B)

print(A//B)

print(a//b)

print(a//b)

print(C)

print(A//B)

print(a//b)


print(A // B)

print(a//b)


print(a//b)



print(a//b)


print(A//B)

print(A//B)

print(A//B)


print(a // b)

print(a//b)

print(a//b)

print(a//b)


print(A//B)

print(a//b)

print(A//B)

print(A//B)

print(A//B)

print(A//B)


print(A//B)

print(A//B)

print(A//B)





print(a//b)

print(a%b)

print(A % B)


print(A % B)


print(a%b)


print(A % B)


print(a%b)

print(a%b)

print(a % b)

print(a % b)

print(a % b)

print(A%B)

print(A%B)

print(A%B)


print(A%B)

print(A % B)


print(a%b)

print(A % B)

print(A%B)

print(a%b)


print(a%b)

print(A%B)

print(A%B)

print(A%B)


print(math.floor(A%B))

print(A%B)





print(int(int(input())%int(input())))

print(c)

print(A%B)



print(c)

print(a%b)

print(a % int(input()))

print(A%B)

print(a%b)

print(A%B)

print(A%B)

print(A%B)

print(A%B)

print(a%b)

print(C)

print(A%B)

print(A%B)

print(A%B)

print(A%B)

print(a%b)

print(a%b)

print(a%b)

print(int(a%b))

print(a%b)

print(a%b)

print(A%B)

print(a%b)

print(A%B)

print(int(a%b))


print(a%b)

print(A%B)

print(A%B)

print(a%b)

print(a%b)

print(a % b)


print(A%B)

print(A%B)

print(a%b)

print(A%B)

print(C)

print(A%B)

print(A%B)

print(A%B)

print(A%B)

print(A%B)

print(A%B)

print(A%B)

print(a%b)

print(a%b)

print(a%b)


print(C)

print(A%B)

print(A % B)

print(a%b)

print(a%b)



print(a%b)



print(A%B)

print(A%B)

print(a%b)



print(A%B)


print(a % b)

print(a%b)

print(a%b)


print(a%b)

print(A%B)

print(a%b)

print(A%B)

print(A%B)

print(A%B)

print(A % B)


print(A%B)

print(int(input())**10)

print(A ** 10)

print(A ** 10)

print(a**10)


print(A ** 10)

print(a**10)

print(a**10)

print(a ** 10)

print(a**10)

print(A**10)

print(a ** 10)

print(A**10)

print(A**10)


print(A**10)

print(A ** 10)


print(a**10)


print(A ** 10)

print(A**10)

print(a**10)

print(a**10)

print(A**10)

print(A**10)


print(pow(A,10))

print(A**10)





print(int(input())**10)

print(a**10)

print(A**10)



print(c)

print(a ** 10)

print(A**10)


print(a**10)

print(A**10)

print(A**10)

print(A**10)

print(A**10)

print(x*x*x*x*x*x*x*x*x*x)

print(a**10)

print(A**10)

print(A**10)

print(A**10)

print(A**10)

print(A**10)

print(a**10)

print(a**10)

print(A**10)

print(int(a**10))

print(A**10)

print(a**10)

print(a**10)

print(a*a*a*a*a*a*a*a*a*a)

print(A**10)

print(A**10)

print(A**10)

print(a**10)

print(a**10)

print(a ** 10)


print(A**10)

print(A**10)

print(a**10)

print(A**10)


print(A**10)

print(A**10)

print(A**10)

print(A**10)

print(A**10)

print(A**x)

print(A**10)

print(a**10)

print(a**10)


print(a**10)

print(A**10)

print(A**10)

print(A**10)

print(a**10)

print(x**10)

print(A**10)


print(a*a*a*a*a*a*a*a*a*a)



print(A**10)

print(a**10)



print(a**10)


print(a**10)

print(A**10)


print(a**10)

print(A**10)

print(A**10)

print(x**10)


print(A**10)

print(a*a*a*a*a*a*a*a*a*a)

print(A**10)

print(A**10)


print(A**10)





print(A**10)

print(A**10)

print(a*a*a*a*a*a*a*a*a*a)


print(a-b*c)


print(A - B * C)


print(A-B*C)


print(A - B * C)


print(a-b*c)

print(a-b*c)

print(a - b * c)

print(A - B * C)

print(a -b * c)

print(A-b*c)

print(A-B*C)


print(A-B*C)

print(A - B * C)


print(a-b*c)

print(A - B * C)

print(A-B*C)

print(a-b*c)

print(a-b*c)

print(A-B*C)

print(A-B*C)


print(A-B*C)

print(a-(b*c))

print(a-b*c)

print(A-B*C)





print(int(input())-int(input())*int(input()))

print(ans)

print(c)

print(a-b*c)

print(A-B*C)

print(A-B*C)

print(A-B*C)

print(a-b*c)

print(a-b*c)

print(A-B*C)

print(D)

print(A-B*C)

print(A-B*C)

print(A-B*C)

print(a-b*c)

print(int(a-b*c))

print(A-B*C)

print(a-b*c)

print(A-B*C)

print(a-b*c)

print(A-B*C)

print(a-b*c)

print(a - b * c)


print(A-B*C)

print(A-B*C)

print(a-b*c)

print(A-B*C)

print(A-B*C)

print(a-b*c)

print(A-B*C)

print(A-B*C)

print(A-B*C)

print(a-b*c)

print(A-B*C)

print(A-B*C)

print(A-B*C)

print(a-b*c)

print(a-b*c)

print(a-b*c)




print(A-B*C)

print(A-B*C)

print(a-b*c)

print(A-B*C)

print(A - B * C)

print(A-B*C)


print(a-b*c)



print(a-b*c)



print(a-b*c)


print(A-B*C)

print(a - b * c)

print(A-B*C)


print(A-B*C)

print(A-B*C)

print(A-B*C)

print(a-b*c)

print(A-B*C)

print(A-B*C)

print(A-B*C)

print(A-B*C)





print(a-b*c)

print(a-b*c)

print(A-B*C)


print(a-b*c)


print(a-b*c)

print(A-B*C)

print(A - B * C)

print(A-B*C)

print(A-B*C)

print(A-B*C)


print(A-B*C)

print(A - B * C)

print(n[0] * n[1]**3 +(n[2]*n[3])//n[4] -100)


print(int(A * B ** 3 + (C * D) / E - 100))


print(a*b**3 + (c*d)//e -100)


print(A * B ** 3 + int(C * D / E) - 100)


print(a*b**3+c*d//e-100)


print(a*b**3+(c*d)//e-100)

print(int(a * b**3 + c * d / e - 100))

print(A * B**3 + C * D // E -100)

print(A*(B**3)+(C*D)//E-100)

print(a * (b ** 3) +(c * d) // e - 100)

print(A*B**3+C*D//E-100)

print(A*B**3+C*D//E-100)


print(A*B**3+C*D//E-100)

print(A * B ** 3 +C * D // E - 100)


print(A * B ** 3 + C * D // E - 100)

print(a*b**3+c*d//e-100)

print(a*b**3+c*d//e-100)

print(a*b**3+c*d//e-100)

print(A*B**3+C*D//E-100)


print(A*(B**3)+(C*D)//E-100)

print(A*B**3+C*D//E-100)


print(A*B**3+C*D//E-100)

print(A*B**3+C*D//E-100)





print(round(ans))

print(f)

print(a*(b**3)+(c*d//e)-100)

print(A*B**3+C*D//E-100)

print(A*B**3+C*D//E-100)

print(int(A*B**3+(C*D)/E-100))

print(a*b**3+c*d//e-100)

print(a*b**3+c*d//e-100)

print(A*B**3+C*D//E-100)

print(A*B**3+(C*D)//E-100)


print(A*B**3+C*D//E-100)

print(A*B**3+C*D//E-100)

print(int(a*(b**3)+(c*d)/e-100))

print(A*B**3+C*D//E-100)

print(a*b**3+(c*d)//e-100)

print(A*B**3+C*D//E-100)

print(a*b**3+c*d//e-100)

print(int(a * b ** 3 + (c * d) / e - 100))


print(A*B**3+C*D//E-100)

print(A*B**3+C*D//E-100)

print(A*B**3+C*D//E-100)

print(a*b**3+c*d//e-100)

print(A*B**3+C*D//E-100)

print(A*B**3+C*D//E-100)

print(a*b**3+c*d//e-100)

print(A*B**3+C*D//E-100)

print(int(a*b**3+c*d/e-100))

print(A*B**3+C*D//E-100)

print(A*B**3+C*D//E-100)

print(a*b**3+c*d//e-100)

print(A*B**3+C*D//E-100)

print(A*B**3+C*D//E-100)

print(A*B**3+C*D//E-100)

print(a*b**3+(c*d)//e-100)

print(a*b**3+c*d//e-100)

print(a*b**3+c*d//e-100)




print(A*B**3+C*D//E-100)

print(a*b**3+c*d//e-100)

print(A*B**3+C*D//E-100)

print(A * B ** 3 + C * D // E - 100)

print(A*B**3+C*D//E-100)

print(a*b**3+c*d//e-100)


print(int(a*b**3+(c*d)/e-f))



print(int(a*b**3+(c*d)/e-100))



print(A*B**3+C*D//E-100)


print(int(A*B**3+C*D/E-100))

print(A*B**3+C*D//E-100)


print(int(a * b**3 + (c * d) / e - 100)) 

print(A*B**3+C*D//E-100)

print(a*b**3+c*d//e-100)

print(A*B**3+C*D//E-100)

print(A*B**3+C*D//E-100)

print(A*B**3+(C*D//E)-100)

print(A*B**3+C*D//E-100)

print(A*B**3+C*D//E-100)

print(A*B**3+C*D//E-100)


print(a*b**3+c*d//e-100)

print(a*b*b*b+c*d//e-100)

print(int(A*B**3+C*D/E-100))





print(a*b**3+c*d//e-100)

print(a*b**3+c*d//e-100)


print(A*B**3+C*D//E-100)

print(A * B**3 + C * D // E - 100)

print(A*B**3+C*D//E-100)

print(A*B**3+C*D//E-100)

print(A*(B**3)+C*D//E-100)

print(A*B**3+C*D//E-100)

print(A*B**3+C*D//E-100)


print(A * B ** 3 + C * D // E - 100)

print(A*B**3+C*D//E-100)


print(A*B**3+(C*D)//E-100)

print(A*B**3+C*D//E-100)

print(a - ((a//b) *b))

print(int(A - C * B))


print(A-(A//B)*B)


print(A - A // B * B)


print(a - (a//b)*b)


print(a - (a//b*b))

print(a-a//b*b)

print(A -(A // B * B))

print(A-(A//B)*B)

print(a -(a // b) * b )

print(A-A//B*B)



print(A-A//B*B)

print(A-A//B*B)

print(A - A// B * B)


print(A - (A // B * B))

print(a-a//b*b)

print(A-(A//B*B))


print(int(A-(A//B)*B))

print(A-((A//B)*B))

print(a-a//b*b)

print(A-(A//B)*B)

print(a-a//b*b)

print(A-A//B*B)





print(ans)

print(f)

print(a-(a//b*b))

print(A-(A//B*B))

print(A-(A//B*B))

print(A-(A//B*B))


print(a-(a//b*b))

print(a-(a//b*b))

print(A-(A//B*B))

print(A-(A//B*B))

print(A-(A//B*B))


print(A-(A//B*B))

print(A-A//B*B)

print(a-(a//b*b))

print(A-A//B*B)

print(a-(a//b)*b)

print(a - a // b * b)

print(A-(A//B)*B)

print(A-A//B*B)

print(a-a//b*b)

print(a-a//b*b)

print(A-(A//B)*B)

print(A-(A//B*B))

print(a-(a//b)*b)

print(A-(A//B*B))

print(int(a-(a//b*b)))

print(A-(A//B)*B)

print(A-(A//B)*B)

print(a-a//b*b)

print(A-(A//B*B))

print(A-(A//B*B))

print(A-(A//B*B))

print(a-(a//b*b))

print(a-(a//b*b))

print(a-(a//b*b))




print(A-(A//B*B))

print(a-(a//b*b))

print(A-A//B*B)

print(A-A//B*B)

print(A-(A//B*B))

print(a-(a//b*b))

print(A-(A//B*B))


print(int(a-(a//b*b)))



print(A-(A//B*B))


print(int(A-(C*B)))

print(A-(A//B*B))

print(int(a - ( ( a // b ) * b ) ) )

print(a-a//b*b)

print(A-(A//B*B))

print(A-(A//B*B))

print(A-(A//B*B) )

print(A-(A//B*B))

print(A-(A//B*B))


print(a-a//b*b)

print(a-a//b*b)

print(A-(A//B*B))

print(a-(a//b*b))


print(a-(a//b*b))

print(A-(A//B*B))





print(A-(A//B*B))

print(A - (A // B * B))

print(A-(A//B*B))

print(A-(A//B*B))

print(A-(A//B*B))

print(A-(A//B*B))

print(A-(A//B*B))

print(A-A//B*B)


print(A-(A//B*B))

print(A-(A//B*B))

print(A-((A//B)*B))

print(A-(A//B*B))

print(a-(a//b*b))

print(result)
     



print(a==b)


print(A == B)


print(a==b)

print(1 if a == b else 0)

print(a == b)

print(a == b)

print(a==b)

print(A==B)




print(A == B)

print(A==B)

print(a==b)




print(A==B)

print(A==B)

print(A==B)

print(a==b)

print(A==B)





print(a == b)

    print(1)
        print(0)    

print(a==b)

print(A==B)

print(A==B)

print(A==B)


print(a==b)

print(A==B)

print(a==b)

print(A==B)

print(a==b)

print(a==b)

print(a == b)

print(A==B)

print(A==B)

print(A==B)

print(a==b)

print(A==B)

print(A==B)

print(a==b)

print(A==B)

print(A==B)

print(a==b)

print(A==B)

print(A==B)

print(a==b)

print(A==B)

print(A==B)

print(a==b)

print(a==b)

print(a==b)




print(a==b)

print(A==B)

print(A==B)

print(A==B)

print(A==B)

print(a==b)

print(A == B)

print(a==b)




print(int(A==B))

print(a==b)




print(A==B)

print(a == b)

print(A==B)

print(A==B) 



print(A==B)

print(a==b)

print(a==b)

print(A == B)


print(A==B)

print(A==B)

print(a==b)



print(a==b)

print(a==b)

print(A==B)

print(A == B)
print(A==B)

print(A==B)

print(A==B)

print(A==B)


print(A==B)


print(A==B)

print(A==B)

print(A==B)

print(a==b)

print(A==B)

print(a==b)

print(a==b)


print(a==b)

print(A==B)

print(A==B)

print(A==B)


print(A==B)

print(A==B)

print(result)

print(A!=B)


print(A != B)


print(not a==b)

print(a != b)

print(a != b)

print(a != b)

print(a!=b)

print(A!=B)




print(A != B)

print(A!=B)

print(a!=b)




print(A!=B)

print(A!=B)

print(A!=B)

print(a!=b)

print(A!=B)





print(a != b)

    print(0)
    print(1)    

print(a!=b)

print(A!=B)

print(A!=B)

print(A!=B)


print(a!=b)

print(A!=B)

print(a!=b)

print(A!=B)

print(a!=b)

print(a!=b)

print(a != b)

print(A!=B)

print(A!=B)

print(A!=B)

print(a!=b)

print(A!=B)

print(A!=B)

print(a!=b)

print(A!=B)

print(A!=B)

print(a!=b)

print(A!=B)

print(A!=B)

print(a!=b)

print(A!=B)

print(A!=B)

print(a!=b)

print(a!=b)




print(a!=b)

print(a!=b)

print(A!=B)

print(A!=B)

print(A!=B)

print(a!=b)

print(A!=B)

print(A != B)

print(a!=b)




print(int(A!=B))

print(a!=b)




print(A!=B)

print(A!=B) 



print(a != b)

print(A!=B)

print(A!=B)

print(a!=b)

print(A != B)


print(a!=b)

print(A!=B)

print(A != B)

print(a!=b)



print(a!=b)

print(a!=b)

print(A!=B)

print(A != B)
print(A!=B)

print(A!=B)

print(A!=B)

print(A!=B)


print(A!=B)


print(A!=B)

print(A!=B)

print(A!=B)

print(a!=b)

print(A!=B)

print(a!=b)

print(a!=b)

print(A!=B)


print(a!=b)

print(A!=B)

print(A!=B)

print(A!=B)

print(A!=B)

print(a!=b)


print(A < B)

print(result)

print(A<B)


print(A < B)


print(a<b)

print(a < b)

print(a < b)

print(a<b)

print(a < b)

print(A<B)




print(A < B)


print(A < B)

print(A<B)

print(A<B)

print(A < B)

print(a<b)

print(a < b)

    print(1)
    print(0)    

print(A<B)

print(a<b)

print(A<B)

print(A<B)

print(A<B)


print(a<b)

print(A<B)

print(A<B)

print(a<b)

print(a<b)

print(a < b)

print(A<B)

print(A<B)

print(A<B)

print(a<b)

print(A<B)

print(A<B)

print(a<b)

print(a<b)

print(A < B)

print(A<B)

print(a<b)

print(A<B)

print(A<B)

print(a<b)

print(A<B)

print(A<B)

print(a<b)

print(a<b)

print(a<b)




print(a<b)

print(A<B)

print(A<B)

print(A<B)

print(A<B)

print(A < B)

print(a<b)

print(a<b)




print(int(A<B))

print(b>a)




print(A<B)

print(A<B) 



print(A<B)

print(a < b)

print(A<B)

print(a<b)

print(A < B)


print(a<b)

print(A<B)

print(A < B)

print(A<B)

print(a<b)

print(a<b)

print(a<b)



print(A<B)

print(A < B)


print(A<B)

print(A<B)

print(A<B)


print(A<B)


print(A<B)

print(A<B)

print(a<b)

print(A<B)

print(A<B)

print(a<b)

print(a<b)



print(a<b)

print(A<B)

print(A<B)

print(A<B)

print(A<B)

print(a<b)

print(A<B)

print(A<B)

print(A<B)

print(int(input())<int(input()))






print(A <= B)

print(result)

print(A<=B)


print(A <= B)


print(a<=b)

print(a <= b)

print(a <= b)

print(a<=b)

print(a <= b)

print(A<=B)




print(A <= B)

print(a<=b)




print(A <= B)

print(A<=B)

print(A<=B)

print(a<=b)

print(a <= b)

    print(1)
    print(0)    

print(A<=B)

print(a<=b)

print(A<=B)

print(A<=B)

print(A<=B)


print(a<=b)

print(A<=B)

print(a<=b)

print(A<=B)

print(a<=b)

print(a<=b)

print(a <= b)

print(A<=B)

print(A<=B)

print(A<=B)

print(a<=b)

print(A<=B)


print(A<=B)

print(a<=b)

print(A <= B)

print(A<=B)

print(a<=b)

print(A<=B)

print(A<=B)

print(a<=b)

print(A<=B)

print(A<=B)

print(a<=b)

print(a<=b)

print(A<=B)

print(a<=b)

print(A<=B)

print(a<=b)




print(A<=B)

print(A<=B)

print(A <= B)

print(a<=b)

print(a<=b)




print(int(A<=B))

print(A<=B)

print(a<=b)




print(A<=B) 



print(A<=B)

print(a <= b)

print(a<=b)

print(A<=B)

print(A <= B)


print(A<=B)

print(a<=b)

print(A <= B)

print(A<=B)

print(a<=b)

print(A<=B)

print(A <= B)


print(A<=B)

print(A<=B)

print(A<=B)


print(A<=B)

print(A<=B)


print(A<=B)

print(A<=B)

print(a<=b)

print(A<=B)

print(A<=B)

print(a<=b)


print(a<=b)


print(a<=b)

print(A<=B)

print(A<=B)

print(A<=B)

print(a<=b)

print(A<=B)

print(A<=B)

print(A<=B)

print(int(input())<=int(input()))


print(A<=B)

print(A<=B)


print((A + B) >= 50)

print(result)

print(A+B>=50)


print(A + B >= 50)


print(a+b >= 50)

print(a + b >= 50)

print(a+b >= 50)

print((a + b) >= 50)

print(a+b>=50)

print(a + b >= 50)

print(A+B>=50)




print(A + B >= 50)


print((A+B) >= 50)

print(A+B>=50)

print(A+B>=50)

print(a+b>=50)

print(a + b >= 50)

    print(1)
    print(0)    

print( A + B >= 50)

print(a+b>=50)

print(A+B>=50)

print(A+B>=50)

print((A+B)>=50)

print(A+B>=50)

print(a+b>=50)

print(A+B>=50)

print(a+b>=50)

print((a+b)>=50)

print(a + b >= 50)

print(A+B>=50)

print(A+B>=50)

print(A+B>=50)

print(a+b>=50)

print(A+B>=50)

print(A+B>=50)

print(a+b>=50)

print(A + B >= 50)

print(A+B>=50)

print(a+b>=50)

print(A+B>=50)

print(A+B>=50)

print(a+b>=50)

print(50<=A+B)

print(50<=A+B)

print(a+b>=50)

print(a+b>=50)

print(A+B>=50)

print(a+b>=50)

print(A+B>=50)

print(a+b>=50)




print(A+B>=50)

print(A + B >= 50)

print(50<=A+B)

print(a+b>=50)




print(50<=a+b)

print(int(A+B>=50))

print(A+B>=50)

print(a+b>=50)




print(A+B>=50) 



print(A+B>=50)

print(50 <= a + b)

print(a+b>=50)

print(A+B>=50)

print(A+B >= 50)


print(50<=a+b)

print(A+B>=50)

print(A+B>=50)

print(50<=a+b)

print(50<=A+B)

print(A + B >= 50)


print(A+B>=50)

print(A+B>=50)

print(A+B>=50)

print(50<=A+B)


print(A+B>=50)


print(A+B>=50)

print(a+b>=50)

print(A+B>=50)

print(A+B>=50)

print(A+B>=50)

print(a+b>=50)

print(a+b>=50)


print(A+B>=50)


print(50<=a+b)

print(A+B>=50)

print(A+B>=50)

print(A+B>=50)

print(A+B>=50)

print(int(input())+int(input())>=50)



print(A+B>=50)

print(A+B>=50)

print(50 <= A+B)

print(A+B>=50)

print(A+B>=50)


print(A+B>=50)

print(not a)


print(not A)


print(not a)

print(not(a))

print(not a)


print(not a)

print(not(a))

print(not(a))

print(not A)


print(not A)

print(not A)


print(not a)

    print(0)
    print(1)

print(1-a)

print(not A)

print(not A)


print(not a)

print(not A)

print(not A)

print(not a)

print(not a)

print(not(a))

print(not A)

print(not(A))

print(not A)

print(not(a))

print(not A)

print(not(A))

print(not a)

print(not a)

print( not A)

print(A!=1)

print(not a)

print(not A)

print(not A)

print(not A)

print(not a)

print(not a)

print(not A)

print(not A)

print(not a)




print(not A)

print(not(A))

print(not(a))




print(not A)

print(not a)

print(not a)

print( not(A))

print(not(a))




print(not A) 




print(not a)

print(not A)

print(not(a))

print(not A)


print(not A)


print(not A)

print(not A)


print(A==0)

print(not A)


print(not A)

print(A==0)

print(not A)


print(not A)

print(not a)

print(not A)

print(not a)

print(not A)

print(not A)

print(not A)

print(not a)

print(not A)

print(not A)

print(not(int(input())))




print(not A)

print(not A)

print(not A)

print(not A)


print(not A)

print(not A)

print(not a)

print(not A)

print(not X)


print(not A)




print(not A)



print(not A)


print(not a)

print(not A)

print(not a)

print(not A)

print(not(A))

print(not(a))

print(not a)

print(not A)

print(not A)

print(not A)


print(a == b and c == d)


print(A == B and C == D)


print(a==b and c==d)

print(a == b and c == d)

print((a == b) and (c == d))


print((a == b) & (c == d))

print((a==b)and(c==d))


print(bool(A==B and C==D))

print(a == b and c == d)

    print(1)
    print(0)


print( A == B and C == D) 

print(a==b and c==d)

print(A==B and C==D)

print((A==B)and(C==D))

print(a==b and c==d)

print(A==B and C==D)

print(A==B and C==D)

print(a==b and c==d)


print((a==b)&(c==d))

print(a == b and c == d)

print(A==B and C==D)

print(A==B and C==D)

print(a==b and c==d)

print(A==B and C==D)

print(a==b and c==d)

print((A==B)and(C==D))

print(a==b and c==d)

print(a==b and c==d)

print(A==B and C==D)

print((A==B)and(C==D))

print(a==b and c==d)

print(A==B and C==D)

print(A==B and C==D)

print(A==B and C==D)

print(A==B and C==D)

print(a==b and c==d)

print((a==b)and(c==d))

print((a == b) and (c == d))




print(A==B and C==D)

print((a==b)and(c==d))


print(A==B and C==D)

print(a==b and c==d)

print((a==b and c==d))


print(a==b and c==d )

print(A==B and C==D) 



print(A == B and C == D)

print(A==B and C==D)

print(a==b and c==d)

print(A == B and C == D)


print(A == B and C == D)


print(A==B and C==D)

print((A==B)and(C==D))

print((A==B)and(C==D))

print(A==B and C==D)

print(A==B and C==D)


print(A==B and C==D)

print(a==b and c==d)

print(A==B and C==D) 

print(A == B and C==D )

print(A==B and C==D)

print(a==b and c==d)

print(A==B and C==D)

print(A==B and C==D)

print(A==B and C==D)

print(A==B and C==D)

print(int(input())==int(input()) and int(input())==int(input()))





print(A==B and C==D)

print(A==B and C==D)

print(A==B and C==D)

print(A==B and C==D)



print(A==B and C==D)

print(A==B and C==D)

print(a==b and c==d)


print(A==B and C==D)

print(A==B and C==D)





print((A==B) and (C==D))


print((a==b) and (c==d))

print(A==B and C==D)



print(a==b and c==d)

print(A==B and C==D)

    print("1")
    print("0")

print(int(input())==int(input())and int(input())==int(input()))

print((a==b) and (c==d))

print(a==b and c==d)

    print(1)
    print(0)

print(A == B and C == D)


print((A==B)and(C==D))

print((A==B)and(C==D))

print(A == B and C == D)

print((A==B)and(C==D))



print((A==B) and (C==D))

print(a==b and c==d)


print(int(input())==int(input())and int(input())==int(input()))

print((A==B)and(C==D))

print(a==b and c==d)


print(a == b or c == d)


print(A == B or C == D)


print(a==b or c==d)

print(a == b or c == d)

print((a == b) or (c == d))


print((a == b) | (c == d))

print((a==b)or(c==d))


print(bool(A==B or C==D))

print(a==b or c==d)

print(a == b or c == d)

    print(1)
    print(0)


print( A == B or C == D) 

print(a==b or c==d)

print(A==B or C==D)

print((A==B)or(C==D))

print(a==b or c==d)

print(A==B or C==D)

print(a==b or c==d)


print((a==b)or(c==d))

print(a == b or c == d)

print(A==B or C==D)

print(A==B or C==D)

print(a==b or c==d)

print(A==B or C==D)


print(a==b or c==d)

print((A==B)or(C==D))

print(a==b or c==d)

print(a==b or c==d)

print(A==B or C==D)

print((A==B)or(C==D))

print(a==b or c==d)

print(A==B or C==D)

print(A==B or C==D)

print(A==B or C==D)

print(A==B or C==D)

print(a==b or c==d)

print((a==b)or(c==d))

print((a == b) or (c == d))




print(A==B or C==D)

print((a==b)or(c==d))


print(A==B or C==D)

print(a==b or c==d)

print((a==b or c==d))


print(a==b or c==d )

print(A == B or C == D)

print(A == B or C == D)

print(A == B or C == D)


print(A==B or C==D)

print((A==B)or(C==D))

print(A==B or C==D)

print((A==B)or(C==D))

print(A==B or C==D)


print(A==B or C==D)

print(a==b or c==d)

print(A==B or C==D) 

print(a==b or c==d)

print(A==B or C==D)

print(A==B or C==D)

print(A==B or C==D)

print(A==B or C==D)

print(int(input())==int(input()) or int(input())==int(input()))






print(A==B or C==D)

print(A==B or C==D)

print(A==B or C==D)

print(A==B or C==D)



print(A==B or C==D)

print(A==B or C==D)

print(A==B or C==D)

print(a==b or c==d)


print(A==B or C==D)

print(A==B or C==D)





print((A==B) or (C==D))


print((a==b) or (c==d))

print(A==B or C==D)



print(a==b or c==d)

print(A==B or C==D)

    print("1")
    print("0")

print(int(input())==int(input())or int(input())==int(input()))

print((a==b) or (c==d))

print(a==b or c==d)

print(A == B or C == D)


print((A==B)or(C==D))

print(A == B or C == D)

print((A==B)or(C==D))

print((A==B)or(C==D))

print((A==B)or(C==D))



print((A==B) or (C==D))

print(a==b or c==d)


print(int(input())==int(input()) or int(input())==int(input()))

print((A==B)or(C==D))

print(a==b or c==d)

print(a==b or c==d)


print(a==b or c==d)

print(A==B or C==D)

print((A==B) or (C==D))

print(a == 2 or a == 3 or a == 5 or a == 7)


print(A == 2 or A == 3 or A == 5 or A == 7)


print(a==2 or a==3 or a==5 or a==7)

print(a == 2 or a == 3 or a == 5 or a == 7)

print(a in (2, 3, 5, 7))


print(a in con)

print((a==2)or(a==3)or(a==5)or(a==7))


print(bool(A in List))

    print(1)
    print(1)
    print(1)
    print(1)
    print(1)
    print(0)


    print(1)
    print(0)


print( A == 2 or A == 3 or A == 5 or A == 7) 

print(a==2 or a==3 or a==5 or a==7)


print(a==2 or a==3 or a==5 or a==7)

print(A==2 or A==3 or A==5 or A==7)

print(A==2 or A== 3 or A==5 or A==7)

print(a==2 or a==3 or a==5 or a==7)



print(a==2 or a==3 or a==5 or a==7)

print(a == 2 or a == 3 or a == 5 or a == 7)

print(A==2 or A==3 or A==5 or A==7)

print(a==2 or a==3 or a==5 or a==7)

print(a==2or a==3or a==5or a==7)

print(A==2 or A==3 or A==5 or A==7)

print(a==2 or a==3 or a==5 or a==7)

print(A==2 or A==3 or A==5 or A==7)

print(a in(2,3,5,7))

print((A==2)or(A==3)or(A==5)or(A==7))

print(a==2 or a==3 or a==5 or a==7)

print(a==2 or a==3 or a==5 or a==7)

print(a==2 or a==3 or a==5 or a==7)

print((A==2 or A==3 or A==5) or A==7)

print(A==2 or A==3 or A==5 or A==7)

print(((a==2)or(a==3)or(a==5))or(a==7))

print(a == 2 or a == 3 or a == 5 or a == 7)


print(a==2 or a==3 or a==5  or a==7)






print(a==2or a==3or a==5or a==7)


print(A==2 or A==3 or A==5 or A==7)

print(A==2 or A==3 or A ==5 or A==7)

print((A==2)or(A==3)or(A==5)or(A==7))


print(a==2 or a==3 or a==5 or a==7)

print(a==2 or a==3 or a==5 or a==7)


print(a==2 or a==3 or a==5 or a==7)

print((A == 2) or (A == 3) or (A == 5) or (A == 7))

print(A==2 or A==3 or A==5 or A==7)

print(A==2 or A==3 or A==5 or A==7)

print(A==2 or A==3 or A==5 or A==7)

print(A==2 or A==3 or A==5 or A==7)


print(A==2 or A==3 or A==5 or A==7)

print((A==2)or(A==3)or(A==5)or(A==7))

print(a==2 or a==3 or a==5 or a==7)

print(a==2 or a==3 or a==5 or a==7)

print(A==2 or A==3 or A==5 or A==7)

print(A==2 or A==3 or A==5 or A==7)

print(a==2 or a==3 or a==5 or a==7)

print(int(input()) in [2,3,5,7])







print(A in(2,3,5,7))

print(A==2 or A==3 or A==5 or A==7)

print(A==2 or A==3 or A==5 or A==7)

print(A==2 or A==3 or A==5 or A==7)

print(A==2 or A==3 or A==5 or A==7)


print(a==2 or a==3 or a==5 or a==7)

print(A==2 or A==3 or A==5 or A==7)

print(a==2 or a== 3 or a== 5 or a== 7)

print(A==2 or A==3 or A==5 or A==7)

print(A==2 or A==3 or A==5 or A==7)

print(int(input())in [2,3,5,7])

print(a==2 or a==3 or a==5 or a==7)

print(A == 2 or A == 3 or A == 5 or A == 7)


print(A == 2 or A == 3 or A == 5 or A == 7)

print(A==2or A==3or A==5or A==7)

print(A==2 or A == 3 or A==5 or A==7)



print((A==2)or(A==3)or(A==5)or(A==7))

print(A==2 or A==3 or A==5 or A==7)
print(a==2 or a==3 or a==5 or a==7)


print(int(input())in[2,3,5,7] )

print(a==2 or a==3 or a==5 or a==7)


print(a==2 or a==3 or a==5 or a==7)

print(A == 2 or A == 3 or A == 5 or A == 7)



print(a==2 or a==3 or a==5 or a==7)


print(A==2 or A==3 or A==5 or A==7)

print(a==2 or a==3 or a==5 or a==7)

print(A==2 or A==3 or A==5 or A==7)

print((A==2 or A==3 or A==5) or A==7)

print(a==2 or a==3 or a==5 or a==7)

print(int(input()) in [2,3,5,7])

print(A==2 or A==3 or A==5 or A==7)

print(A==2 or A==3 or A==5 or A==7)

print(int(input()) in [2,3,5,7])












print(A==2 or A==3 or A==5 or A==7)

print(a==2 or a==3 or a==5 or a==7)

print(int(input()) in [2,3,5,7])

print(A == 2 or A==3 or A==5 or A==7)

    print("True")
    print("False")

print(a == 2 or a == 3 or a == 5 or a == 7)



print((A==B and C==D) or (A==C and B==D))


print(A == B and C == D or A == C and B == D)


print((a==b and c==d) or (a==c and b==d))

print(a == b and c == d or a == c and b == d)

print(((a == b) and (c == d)) or ((a == c) and (b == d)))

    print(True)
    print(False)

print(((a==b)and(c==d))or((a==c)and(b==d)))


print(bool((A==B and C==D) or (A==C and B==D)))

    print(1)
    print(0)



print( A == B and C == D or A == C and B == D) 


print((a==b and c==d) or (a==c and b==d))

print((A==B and C==D) or (A==C and B==D))


print((a==b and c==d) or (a==c and b==d))

print(((A==B)and(C==D))or((A==C)and(B==D)))

print((a==b and c==d) or (a==c and b==d))




print(((a==b) & (c==d)) | ((a==c)&(b==d)))

print(a == b and c == d or a == c and b == d)

print(A==B and C==D or A==C and B==D)

print(a==b and c==d or a==c and b==d)

print(a==b and c==d or a==c and b==d)

print((A==B)and(C==D)or(A==C)and(B==D))

print((a==b and c==d) or (a==c and b==d))

print(((a==b)and(c==d))or((a==c)and(b==d)))

print((A==B and C==D) or (A==C and B==D))

print(((a==b)and(c==d))or((a==c)and(b==d)))

print(((A==B)and(C==D))or((A==C)and(B==D)))

print((a==b and c==d) or (a==c and b==d))

print((a==b and c==d) or (a==c and b==d))

print((A==B and C==D) or (A==C and B==D))

print(A==B and C==D or A==C and B==D )

print(((a==b)and(c==d))or((a==c)and(b==d)))

print(A==B and C==D or A==C and B==D)


print((a==b and c==d)or(a==c and b==d))


print((a==b and c==d) or (a==c and b==d))




print((A==B) and (C==D) or (A==C) and (B==D))

print(A==B and C==D or A==C and B==D)

print(A==B and C==D or A==C and B==D)

print(A==B and C==D or A==C and B==D)

print(A==B and C==D or A==C and B==D)

print(A==B and C==D or A==C and B==D )


print(((A==B)and(C==D))or((A==C)and(B==D)))

print((a==b and c==d) or (a==c and b==d))

print((A==B and C==D) or (A==C and B==D))

print((A==B and C==D)or(A==C and B==D))

print((a==b and c==d) or (a==c and b==d))

print((a==b and c==d)or(a==c and b==d))








print(((A==B)and(C==D))or((A==C)and(B==D)))

print((A==B) and (C==D) or (A==C) and (B==D))

print(A==B and C==D or A==C and B==D)

print(A==B and C==D or A==C and B==D)

print(A==B and C==D or A==C and B==D)


print(a==b and c==d or a==c and b==d)

print(a==b and c==d or a==c and b==d)

print((a==b) and (c==d) or (a==c) and (b==d))

print(a==b and c==d or a==c and b==d)

print((A == B and C == D) or (A == C and B == D))

print((A == B and C == D) or (A == C and B == D))

print(a == b and c == d or a == c and b == d)

print(A==B and C==D or A==C and B==D)

print((a==b and c==d) or (a==c and b==d))


print((a==b and c==d) or (a==c and b==d))

print((a==b and c==d) or (a==c and b==d))

print(a==b and c==d or a==c and b==d)

print((A == B and D== C) or (A == C and B == D))


print((a==b and c==d) or (a==c and b==d))

print((a==b and c==d )or(a==c and b==d))

print((A==B and C==D)or(A==C and B==D))

print((A==B and C==D) or (A==C and B==D))

print(a==b and c==d or a==c and b==d)


print((a==b and c==d) or (a==c and b==d))

print((a==b and c==d)or(a==c and b==d))

print(A==B and C==D or A==C and B==D)

print(A==B and C==D or A==C and B==D)

print((a==b and c==d)or(a==c and b==d))













print((A==B and C==D) or (A==C and B==D))

print((a==b and c==d) or (a==c and b==d))

print(a == b and c == d or a ==c and b ==d)

print((A==B and C==D) or (A==C and B==D))

print((a==b and c==d)or(a==c and b==d))

print((A==B and C==D)or(A==C and B==D))

print((A==B) and (C==D) or (A==C) and (B==D))

    print("True")
    print("False")

    print(True)
    print(True)
    print(False)



print((a==b and c==d)or(a==c and b==d))


print(a == b and c ==d or a == c and b == d)


print((a == b and c == d) or (a == c and b == d))

print((a==b and c==d)or(a==c and b==d))

print(a == b and c==d or a ==c and b ==d)


print(a == b and c == d or a == c and b == d)

print(a == b and c == d or a == c and b == d)

print(A == B and C == D or A == C and B == D)

print(A==B and C==D or A==C and B==D)

print(a==b and c==d or a==c and b==d)


print((a==b and c==d) or (a==c and b==d))




















print(A == B and C ==D or A == C and B == D)



print(not (a and b) or c)


print(not (A and B) or C)


print(not (a and b) or c)

print(not(a and b) or c)

print(not(a and b) or c)

    print(True)
    print(False)

print((not(a and b)or c))


print(not(A and B) or C)

print(not(a and b) or c)

print( not(A and B )or C ) 


print(not(a and b) or c==1)



print((not(a and b)or c))

print((not (A and B)) or C)

print(not(A and B) or C)

print(not (a and b) or c)




print((not(a & b))|c)

print(not(a and b) or c)

print(not (A and B) or C)

print(not(a and b)or c)

print(not(a and b)or c)

print((not(A and B)or C))

print((not (a and b) or c))

print((not(A and B)) or (C))

print((not(a and b) or c))

print((((A)and(B))==0)or(C==1))

print((not (a and b)) or c)

print(not (A and B) or C)

print(not(A and B) or C)

print(not(a and b)or(c))


print((not(a and b)or c))


print(not(A and B) or (C))

print(not (A and B) or C) 

print(not (A and B) or C)

print((not (A and B)) or C)

print(not (A and B) or C)

print(not(A and B)or(C))

print(not(a and b) or c)

print(not(A and B)or C)

print(not(A and B) or C)


print((not(a and b) or c))









print((not(A and B) or C))

print(not(a and b) or c)

print(not(a and b) or c)

print(not (A and B) or C)

print(not(A and B) or C)

print(not (A and B) or C)


print(not (A and B) or C)

print(not(a and b) or c)

print(not (a and b) or c)


print((not (a and b) or c))

print(not (a and b) or c)

print(not(A and B) or C)

print(not(a and b) or c)


print(not (int(input())and int(input()))or int(input()))


print(not(a and b) or c)

print(not(a and b) or c)

print(not(a and b) or c)

print(not(a and b)or (c))

print(not(A and B) or C)

print(not(A and B) or C)

print((not(a and b) or c))


print(not(a and b) or c)


print((not(a and b) or c))

print(not(A and B) or C)

print(not(A and B) or C)

print(not(int(input())and int(input()))or int(input()))














print(not(A and B) or C)

print(not(a and b) or c)

print(not(a and b) or c)


print((not(a and b) or c))

print(not (A and B) or C )


print(not(A and B)or(C))


print((not(a and b) or c))

print(not(A and B) or C)

print(not(A and B)or C)

    print("True")
    print("False")

    print(True)
    print(False)



print(not(a and b)or c)


print((not(a and b ) or c))



print((not(a and b) or c))


print(not(a and b) or c)

print(not(a and b)or c)



print((not (A & B)) | C)

print(not(A and B) or C)

print(not (a and b)or c)

print(not(A and B)or C)


print((not (A & B)) | C)





















print((not (a and b) or c))

print((not(a and b)or c))


print((not(a and b)or c))

print((not(A and B) or C))


print(not(a and b)or c)



print((not(a and b)or c))


print((not(a and b) or c))

print(not(a and b) or c)



print(not (a and b) or c)

    print("yes")

    print("yes")

    print('yes')

    print("yes")

    print("yes")

    print('yes')

    print("yes")

    print("yes")

    print("yes")

    print("yes")

    print("yes")


    print("yes")
    

    print("yes")

        print("yes")

    print("yes")

    print("yes")



    print("yes")
    

    print("yes")

    print("yes")

        print("yes")

      print("yes")

    print("yes")

    print("yes")




   print( "yes" ) 


    print("yes")

    print("yes")

   print("yes")


 print('yes')


    print("yes")

    print("yes")

    print("yes")

    print("yes")

    print("yes")

    print('yes')





    print("Yes")


    print("yes")

     print("yes")

  print("yes")

   print("yes")


    print("yes")


    print("yes")

    print("yes")
























    print('yes')

    print('yes')

    print("yes")

    print("yes")

    print("yes")

    print("yes")

    print("yes")

    print("yes")

    print("yes")

    print('yes')

   print("yes")

    print("yes")

       print("yes")


    print("yes")


    print("yes")


    print('yes')

    print("yes")

    print("yes")

    print("Yes")
    



    print("yes")   


 print("yes")   

    print("yes")


    print("yes")

  print("yes")

    print("yes")


    print('yes')

 print("yes")


    print("yes")
    print("   ")



    print("yes")
    print("   ")

  

    print("yes")

    print("yes")

    print("yes")

 print("yes")


    print("yes")


   print("yes")

    print("yes")

    print("yes")
    print("no")

    print("yes")
    print("no")


print('yes' if a>0 else 'no')

    print("yes")
    print("no")

    print("yes")
    print("no")

    print('yes')
    print('no')

    print("yes")
    print("no")

    print("yes")
    print("no")


    print("yes")
    print("no")



    print("yes")
    print("no")

    print("yes")
    print("no")


    print("yes")
    print("no")
    

    print("yes")
    print("no")

    print("yes")
    print("no")

    print("yes")
    print("no")

    print("yes")
    print("no")

      print("yes")
    print("no")

    print("yes")
    print("no")

    print("yes")
    print("no")

    print("yes")
    print("no")

    print("yes")
    print("no")

    print("yes")
        print("no")

    print("yes")
    print("no")




   print( "yes" ) 
    print("no")



    print("yes")
    print("no")

    print("yes")
    print("no")

 print('yes')
    print('no')


    print("yes")
    print("no")

    print("yes")
    print("no")

    print("yes")
    print("no")

print("yes"if int(input())>0 else "no")

    print("yes")
    print("no")

    print("yes")
    print("no")


    print("Yes")
    print("No")

  print("yes")
  print("no")

     print("yes")
    print("no")

   print("yes")
    print("no")


    print("yes")
    print("no")

























    print("yes")
    print("no")


    print("yes")
    print("no")

    print('yes')
    print('no')

    print("yes")
    print("no")

print('yes' if x>0 else'no')


    print("yes")
    print("no")

    print("yes")
    print("no")

    print("yes")
    print("no")

    print("yes")
    print("no")

    print("yes")
    print("no")

print("yes"if int(input())>0 else"no")

    print("yes")
    print("no")

         print("yes")
         print("no")


print('yes' if a>0 else 'no')

print("yes"if int(input())>0 else"no")





    print("yes")
    print("no")

    print('yes')
    print('no')

   print("yes")
    print("no") 

    print("yes")
    print("no")

       print("yes")
    print("no")


    print("yes")
    print("no")


    print("yes")
    print("no")


    print('yes')
      print('no')

    print("yes")
    print("no")

    print("yes")

    print("no")

    print("Yes")

    print("No")
    



    print("yes")

    print("no")





    print("yes")   
    print("no")

    print("yes")
    print("no")

    print('yes')
    print('no')

    print("yes")
    print("no")  

    print("yes")
    print("no")


    print("yes")
    print("no")

   print('yes')
   print('no')


   print("yes")
   print("no")

 print("yes")
 print("no")

    print("yes")
    print("no ")



    print("yes")
    print("no")
    

  

    print("yes")
    print("no")

    print("yes")
    print("no")

 print("yes")
 print("no")

    print("yes")
    print("no")

    print("yes")
    print("no")

   print("yes")
    print("no")

    print("yes")
    print("no")


    print("yes")
    print("no")


    print("yes")

    print("no")

    print("yes")
    print("no")

     print("yes")
    print("no")

    print("yes")
    print(1)
    print(0)
    print(-1)

    print(1)
    print(0)
    print(-1)


print('1' if a>0 else '0' if a==0 else '-1')

    print(1)
    print(0)
    print(-1)

    print(1)
    print(0)
    print(-1)

    print(1)
    print(-1)
    print(0)

    print("1")
    print("0")
    print("-1")



    print("1")
    print("0")
    print("-1")


    print("1")
    print("-1")
    print(1)
    print(0)
    print(-1)


    print(1)
    print(0)
    print(-1)

    print(1)
    print(0)
    print(-1)

    print("1")
    print("0")
    print("-1")

    print("1")
    print("0")
    print("-1")

      print(1)  
     print(0)
     print(-1)

        print("1")
        print("0")
        print("-1")

    print("1")
    print("0")
    print("-1")

    print("1")
    print("0")
    print("-1")
    

    print(1)
    print(0)
    print(-1)

    print("1")
    print("0")
    print("-1")

    print(1)
    print(0)
    print(-1)




   print( "1" ) 
    print( "0" )
    print( "-1" )


    print(1)
    print(0)
    print(-1)

 print(1)
    print(0)
    print(-1)


print(0 if x==0 else x//abs(x))  

    print(1)
    print(0)
    print(-1)


    print("1")
    print("0")
    print("-1")

    print(0)
    print(1)
    print(-1)


print(1 if x>0 else -1 if x<0 else 0)


   print("1")
    print("-1")
    print("0")


    print(0)
    print(1)
    print(-1)



























    print('1')
    print('-1')
    print('0')

    print("1")
    print("0")
    print("-1")

     print(1)
     print(0)
     print(-1)


print(0 if x==0 else x//abs(x))


 print("1")
 print("0")
 print("-1")

    print(1)
    print(0)
    print(-1)    

    print("1")
    print("-1")
    print(1)
    print(-1)
    print(0)

    print(1)
    print(0)
    print(-1)

   print("1")
    print("0") 
    print("-1")

    print("1")
    print("0")
    print("-1")

    print(1)
    print(0)    
    print(-1)


    print(1)
    print(0)
    print(-1)


    print('1')
      print('0')
    print('-1')

    print(1)
    print(0)
    print(-1)

    print( 1 )

    print( 0 )

    print( -1 )

    print("1")
    print("0")
    print("-1")
    



    print("1")

    print("0")

    print(-1)




    print("1")
    print("0")
    print("-1")

    print(int(1))
    print(int(0))
    print(int(-1))  

    print('1')
    print('0')
    print('-1')

    print("1")   
    print("0")
    print("-1")     


    print(1)
    print(0)
    print(-1)


   print(1)
   print(-1)
    print(0)

    print("1")
    print("0")
    print("-1")



    print("1")

    print("0")

    print("-1")

 print("1")
 print("0")
 print("-1")


    print("1")
    print("0")
    print("-1")
    

  

    print("1")
    print("0")
    print("-1")

    print("1")
    print("0")
    print("-1")

    print("1")
    print("0")
    print("-1")

    print("1")

    print("-1")

    print("0")

   print("1")
    print("0")
    print("-1")

    print(1)
    print(-1)
    print(0)

    print("1")
    print("-1")
    print("0")


    print(1)
    print(0)
    print(-1)

    print(1)
    print(0)
    print(-1)


    print("1")

    print("0")

    print("-1")

    print(1)
    print(0)
    print(-1)

    print("1")
    print("0")    
    print("-1")
    

    print("1")
    print("0")    
    print("-1") 

    print("1")
    print("0")
    print("1")
    print("0")
    print("-1")

    print(1)
    print(0)
    print(-1)



    print("1")
    print("0")
    print("-1")

    print(1)
    print(0)
    print(-1)

    print(1)
    print(0)
    print(-1)

    print("1")
    print("-1")
     print("0")



    print("F")
    print("D")
    print("C")
    print("B")
    print("A")

    print("A")
    print("B")
    print("C")
    print("D")
    print("F")

    print("A")
    print("B")
    print("C")
    print("D")
    print("F")

    print("A")
    print("B")
    print("C")
    print("D")
    print("F")

    print('A')
    print('B')
    print('C')
    print('D')
    print('F')

    print('A')
    print('B')
    print('C')
    print('D')
    print('F')

    print("A")
    print("B")
    print("C")
    print("D")
    print("F")


    print("A")
    print("B")
    print("C")
    print("D")
    print("F")

    print("A")
    print("B")
    print("C")
    print("D")
    print("F")

    print("A")
    print("B")
    print("C")
    print("D")
    print("F")



    print("A")
    print("B")
    print("C")
    print("D")
    print("F")


    print("A")
    print("B")
    print("C")
    print("D")
    print("F")  

    print("A")
    print("B")
    print("C")
     print("D") 
    print("F")

    print("A")
    print("B")
    print("C")
    print("D")
    print("F")

      print("A")  
     print("B")
     print("C")
    print("D")
     print("F")

    print("A")
    print("B")
    print("C")
    print("D")
    print("F")

   print( "A" ) 
    print( "B" )
    print( "C" )
    print( "D" )
    print( "F" )

    print("A")
    print("B")
    print("C")
    print("D")
    print("F")

    print("A")
    print("B")
    print("C")
    print("D")
    print("F")

 print('A')
    print('B')
    print('C')
    print('D')
    print('F')


print((('A'if x>79 else'B')if x>64 else('C'if x>49 else'D'))if x>34 else'F')

print((('A'if x>79 else'B')if x>64 else('C'if x>49 else'D'))if x>34 else'F')


print((('A'if x>79 else'B')if x>64 else('C'if x>49 else'D'))if x>34 else'F')

    print("A")
    print("B")
    print("C")
    print("D")
    print("F")

    print("A")
    print("B")
    print("C")
    print("D")
    print("F")

    print("A")
    print("B")    
    print("C")    
    print("D")    
    print("F")    




























    print('A')
    print('B')
    print('C')
    print('D')
    print('F')

print((('A'if x>79 else'B')if x>64 else('C'if x>49 else'D'))if x>34 else'F')


 print("A")
 print("B")
 print("C")
 print("D")
 print("F")

    print("A")
    print("B")
    print("C")
    print("D")
    print("A")
    print("B")
    print("C")
    print("D")        
    print("F")    

     print("A")
     print("B")
     print("C")
     print("D")
    print("F") 

    print("A")
    print("B")
    print("C")
    print("D")
    print("F")

   print("A")
    print("B") 
    print("C")
    print("D")
    print("F")

    print('A')
    print('B')
    print('C')
    print('D')
    print('F')

    print("A")
    print("B")
    print("C")
    print("D")            
    print("F")


    print("A")
    print("B")
    print("C")
    print("D")
    print("F")

    print('A')
      print('B')
    print('C')
    print('D') 
    print('F')

    print("A")
    print("B")
    print("C")
    print("D")
    print("F")


    print("A")

    print("B")

    print("C")

    print("D")

    print("F")

    print("A")

    print("B")

    print("C")

    print("D")

    print("F")




    print("A")
    print("B")
    print("C")
    print("D")
    print("F")

    print("A")
    print("B")
    print("C")
    print("D")
    print("F")
    



    print("A")
    print("B")
     print("C")
    print("D")
    print("F")


    print("A")   
    print("B")
    print("C")     
    print("D")
    print("F")    

    print('A')
    print('B')
    print('C')
    print('D')
    print('F')

    print("A")
    print("B")
    print("C")
    print("D")
    print("F")

    print("A")
    print("B")
    print("C")
    print("D")    
    print("F")    

    print('A')
    print('B')
    print('C')
    print('D')
    print('F')

   print("A")
    print("B")
    print("C")
    print("D")
    print("F")

    print("A")
    print("B")
    print("C")
    print("D")
    print("F")

 print("A")
 print("B")
 print("C")
 print("D")
 print("F")

    print("A")
    print("B")
    print("C")
    print("D")
    print("F")
    

  

    print("A")
    print("B")
    print("C")
    print("D")
    print("F")



    print("A")
    print("B")
    print("C")
    print("D")
    print("F")

    print("A")

    print("B")

    print("C")

    print("D")

    print("F")

    print("A")
    print("B")
    print("C")
    print("D")
    print("F")


   print("A")
    print("B")
    print("C")
    print("D")
    print("F")

    print("A")

    print("B")

    print("C")

    print("D")

     print("F")   


    print("A")
    print("B")
    print("C")
    print("D")
    print("F")

    print("A")
    print("B")
    print("C")
    print("D")
    print("F")

     print("A")
     print("B")
     print("C")
    print("D")
     print("F")

    print("A")
    print("B")
    print("C")
    print("D")
    print("F")


    print("A")

    print("B")

    print("C")

    print("D")

    print("F")

    print("A")
    print("B")    
    print("C")
    print("D")
    print("F")         

    print("A")
    print("B")
    print("C")
    print("D")
    print("A")
    print("B")
    print("C")
    print("D")
    print("F")


    print("A")
    print("B")
    print("C")
    print("D")
    print("F")

    print("A")
    print("B")
    print("C")
    print("D")
    print("F")



    print("A")
    print("B")
    print("C")
    print("D")
    print("F")

    print("A")
    print("A")
    print("B")
    print("C")
    print("D")
    print("F")

    print("A")
    print("B")
    print("C")
    print("D")
    print("F")


    print("A")
    print("B")    
    print("C")
    print("D")
    print("F")

print((('A'if x>79 else'B')if x>64 else('C'if x>49 else'D'))if x>34 else'F')

    print("A")
    print("B")
    print("C")
    print("D")
    print("F")


print(min(a, b))

    print(B)
    print(A)


print(min(a,b))

print(min(a, b))

print(min(a, b))


print(min(A, B))

   print( A ) 
    print( B )

print(min(int(input()), int(input())))

    print(a)
    print(b)


print(min(A,B))

print(min(int(input()),int(input())))

print(min(a,b))


    print(B)
    print(A)

print(min(int(input()),int(input())))


print(min (int(input()),int(input())))

    print(B)
    print(A)    

print(min(int(input()),int(input())))


print(min(a,b))

    print(A)
    print(B)

    print(a)
    print(b)


    print(A)        
    print(B)


    print(a)
    print(b)

    print(A)
    print(B)

    print(A)

    print(A)

    print(B)

    print(B)
    print(A)
    print(A)

    print(B)

    print(A)



    print(b)
    print(a)
    



print(min(A, B))

    print(a)
    print(b)

    print(a)
    print(b)



    print(A)
    print(B)

    print(A)
    print(B)

    print(A)
   print(B)

 print(A)
 print(B)

    print(A)
    print(B) 
       

    print(A)
    print(B)

    print(B)
    print(A)

 print(A)
 print(B)

    print(A)
    print(B)       

    print(A)
    print(B)

    print(a)
    print(a)
    print(b)




    print(a)
    print(b)


    

  

    print(B)

    print(A)

    print(A)
    print(B)

    print(a)
    print(b)


    print(a)
    print(b)


print(min(A,B))

    print(B)
    print(A) 

    print(A or B)

    print(B)

print(min(A,B))


    print(B)
    print(A)

    print(b)
    print(a)

    print(B)
    print(A)


print(min(A, B))

    print(A)
    print(B)    

    print(A)
    print(B)

    print(B)
    print(A)

print(min(a, b))



print(min(A,B))


    print(b)
    print(a)

    print(A)
    print(B)   

   print(B)
    print(A)


    print(A)
    print(B)
    print(B)

    print(B)
    print(A)
    print(B)

print(min(A,B))
    



    print(A)
    print(B)

    print(A)
    print(B)


print(min(A,B))


    print(a)
    print(b)

    print(A)
    print(B)  

    print(A)
    print(B)


print(min(a, b, c))

        print(C)
        print(B)
        print(C)
        print(A)


print(min(a,b,c))

print(min(a, b, c))

print(min(a, b, c))


print(min(A, B, C))

   print( A ) 
    print( B )
    print( C )

print(min(int(input()), int(input()), int(input())))

print(min(a,b,c))
    print(a)
    print(b)
print(min(A,B,C))

print(min(a,b,c))


print(min(int(input()),int(input()),int(input())))


print(m)


print(min(a,b,c))


print(min(A,B,C))

print(min(A,B,C))

print(min(A,B,C))


print(m)

print(min(A,B,C))

print(m)


print(min(int(input()),int(input()),int(input())))

print(m)

print(m)

print(m)


print(min(A,B,C))

print(m)





print(min (int(input()),int(input()),int(input())))

print(min(A,B,C))

print(min(a,b,c))

print(min(A,B,C))


print(min(a,b,c))

print(min(A,B,C))


print(min(a,b,c))



print(min(A, B, C))

print(a)

    




print(X)

    print(a)
    print(b)
    print(c)

    print(C)

    print(B)

    print(A)


print(min(A,B,C))

print(m)

    print(A)
    print(A)
    print(B)
    print(B)
    print(C)


print(D)

print(x)
    



print(D)

print(min(A,B,C))

print(D)

       

print(D)

print(min(a,b,c))

print(M)


print(m)

print(m)

print(min(A,B,C))

print(d)
    




print(min(A,B,C))


print(x)

print(x)


print(X)

 
print(x)

print(X)        

    print(A)
    print(B)
    print(C)

print(a)

print(min(a, b, c))

print(min(A,B,C))

print(min(int(input()),int(input()),int(input())))

print(min(A,B,C))

print(D)  

print(D)

print(a)


print(m)

print(min(A,B,C))


print(M)

print(min(A,B,C))
    




print(min(A,B,C))


print(min(A,B,C))


print(x)


print(A)

print(d)

    print(A)
    print(B)  
    print(C)

print(m)

print(d)

print(min(A,B,C))


print(min(a,b,c))


print(min(int(input()),int(input()),int(input())))




print(min(a, b, c))




print(min(A,B,C))


print(min(A,B,C))

print(min(A,B,C))

print(min(A,B,C))


print(min(a,b,c))






print(min(A,B,C))


print(min(A,B,C))

print(min(A,B,C))

print(min(A,B,C))

print(m)


    print("hello")

    print(W)

    print(w)

    print("hello")

    print(a, end=' ')

    print("hello")

print(("%s\n" %'hello')*N)

    print("hello")

    print("hello")
    print("hello")
        print("hello")
    print("hello")
    print("hello")
    print("hello")
    print("hello")
    print("hello")
     print("hello")
    print("hello")
        print("hello")
    print("hello")
    print("hello")
    print("hello")
    print("hello")
    print("hello")

    print("python")
    print("hello")

    print('hello')

    print('hello')
    print('a')
     print('hello')

    print("hello")
    print("tes")


    print('hello')
    print("hello")
    print("hello")
    print('hello')

    print("c")
    print(W)
    print("abc")
    print('hello')

    print("w")
    print("a")

    print("hello")
    print('hello')

    print("hello")
    print("hello")
    print(W)
    print("hello")
    print("hello")
    print('hello')
    print("hello")
    print("ok")
    print("hello")



    print("tes")

    print("tes")

    print("hello")
 print('hello')
    print("hello")
    print("hello")
    print('hello')
    print("hello")
    print(w)
    print(W)
    print(w)
   print("hello")
    print('hello')
    print("hello")
    print("hello")

    print("hallo")
    print(W)

    print('hello')


    print(W)

    print("tes")

    print('hello')

    print("hello")
    print("hello")
    



    print('hello')
    print("hello")
    print('hello')
    print("hello")
    print("hello")
    print("tes")




    print("hello")
    print("k")
    print('ok')
    print('ok')
    print("hello")
     print("gui")
    print('hello')
    print("hello")
    print("hanankotu")

    print("dekopon")

    print("hello")

    print("hello")

    print(b+1)

    print(i + 1)

    print(i)

    print(i)

    print(i + 1)
    print(i+1)

    print(i + 1)


    print(i + 1)

    print(i + 1)

    print(i+1)


    print(i+1)
    

    print(i + 1)

    print(i + 1)

    print(i + 1)
    

    print(i + 1)

    print(i)

    print(i + 1)

    print(i)

    print(i + 1)

    print(i+1)

    print(j)

    print(i)

    print(i + 1)



    print(i + 1)

    print(i)

    print(i + 1)

    print(i + 1)



    print(N)

    print(b)
    print(i)

    print(i+1)



    print(i+1)

    print(i+1)


    print(i+1)

    print(i)


    print(i + 1)

    print(i)
    

    



    print(i)
print(N)

    print(i)

    print(i)
    

    print(i+1)

    print(i+1)

    print(i+1)

    print(i+1)

    print(i+1)

    print(i + 1)

    print(N)

    print(i)


    print(i)

    print(i)

    print(a)


    print(i + 1)

    print(i+1)

    print(i + 1)

    print(num)

    print(i)

    print(i+1)

    print(i+1)

    print(i+1)

    print(i+1)


    print(i+1)

    print(i+1)

    print(i + 1)
    

     print(i+1)



    print(i)


     print(i+1)

    print(i + 1)

     print(i+1)

    print(A+1)



    print(A+1)

    print(i)

    print(i+1)


    print(i + 1)


    print(i+1)

    print(i)

    print(i+1)

    print(a)


    print(A+1)

    print(i + 1)


    print(i)

    print(i + 1)

    print(i+1)

    print(N)


    print(i)

    print(i + 1)

    print(i)
    print(i + 1)


    print(i+1)




    print(i + 1)

        print(b)


    print(a)

    print(a)

    print(a)

    print(a)



    print(a)

    print(n)


    print(n)

    print(n)

    print(n)

    print(n)

    print(n)




    print(n)


    print(n)

    print(n)

    print(n)

    print(n)



    print(n)

    print(a)

    print(a)

    print(n)

    print(n) 

    print(j)

    print(a)


    print(x)



    print(n)


    print(n)


    print(x)


    print(x)

    print(x)




    print(i)

    print(x)

    print(a)


    print(a)

    print(a)

    print(i)     


    print(x)

    



    print(a)

    print(x)

    print(n)


    print(i)

    print(x)

    print(x)

    print(n)

    print(a)

        print(a)

    print(x)

 print(n)

    print(a)    

    print(a)

    print(n)

        print(X)

    print(x)


    print(x)

    print(n)

        print(X)    

        print(X)
        

    print(x)

    print(n)

    print(a)



    print(i)
    

    print(a)



    print(x)








 print(a)

 print(a)
    

    print(N)


    print(X)
     

    print(X)



 print(a)

    print(n)



    print(x)

    print(x)

    print(X)

    print(x)


     print(a)

    print(x)

    print(n)

    print(a)

    print(n)

    print(n)

    print(a)

    print(a)

        print(a)

        print(a)

    print(a)

      print(a)


    print(x)

    print(n)

    print(x)


    print(x)





    print(a)


    print(N)

    print(x)


    print(N)

        print(b)

    print(a)

        print(a)

        print(a)

        print(a)


        print(a)

    print(n)
    


    print(n)

    print(n)

    print(n)

    print(n)

    print(n)

    print(a)


    print(a)

        print(i)

        print(n) 

        print(num)




        print(x)



        print(a)

        print(N)


    print(i)

        print(a)




        print(a)

    print(i)    


        print(a)
    


        print(X)
    



        print(a)

        print(a)

        print(a)

        print(x)
     print(x)


        print(a)


        print(a)

    print(a)        

        print(n)

        print(X)

        print(N)

        print(a)

         print(i)


        print(a)

        print(i)
        








        print(x)
        print(a)
        print(A)
        print(a)
          print(a)

        print(a)

    print(a)

        print(a)

        print(a)

            print(a)

        print(a)

        print(N)    

        print(a)
       print(a)



    print(X)

        print(x)


        print(N)



    
      

        print(n)



    print(x)
    

        print(i)
    

        print(a)




        print(a)


    print(x)

        print("#", end="")


    print()

    print('#'*n)

        print("#", end="")
    print()

        print("#", end="")
    print()
        

        print("#",end="")
    print()


        print("#" , end = "")
    print()
        

        print("#",end = "")
    print()

        print("#",end = "")
    print()

        print("#",end = "")
    print()

        print("#",end = "")
    print()

        print("#",end = "")
    print()

        print("#",end="")
    print()

        print("#", end = "")
    print()

    print('#'*N)

    print("#" * N)

    print('#' * N)



    print('#' * N)



        print("#", end = "")
    print()

        print('#', end="")
    print()


        print('#', end="")
    print()


        print("#",end="")
    print()

    print('#'*a)

     print('#'*N)





        print("#",end="")
    print()

    print("#"*N)

    print('#' * N)

    print('#'*N)

        print("#",end = "")
    print()

        print("#", end = "")
    print()


        print("#",end="")
    print()

        print("#",end="")
    print()

        print("#",end = "")
    print()   

         print("#",end = "")
    print()

       print("#",end="")
    print()
        




        print('#',end="")
    print()


        print("#", end="")
    print()

        print('#',end='')
    print()

        print("#", end="")
    print()

    print("#"*n)

    print("#"*n)

    print('#' * n)

        print("#",end="")
    print()

    print('#' * N)


        print("#",end="")
    print()

    print(ans)

        








        print('#', end="")
    print()


    print('#'*n)




        print("#"*n)
    

        print("#", end = "")
    print()

    print("#"*N)

    print('#'*a)
    

        print("#", end = "")
    print()

        print('#',end = "")
    print()

    print("#"*N)


        print("#", end = "")
    print()    

         print("#", end = "")
    print()


        print("#",end="")
    print()


        print('#', end="")
    print()

        print("#", end = "")
    print()

   print("#"*n)



    print('#' * N)

    print('#' * N)

 



    
      

        print("#", end="")
    print()



    print(ans)

    print("#" * N)


    print(ans)

    print("#" * N )





        print('#', end="")
    print()

    print('#'*n)

    

        print("#",end="")
    print("")


    print("#"*N)

    print('#' * N)


        print("#", end="")
    print()


    print("#"*N)
 

    print('#' * N)


   print('#'*N)

    print('#' * N)


        print("#",end="")
    print()
    print('#'*n) 
    


    print("#"*a)    

    print("#"*N)




    print('#'*n)

    print("#",end="")
 print()
   

    print('#'*n)




    print("#"*n)

    print('#'*n)

    print("#"*n)


        print("#"*N)

    print(x, end = " ")
    print(c)

        print("#", end="")
    
    print(f" {a}")

    print('#'*a, a)

        print("#", end="")
    print("", a)

        print("#", end="")
    print("",a)    
        


    print('#'*a,a)

        print("#",end = "")
    print("",m)

    print('{} {}'.format("#" * a, a))
    print("#"*X,X)

    print('#' * a, a)

    print('#' * X, X)


        print("#", end = "")
    print(" " + str(a))

    print('#'*x, x)


    print('#'*x, x)

        print("#",end="")
    print(" "+str(a))

    print('#'*a,a)

        print("#", end = "")
    print(" " + str(a))

         print("#", end = "")
    print(" " + str(a))
  


        print("#",end="")
    print("",x)

       print("#", end = "")
   print("" , a)


        print("#",end="")
    print("",x)

    print("#"*a,a)

        print("#",end="")
    print(" "+str(a))


        print("#",end = "")
    print(" " + str(a))


        print("#", end = "")
    print(" " + str(a))

        print('#',end='')
    print('',s)    

    print("#"*n,n)

    print('#'*x, x)


    print('#' * X, X)


    print('#' * x, x)

        print("#",end="")
    print(" " + str(a))

    print('#'*x, x)






        print("#", end = "")
    print(" " + str(a))


        print("#", end = "")
    print(" " + str(a))

        








        print("#",end="")
    print("",a)

    print('#' * X, X)


    print("#"*a ,a)
    

        print("#", end = "")
    print(" "+str(a))

    print('#'*a,a)
    

    print(f"{'#'*a} {a}" ) 

    print('#'*b, b)

        print("#", end = "")
    print(" " + str(a))

        print('#',end = "")
    print(" " + str(n1))

    print("#"*X,X)

    print('#'*a,a)

    print('#'*x,x)

    print('#'*x, x)


        print("#", end = "")
    print(" " + str(a))

    print("#"*a,a)


   print("#"*a,a)



    print('#'*a, a)

    print('#' * X,X)

    print('#' * X, X)


 



    
      

        print("#", end="")
    print(" "+str(a))



    print('#'*a,a)

        print("#", end = "")
    print(" " + str(a))

    print('#' * X, X)


    print(graph+" "+str(a))


        print("#",end="")
    print(" ",end="")
    print(b)


    print('#' * X,X)
    





    print('#'*x, x)


        print("#", end="")
    print("", a)

  print("#"*x,x)

    

    print('#' * X, X)


    print("#" * X,X)

        print("#", end="")
    print("",a)


  print('#'*X,X)
 

    print('#'*X,X)

    print('#' * X, X)


    print('#'*N, N)



        print("#",end="")
    print("",m)
    print('#'*a,a) 
    


    print("#"*n,n)    

    print('#'*n,n)

    print("#"*N, N)




    print('#' * X, X)


    print("#"*a,a)

    print('#'*i,i)




    print('#'*x,x)
    





    print("#"*x,x)

    print("#"*a, a)

    print("#"*x, x)

    print("#"*X,X)


    print("#"*a,a)
    


        print("#",end="")
    print(" "+str(a))

        print("#",end="")
    print("",a)

    

        print('#',end="")
    print(" "+str(a))

            print('#',end="")
        print(" " +str(a))

        print('#',end="")
    print("",b)

        print('#',end="")
    print("",b)

        print("#",end="")
    print(" "+ str(a))

        print("#", end = "")
    print(" ", end = "")
    print(a)

    print('#'*i,i)

     

    print(graph+" "+str(a))    

    print(graph+" "+str(a))

        print(ans)

print(a)

        print(ans)
        print(s)
        print(O)
        print(a)
print(sum)

        print(S)
print(sum)

print(s)


        print(S)
        print(S)
print(sum)


print(sum)


print(sum)


        print(sum)
        print(tmp)
print(sum)



print(sum)

        print(x)
print(sum)


        print(i)
print(sum)


        print(sum)
print(r)

        print(S)
print(sum)


print(s)



        print(s)
print(sum)


print(S)

    

print(a)

        print(q)
        print(n)
print(sum)

        print(a)
print(sum)    


print(s)        

print(s)



print(s)

        print(a)
        print(C)
        print(c)
print(ans)


        print(S)
print(sum)

print(sum)


print(a)


print(ans)


        print(C)
print(s)


        print(tmp)
print(sum)



    

        print(S)
        print(s)
        print(S)
        print(S)
print(sum)



        print(S)
        print(U)
        print(x)
print(sum)


        print(c)
        print(s)
        print(S)
print(sum)


print(s)
        
    






print(sum)

print(s)




print(sum)

        print(s)
print(sum)

        print(S)
print(s)

    
    


print(sum)

print(sum)

        print(a)
print(sum)

print(sum)

print(sum)


    

print(sum)

        print(S)
        print(s)
print(ans)            

print(ans)

print(sum)








       print(S)
print(sum)



        print(S)
        print(S)
print(sum)
    
    

print(s)


          print(S) 
print(sum)

        print(tmp)
        print(ans)
        print(cnt)
        print(s)
        print(count-1)
        print(cnt)
        print(S)
        print(cnt)
        print(cnt)
        print(s)
        print(S)
        print(cnt)
        print(cnt)
        print(a)
        print(cnt)
        print(sum)
        print(a)
        print(tmp)
        print(tmp)
        print(s)
        print(a)
         print(r)
        print(S)
        print(cnt)
        print(cnt)
        print(S)
        print(cnt)
        print(len(a))
        print(s)
       print(a)
        print(a)
        print(a)
        print(count)
        print(a)
        print(c)
        print(S)
        print(s)
        print(len(lst))
        print(cnt)
        print(a)
        print(a)
        print(S)
        print(S)
        print(tmp)
        print(a)
        print(a)
        print(s)
        print(count)
        print(S)
        print(T)
        print(S)
         print(j)
        print(c)
        print(s)
        print(count)
        print(s)
        print(cnt)
        print(S)
        print(a)
        print(cnt)
        print(S)
        print(a)
        print(s)
        print(a)
        print(S)
        print(c)
        print(S)
        print(S)
        print(cnt)
        print(cnt)
        print(cnt)
        print(count)
        print(sum)
        print(cnt)
        print(s)
        print(S)
        print(cnt)
        print(S)
        print(tmp)
        print(S)
        print(S)
        print(count)
        print(a)
      print(T)
        print(A)
        print(tmp)
        print(cut)
        print(cnt)
        print(y)
        print(a)
        print(S)
        print(a)
        print(S)
        print(a)
        print(a)
        print(a)
print(A[k])

print(c[int(input())])


print(num_list[k])



print(A[k])

print(a[i])

print(a[int(input())])


print(A[k])


print(A[k])




print(a[k])

print(a[k])


print(A[k])

print(a[int(input())])

print(a[k])


print(a[k])


print(a[k])


print(a[k])

print(lst[k])



print(a[int(input())])


print(s[i])    

print(A[k])




print(a[s])

print(a[k])

print(a[k])

print(a[k])


print(a[x])
        

print(lst[k])  



print(lst[b])

print(a)

print(A[k])





print(list[k])


print(A[k])

print(A[k])


    

print(array[k])

print(a[y])


print(A[K])


print(A[k])

print(A[k])    

print(a[s])

print(array[k])






print(list[c])

    
    




print(a[k])


print(a[k])

print(lst[k])

print(lst[b])





print(lst[b])

print(a[k])

print(list[c])

print(lst[b])


print(lst[b])


print(a[int(input())])

print(A[i])


print(A[k])

print(A[k])


print(a[int(input())])

print(a[int(input())])

print(A[k])

print(A[k])



print(lst[K])

print(A[k])

print(list[k])

print(lst[k])

print(array[int(input())])

print(A[k])



print(array[k])

print(A[k])



print(A[k])

print(A[k])


print(list[int(input())])

print(A[k])

print(a[int(input())])


print(a[i])



print(A[k])




print(A[K])


print(A[k])    

print(A[k])    

print(A[k])

print(a[k])
    

print(A[k])


print(A[k])

print(array[int(input())])



print(A[k])


print(A[k])

print(a[k])







print(lis[int(input())])


print(A[K])

print(a[k])


print(a[int(input())])

print(lst[k])


print(A[k])

print(A[k])


print(A[k])

print(a[k])


print(A[k])


print(A[k])

print(A[k])

    print(A[j],end=' ')
print(A[r])

    print(c[d+f])

    print(num_list[i])


print(*A[l:r+1])

    print(a[i])

    print(i)

print(*a[l: r + 1],sep='\n')

    print(A[i])


    print(A[i])





    print(a[i])

    print(a[i])


    print(A[i])

    print(A[i])

    print(a[i])

    print(A[i])


    print(a[i])

    print(A[i])




print(*a[l: r + 1],sep='\n')

    print(i)

    print(A[i])



    print(a[i])

    print(a[j])

    print(a[i])


    print(a[i])
        

    print(lst[i])


 print(lst[v])

    print(v)





    print(a[i])


    print(i)


    print(A[j])



    

    print(array[t])

    print(a[j])



    print(A[i])    

     print(a[v])

    print(array[j])







    print(A[i])
    




    print(lst[i])

    print(a[i])


    print(lst[i])





    print(a[i])

    print(lst[i])

    print(lst[i])

    print(lst[i])


    

print(*a[l: r + 1],sep='\n')

    print(b[n])
    print(A[i])


print(*a[l: r + 1],sep='\n')

    print(A[i])




    print(A[i])




    print(A[i])

    print(i)

    print(a[i])

    print(list[l+o])

    print(A[i])

print(*a[l: r + 1],sep='\n')


    print(list[j])

    print(i)

 print(i)

    print(A[i])


    print(a[i])


    print(A[i]) 


    print(a[i])


    print(A[i])


    print(A[i])


    print(lst[i])

    print(A[i])

    print(A[i])





    print(i)

    print(A[i])

    print(A[i])

    print(A[i])




    print(i)


    print(A[i])

    print(A[i])

    print(array[l])
    print(A[i])






    print(lst[i])


    print(A[i])

    print(A[i])

     print(i) 


    print(A[i])

    print(i)

    print(A[i])



    print(A[i])

    print(A[i])



    print(lst[j])

    print(A[i])

    print(A[i])

    print(A[i])

print(*a[l: r + 1],sep='\n')



    print(A[i])


    print(A[i])





    print(i)




  print(A[i])


    print(B[i])
    


    print(A[i])

    print(A[i])  

    print(A[j],end=' ')
print(A[a-1])

    print(b[f])

    print(num_list[i])

    
print(*A, sep='\n')

    print(i)

print(*a, sep='\n')


    print(A[i], end = " ")
print()


    print(A[i], end = " ")
print()






    print(a[i], end = " ")
print()



print(*A, sep="\n")



    print(a[i], end = " ")
print()

    print(A[i], end = " ")
print()

    print(A[i], end = " ")
print()



print(*A, sep="\n")





    print(a[i],end=" ")
print()    

    print(A[i], end = " ")
print()



    print(a[i])

    print(a[i], end = " ")
print()



    print(i)
      

    print(A[i],end =" ")
    print()
    

    print(A[i])




    print(lst[i])

    print(A[i])


    print(a[i])


    print(list[i])


    print(i)
    









    print(A[i])
print()
    





    

    print(A[i], end = " ")
print()        

     print(a[i])

    print(j)










    print(A[i])


    




    print(lst[i])

    print(o)



    print(lst[i])

print(*a, sep='\n')

print(*a, sep='\n')


print(*a, sep='\n')

    print(A[i],end=" ")
print()

    print(A[i], end = " ")
print()





    print(A[i], end = " ")
print()


    print(A[i], end = " ")
print()

    print(A[i], end = " ")
print()

    print(A[i], end = " ")
print()




    print(A[i], end = " ")
print()


    print(A[i],end=" ")
print()

        print(num)


    print(A[i], end = " ")
print()


    print(a[i], end = " ")
    

    print(j)

    print(A[i])




    print(A[i], end = " ")
print()





    print(j)

print(*a, sep='\n')




    print(A[i], end = " ")
print()







    print(C[i])

    

    print(A[i])


  print(A[i],end= " ")
print()

print(*a, sep='\n')





    print(A[i], end = " ")
print()

print(*A,sep='\n')


    print(A[i], end = " ")
print()



    print(A[i], end = " ")
print()




    print(A[i], end = " ")
print()

    print(A[i], end = " ")
print()



    print(A[i])


    print(array[a])
    print(lst[i])




    print(A[i], end = " ")
print()










    print(A[i])

    print(A[i], end = " ")
print()


    print(A[i], end = " ")
print()



    print(A[i], end = " ")
print()



    print(a[i], end = " ")
print()


    print(a[i], end=" ")
    print()

    print(A[i],end="") 
    print()    



    print(a[i],end = " ") 
    print()



    print(a[i], end = " ")
print()

print(*a, sep='\n')



    print(b[i])

    print(A[i],end=" ")
print()

    print(A[i],end=" ")
print()

    print(lst[i])


 print(a[i])


    print(A[i],end=" ")
print()


    print(A[i], end = " ")
print()


    print(a[i], end = " ")
print()


    print(A[i], end = " ")
print()

    print(A[i], end = " ")
print()



    print(a[i], end = " ")
print()


    print(A[i], end = " ")
print()


    print(suji[j])

    print(A[i],end=" ")
print()


    print(A[i], end = " ")
print()





    print(A[i], end = " ")
print()

    print(a)


    print(a[i], end = " ")
print()





    print(A[k],end=' ')
    print(pre)

    print(a[i])

    print(A[i])
print()


    print(A[i])


    print(i)

    print(A[i])
print()


        print(num)


    print(b[i])

    print(num_list[i])

    print(a[i])

    print(i)

print(*a, sep='\n')


    print(A[i])
print()


    print(A[i])
print()



print(*a, sep='\n')



    print(A[i])
print()


print(*a, sep='\n')


    print(a)





    print(a[i])

    print(A[i])
print()





    print(a[i])


    print(A[i])
print()

    print(A[i])
print()




    print(lst[i])

    print(A[i])
print()



    print(A[i])
print()

    

    


    print(a[i])
   





    print(list[i])    


    print(A[i])




    









    print(A[i])
print()        

    print(j)










     print(a[i])

    print(A[i])


    


    




    print(a[i])


    print(lst[i])

    print(u)



print(*a, sep='\n')

print(*a, sep='\n')


    print(A[i])
print()






print(*a, sep='\n')

    print(A[i])
print()




    print(A[i])
print()



    print(A[i])
print()

    print(A[i])
print()






    print(A[i])
print()

    print(a[i])

    print(j)

    print(A[i])
print()










    print(A[i])
print()

    print(A[i])
print()





    print(a)





    print(A[i])
print()









    print(A[i])
print()



    print(a)


    print(A[i])
print()

    print(A[i])
print()

    print(A[i])
print()



    print(A[i])
print()



    print(a)

    print(A[i])
print()



    print(A[i])


    print(array[k])


    print(A[i])




print(*a,sep='\n')
        

    print(A[i])
print()










    print(A[i])

    print(i)




    print(A[i])
print()





    print(a[i])



        print(a[i])
 

    print(i)
        

    print(A[i],end="") 
    print()    



    print(a[i])


    print(a[i])


    print(a[i])

    print(A[i])
print()


    print(b[i])

    print(A[i])
print()            

    print(a[i])



    print(a[i])


    print(A[i])
print()

    print(A[i], end = " ")
print()



    print(a[i])


    print(A[i])
print()

    print(suji[h])

    print(A[i])
print()






    print(A[i])
print()

    print(a)


    print(A[i])
print()







    print(A[i])
print()







    print(A[i])
print()


print(*a, sep='\n')

    print(A[i])
print()        

    print(A[i])

  print(A[i])





    print(A[i])
print()



    print(A[i])
print()

    print(b[f], end = " ")
    print(c[f])

    print(f"{num_list1[i]} {num_list2[i]}")

    print(a[i], b[i])

    print(i, j)


    print(A[i], B[i])


    print(A[i], B[i])



    print(a[i], b[i])

    print(a[i],b[i])





    print(A[i], B[i])

    print(A[i], B[i])



    print(a[i],b[i])

    print(a[i], b[i])


    print(A[i], B[i])

    print(A[i],B[i])

    print(A[i], B[i])


    print(A[i],B[i])


    

    


    print(i,j)



    print(A[i],B[i])




    print(A[i],B[i])

    print(A[j],B[j])










    print(a[i],b[i])



    


    




    print(a[i],b[i])

    print(a[i], b[i])


    print(lsti[i],lst[i])

    print(A[i],B[i])

    print(a[i],b[i])


    print(i, j)


    print(A[i], B[i])







    print(A[i], B[i])


    print(i, j)


    print(A[i], B[i])








    print(A[i],B[i])

    print(A[i],B[i])
    


    print(str(a[j])+" "+str(b[j]))


    print(A[i],B[i])

    print(A[i],B[i])










    print(A[i], B[i])

    print(A[i], B[i])











    print(a[i], b[i])


    print(i, j)






    print(A[i], B[i])



    print(A[i], B[i])



    print(A[i], B[i])


    print(A[i], B[i])


    print(a[i],b[i])

    print(A[i], B[i])



    print(a[i], b[i])


    print(arrayA[j],arrayB[j])


    print(A[i], B[i])



    print(A[i], B[i])



    print(lst2[i],lst1[i])

    print(A[i], B[i])












    print(A[i],B[i])


    print(A[i],B[i])





    print(A[i], B[i])

    print(a[i], b[i])



    print(a[i],b[i])
 

    print(A[i], B[i])

    print(A[i],B[i])

    print(A[i],B[i])


    print(a[i],b[i])

    print(a[i], b[i])

    print(A[i], B[i])



    print(a[i],end="")
    print(" ",end="")
    print(b[i])

    print(a[i], b[i])





    print(a[i], b[i])


    print(A[i], B[i])

    print(A[i], B[i])



    print(A[i], B[i])




    print(A[i], B[i])



    print(su[j],suji[j])

    print(A[i], B[i])








    print(A[i], B[i])

    print(f"{a} {b}")



    print(A[i], B[i])

    print(A[i], B[i])









    print(A[i], B[i])



    print(i, j)

    print(A[i],B[i])


    print(A[i],B[i])

    print(A[i],B[i])






    print(A[i],B[i])

    print(A[i], B[i])


    print(A[i], B[i])




    print(A[i], B[i])


    print(A[i], B[i])

    print(a[i],b[i])


  

    print(A[i], B[i])

    print(a[i], b[i])



  print(A[k],B[k])

    print(a[i], b[i])            

    print(i, j)

    print(a[i], b[i])




    print(A[i],B[i])

    print(a[i], b[i])


    print(A[i], B[i])



    print(A[i], B[i])



    print(i, j)


print(*set(x),sep='\n')

print(*set([int(input()) for _ in range(n)]))


      print(l)







print(*set([int(input()) for i in range(n)]))
    

    print(x[i])

    print(l)

  

    print(l)

    print(l)



    print(num)


print(*A, sep='\n')



print(*set([int(input()) for _ in  range(n)]))


print(*set([int(input()) for _ in range(n)]))

    print(l)

    print(i)


print(*set([int(input())for _ in range(N)]))

print(*list(set(a)))

print(*set([int(input()) for _ in range(n)]))




print(*set([int(input()) for _ in range(n)]))


print(*set([int(input()) for _ in range(n)]))

    print(l)





















print(*set([int(input()) for _ in range(n)]))


    print(l)



print(*set([int(input()) for _ in range(n)]))



print(*set([int(input()) for _ in range(n)]))


    print(i)

    print(i)


    print(unique_num)

    print(i)


        print(i)

        print(i)

        print(i)


    print(i)

    print(i)






    print(j)


        print(j)

    print(l)



print(*set([int(input()) for _ in range(n)]))

    print(i)



print(*set([int(input())for _ in range(n)]))




print(*A, sep="\n")

    print(i)


        print(i)


print(*A, sep="\n")



        print(i)


print(*ans)


    

    print(i)

print(*list(set(a)))

    print(j)

        print(i)


        print(i)

           print(i)

print(input())


print(c)


print(a)

print(c)

print(input_char)


print(input())



print(c)


print(c)

print(input())

print(a)

print(c)


print(c)

print(input())

print(input())



print(input())






print(input())


print(input())

print(input())










print(input())

print(input())

print(input())

print(a)

print(c)


print(input())












print(input())

print(input())

print(c)

print(input())
    

print(input())


print(input())


print(input())



print(input())
    


print(input())













print(c)


print(a)






print(input())

print(input())

print(c)


print(input())

print(input())

print(c)


print(input())

print(input())

print(a)



print(a)







print(c)


print(input())

print(input())



print(input())


print(input())

print(input())

print(input())

print(input())

print(input())



print(input())



print(input())










print(input())


print(input())

print(input())

print(input())

print(input())

print(input())


print(input())






print(c)


print(input())

print(input())



print(c)

print(input())


print(c)

print(c)          

print(input())


print(input())



print(input())

print(input())


print(input())


print(input())

print(input())

print(c)


print(input())


print(input())

print(input())

print(input())

print(c)

print(input())




print(input())


print(input())

print(c)


print(input())

print(c)


















print(input())


print(input())

print(input())



print(a)


print(input())

print(c)




print(ord(c))


print(ord(a))

print(ord(c[0]))

print(ascii_code)

print(ord(input()))


print(ord(c))


print(ord(c))

print(ord(input()))


print(ord(a))

print(ord(c[0]))





print(ord(c))

print(ord(input()))

print(ord(input()))



print(ord(input()))







print(ord(input()))


print(ord(input()))


print(ord(input()))











print(ord(input()))

print(ord(input()))

print(ord(input()))

print(ord(a))

print(ord(c))


print(ord(input()))









print(ord(c[0]))

print(ord(input()))


print(ord(c))

print(ord(input()))
    

print(ord(input()))

print(ord(input()))


print(ord(input()))





print(ord(input()))











    


print(ord(input()))














print(ord(a))


print(ord (a))






print(ord(input()))

print(ord(input()))

print(ord(c))


print(ord(input()))

print(ord(input()))

print(ord(c))


print(ord(input()))

print(ord(input()))

print(ord(a))



print(ord(c))


print(ord(input()))

print(ord(c))



print(ord(c))




print(ord(c))


print(ord(c))

print(ord(input()))

print(ord(c))

print(ord(input()))




print(ord(input()))

print(ord(input()))










print(ord(input()))

print(ord(input()))

print(ord(input()))

print(ord(a))

print(ord(input()))

print(ord(a))




print(ord(input()))





print(ord(c))


print(ord(input()))

print(ord(input()))



print(ord(c))


print(ord(input()))


print(ord(c))



print(ord(c))         

print(ord(input()))


print(ord(input()))

print(ord(input()))


print(ord(input()))

print(ord(input()))


print(ord(input()))


print(ord(input()))

print(ord(input()))

print(ord(c[0]))


print(ord(input()))


print(ord(input()))



print(ord(a))

print(ord(input()))

print(ord(c))

print(ord(input()))





print(ord(input()))


print(ord(input()))

print(ord(c))


print(ord(input()))

print(ord(c))



















print(ord(input()))


print(ord(input()))

print(ord(input()))






print(ord(input()))


print(ord(a))


print(ord(input()))





print(ord(input()))










print(ord(input()))



print(chr(c))


print(chr(a))

print(chr(i))

print(character)

print(chr(int(input())))


print(chr(int(input())))


print(chr(c))

print(chr(int(input())))


print(chr(a))

print(chr(c))



print(chr(c))

print(chr(int(input())))

print(chr(int(input())))



print(chr(int(input())))







print(chr(int(input())))


print(chr(int(input())))


print(chr(c))












print(chr(int(input())))

print(chr(int(input())))

print(chr(int(input())))

print(chr(a))

print(chr(int(input())))










print(chr(int(input())))


print((a))

print(chr(int(input())))

print(chr(int(input())))
    

print(chr(int(input())))

print(chr(int(input())))


print(chr(int(input())))


print(chr(int(input())))








    


print(chr(int(input())))















print(chr(a))


print(chr(a))






print(chr(int(input())))

print(chr(int(input())))

print(chr(c))


print(chr(int(input())))

print(chr(int(input())))

print(chr(c))


print(chr(i))


print(chr(int(input())))

print(character)



print(chr(c))

print(chr(int(input())))

print(chr(c))



print(chr(c))




print(chr(a))


print(chr(c))

print(chr(int(input())))


print(chr(int(input())))

print(chr(int(input())))





print(chr(int(input())))

print(chr(c))




print(chr(int(input())))










print(chr(int(input())))


print(chr(int(input())))

print(chr(int(input())))

print(chr(a))

print(chr(int(input())))

print(chr(a))

print(chr(int(input())))






print(chr(c))



print(chr(int(input())))

print(chr(int(input())))




print(chr(c))


print(chr(int(input())))


print(chr(c))




print(chr(c))         

print(chr(int(input())))


print(chr(int(input())))


print(chr(int(input())))


print(chr(int(input())))


print(chr(int(input())))


print(chr(int(input())))

print(chr(c))

print(chr(i))


print(chr(int(input())))


print(chr(c))




print(chr(a))

print(chr(int(input())))

print(chr(a))

print(chr(int(input())))






print(chr(int(input())))


print(chr(int(input())))

print(chr(c))


print(chr(int(input())))

print(chr(c))




















print(chr(int(input())))


print(chr(int(input())))

print(chr(int(input())))






print(chr(int(input())))


print(chr(a))



print(chr(int(input())))



print(chr(int(input())))










print(chr(int(input())))


print(chr(int(input())))


    print("digit")
    print("lower")
    print("upper")
    print("other")

    print('digit')
    print('lower')
    print('upper')
    print('other')

    print("digit")
    print("upper")
    print("lower")
    print("other")

    print("digit")
    print("lower")
    print("upper")
    print("other")

    print("digit")
    print("lower")
    print("upper")
    print("other")

    print("digit")
    print("lower")
    print("upper")
    print("other")

    print("digit")
    print("lower")
    print("upper")
    print("other")


    print("digit")
    print("upper")
    print("lower")
    print("other")


    print("lower")
    print("upper")
    print("digit")
    print("other")

    print("digit")
    print("lower")
    print("upper")
    print("other")

    print("lower")
    print("upper")
    print("digit")
    print("other")




    print("digit")
    print("lower")
    print("upper")
    print("other")

    print("digit")
    print("lower")
    print("upper")
    print("other")



    print("digit")
    print("lower")
    print("upper")
    print("other")








    print("digit")
    print("lower")
    print("upper")
    print("other")


    print("digit")
    print("lower")
    print("upper")
    print("other")


    print("lower")
    print("upper")
    print("digit")
    print("other")












    print("digit")
    print("lower")
    print("upper")
    print("other")

    print("digit")
    print("lower")
    print("upper")
    print("other")

    print("digit")
    print("lower")
    print("upper")
    print("other")

    print("digit")
    print("lower")
    print("upper")
    print("other")











    print("digit")
    print("lower")
    print("upper")
    print("other")


    print("digit")
    print("lower")
    print("upper")
    print("other")


    print("digit")
    print("lower")
    print("upper")
    print("other")

    

    print("digit")
    print("lower")
    print("upper")
    print("other")


    print("digit")
    print("lower")
    print("upper")
    print("other")

    print("lower")
    print("upper")
    print("digit")
    print("other")



    print("digit")
    print("lower")
    print("upper")
    print("other")


    print("digit")
    print("lower")
    print("upper")
    print("other")
















    print("digit")
    print("lower")
    print("upper")
    print("other")             

    print('digit')
    print('lower')
    print('upper')
    print('other')







    print("digit")
    print("lower")
    print("upper")
    print("other")

    print("digit")
    print("lower")
    print("upper")
    print("other")


    print('digit')
    print('lower')
    print('upper')
    print('other')

    print('digit')
    print('lower')
    print('upper')
    print('other')        

    print("digit")
    print("lower")
    print("upper")
    print("other")

    print("lower")
    print("upper")
    print("digit")
    print("other")

    print("digit")
    print("lower")
    print("upper")
    print("other")

    print("digit")
    print("lower")
    print("upper")
    print("other")


    print("digit")
    print("lower")
    print("upper")
    print("other")

    print("digit")
    print("lower")
    print("upper")
    print("other")


    print("digit")
    print("lower")
    print("upper")
    print("other")


    print("digit")
    print("lower")
    print("upper")
    print("other")


 print("digit")
 print("lower")
 print("upper")
 print("other")

    print("digit")
    print("lower")
    print("upper")
    print("other")

    print("digit")
    print("upper")
    print("lower")
    print("other")


    print("digit")
    print("lower")
    print("upper")
    print("other")

    print("digit")
    print("lower")
    print("upper")
    print("other")


    print("digit")
    print("upper")
    print("lower")
    print("other")

    print("digit")
    print("lower")
    print("upper")
    print("other")


    print("digit")
    print("lower")
    print("upper")
    print("other")






    print("digit")
    print("lower")
    print("upper")
    print("other")





    print("digit")
    print("lower")
    print("upper")
    print("other")






    print("digit")
    print("lower")
    print("upper")
    print("other")

    print("digit")
    print("lower")
    print("upper")
    print("other")

    print("digit")
    print("upper")
    print("lower")
    print("other")


    print("digit")
    print("lower")
    print("upper")
    print("other")

    print("digit")
    print("upper")
    print("lower")
    print("other")

    print("digit")
    print("lower")
    print("upper")
    print("other")







    print('digit')
    print('lower')
    print('upper')
    print('other')

    print("digit")
    print("lower")
    print("upper")
    print("other")

    print("digit")
    print("upper")
    print("lower")
    print("other")




    print("digit")
    print("upper")
    print("lower")
    print("other")

    print("digit")
    print("lower")
    print("upper")
    print("other")




     print('digit')
     print('lower')   
     print('upper')
      print('other')


    print("digit")
    print("lower")
    print("upper")
    print("other")


    print("digit")
    print("lower")
    print("upper")
    print("other")




    print("digit")
    print("upper")
    print("lower")
    print("other")

    print("digit")
    print("lower")
    print("upper")
    print("other")


     print("digit")
    print("lower")
    print("upper")
    print("other")

    print("digit")
    print("lower")
    print("upper")
    print("other")


    print("digit")
    print("lower")
    print("upper")
    print("other")


    print("lower")
    print("upper")
    print("digit")
    print("other")


    print("digit")
    print("lower")
    print("upper")
    print("other")

    print("digit")
    print("upper")
    print("lower")
     print("other")

    print("digit")
    print("upper")
    print("lower")
    print("other")

    print("digit")
    print("lower")
    print("upper")
    print("other")


     print('digit')
     print('lower')   
     print('upper')
      print('other')



    print('digit')
    print('lower')
    print('upper')
    print('other')

    print("digit")
    print("upper")
    print("lower")
    print("other")

    print('digit')
    print('lower')
    print('upper')
    print('other')
                






    print("digit")
    print("lower")
    print("upper")
    print("other")


    print("digit")
    print("lower")
    print("upper")
    print("other")


    print("digit")
    print("lower")
    print("upper")
    print("other")


    print("digit")
    print("lower")
    print("upper")
    print("other")

    print("digit")
    print("lower")
    print("upper")
    print("other")





















    print("digit")
    print("lower")
    print("upper")
    print("other")


    print("digit")
    print("lower")
    print("upper")
    print("other")

    print("digit")
    print("lower")
    print("upper")
    print("other")







    print("digit")
    print("lower")
    print("upper")
    print("other")



    print("digit")
    print("lower")
    print("upper")
    print("other")


    print("digit")
    print("lower")
    print("upper")
    print("other")


    print("digit")
    print("lower")
    print("upper")
    print("other")











    print("digit")
    print("lower")
    print("upper")
    print("other")


    print("digit")
    print("upper")
    print("lower")
    print("other")    

print(input())


print(S)


print(a)

print(s)

print(input_string)


print(a)

print(s)

print(s)

print(input())

print(s)

print(S)



print(input())

print(input())



print(input())








print(input())


print(input())


print(input())













print(input())

print(input())

print(a)

print(input())












print(input())


print(S)

print(s)

    

print(input())


print(input())


print(input())



print(a)


print(input())
















print(S)


print(a)







print(s)

print(s)


print(s)

print(input())

print(input())

print(s)

print(input())


print(input())


print(input())

print(input())


print(s)


print(input())

print(s)


print(input())

print(S)

print(input())


print(input())

print(input())

print(input())

print(input())







print(input())




print(input())


print(input())

print(input())

print(c)

print(input())

print(input())








print(a)

print(input())

print(input())





print(input())

print(input())




print(s)


print(input())

print(s)




print(s)

print(input())


print(input())


print(input())


print(input())

print(input())

print(input())

print(s)


print(input())


print(input())


print(input())

print(input())

print(str(input()))

print(input())








print(input())


print(input())

print(s)


print(input())

print(s)






















print(input())


print(input())

print(input())







print(input())


print(s)


print(input())


print(input())











print(S)




print(input())


print(input())

print(len(a))


print(len(S))


print(len(a))

print(len(s))

print(len(input_string))

print(len(s))

print(len(s))

print(len(input()))

print(len(s))

print(len(S) )

print(len(input()))

print(len(input()))



print(len(input()))








print(len(input()))


print(len(input()))


print(len(input()))














print(len(input()))


print(len(input()))

print(len(a))

print(len(s))



print(len(input()))













print(len(input()))



print(len(S))

print(len(s))

    

print(len(input()))


print(len(input()))

print(len(input()))


print(len(input()))









print(len(input()))

















print(len(S))


print(len (a))







print(len(input()))

print(len(s))


print(len(input()))

print(len(input()))

print(len(s))

print(len(input()))


print(len(input()))


print(len(input()))

print(len(s))


print(len(input()))

print(len(s))

print(len(input()))


print(len(S))

print(len(input()))



print(len(input_string))


print(len(input()))

print(len(input()))

print(len(input()))

print(len(input()))

print(len(s))

print(len(input()))


print(len(input()))

print(len(input()))

print(len(c))

print(len(input()))

print(len(input()))









print(len(a))

print(len(input()))

print(len(s))





print(len(input()))

print(len(input()))




print(len(s))


print(len(input()))

print(len(s))


print(len(s))

print(len(input()))

print(len(input()))


print(len(input()))


print(len(input()))

print(len(input()))


print(len(input()))

print(len(s))



print(len(input()))


print(len(input()))


print(len(input()))



print(len(a))

print(len(input()))

print(len(input()))

print(len(input()))









print(len(input()))


print(len(input()))

print(len(s))


print(len(input()))

print(len(s))























print(len(input()))



print(len(input()))



print(len(input()))




print(len(input()))


print(len(S))

print(len(s))


print(len(input()))











print(len(s))




print(len(input()))


print(len(input()))

print(len(input()))



    print(a[b])

    print(c)


print(*[c for c in a], sep='\n')

    print(c)

    print(char)

    print(c)


    print(a[i])

    print(c)



    print(ploblems[i])




print(*[c for c in input()], sep = '\n')

print(*input(), sep='\n')



print(*[c for c in input()], sep = '\n')


print(*[c for c in input()],sep='\n')

print(*input(), sep='\n')

    print(a[i])

print(*[c for c in input()], sep = '\n')














print(*[c for c in input()], sep = '\n')


    print(a[i])


    print(c)

    

print(*[c for c in input()], sep = '\n')


    print(problems[i])


    print(a[i])


print(*input(), sep='\n')


















    print(S[i])

    print(c)

    print(c)


    print(s[i])

    print(c)

print(*input(), sep='\n')

    print(s[i])

    print(c)

print(*input(), sep='\n')


    print(i)

    print(c)


print(*[c for c in input()], sep = '\n')

    print(c)
    

    print(a[i])


    print(S[i])

    print(c)




    print(char)


    print(c)


print(*[c for c in input()], sep = '\n')


print(*input(), sep='\n')



    print(c)


   print(c)

    print(c)






print(*[c for c in input()], sep = '\n')

print(*input(), sep='\n')

    print(c)

   print(c)


print(*[c for c in input()], sep = '\n')










    print(c)

    print(i)

    print(c)











    print(a[i])

print(*[c for c in input()], sep = '\n')





 print(c)


print(*[c for c in input()], sep = '\n')

    print(c)


    print(c)

    print(c)


print(*[c for c in input()], sep = '\n')


print(*input(), sep='\n')


print(*input(), sep='\n')


print(*[c for c in input()], sep = '\n')


    print(c)



print(*[c for c in input()], sep = '\n')


    print(c)



    print(b)

print(*[c for c in input()], sep ='\n')

    print(c)
    









print(*[c for c in input()], sep = '\n')


print(*[c for c in input()], sep = '\n')


    print(c)


    print(i)

  print(S[i])

    print(c)
























print(*[c for c in input()], sep = '\n')


print(*input(), sep='\n')

print(*[c for c in input()], sep = '\n')


print(*input(), sep='\n')




print(*[c for c in input()], sep = '\n')



    print(c)

    print(c)



print(*[c for c in input()], sep = '\n')












    print(c)






    print(i)


    print(c)

    print(c)


print(*[c for c in input()], sep = '\n')


print(*input(),sep='\n')

    print(c)


print(*[c for c in a], sep='\n')


    print(a[i])


    print(c)

























    print(a[i])

    print(num + 1)
    print(S)

    print(int(s) + 1)
    print(s)

    print(int(s)+1)
    print(s)

print(result)

    print(int(S) + 1)
    print(S)


    print(int(s) + 1)
    print(s)

print(s)



    print(int(S)+1)
    print(S)


    print(S)
    print(int(S)+1)

print(int(s) + 1 if s.isdigit() else s)

    print(int(s) + 1)
    print(s)


print(int(s) + 1 if s.isdigit() else s)


print(int(s)+1 if s.isdigit() else s)

    print(int(s) + 1)
    print(s)

print(int(s) + 1 if s.isdigit() else s)















print(int(s) + 1 if s.isdigit() else s)


    print(int(s) + 1)
    print(s)


    print(int(s) + 1)
    print(s)
    

print(int(s) + 1 if s.isdigit() else s)


    print(int(s)+1)
    print(s)


    print(int(s) + 1)
    print(s)


print(int(s) + 1 if s.isdigit() else s)



















    print(S)
    print(int(S)+1)      

print(s)

print(s)


print(S)



    print(int(s) + 1)
    print(s)


    print(int(s) + 1)
    print(s)

    print(int(a)+1)
    print(a)

print(int(s) + 1 if s.isdigit() else s)


    print(int(s)+1)
    print(s)

print(s)


print(int(s) + 1 if s.isdigit() else s)

print(s)
   

    print(int(s) + 1)
    print(s)


    print(S+1)
    print(S)

print(int(s) + 1 if s.isdigit() else s)






print(result)

print(s)



print(int(s) + 1 if s.isdigit() else s)



print(int(s) + 1 if s.isdigit() else s)


print(s)



print(int(s) + 1 if s.isdigit() else s)






print(int(s) + 1 if s.isdigit() else s)

    print(int(s) + 1)
    print(s)

    print(int(S) + 1)
    print(S)



print(s)


print(int(a)+1 if a.isdigit() else a)

print(int(s) + 1 if s.isdigit() else s)











    print(int(s) + 1)
    print(s)

    print(int(a)+1)
    print(a)

    print(int(s) + 1)
    print(s)












    print(int(s) + 1)
    print(s)

print(int(s) + 1 if s.isdigit() else s)






print(s)


print(int(s) + 1 if s.isdigit() else s)

print(s)


    print(int(s) + 1)
    print(s)

print(S)


print(int(s) + 1 if s.isdigit() else s)


    print(int(s) + 1)
    print(s)


print(int(s) + 1 if s.isdigit() else s)



print(int(s) + 1 if s.isdigit() else s)


    print(int(s)+1)
    print(s)


print(int(s) + 1 if s.isdigit() else s)


print(int(s) + 1 if s.isdigit() else s)



    print(int(a)+1)
    print(a)

print(int(s)+1 if s.isdigit() else s)

print(s)
    










print(int(s) + 1 if s.isdigit() else s)


print(int(s) + 1 if s.isdigit() else s)


print(s)


    print(int(a)+1)
    print(a)

    print(int(s)+1)
print(s)

























print(int(s) + 1 if s.isdigit() else s)


    print(int(s) + 1)
    print(s)


print(int(s) + 1 if s.isdigit() else s)



    print(int(s) + 1)
    print(s)



print(int(s) + 1 if s.isdigit() else s)



    print(int(s)+1)
    print(s)


    print(int(s) + 1)
    print(s)


print(int(s) + 1 if s.isdigit() else s)













    print(int(s)+1)
    print(s)






    print(int(s) + 1)
    print(s)


    print(int(n)+1)
    print(n)


print(int(s) + 1 if s.isdigit() else s)


print(int(s)+1 if s.isdigit() else s)

print(int(s) + 1 if s.isdigit() else s)

print(s)


    print(int(s)+1)
    print(s)


    print(int(s) + 1)
    print(s)

























    print(int(s) + 1)
    print(s)

    print(int(s) + 1)
    print(s)

    print(int(S) + 1)
    print(S)



        print(i)

    print(a[b])

    print(s)


print(*S, sep='\n')

    print(s)

print(*input().rstrip().split(), sep='\n')

    print(s)


    print(s[i])

    print(s)



    print(y[i])


    print(T[i])

    


    print(tokens[i])


print(*[s for s in input().split()], sep = '\n')

print(*input().rstrip().split(), sep='\n')


print(*[s for s in input().split()], sep = '\n')


print(*input().rstrip().split(), sep='\n')


    print(s)















print(*input().rstrip().split(),sep='\n')

print(*input().rstrip().split(), sep='\n')

print(*[s for s in input().split()], sep = '\n')
















print(*[s for s in input().split()], sep = '\n')



    print(word)



    print(s)
    

print(*[s for s in input().split()], sep = '\n')


    print(tokens[i])


print(*[s for s in input().split()], sep = '\n')


    print(s)


print(*[s for s in input().split()], sep = '\n')



print(*[s for s in input().split()], sep = '\n')





















    print(tokens[i])


    print(s[c])

    print(word)







    print(s[i])

    print(s)


print(*a,sep="\n")

    print(S[c])



    print(i)

    print(s[i])

    print(s)

print(*[s for s in input().split()], sep = '\n')


    print(s)


print(*[s for s in input().split()], sep = '\n')

    print(s)
    

    print(s[i])


    print(D[i])

    print(s)












    print(s[i])


    print(s)



    print(s)




print(*input().rstrip().split(), sep='\n')


    print(s)




print(*[s for s in input().split()], sep = '\n')

    print(a[i])

print(*input().rstrip().split(), sep='\n')

  print(s[c])


    print(s)



    print(s[c])


print(*[s for s in input().split()], sep = '\n')












    print(s[i])

    print(i)

    print(s[i])

print(*[s for s in input().split()], sep = '\n')







    print(word)













    print(s)


    print(s)



    print(s)


print(*[s for s in input().split()], sep = '\n')


print(*input().rstrip().split(), sep='\n')


print(*input().rstrip().split(), sep='\n')




print(*[s for s in input().split()], sep = '\n')


    print(s)

    print(s)


print(*[s for s in input().split()], sep = '\n')


print(*input().rstrip().split(), sep='\n')


    print(s)



print(* [s for s in input().split()], sep='\n')

    print(s)
    











    print(b)

print(*[s for s in input().split()], sep = '\n')


print(*[s for s in input().split()], sep = '\n')


    print(s)

        print(i)

    print(s)


























print(*[s for s in input().split()], sep = '\n')


print(*input().rstrip().split(), sep='\n')

print(*[s for s in input().split()], sep = '\n')

  print(a[i])

print(*input().rstrip().split(), sep='\n')



print(*[s for s in input().split()], sep = '\n')


    print(s)


    print(s)




print(*[s for s in input().split()], sep = '\n')













    print(i)


    print(s)



    print(tokens[i])


print(*[s for s in input().split()], sep = '\n')


    print(a[b])

    print(str_list[-i - 1])


print(*S[::-1], sep='\n')

    print(s)

print(*[i for i in input().rstrip().split()[::-1]], sep='\n')


    print(s)


    print(s[i])

    print(s)



    print(y[z-i])
    print(T[len(T)-1-i])

    


    print(str[i-1])


print(*reversed(input().split()), sep = '\n')

print(*[i for i in input().rstrip().split()[::-1]], sep='\n')



print(*reversed(input().split()), sep = '\n')


    print(s)
















print(*[i for i in input().rstrip().split()[::-1]], sep='\n')




print(*reversed(input().split()),sep='\n')

print(*[i for i in input().rstrip().split()[::-1]], sep='\n')

print(*reversed(input().split()), sep = '\n')

















print(*reversed(input().split()), sep = '\n')



    print(word)



    print(s)
    

print(*reversed(input().split()), sep = '\n')


    print(t[int(len(t))-1-int(i)])


print(*reversed(input().split()), sep = '\n')



    print(s[i])


    print(t[int(len(t))-1-int(i)])



print(*reversed(input().split()), sep = '\n')




















    print(tokens[i])


    print(word)




    print(s)

    print(s)


    print(a[s-(i+1)],sep='\n')

    print(s)




    print(i)

    print(i)

    print(s)

print(*reversed(input().split()), sep = '\n')


    print(i)

    print(s)


print(*reversed(input().split()), sep = '\n')

    print(s)
 

    print(a[b])


    print(D[i])

    print(s[i])












print(*[i for i in input().rstrip().split()[::-1]], sep='\n')




    print(s)



    print(s[i])





print(*reversed(input().split()), sep = '\n')


    print(s)


print(*reversed(input().split()), sep = '\n')


print(*[i for i in input().rstrip().split()[::-1]], sep='\n')

    print(s)


    print(s)



    print(s)



print(*reversed(input().split()), sep = '\n')












    print(s[i])

    print(i)

print(*reversed(input().split()), sep = '\n')








    print(s[i])

    print(s)

















    print(s)


    print(s)


    print(s)


print(*reversed(input().split()), sep = '\n')


print(*[i for i in input().rstrip().split()[::-1]], sep='\n')


    print(s)





print(*reversed(input().split()), sep = '\n')


    print(s)



    print(s)


print(*reversed(input().split()), sep = '\n')


print(*[i for i in input().rstrip().split()[::-1]], sep='\n')




print(*[i for i in input().rstrip().split()[::-1]], sep='\n')


print(*reversed( input().split()), sep='\n')

    print(s)
    












    print(c)

print(*reversed(input().split()), sep = '\n')


print(*reversed(input().split()), sep = '\n')


    print(s)

        print(i)
        


    print(s)



























print(*reversed(input().split()), sep = '\n')



print(*S[::-1], sep='\n')

print(*reversed(input().split()), sep = '\n')

  print(a[i])
print(*[i for i in input().rstrip().split()[::-1]], sep='\n')



    print(s)


print(*reversed(input().split()), sep = '\n')


    print(s)




print(*reversed(input().split()), sep = '\n')














    print(i)
    

    print(s)



    print(i)


    print(s)


print(*reversed(input().split()), sep = '\n')


    print(tokens[i-1-j])
            print(c[d])
            print(c[d], end = " ")

    print(*words)

    print(*input().split())

    print(" ".join(s))

    print(*input().split())

    print(*input().split())


    print(*a)

        print(y[j], end = '')
    print()


            print(S[a])

            print(S[a],end=" ")







    


    print(*input().split())

    print(*input().split())


    print(*input().split())

















    print(*input().split())

    print(s)

    print(*input().split())


















    print(*input().split())


        print(s[j], end="")
            print(" ", end="")
    print()

    print(s)
    

    print(*input().split())


    print(*input().split())




    print(s)


    print(*input().split())



    print(*input().split())




















    print(*a)

    print(' '.join(words))





            print(c[d])
            print(c[d], end = " ")

    print(s)


    print(*A)

    print(*input().split())

    print(*a)

    print(n)



    print(result)


    print(s)


    print(*input().split())

    print(s)


            print(c[d])
            print(c[d], end = " ")


    print(s)

    print(s)












    print(*a)



    print(s)



    print(*input().split())





    print(*input().split())



    print(*input().split())


    print(*input().split())

    print(s)



  print(*a)


    print(*input().split())



















    print(" ".join(s))

    print(*a)

            print(j,end="")
            print(" ",end="")
            print("")

    print(*input().split())









    print(s)




















    print(*a)

    print(s)



    print(*input().split())


    print(" ".join(s))






    print(*input().split())



    print(*input().split())



    print(" ".join(s))


    print(*input().split())


    print(*input().split())

    print(*input().split())
    













    print(*c)

    print(*input().split())


    print(*input().split())


    print(s)

    print(s)




























    print(*input().split())


    print(*a)

    print(*input().split())

        print(c[0],end="")
                print(" ",end="")
                print(c[i2],end="")
    print("")
            
    

    print(*input().split())


    print(" ".join(s))


    print(*input().split())


    print(*input().split())















    print(" ".join(input().split()))
    

    print(*a)


  print(*input().split())

    print(*input().split())



    print(*input().split())


    print(" ".join(s))


    print(*input().split())


    print(" ".join(s))


    print(*input().split())






























            print(c[d])
            print(c[d], end = " ")

    print(*reversed(words))

    print(*a[::-1])

    print(" ".join(reversed(s)))

    print(*a[::-1])



            print(a[i],end = "")
            print(a[i],end = " ")
    print()

        print(y[len(y)-1-j],end=" ")
    print(y[0])

            print(S[a-1])
            print(S[a-1],end=" ")







    


    print(*reversed(input().split()))

    print(*reversed(input().split()))


    print(*reversed(input().split()))



















    print(*reversed(input().split()))

    print(*reversed(input().split()))

    print(*reversed(input().split()))



















    print(*reversed(input().split()))


    print(" ".join(reversed(s)))

    print(s)
    

    print(*reversed(input().split()))


    print(*reversed(input().split()))



            print(a[i],end = "")
            print(a[i],end = " ")
    print()


    print(*reversed(input().split()))


    print(*reversed(input().split()))




















    print(*a)

    print(" ".join(reversed(s)))




    print(s)

    print(s)


            print(a[i],end = "")
            print(a[i],end = " ")
    print()



    print(' '.join(reversed(words)))


            print(a[i],end = "")
            print(a[i],end = " ")
    print()

    print(n)



    print(s)


    print(*reversed(input().split()))

    print(s)


            print(c[d])
            print(c[d], end = " ")

    print(s)

    print(n)












            print(a[i],end = "")
            print(a[i],end = " ")
    print()


    print(s)




            print(a[i],end = "")
            print(a[i],end = " ")
    print()





    print(*reversed(input().split()))


    print(s)




    print(*reversed(input().split()))


    print(*a)

    print(s)



  print(s)


            print(a[i],end = "")
            print(a[i],end = " ")
    print()



    print(" ".join(reversed(s)))

            print(a[i],end = "")
            print(a[i],end = " ")
    print()

            print(j,end="")
            print(" ",end="")
            print("")

    print(*reversed(input().split()))










    print(s)
    





















            print(a[i],end = "")
            print(a[i],end = " ")
    print()


        print(" ".join(reversed(s)))

    print(s)

    print(*a[::-1])

    print(*a[::-1])







    print(*reversed(input().split()))

    print(" ".join(reversed(s)))


    print(*reversed(input().split()))


  print(s)



    print(*reversed(input().split()))

    print(*reversed(input().split()))
    














    print(*c[::-1])


    print(*reversed(input().split()))


    print(*reversed(input().split()))


    print(s)

    print(*reversed(input().split()))


            print(a[i],end = "")
            print(a[i],end = " ")
    print()


    print(*reversed(input().split()))

        print(c[0],end="")
                print(" ",end="")
                print(c[i2],end="")
    print("")
            
    

    print(*reversed(input().split()))


    print(" ".join(reversed(s)))



    print(*s)


    print(*a)



  print(*reversed(input().split()))

    print(*reversed(input().split()))



    print(" ".join(reversed(s)))


    print(*reversed(input().split()))


    print(*a[::-1])


    print(' '.join(reversed(words)))



    print(" ".join(reversed(s)))































            print(a[i],end = "")
            print(a[i],end = " ")
    print()

    print(*reversed(input().split()))



    print(a[b]+1)

    print(num + 1)

    print(a+1)

    print(i+1)

    print(a+1)



    print(a[i] + 1)

    print(int(y[i])+1)

   print(int(T[i])+1)







    


print(*[int(num) + 1 for num in input().split()], sep = '\n')

    print(i + 1)


print(*[int(num) + 1 for num in input().split()], sep = '\n')



    print(i+1)




















    print(i + 1)


    print(i+1)

    print(a+1)

print(*[int(num) + 1 for num in input().split()], sep = '\n')




















print(*[int(num) + 1 for num in input().split()], sep = '\n')


    print(number + 1)


    print(i+1)
    

print(*[int(num) + 1 for num in input().split()], sep = '\n')


print(*[int(num) + 1 for num in input().split()], sep = '\n')


    print(i+1)


    print(col)

         


print(*[int(num) + 1 for num in input().split()], sep = '\n')





















    print(N[i]+1)

    print(number + 1)





    print(x + 1)

    print(x + 1)


    print(x+1)



    print(i+1)

    print(a[i] + 1)

    print(a+1)

print(*[int(num) + 1 for num in input().split()], sep = '\n')


    print(x + 1)


print(*[int(num) + 1 for num in input().split()], sep = '\n')

    print(x + 1)


    print(a[b]+1)


    print(a+1)

    print(col)












    print(a[i] + 1)



    print(x + 1)



    print(a[i] + 1)






    print(a+1)


    print(x + 1)


    print(i + 1)


    print(i + 1)

    print(x + 1)



  print(i+1)

    print(a[i] + 1)


    print(i+1)

    print(number + 1)













    print(i+1)

    print(i+1)

print(*[int(num) + 1 for num in input().split()], sep = '\n')










    print(number + 1)


































    print(a[i] + 1)






    print(A+1)

    print(x + 1)


    print(x + 1)

print(*[int(num) + 1 for num in input().split()], sep = '\n')


    print(i + 1)


    print(i + 1)








print(*[int(num) + 1 for num in input().split()], sep = '\n')


    print(int(i) + 1)



    print(i+1)


print(*[int(num) + 1 for num in input().split()], sep = '\n')


    print(i + 1)


print(*[int(num) + 1 for num in input().split()], sep = '\n')



print(*[int(num)+1 for num in input().split()],sep='\n')

    print(i+1)
    















    print(c+1)


print(*[int(num) + 1 for num in input().split()], sep = '\n')


print(*[int(num) + 1 for num in input().split()], sep = '\n')

    print(x + 1)

print(*[int(num) + 1 for num in input().split()], sep = '\n')


    print(i+1)


print(*[int(num) + 1 for num in input().split()], sep = '\n')

  print(a[i]+1)


    print(int(i)+1)           
    

print(*[int(num) + 1 for num in input().split()], sep = '\n')


print(*[int(num) + 1 for num in input().split()], sep = '\n')


    print(a+1)



    print(i+1)


print(*[int(num) + 1 for num in input().split()], sep = '\n')
















    print(i + 1)



    print(i + 1)



    print(i+1)

print(*[int(num) + 1 for num in input().split()], sep = '\n')


    print(number + 1)


    print(a[i] + 1)

    print(i+1)


    print(number + 1)

































    print(i + 1)

    print(i + 1)



print(*[int(num) + 1 for num in input().split()], sep = '\n')


print(*[int(num) + 1 for num in input().split()], sep = '\n')








    print(i+1)


            print(c[d] + b + 1)
            print(c[d] + b + 1, end = " ")

            print(num + i + 1)
            print(num + i + 1, end=" ")

    print(*A)
    

    print(" ".join(map(lambda x: str(x+i+1), s)))

        print(a[j] + i + 1, end = "")
    print()

        print(a[j] + i + 1,end = " ")
    print()

        print(int(y[j])+k,end=' ')
    print()
    print(*[v + _ + 1 for v in list(map(int, input().split()))])

    print(*[i + j + 1 for j in list(map(int, input().split()))])


    print(*[v + _ + 1 for v in list(map(int, input().split()))])



    print(*A)
    





















    print(*[i + j + 1 for j in list(map(int, input().split()))])


    print(*[i + j + 1 for j in list(map(int,input().split()))])

    print(" ".join(map(lambda x: str(x+i+1), s)))


    print(*[v + _ + 1 for v in list(map(int, input().split()))])





















    print(*[v + _ + 1 for v in list(map(int, input().split()))])


        print(a[j] + i + 1, end = "")
    print()


    print(" ".join(map(lambda x: str(x+i+1), s)))
    

    print(*[v + _ + 1 for v in list(map(int, input().split()))])


    print(*[v + _ + 1 for v in list(map(int, input().split()))])


        print(a[j] + i + 1,end = " ")
    print()



    print(*[i + j + 1 for j in list(map(int,input().split()))])
  


    print(*[v + _ + 1 for v in list(map(int, input().split()))])





















         print(int(a[j])+i+1,end="")
         print()

    print(*A)
    




        print(a[j] + i + 1,end = " ")
    print()

            print("",end="")
        print(A[j]+i+1,end="")
        print()    

        print(j+i+1, end=" ")
    print()

        print(a[j] + i + 1,end = " ")
    print()

        print(a[s] + i + 1,end = " ")
    print()

    print(*[i + j + 1 for j in list(map(int, input().split()))])


        print(a[j] + i + 1, end = "")
    print()


    print(*[v + _ + 1 for v in list(map(int, input().split()))])

        print(a[j] + i + 1, end = "")
    print()


            print(c[d] + b + 1)
            print(c[d] + b + 1, end = " ")


    print(t)

        print(a[j] + i + 1, end = "")
    print()














        print(a[j] + i + 1,end = " ")
    print()



        print(a[j] + i + 1, end = "")
    print()



        print(a[j] + i + 1,end = " ")
    print()






    print(*a)



        print(a[j] + i + 1, end = "")
    print()



    print(*[i + j + 1 for j in list(map(int, input().split()))])



    print(*[i + j + 1 for j in list(map(int, input().split()))])

    print(*[v + _ + 1 for v in list(map(int, input().split()))])

        print(a[j] + i + 1, end = "")
    print()



        print(a[j-1] + i + 1, end=" ")
    print()


        print(a[s] + i + 1,end = " ")
    print()


        print(a[b]+i+1,end="")
    print()

    print(*a)















        print(a[j] + i + 1,end = " ")
    print()

            print(i+j+1,end=" ")
            print("")

    print(*[v + _ + 1 for v in list(map(int, input().split()))])









        print(a[j] + i + 1,end = " ")
    print()


        print(a[j] + i + 1,end = " ")
    print()






































    print(*[i + j + 1 for j in list(map(int, input().split()))])


        print(a[j] + i + 1, end = "")
    print()



    print(*A)

        print(a[j] + i + 1, end = "")
    print()


    print(*[v + _ + 1 for v in list(map(int, input().split()))])


    print(*[i + j + 1 for j in list(map(int, input().split()))])


    print(*a)










    print(*[v + _ + 1 for v in list(map(int, input().split()))])


        print(int(a[j]) + i + 1, end=" ")
    print()




    print(" ".join(map(lambda x: str(x+i+1), s)))


    print(*[v + _ + 1 for v in list(map(int, input().split()))])


    print(*[v + _ + 1 for v in list(map(int, input().split()))])


    print(*[i + j + 1 for j in list(map(int, input().split()))])



    print(*[v+_+1 for v in list (map(int,input().split()))])

        print(a[j]+i+1,end="")
    print()
        
















        print(c[d] + b + 1 ,end="")
    print()



    print(*[v + _ + 1 for v in list(map(int, input().split()))])


    print(*[v + _ + 1 for v in list(map(int, input().split()))])

    print(*[v + _ + 1 for v in list(map(int, input().split()))])


        print(a[j] + i + 1,end = " ")
    print()

    print(*[v + _ + 1 for v in list(map(int, input().split()))])

    print(*[i + j + 1 for j in list(map(int, input().split()))])

        print(int(i)+i2+1,end=" ")
    print("")
    

    print(*[i + j + 1 for j in list(map(int, input().split()))])


    print(*[v + _ + 1 for v in list(map(int, input().split()))])


    print(*A)
    



    print(" ".join(map(lambda x: str(x+i+1), s)))


    print(*[v + _ + 1 for v in list(map(int, input().split()))])
















        print(a[j] + i + 1,end = " ")
    print()



    print(*[(i + c + 1) for i in map(int,input().split())])


    print(*a)



    print(" ".join(map(lambda x: str(x+i+1), s)))


    print(*[v + _ + 1 for v in list(map(int, input().split()))])


    print(" ".join(map(lambda x: str(x+i+1), s)))
    


    print(*A)
    


        print(a[j] + i + 1, end = "")
    print()
































    print(*[(i + c + 1) for i in map(int,input().split())])


    print(*[i + j + 1 for j in list(map(int, input().split()))])


        print(a[j-1] + i + 1, end=" ")
    print()


    print(*[v + _ + 1 for v in list(map(int, input().split()))])






         print(a[j]+i+1,end=" ")
    print()


    print(*[v + _ + 1 for v in list(map(int, input().split()))])

        print(a[j] + i + 1, end = "")
    print()

print(a[x][y])

print(c[e][f])


print(nums_list[i][j])


print(A[i][j])

print(a[i][j])


print(A[i][j])

print(a[x][y])

print(puzzle[i][j])

print(a[i][j])

print(a[x][y])

print(a[x][y])


print(a[x][y])





















print(A[int(i)][int(j)])

print(A[i][j])


print(a[x][y])


print(a[x][y])

print(a[x][y])


print(A[i][j])

print(a[x][y])



print(a[i][j])

print(a[i][j])


print(a[x][y])


print(a[x][y])

print(c[i][j])

print(A[int(i)][int(j)])



print(A[i][j])


print(a[i][j])


print(a[i][j])


print(a[i][j])

print(a[x][y])

print(a[x][y])


print(A[y][x])


print(A[y][x])



print(a[x][y])


print(A[y][x])    

print(A[y][x])


print(A[i][j])


print(A[y][x])

print(A[y][x])

print(a[x][y])


print(A[y][x])

print(A[y][x])


print(a[i][j])

print(A[y][x])

print(c[d][e])

print(a[x][y])


print(a[x][y])


print(a[i][j])


print(a[x][y])


print(a[x][y])


print(a[i][j])


print(a[x][y])

print(A[y][x])

print(A[y][x])

print(A[y][x])

print(a[i][j])



print(A[y][x])


print(A[i][j])


print(A[Y][X])

print(A[y][x])


print(A[y][x])

print(A[y][x])

print(A[y][x])

print(A[y][x])

print(A[y][x])

print(a[i][j])


print(a[x][y])


print(a[y][x])

print(a[i][j])

print(A[y][x])    


print(a[x][y])


print(a[x][y])


print(a[x][y])

print(a[x][y])




print(A[y][x])

print(A[y][x]) 

print(A[y][x])

print(a[i][j])

print(A[y][x])


print(A[i][j])

print(A[y][x])

print(A[y][x])

print(a[int(i)][int(j)])

print(a[i][j])

print(a[i][j])

print(A[y][x])

print(A[y][x])

print(a[int(i)][int(j)])


print(b[int(d[0])][int(d[1])])

print(a[x][y])


print(a[int(i)][int(j)])

print(a[x][y])


print(a[x][y])




print(a[i][j])


print(a[x][y])


print(a[i][j])


print(A[y][x])

print(a[i][j])


    print(*a[i][j1:j2 + 1])

        print(c[i+e][j+f])

        print(nums_list[i][j], end=" ")


    print()


    print(" ".join(map(str, s[j1:j2+1])))

    print(" ".join(map(str, s[j1:j2+1])))

        print(a[i][j],end = " ")
    print()

        print(puzzle[p][q])

    print(*a[i][j1:j2 +1])

    print(*a[i][j1:j2 + 1])


        print(A[i][j], end = " ")
    print()

    print(*a[i][j1:j2 + 1])


    print(*a[i][j1:j2 + 1])


    print(" ".join(map(str, s[j1:j2+1])))

    print(*a[i][j1:j2 + 1])

    print(*a[i][j1:j2 + 1])


    print(*a[i][j1:j2 + 1])

    print(*a[i][j1:j2 + 1])

        print(a[i][j], end=" ")
    print()


    print(*a[i][j1:j2 + 1])
    

    print(*A[i][j1:j2+1])



    print(" ".join(map(str, s[j1:j2+1])))


        print(A[i][j], end=' ')
    print()



    print(*a[i][j1:j2 + 1])

    print(*a[i][j1:j2 + 1])



    print(*a[i][j1:j2 + 1])


    print(*a[i][j1:j2 + 1])

    print(*a[i][j1:j2 + 1])

    print(*a[i][j1:j2 + 1])

    print(*a[i][j1:j2+1])

    print(*a[i][j1:j2 + 1])   

    print(*a[i][j1:j2 + 1])


    print(*a[i][j1:j2 + 1])


    print(*a[i][j1:j2 + 1])


    print(" ".join(map(str, s[j1:j2+1])))



    print(*a[i][j1:j2 + 1])

    print(*a[i][j1:j2 + 1])


    print(" ".join(map(str, s[j1:j2+1])))    


    print(*a[i][j1:j2 + 1])


    print(*a[i][j1:j2 + 1])

    print(*a[i][j1:j2 + 1])


    print(*A[i][j1:j2 + 1])


    print(*a[i][j1:j2 + 1])


    print(*a[i][j1:j2 + 1])




    print(*a[i][j1:j2 + 1])

    print(" ".join(map(str, s[j1:j2+1])))


    print(" ".join(map(str, s[j1:j2+1])))

    print(*a[i][j1:j2 + 1])


    print(*a[i][j1:j2+1])


        print(a[i][j], end=" ")
    print()

        print(b[i][i2],end=" ")
    print("")

    print(*a[i][j1:j2 + 1])



    print(" ".join(map(str, s[j1:j2+1])))





    print(" ".join(map(str, s[j1:j2+1])))


        print(b[i][i2],end=" ")
    print("")


    print(*a[i][j1:j2 + 1])


    print(" ".join(map(str, s[j1:j2+1])))

    print(*a[i][j1:j2 + 1])


        print(A[i][j], end=' ')
    print()

    print(*a[i][j1:j2 + 1])



    print(" ".join(map(str, s[j1:j2+1])))


    print(*a[i][j1:j2 + 1])



        print(a[i][j], end=" ")
    print()

    print(*a[i][j1:j2 + 1])

        print(A[i][j],end=" ")
    print()


    print(*a[i][j1:j2 + 1])

    print(*a[i][j1:j2 + 1])


        print(a[i][j], end=" ")
    print()


    print(*a[i][j1:j2 + 1])


    print(*a[i][j1:j2 + 1])



        print(a[i][j],end=" ")
    print()


        print(A[i][j],end=' ')
    print()

    print(*A[i][j1:j2+1])




    print(*a[i][y1:y2 + 1])

    print(*a[i][j1:j2 + 1])



        print(a[i][j],end = " ")
    print()


        print(A[i][j], end=" ")
print()

        print(A[i][j], end=' ')
    print()

   


    print(" ".join(map(str, s[j1:j2+1])))


    print(*a[i][j1:j2 + 1])


    print(*a[i][j1:j2 + 1])


    print(*a[i][j1:j2 + 1])


    print(*a[i][j1:j2 + 1])


    print(*a[i][j1:j2 + 1])



    print(*a[i][j1:j2 + 1])


    print(*a[i][j1:j2 + 1])

































        print(a[i][j], end=" ")
    print()

        print(puzzle[p][q])


    print(" ".join(map(str, s[j1:j2+1])))








        print(a[i][j],end = " ")
    print()


        print(a[i][j], end=" ")
    print()


    print(" ".join(map(str, s[j1:j2+1])))

        print(a[i][j],end = " ")
    print()



  

    print(" ".join(map(str, s[j1:j2+1])))

    print(*a[i][j1:j2+1])

    print(*a[i][j1:j2 + 1])


        print(A[i][j], end=' ')
    print()



        print(a[i][j], end=" ")
    print()


        print(grid[i][j])

    print(*i)

            print(d[e][f])
            print(d[e][f], end = " ")

        print(num, end=" ")


    print()

    print(" ".join(map(str, s)))

        print(a[i][j],end = " ")
    print()

        print(a[i][j])

    print(*i)

    print(*i)


    print(*row)


        print(a[i][j], end = "")
    print()


    print(*i)


    print(*i)

    print(*i)


    print(*i)

        print(a[i][j],end = " ")
    print()



    print(*i)


    print(*i)


    print(*i)

    print(*i)


    print(" ".join(map(str,s)))


        print(a[i][j], end = "")
    print()


    print(*i)

    print(*i)


    print(*i)


    print(*i)


    print(*i)

        print(a[i][j],end = " ")
    print()




    print(*i)


        print(a[i][j], end=" ")
    print()    


        print(a[i][j], end = "")
    print()



    print(*i)

    print(*i)


    print(*i)


    print(*i)


    print(*i)


    print(*i)







    print(*i)



    print(*i)



        print(a[i][j], end = "")
    print()

    print(*i)


    print(*i)





        print(A[i][j],end=' ')
print()

    print(*i)


        print(a[i][j], end=" ")
    print()

    print(*i)












        print(a[i][j], end = "")
    print()





    print(*i)


    print(*i)


    print(*i)


    print(*i)


    print(*i)


        print(a[i][j], end = "")
    print()




    print(*i)




        print(a[i][j], end = "")
    print()



        print(a[i][j],end = " ")
    print()

    print(*i)






        print(a[i][j], end=" ")
    print()




        print(A[i][j], end='')
    print()


    print(*i)


    print(*i)


        print(a[i][j], end = "")
    print()






        print(a[i][j],end = " ")
    print()


    print(*i)

    print(*i)

    print(*i)

    print(*i)




        print(a[i][j], end = "")
    print()







    print(*i)

        print(b[i][i2],end=" ")
    print("")


    print(*i)


        print(a[i][j],end = " ")
    print()

    print(" ".join(map(str, s)))


        print(a[i][j], end = "")
    print()



    print(*i)

        print(a[i][j], end = "")
    print()


    print(*i)

        print(a[i][j], end = "")
    print()



    print(*i)


        print(A[i][j],end='')
    print()

    print(*i)




        print(a[i][j],end = " ")
    print()


    print(*i)


    print(*row)




        print(v[c],end=" ")
    print("")

    print(" ".join(map(str, s)))


    print(*i)


        print(a[i][j], end = "")
    print()

    


    print(*i)


    print(*i)


    print(*i)




    print(*i)


    print(*i)

    print(*i)


    print(*row)


        print(a[i][j], end = "")
    print()

































        print(a[i][j], end=" ")
    print()


        print(a[i][j], end = "")
    print()


    print(*i)



        print(num, end=" ")


    print()

    print(" ".join(map(str, s)))

        print(a[i][j],end = " ")
    print()

        print(a[i][j],end=" ")
    print()

    print(*i)

    print(*i)

    print(*row)

    print(*i)



    print(" ".join(map(str, s)))

    print(*i)


    print(*i)

    print(*i)


    print(*i)



    print(*i)


    print(*i)

    print(*i)

        print(a[i][j],end=" ")
    print()    


    print(*i)


    print(*i)

    print(*i)


    print(*i)




    print(*i)

        print(a[i][j],end = " ")
    print()

    print(*i)




    print(*i)


    print(*i)



    print(*i)


    print(*i)


    print(*i)

    print(*i)


    print(" ".join(map(str,s)))


    


    print(*i)

        print(b[i][i2],end=" ")
    print("")


    print(*i)


        print(a[i][j], end=" ")
    print()

    print(*i)

    print(*i)


    print(*i)





        print(num, end=" ")


    print()
























        print(a[i][j],end = " ")
    print()

    print(*i)


        print(a[i][j],end = " ")
    print()



        print(v[c],end=" ")
    print("")

    print(" ".join(map(str, s)))


    print(*i)


    print(*row)



    print(*i)

    


    print(" ".join(map(str, s)))

    print(*i)


    print(*i)


    print(*i)





        print(num, end=" ")


    print()


    print(*i)



    print(*i)




        print(a[i][j],end = " ")
    print()



    print(*i)


    print(" ".join(map(str, s)))

    print(*row)



    print(*i)


    print(" ".join(map(str, s)))


    print(*i)



        print(grid[i][j], end=" ")
    print()

    print(" ".join(map(str, s)))


    print()

    print(*i)    

    print(*a[i])



    print(*i)

    print(*i)





    print(*i)


    print(*i)


            print(d[e][f])
            print(d[e][f], end = " ")

        print(a[i][j], end = "")
    print()





        print(a[i][j], end = "")
    print()


        print(a[i][j], end = "")
    print()


        print(a[i][j], end = "")
    print()


        print(a[i][j], end = "")
    print()


        print(a[i][j], end = "")
    print()


        print(a[i][j], end = "")
    print()


        print(a[i][j], end = "")
    print()


        print(a[i][j], end = "")
    print()


        print(a[i][j], end = "")
    print()


        print(a[i][j], end = "")
    print()
































        print(a[i][j], end = "")
    print()


        print(a[i][j], end = "")
    print()


        print(A[i][j],end=" ")
    print()

    print(*row)


        print(a[i][j], end=" ")
    print()

        print(A[i][j],end=" ")
    print()

        print(a[i][j], end = "")
    print()

    print(xyz[x][y][z])

    print(xyz[x][y][z])


    print(xyz[x][y][z])

    print(xyz[x][y][z])



    print(xyz[x][y][z])



    print(zahyo[l][m][o])





















    print(xyz[x][y][z])

    print(xyz[x][y][z])


    print(zahyo[l][m][o])


    print(zahyo[l][m][o])


        print(1)
        print(0)


        print(1)
        print(0)


    print(A[int(j2)][int(k2)][int(l2)])

    print(int(d[tuple(map(int, input().split()))]))

    print(zahyo[l][m][o])

        print(1)
        print(0)

    print(int(d[tuple(map(int, input().split()))]))

    print(int(d[tuple(map(int, input().split()))]))


    print(int(d[tuple(map(int, input().split()))]))




    print(int(d[tuple(map(int, input().split()))]))


    print(int(d[tuple(map(int,input().split()))]))    

    print(int(d[tuple(map(int, input().split()))]))


    print(int(d[tuple(map(int, input().split()))]))



    print(int(d[tuple(map(int, input().split()))]))

    print(int(d[tuple(map(int, input().split()))]))


        print(1)
        print(0)    


    print(int(d[tuple(map(int, input().split()))]))



    print(xyz[x][y][z])



    print(int(d[tuple(map(int, input().split()))]))


    print(int(d[tuple(map(int, input().split()))]))


    print(int(d[tuple(map(int, input().split()))]))





    print(xyz[x][y][z])


    print(int(d[tuple(map(int, input().split()))]))






    print(int(d[tuple(map(int, input().split()))]))






    print(int(d[tuple(map(int, input().split()))]))






    print(int(d[tuple(map(int, input().split()))]))



    print(int(d[tuple(map(int, input().split()))]))




    print(int(d[tuple(map(int, input().split()))]))


    print(int(d[tuple(map(int, input().split()))]))


    print(int(d[tuple(map(int, input().split()))]))


    print(int(d[tuple(map(int, input().split()))]))


    print(xyz[x][y][z])
        

    


    print(NMQ[N][M][Q])

        print(1)
        print(0)


    print(int(d[tuple(map(int, input().split()))]))


    print(int(d[tuple(map(int, input().split()))]))

    print(int(d[tuple(map(int, input().split()))]))



    print(int(d[tuple(map(int, input().split()))]))

    print(int(d[tuple(map(int, input().split()))]))




    print(a[k][j][i])
    print(int(d[tuple(map(int, input().split()))]))


        print(1)
        print(0)

    print(int(d[tuple(map(int, input().split()))]))


    


    print(int(d[tuple(map(int, input().split()))]))


    print(xyz[x][y][z])


    print(int(d[tuple(map(int, input().split()))]))


        print(1)
        print(0)


        print(1)
        print(0)

































    print(int(d[tuple(map(int, input().split()))]))



    print(xyz[x][y][z])


    print(int(d[tuple(map(int, input().split()))]))



    print(xyz[x][y][z])




    print(xyz[x][y][z])


    print(xyz[x][y][z])


    print(int(d[tuple(map(int, input().split()))]))


    print(xyz[x][y][z])


        print(1)
        print(0)



    print(xyz[x][y][z])


    print(int(d[tuple(map(int, input().split()))]))


        print(1)
        print(0)



    print(zahyo[l][m][o])



        print(1)
        print(0)


    print(xyz[x][y][z])


    print(int(d[tuple(map(int,input().split()))]))    

    print(a[xi][yi][zi])


        print(1)
        print(0)


        print(1)
        print(0)


        print(1)
        print(0)


        print(1)
        print(0)

        print(1)
        print(0)

        print(1)
        print(0)
    

print(add(x))

    print(func(x))


print(f(int(input())))

print(func(a))

print(add(x))

print(fun(x))

print(result)








    


print(ma(a))

print(numa(a))


print(banana(aaaaa))

print(fa(a))



    


    




print(result)









print(lol(kk))    



print(add(x))


print(add(x))


print(add(x))    

print(add(a))

print(add(x))



print(f(int(input())))



print(f(int(input())))

print(add(x))




print(add(x))


print(func(a))



print(add(x))




print(add(x))


print(f(int(input())))

print(add(x))


print(rapan(x))    



print(add(x))



print(add(x))

print(add(x))


print(plus(a))

print(add(x))   

print(add(x))









print(f(int(input())))


print(add(x))





print(add(x))


print(add(x))



print(add(x))


print(add(x))





print(add(x))

print(add(x))


print(add(x))
























print(add(x))


print(add(x))

print(add(x))



print(add(x))


print(add(x))


print(add(x))


print(add(x))


print(func(a))



print(add(x))

print(add(x))


print(add(x))

print(add(x))    


print(add(x))


print(add(x))







print(add(x))


print(add(x))


print(add(x))



print(f(int(input())))





print(func(a))
    


    


print(add(x))

    print(func(x))


print(f(int(input())))


print(add(x))


    print(func(x))

print(add(x))


print(add(a))





print(d(int(input())))


print(f(int(input())))




print(add(x))

print(add(x))

print(add(a))



print(f(int(input())))

print(add(x))    

print(add(x))


print(add(a))

print(add(x))

    


print(add(x))


print(func(a))


print(int(input())+1)

print(add(x))




print(add(x))


print(add(x))

print(func(a))


































    print(func(x))

print(add(x))   


print(add(a))


print(f(int(input())))


print(add(x))


print(f(int(input())))


print(add(x))

    print(c * n)

        print(c, end = "")
    print()


print(f(n,c))

print(func(n, c))

        print(c, end="")
    print()

print(result)








    


        print(c,end="")
    print()

        print(c,end="")
    print()
print(f(n,c))




    


    




print(b*a)


print(f(n,c))

        print(c, end = "")
    print()

        print(c, end = "")
    print()

        print(c, end = "")
    print()

        print(c, end = "")
    print()

print(func(n, c))

        print(c, end = "")
    print()

        print(c, end = "")
    print()

print(f(n, c))


print(f(n,c))

        print(c,end="")
    print()

    
print(rapan(n,c))    

        print(c, end = "")
    print()


print(f(n,c))


        print(c, end = "")
    print()

print(plus(a,b))

        print(c, end = "")
    print()

        print(c, end = "")
    print()

        print(c, end = "")
    print()

        print(c, end = "")
    print()

        print(c, end = "")
    print()

        print(c, end = "")
    print()

        print(c, end = "")
    print()

        print(c,end="")
    print()
        print(c,end="")
    print()

print(func(n, c))


        print(c, end = "")
    print()

        print(c, end = "")
    print()

        print(c, end = "")
    print()


print(f(n,c))


        print(c, end = "")
    print()

        print(c, end = "")
    print()

print(func(n, c))




        print(c, end = "")
    print()

        print(c, end="")
    print()

        print(c, end = "")
    print()

        print(c, end="")
    print()

        print(c, end = "")
    print()

print(func(n, c))








        print(c, end = "")
    print()

print(func(n, c))


        print(c, end = "")
    print()

print(func(n, c))






print(func(n,c))
    



    



print(f(n,c))

    print(c * n)

        print(c, end="")
    print()

        print(c, end = "")
    print()

        print(c, end = "")
    print()

print(d(int(input()), str(input())))

print(func(n, c))






print(f(n,c))

        print(c, end="")
    print()

    print(num * char)

    print(c*n)

print(f(n,c))


        print(c,end="")
    print()    

        print(c, end = "")
    print()

        print(c, end = "")
    print()

        print(c, end = "")
    print()

print(func(n, c))

        print(c, end = "")
    print()

        print(c, end ="")
    print()

    print(c * n)

        print(c, end = "")
    print()

        print(c,end="")
    print()

    print(c * n)

        print(c, end = "")
    print()

        print(c,end="")
    print()
print(b*a)


print(func(n, c))

        print(c, end = "")
    print()

        print(c, end = "")
    print()

print(func(n, c))


    print(num * char)

        print(c,end="")
    print()
    print(num * char)


print(tyty(n,c))

        print(c, end = "")
    print()

        print(c, end = "")
    print()

        print(b,end="")
    print()

print(f(n,c))


    print(num * char)

        print(c, end = "")
    print()

print(plus(N,C))



    print(func(X))

    
print(getElement(a))


print(f(n,A))

print(func(a))

print(array(x))

print(fun(y))

print(f(n,a))




    


    





print(f(n,A))




print(getElement(a))

print(getElement(a))


print(array(x))

print(getElement(a))


print(getElement(a))


print(func(a))

print(f(n,A))


print(getElement(a))

    
print(rapan(n,A))    

print(getElement(a))



print(f(n,A))


print(getElement(a))


print(getElement(a))










print(getElement(a))


print(X[0])

print(f(n,A))



print(getElement(a))


print(f(n,A))




print(getElement(a))


print(getElement(a))





print(func(a))

print(func(a))

print(func(a))



print(getElement(a))



print(func(a))





























print(getElement(a))




print(func(a))

print(getElement(a))


print(getElement(a))


print(func(a))


print(getElement(a))

print(getElement(a))

print(getElement(a))


print(getElement(a))

print(getElement(a))








print(getElement(a))


print(func(a))


print(func(a))


print(func(a))
    




    


print(f(a))

print(getElement(a))


print(func(a))





print(f(n,A))


print(getElement(a))

print(func(a))


print(func(a))























































print(array(x))






print(X[0])

print(func(a))

print(func(x))


print(f(list(map(int,input().split()))))


print(f(n,A))


print(func(a))    

print(getElement(a))


print(func(a))


print(getElement(a))





print(func(a))


print(getElement(a))


print(getElement(a))


    print(func(X))

    

print(f(n,A))





































print(getElement(a))


    print(func(X))

    
print(getelement(a))

print(getelement(a))


print(X[0])


print(func(a))

print(func(a))








print(func(a))


print(func(a))



print(f(n,A))


print(getElement(a))

print(array(x))




print(tyty(a))

print(func(a))

print(getElement(a))



print(input().split(" ")[0])


print(f(n,A))


print(getElement(a))


print(getElement(a))


print(os(a))

print(func(a))


print(result)


print(callingArray(a))

print(input().split(" ")[0])

print(f(a))

    print("(", end="")

            print(num, end="")
            print(num, end=", ")


    print(")")


    print("("+", ".join(map(str, a))+")")

    print("(", end="")
            print(str(A[i]), end=")")
            print()
            print(str(A[i]) + ", ", end="")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("("+", ".join(map(str, a))+")")

    print("("+", ".join(map(str, a))+")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end="")
            print(str(A[i]), end=")")
            print()
            print(str(A[i]) + ", ", end="")
    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(",end="")
        print(A[i],end="")
    print(")")     

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("("+", ".join(map(str, a))+")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")


print("(", end="")
    print(X[i], end=", ")
print(str(X[len(X)-1]) + ")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end="")
            print(str(a[i]),end=")")
            print()
            print(str(a[i]) + ", ", end="")

    print("("+", ".join(map(str, a))+")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("("+", ".join(map(str, a))+")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("("+", ".join(map(str, a))+")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("("+", ".join(map(str,a))+")")

    print("("+", ".join(map(str, a))+")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end="")

            print(num, end="")
            print(num, end=", ")


    print(")")


    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(" + ", ".join(arr) + ")")
    
        print("("+str(a[0])+")")
        print(tuple(a))

    print("("+", ".join(map(str, a))+")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(" + ", ".join(arr) + ")")
    
    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("("+", ".join(map(str, a))+")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end="")
        print(a[i],end = "")
    print(")")

    print("(", end="")
            print(str(A[i]), end=")")
            print()
            print(str(A[i]) + ", ", end="")

    print("("+", ".join(map(str, a))+")")

    print("("+", ".join(map(str, a))+")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")





    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("("+", ".join(map(str, a))+")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(",end="")
            print(", ",end="")
        print(a[i],end="")
    print(")")

    print("(", end="")
            print(str(A[i]), end=")")
            print()
            print(str(A[i]) + ", ", end="")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(" + ", ".join(arr) + ")")
    
    print("(", end = "")
        print(a[i], end = "")
    print(")")

print("(",end="")
print(b[0],end="")
    print(", ",end="")
    print(b[i+1],end="")
print(")")


    print("(" + ", ".join(arr) + ")")
    
    print("(" + ", ".join(arr) + ")")
    
    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
        print(",", end = " ")
    print(a[n-1], end ="")
    print(")")
    print("("+", ".join(map(str, a))+")")

    print("(",end = "")
    print(")")
    print("("+", ".join(map(str,a))+")")

    print("(", end="")
        print(a[i], end=", ")
    print(f"{a[-1]})")

    print("("+", ".join(arr)+")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end="")

            print(num, end="")
            print(num, end=", ")


    print(")")


    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("("+", ".join(map(str, a))+")")
    
    print("(", end="")
            print(str(A[i]), end=")")
            print()
            print(str(A[i]) + ", ", end="")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("("+", ".join(map(str, a))+")")
    
    print("(", end="")

            print(num, end="")
            print(num, end=", ")


    print(")")


    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")
    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")
    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end="")

            print(num, end="")
            print(num, end=", ")


    print(")")


    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end="")
            print(i, end=", ")
            print(str(i)+")")

    print("("+", ".join(map(str, a))+")")
    
    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end="")
            print(str(a[i]),end=")")
            print()
            print(str(a[i]) + ", ", end="")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("("+", ".join(map(str, a))+")")
    
    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end="")
            print(str(A[i]), end=")")
            print()
            print(str(A[i]) + ", ", end="")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("("+", ".join(map(str, a))+")")
    
    print("("+", ".join(map(str,a))+")")

    print("("+", ".join(map(str, a))+")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end="")

            print(num, end="")
            print(num, end=", ")


    print(")")


    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end="")

            print(num, end="")
            print(num, end=", ")


    print(")")


    print("(", end = "")
        print(a[i], end = "")
    print(")")
    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(" + ", ".join(map(str,arr)) + ")")
    
        print("("+str(a[0])+")")
        print(tuple(a))

    print("("+", ".join(map(str, a))+")")
    
    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("("+", ".join(map(str, a))+")")
    
    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")
    print("(", end="")

            print(num, end="")
            print(num, end=", ")


    print(")")


    print("("+", ".join(map(str, a))+")")
    
    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("("+", ".join(map(str, a))+")")
    
    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("("+", ".join(map(str, a))+")")
    
    print("("+", ".join(map(str, a))+")")
    
    print("("+", ".join(map(str,a))+")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("("+", ".join(map(str, a))+")")
    
    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("("+", ".join(map(str,a))+")")
    print("(",end="")
        print(i,end="")
    print(")")
        
    print("(", end = "")
        print(a[i], end = "")
    print(")")

print("(",end="")
print(0,end="")
    print(", ",end="")
    print(i+1,end="")
print(")")


    print("("+", ".join(map(str, a))+")")
    
    print("(", end="")

            print(num, end="")
            print(num, end=", ")


    print(")")


    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("("+", ".join(map(str, a))+")")
    
    print("(", end = "")
        print(a[i], end = "")
        print(",", end = " ")
    print(a[n-1], end ="")
    print(")")
    print("("+", ".join(map(str, a))+")")
    
print("(",end = "")
print(")")

    print("(", end="")
        print(a[i], end=", ")
    print(f"{a[-1]})")

    print("(" + ", ".join(map(str,arr)) + ")")

    print("(", end="")

            print(num, end="")
            print(num, end=", ")


    print(")")


    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("("+", ".join(map(str, a))+")")
    
    print("(", end="")
            print(str(A[i]), end=")")
            print()
            print(str(A[i]) + ", ", end="")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")
    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(",end="")
        print(a[m],end="")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end="")
            print(str(A[i]), end=")")
            print()
            print(str(A[i]) + ", ", end="")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("("+", ".join(map(str, a))+")")
    
    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("("+", ".join(map(str,a))+")")

    print("("+", ".join(map(str, a))+")")

    print("(", end="")
            print(str(A[i]), end=")")
            print()
            print(str(A[i]) + ", ", end="")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(" + ", ".join(map(str,arr)) + ")")
    
        print("("+str(a[0])+")")
        print(tuple(a))

    print("("+", ".join(map(str, a))+")")
    
    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("("+", ".join(map(str, a))+")")
    
    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end="")
            print(str(A[i]), end=")")
            print()
            print(str(A[i]) + ", ", end="")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(" + ", ".join(map(str,arr)) + ")")
    
    print("("+", ".join(map(str, a))+")")
    
    print("("+", ".join(map(str, a))+")")
    
    print("("+", ".join(map(str, a))+")")
    
    print("("+", ".join(map(str, a))+")")
    
    print("(" + ", ".join(map(str,arr)) + ")")
    
    print("(", end="")

            print(num, end="")
            print(num, end=", ")


    print(")")


    print("(",end="")
        print(a[i],end="")
    print(")")

print("(",end="")
print(b[0],end="")
    print(", ",end="")
    print(b[i+1],end="")
print(")")

print("(",end="")
print(int(b[0])*c,end="")
    print(", ",end="")
    print(c*int(b[i+1]),end="")
print(")")


    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end="")
            print(str(A[i]), end=")")
            print()
            print(str(A[i]) + ", ", end="")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("("+", ".join(map(str, a))+")")
    
    print("(",end="")
        print(X[i],end="")
        print(",",end=" ")
    print(X[len(X)-1],end="")
    print(")",end="")
    print()
    print("(",end = "")
    print(")")
    print("(", end="")
        print(a[i], end=", ")
    print(f"{a[-1]})")

    print("("+", ".join(map(str,arr))+")")

    print("(", end="")

            print(num, end="")
            print(num, end=", ")


    print(")")


    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("("+", ".join(map(str, a))+")")
    
    print("(", end="")
            print(str(A[i]), end=")")
            print()
            print(str(A[i]) + ", ", end="")

    print("("+", ".join(map(str, a))+")")
    
    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")
    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("("+", ".join(map(str, a))+")")
    
    print("(",end="")
        print(a[m],end="")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("("+", ".join(map(str, a))+")")
    
    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("("+", ".join(map(str,a))+")")

    print("("+", ".join(map(str, a))+")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")
    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("("+", ".join(map(str, a))+")")
    
    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(" + ", ".join(map(str,arr)) + ")")
    
        print("("+str(a[0])+")")
        print(tuple(a))

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("("+", ".join(map(str, a))+")")
    
    print("(", end = "")
        print(a[i], end = "")
    print(")")
    print("(", end="")
            print(str(A[i]), end=")")
            print()
            print(str(A[i]) + ", ", end="")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("("+", ".join(map(str, a))+")")
    
    print("("+", ".join(map(str, a))+")")
    
    print("("+", ".join(map(str, a))+")")
    
    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("("+", ".join(map(str, a))+")")
    
    print("(", end="")

            print(num, end="")
            print(num, end=", ")


    print(")")


    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(",end="")
        print(a[i],end="")
    print(")")


print("(",end="")
print(b[0],end="")
    print(", ",end="")
    print(b[i+1],end="")
print(")")


print("(",end="")
print(c[0],end="")
    print(", ",end="")
    print(c[i+1],end="")
print(")")



print("(",end="")
print(int(b[0])+int(c[0]),end="")
    print(", ",end="")
    print(int(c[i+1])+int(b[i+1]),end="")
print(")")


    print("("+", ".join(map(str, a))+")")
    
    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")

    print("(", end = "")
        print(a[i], end = "")
    print(")")
    print("("+", ".join(map(str, a))+")")
    
    print("(",end="")
        print(X[i],end="")
        print(",",end=" ")
    print(X[len(X)-1],end="")
    print(")",end="")
    print()
    print("(",end = "")
    print(")")
    print("(", end="")
        print(a[i], end=", ")
    print(f"{a[-1]})")

    print("("+", ".join(map(str,arr))+")")

        print("Yes")
        print("No")


    print('Yes')
    print('No')

print("Yes" if k in a else "No")

print(linearSearch(lst, k))

        print("Yes")
    print("No")

    print("Yes")
    print("No")

    print("Yes")
    print("No")

print(linearSearch(lst, k))

print("Yes" if k in a else "No")


    print("Yes")
    print("No")

    print("Yes")
    print("No")

    print("Yes")
    print("No")

print(linearSearch(lst, k))



    print("Yes")
    print("No")    



    print("Yes")
    print("No")

    print("Yes")
    print("No")


    print("Yes")

     print("No")

    print("Yes")
    print("No")

    print("Yes")
    print("No")    

    print("Yes")
    print("No")

    print("Yes")
    print("No")    

print(linearSearch(lst, k))


    print("Yes")
    print("No")          

    print("Yes")
    print("No")

    print("Yes")
    print("No")

    print("Yes")
    print("No")

    print("Yes")
    print("No")    

    print("Yes")
    print("No")


print("Yes" if k in a else "No")




print("Yes" if k in a else "No")

print(linearSearch(lst, k))


    print("Yes")
    print("No")

    print("Yes")
    print("No")    

    print('Yes')
    print('No')


    print("Yes")
    print("No")

print(linearSearch(lst,k))

    print("Yes")
    print("No")

    print("Yes")
    print("No")

    print("Yes")
    print("No")

    print("Yes")
    print("No")

print("Yes"if k in a else "No")
    



        print("Yes")
        print("No")

print(linearSearch(lst, k))





        print("Yes")
    print("No")





print(linearSearch(lst, k))

    print("Yes")
    print("No")

    print("Yes")
    print("No")

print(linearSearch(lst, k))


    print("Yes")
    print("No")

    print("Yes")
    print("No")

    print("Yes")
    print("No")          


    print("Yes")
    print("No")

print(linearSearch(lst, k))

print(linearSearch(lst, k))


        print("Yes")
    print("No")

    print("Yes")
    print("No")
    


    print("Yes")
    print("No")

    print("Yes")
    print("No")

    print("Yes")
    print("No")


    print('Yes')
    print('No')


     print("Yes")
    print("No")

    print("Yes")
    print("No")

    print("Yes")
    print("No")


   print("Yes")
    print("No")

print(linearSearch(lst, k))


print(linearSearch(lst, k))

    print("Yes")
    print("No")

    print("Yes")
    print("No")

    print("Yes")
    print("No")

    print("Yes")
    print("No")

    print("Yes")
    print("No")

    print("Yes")
    print("No")

    print("Yes")
    print("No")

     print("Yes")
    print("No")

print("Yes" if k in a else "No")



    print("Yes") 
     print("No")              


    print("Yes")
    print("No")



    print(linear_search(A, key))

print(linearSearch(a, key))

print(linearSearch(a, k))

print(linearSearch(lst, k))


print(linearSearch(a, key))


print(linearSearch(a, key))

print(linearSearch(lst, k))


print(linearSearch(a, key))



print(linearSearch(a, key))



print(linearSearch(a, key))


print(linearSearch(lst, k))


print(linearSearch(a, k))


print(linearSearch(A, key))

print(linearSearch(lst, k))

print(linearSearch(lst, k))


print(linearSearch(a, key))   

print(linearSearch(lst, k))


print(linearSearch(lst, k))

print(linearSearch(A,key))


print(linearSearch(a, key))



    print(linear_search(A, key))

print(linearSearch(a, key))

print(linearSearch(a, key))


print(linearSearch(lst, k))



print(linearSearch(lst, k))




print(linearSearch(a, key))

print(linearSearch(lst,k))

print(linearsearch(A, key))

print(linearSearch(lst, k))



print(linearSearch(a, key))




print(linearSearch(a, key))


print(linearSearch(a, key))


print(linearSearch(lst,k))

print(linearSearch(lst, k))





print(linearSearch(a, key))



print(linearSearch(a, key))


print(linearSearch(lst, k))


print(linearSearch(a, key))


print(linearSearch(lst, k))

print(linearSearch(A,key))

print(linearSearch(a, key))

print(linearSearch(lst, k))


print(search(A,key))

print(linearSearch(a, k))


print(linearSearch(a, key))



print(linearSearch(A,key))
    



print(linearSearch(a, key))



print(linearSearch(a, key))


print(linearSearch(a,key))

print(linearSearch(a, k))


print(linearSearch(a, key))


print(linearSearch(A,key))



print(linearSearch(lst, k))

print(linearSearch(a, key))


print(search(A, key))

print(linearSearch(a, key))


print(search(lst,k))

print(linearSearch(A,key))


print(linearSearch(lst, k))


print(linearSearch(a, key))


print(linearsearch(A, key))


print(linearSearch(a, k))


print(linearSearch(a, k))


print(linearSearch(lst, k))



print(linearSearch(lst, k))


print(linearSearch(a, key))


print(linearSearch(lst, k))


print(linearSearch(lst,k))
            



print(linearSearch(a, key))

print(linearSearch(a, key))


print(linearSearch(lst, k))


print(linearSearch(lst, k))








print(linearSearch(a, k))

print(linearSearch(a, k))



print(linearSearch(lst, k))


print(linearSearch(a, key))

print(linearSearch(a, key))

print(lineSearch(a, key))

print(linearSearch(lst, k))




print(linearSearch(lst, k))


print(linearSearch(a, key))

print(linearSearch(a, key))


print(ls(lists,key))

print(linearSearch(a, key))



print(linearSearch(A,key))
































































































































print(linearSearch(lst, k))







print(search(A,key))

print(linearSearch(a, key))


print(linearSearch(a, key))



print(search(A,key))    
    
   

print(linearSearch(A, key))



print(linearSearch(a, key))


print(linearSearch(a, key))


print(linearSearch(lst, k))


print(linearSearch(a, key))


print(linearSearch(a, key))










print(search(A,key))

            print("Yes")
            print("No")

        print('Yes')
        print('No')

    print("Yes" if k in a else "No")

    print("Yes" if k in a else "No")


            print("Yes")
            print("No")

        print('Yes')
        print('No')




    print("Yes" if k in a else "No")

        print("Yes")
        print("No")

    print("Yes" if k in a else "No")

        print("Yes")
        print("No")


    print("Yes" if s in a else "No")

        print("Yes")
        print("No")
    


        print("Yes")
        print("No")

    print("Yes" if k in a else "No")



        print('Yes')
        print('No')


        print('Yes')
        print('No')


    print("Yes" if k in a else "No")


        print("Yes")
        print("No")










    print("Yes" if k in a else "No")

        print('Yes')
        print('No')


    print("Yes" if k in a else "No")

        print("Yes")
        print("No")

        print("Yes")
        print("No")







       print("Yes")
       print("No")    

        print("Yes")
        print("No")


       print("Yes")
       print("No")    
 

    print("Yes" if k in a else "No")


        print("Yes")
        print("No")    

        print("Yes")
        print("No")


    print("Yes" if k in a else "No")


            print("Yes")
            print("No")

        print('Yes')
        print('No')


    print("Yes" if k in a else "No")


    print("Yes" if k in a else "No")




        print(f"[{l}, {r})")
        print("[" + str(l) + ", " + str(r) + ")")
    print("[{}, {})".format(l, r))
        print("[" + str(l) + ", " + str(r) + ")")
        print("[" + str(l) + ", " + str(r) + ")")
        print("[" + str(l) + ", " + str(r) + ")")
        print("[" + str(l) + ", " + str(r) + ")")
        print("[" + str(l) + ", " + str(r) + ")")
    print("[{}, {})".format(l, r))
        print("[" + str(l) + ", " + str(r) + ")")
        print("[" + str(l) + ", " + str(r) + ")")
        print("[" + str(l) + ", " + str(r) + ")")
        print("[" + str(l) + ", " + str(r) + ")")
        print("["+str(l)+", "+str(r)+")")
        print("[" + str(l) + ", " + str(r) + ")")
        print("[" + str(l) + ", " + str(r) + ")")
        print("[" + str(l) + ", " + str(r) + ")")
        print("[" + str(l) + ", " + str(r) + ")")
        print("[" + str(l) + ", " + str(r) + ")")
        print("[" + str(l) + ", " + str(r) + ")")
        print("[" + str(l) + ", " + str(r) + ")")
        print("[" + str(l) + ", " + str(r) + ")")
        print("[" + str(l) + ", " + str(r) + ")")
        print("[" + str(l) + ", " + str(r) + ")")
        print("[" + str(l) + ", " + str(r) + ")")
    print("[{}, {})".format(l, r))
        print("["+str(l)+", "+str(r)+")")
        print("[" + str(l) + ", " + str(r) + ")")
        print("[" + str(l) + ", " + str(r) + ")")
        print(f"[{l}, {r})")

        print(f"[{l}, {r})")
        print("[" + str(l) + ", " + str(r) + ")")
        print("[" + str(l) + ", " + str(r) + ")")
        print("[" + str(l) + ", " + str(r) + ")")
        print("[" + str(l) + ", " + str(r) + ")")
        print("[" + str(l) + ", " + str(r) + ")")
        print("[" + str(l) + ", " + str(r) + ")")
    print("[{}, {})".format(l, r))
    print("[{}, {})".format(l, r))
        print("[" + str(l) + ", " + str(r) + ")")
        print("[" + str(l) + ", " + str(r) + ")")
        print("[" + str(l) + ", " + str(r) + ")")
        print("[" + str(l) + ", " + str(r) + ")")
        print("[" + str(l) + ", " + str(r) + ")")
        print("[" + str(l) + ", " + str(r) + ")")
        print("[" + str(l) + ", " + str(r) + ")")
        print("[" + str(l) + ", " + str(r) + ")")
        print("[" + str(l) + ", " + str(r) + ")")
        print("[" + str(l) + ", " + str(r) + ")")
    print("[{}, {})".format(l, r))
        print("[" + str(l) + ", " + str(r) + ")")
        print("[" + str(l) + ", " + str(r) + ")")
        print("[" + str(l) + ", " + str(r) + ")")
    print("["+str(i[0])+", "+str(i[1])+")")

        print("[" + str(l) + ", " + str(r) + ")")
        print("[" + str(l) + ", " + str(r) + ")")

        print(f"[{l}, {r})")
        print("[" + str(l) + ", " + str(r) + ")")
    print("[{}, {})".format(l, r))
    print("[{}, {})".format(l, r))
    print("[{}, {})".format(l, r))
        print("[" + str(l) + ", " + str(r) + ")")
    print("[{}, {})".format(l, r))
        print("[" + str(l) + ", " + str(r) + ")")
        print("[" + str(l) + ", " + str(r) + ")")
        print("[" + str(l) + ", " + str(r) + ")")
        print("[" + str(l) + ", " + str(r) + ")")
        print("[" + str(l) + ", " + str(r) + ")")
    print("[{}, {})".format(l, r))

        print(f"[{l}, {r})")
        print("[" + str(l) + ", " + str(r) + ")")
    print("[{}, {})".format(l, r))
        print("[" + str(l) + ", " + str(r) + ")")
        print("[" + str(l) + ", " + str(r) + ")")
        print("[" + str(l) + ", " + str(r) + ")")
    print("[{}, {})".format(l, r))
    print("[{}, {})".format(l, r))
        print("[" + str(l) + ", " + str(r) + ")")
    print("[{}, {})".format(l, r))
    print("[{}, {})".format(l, r))
        print("[" + str(l) + ", " + str(r) + ")")
    print("[{}, {})".format(l, r))

        print(f"[{l}, {r})")
        print("[" + str(l) + ", " + str(r) + ")")
        print("[" + str(l) + ", " + str(r) + ")")
        print("[" + str(l) + ", " + str(r) + ")")
        print("[" + str(l) + ", " + str(r) + ")")
        print("[" + str(l) + ", " + str(r) + ")")
    print("[",end="")
    print(i2[0],end=", ")
    print(i2[1],end=")")
    print()    


        print("[" + str(l) + ", " + str(r) + ")")
        print("[" + str(l) + ", " + str(r) + ")")

        print(f"[{l}, {r})")
    print("["+ str(l) + ", " + str(r) + ")")
        print("[" + str(l) + ", " + str(r) + ")")
    print("[{}, {})".format(l, r))
        print(f"[{l}, {r})")
        print('Yes')
        print('No')

        print('Yes')
        print('No')

        print('Yes')
        print('No')


        print('Yes')
        print('No')

        print('Yes')
        print('No')

            


        print('Yes')
        print('No')


        print('Yes')
        print('No')




        print('Yes')
        print('No')


        print('Yes')
        print('No')


        print('Yes')
        print('No')


        print('Yes')
        print('No')


    print("Yes" if s(k) else "No")


            print("Yes")
            print("No")


    print("Yes" if binarySearch(a, k) else "No")

    print("Yes" if binarySearch(a, k) else "No")


    print("Yes" if binarySearch(a, k) else "No")





    print("Yes" if binarySearch(a, k) else "No")

        print("Yes")
        print("No")


    print("Yes" if binarySearch(a, k) else "No")



    print("Yes" if binarySearch(a, k) else "No")






        print("Yes")
        print("No")



        print("Yes")
        print("No")



        print("Yes")
        print("No") 


    print("Yes" if binarySearch(a, k) else "No")


            print("Yes")
            print("No")


        print("No")


    print("Yes" if binarySearch(a, k) else "No")



        print("Yes")   
        print("No") 

        print("Yes")
        print("No")


    print("Yes" if binarySearch(a, k) else "No")


    print("Yes" if binarySearch(a, k) else "No")


        print("Yes")
        print("No")


    print(bs(lists,key))

        print("Yes")
        print("No")



    print(*linear_search(A, key))


    print(*binary_search(A, key))


        print("", a[i])
        print(a[m])
print(" ".join(map(str, linearSearch(a, k))))
print(" ".join(map(str, binarySearch(a, k))))

        print("", a[i])
        print(a[m])
        print("", a[i])
        print(a[m])
        print("", a[i])
        print(a[m])
        print("", a[i])
        print(a[m])
        print("", a[i])
        print(a[m])
        print("", a[i])
        print(a[m])

    print(*linear_search(A, key))


    print(*binary_search(A, key))


        print("", a[i])
        print(a[m])
        print("", a[i])
        print(a[m])
        print("", a[i])
        print(a[m])
        print("", a[i])
        print(a[m])
        print("", a[i])
        print(a[m])
        print("", a[i])
        print(a[m])
        print("", a[i])
        print(a[m])
        print("", a[i])
        print(a[m])
    print(i,end=" ")
print("")

    print(i,end=" ")


print(" ".join(map(str, linearSearch(a, k))))
print(" ".join(map(str, binarySearch(a, k))))


        print("", a[i])
        print(a[m])
        print("", a[i])
        print(a[m])
        print("", a[i])
        print(a[m])
        print("", a[i])
        print(a[m])
        print("", a[i])
        print(a[m])
        print("", a[i])
        print(a[m])
        print("", a[i])
        print(a[m])
        print("", a[i])
        print(a[m])
        print(" ", a[i])
        print(a[m])
        print("", a[i])
        print(a[m])
        print("", a[i])
        print(a[m])
print(" ".join(map(str, linearSearch(a, k))))
print(" ".join(map(str, binarySearch(a, k))))

        print("", a[i])
        print(a[m])
print(" ".join(map(str, linearSearch(a, k))))
print(" ".join(map(str, binarySearch(a, k))))


        print("", a[i])
        print(a[m])
        print("",a[i])
        print(a[m])
        print("", a[i])
        print(a[m])
        print(A[i])
        print(A[m])
        print("", a[i])
        print(a[m])
print(" ".join(map(str, linearSearch(a, k))))
print(" ".join(map(str, binarySearch(a, k))))


        print(A[i])
        print(A[i])
        print(A[m])
        print(A[m])
        print(A[m])
print(*aa)
print(*aa)



        print("",A[i],end="")
        print("",A[m],end="")
print()
        print("", a[i])
        print(a[m])
        print("", a[i])
        print(a[m])
        print("", a[i])
        print(a[m])
        print("", a[i])
        print(a[m])
        print("", a[i])
        print(a[m])
        print("", a[i])
        print(a[m])
        print("", a[i])
        print(a[m])
        print("", a[i])
        print(a[m])
        print("", a[i])
        print(a[m])
        print("", a[i])
        print(a[m])
        print("", a[i])
        print(a[m])
        print("", a[i])
        print(a[m])
        print("", a[i])
        print(a[m])
print(n)
print(int(math.ceil(math.log2(n)))+1)

print(n)
print(int(math.ceil(math.log2(n)))+1)

print(n)
print(int(math.ceil(math.log2(n)))+1)


print(n)
print(int(math.ceil(math.log2(n)))+1)


print(n)
print(int(math.ceil(math.log2(n)))+1)

print(n)
print(int(math.ceil(math.log2(n)))+1)


print(a)
print(b+1)

print(n)
print(int(math.ceil(math.log2(n)))+1)


print(n)
print(int(math.ceil(math.log2(n)))+1)


print(num)
print(bs(lists,-1))


    print(linear_search(A, key))


    print(binary_search(A, key))


print(linearSearch(a, n))
print(binarySearch(a, 0))

print(linearSearch(a, n))
print(binarySearch(a, 0))



print(linearSearch(a, n))
print(binarySearch(a, 0))


print(linearSearch(a, n))
print(binarySearch(a, 0))


print(linearSearch(a, n))
print(binarySearch(a, 0))

print(linearSearch(a, n))
print(binarySearch(a, 0))





print(linearSearch(a, n))
print(binarySearch(a, 0))



print(linearSearch(a, n))
print(binarySearch(a, 0))


print(linearSearch(a, n))
print(binarySearch(a, 0))


print(linearSearch(a, n))
print(binarySearch(a, 0))


print(linearSearch(a, n))
print(binarySearch(a, 0))


print(linearSearch(a, n))
print(binarySearch(a, 0))






print(linearSearch(a, n))
print(binarySearch(a, 0))

print(linearSearch(a, n))
print(binarySearch(a, 0))


print(linearSearch(a, n))
print(binarySearch(a, 0))








print(linearSearch(a, n))
print(binarySearch(a, 0))



print(linearSearch(a, n))
print(binarySearch(a, 0))


print(linearSearch(a, n))
print(binarySearch(a, 0))


print(linearSearch(a, n))
print(binarySearch(a, 0))







































































































































print(linearSearch(a, n))
print(binarySearch(a, 0))






print(linearSearch(a, n))
print(binarySearch(a, 0))






























print(linearSearch(a, n))
print(bSearch(a, 0))

print(linearSearch(a, n))
print(binarySearch(a, 0))

  


print(linearSearch(a, n))
print(binarySearch(a, 0))


print(linearSearch(a, n))
print(binarySearch(a, 0))


print(linearSearch(a, n))
print(binarySearch(a, 0))


print(linearSearch(a, n))
print(binarySearch(a, 0))





print(linearSearch(a, n))
print(binarySearch(a, 0))


print(linearSearch(a, n))
print(binarySearch(a, 0))


print(linearSearch(a, n))
print(binarySearch(a, 0))


print(linearSearch(a, n))
print(binarySearch(a, 0))



print(linearSearch(a, n))
print(binarySearch(a, 0))







print(linearSearch(a, n))
print(binarySearch(a, 0))


print(linearSearch(a, n))
print(binarySearch(a, 0))








print(linearSearch(a, n))
print(binarySearch(a, 0))


print(linearSearch(a, n))
print(binarySearch(a, 0))


print(linearSearch(a, n))
print(binarySearch(a, 0))



print(linearSearch(a, n))
print(binarySearch(a, 0))



print(linearSearch(a, n))
print(binarySearch(a, 0))

print(linearSearch(a, n))
print(binarySearch(a, 0))


print(linearSearch(a, n))
print(binarySearch(a, 0))


print(linearSearch(a, n))
print(binarySearch(a, 0))





print(linearSearch(A,N))
print(binarySearch(A,0))

print(linearSearch(a,n))
print(binarySearch(a,0))


print(ans)
print(ans)


        print("Yes")
        print("No")

    print("Yes")
    print("No")

        print("No")
print("Yes")

        print("No")
    print("Yes")

        print("No")
print("Yes")


        print("No")
    print("Yes")


        print("No")
    print("Yes")






    print("Yes")
    print("No")

        print("No")
print("Yes")



    print("Yes")
    print("No")

    print("Yes")
    print("No")

        print("No")
    print("Yes")


        print("No")
    print("Yes")



        print("Yes")
        print("No")

        print("No")
    print("Yes")


        print("No")
print("Yes")

        print("Yes")
        print("No")

   print("Yes")
    print("No")


    print("Yes")
    print("No")




        print("No")
print("Yes")











        print("No")
    print("Yes")



    print("Yes")
    print("No")









    print("Yes")
    print("No")


    print("Yes")
    print("No")















   print("Yes")
    print("No")

        print("Yes")
        print("No")

print(ans)


    print("Yes")
    print("No")

    print("Yes")
    print("No")


    print("Yes")
    print("No")                


        print("No")
    print("Yes")


print(ans)









print(ans)


        print("No")
    print("Yes")

        print("No")
    print("Yes")



        print("No")
    print("Yes")


        print("No")
    print("Yes")


    print("Yes")
    print("No")


            


        print("No")
    print("Yes")


    print("Yes")
    print("No")

    print("Yes")
    print("No")


        print("No")
    print("Yes")



print(d)

        print("No")
    print("Yes")

        print("No")
    print("Yes")


print("Yes" if a == b else "No")

    print("Yes")
    print("No")



    print(*A)

    print(a[i], end = "")
print()


print(*A)

print(" ".join(map(str, a)))

print(" ".join(map(str, a)))


    print(a[i], end = "")
print()



    print(a[i], end = "")
print()

    print(a[i], end = "")
print()

    print(a[i], end = "")
print()



print(*A)




        print(a[i],end="")
print()         


    print(a[i], end = "")
print()


    print(a[i], end = "")
print()



    print(a[i], end = "")
print()

    print(a[i], end = "")
print()



    print(a[i], end = "")
print()


    print(a[i], end = "")
print()


    print(a[i], end = "")
print()




    print(a[i], end = "")
print()

    print(a[i], end = "")
print()

        print(a[i],end="")
print()         





    print(a[i], end = "")
print()


print(" ".join(map(str, a)))





    print(a[i], end = "")
print()



    print(*A)

print(" ".join(map(str, a)))


    print(a[i], end = "")
print()


    print(a[i], end = "")
print()


    print(a[i], end = "")
print()


    print(a[i], end = "")
print()

    print(a[i], end = "")
print()


    print(a[i], end = "")
print()








    print(a[i], end = "")
print()












    print(a[i], end = "")
print()

    print(a[i], end = "")
print()




    print(*A)

    print(a[i], end = "")
print()











































































































































    print(a[i], end = "")
print()











    print(a[i], end = "")
print()



print(*A)
















    print(f"{A[i]}", end="")
print()

print(" ".join(map(str, a)))


    print(a[i], end = "")
print()


print(*a)

print(" ".join(map(str, a)))


        print(' ', end="")
    print(f"{A[i]}", end="")
print()

    print(a[i], end = "")
print()









print(*A)


    print(a[i], end = "")
print()


    print(a[i], end = "")
print()


    print(a[i], end = "")
print()


    print(a[i], end = "")
print()





    print(a[i], end = "")
print()



    print(a[i], end = "")
print()



print(*A)



print(*A)


    print(a[i], end = "")
print()


    print(a[i], end = "")
print()


    print(a[i], end = "")
print()




print(*A)


print(" ".join(map(str, a)))






print(" ".join(map(str, a)))

print(*a)

    print(a[i], end = "")
print()

print(*A)




print(*A)



print(" ".join(map(str, a)))


    print(a[i], end = "")
print()


print(" ".join(map(str, a)))



            


print(*A)



    print(a[i], end = "")
print()



print(*a)


print(" ".join(map(str, a)))


    print(a[i], end = "")
print()


    print(a[i], end = "")
print()



print(*A)


print(*A)



    print(a[i], end = "")
print()


    print(i,end=" ")

    print(a[i], end = "")
print()


    print(A[i], end = " ")

    print(a[i], end = "")
print()



print(" ".join(map(str, a)))


print(*a)


    print(A[i],end=" ")


    print(*res_list)

    print(a[i], end = "")
print()

print(" ".join(map(str, a)))

    print(a[i], end = "")
print()


    print(a[i], end = "")
print()


    print(a[i], end = "")
print()

    print(a[i], end = "")
print()

    print(a[i], end = "")
print()



    print(*res_list)

        print(a[i],end="")
print()         


    print(a[i], end = "")
print()


    print(a[i], end = "")
print()



        print(a[i],end="")
print()         

    print(a[i], end = "")
print()


    print(a[i], end = "")
print()



    print(a[i], end = "")
print()


    print(a[i], end = "")
print()




    print(a[i], end = "")
print()

    print(a[i], end = "")
print()

    print(a[i], end = "")
print()
    





    print(a[i], end = "")
print()


        print(a[i],end="")
print()         







    print(a[i], end = "")
print()


    print(a[i], end = "")
print()








print(" ".join(map(str, a)))


    print(a[i], end = "")
print()


    print(a[i], end = "")
print()


    print(a[i], end = "")
print()


    print(a[i], end = "")
print()


    print(a[i], end = "")
print()


print(" ".join(map(str, a)))















    print(a[i], end = "")
print()










    print(a[i], end = "")
print()


    print(a[i], end = "")
print()




    print(*res_list)

    print(a[i], end = "")
print()











































































































































    print(a[i], end = "")
print()





















    print(a[i], end = "")
print()



    print(*res_list)

    print(f"{A[i]}", end="")
print()

print(" ".join(map(str, a)))



        print(a[i],end="")
print()   


print(*b)

print(" ".join(map(str, a)))


        print(' ',end="")
    print(f"{A[i]}",end="")
print()                  

    print(a[i], end = "")
print()










print(*A)


    print(a[i], end = "")
print()


    print(a[i], end = "")
print()


    print(a[i], end = "")
print()






    print(a[i], end = "")
print()



    print(a[i], end = "")
print()




    print(a[i], end = "")
print()



print(*A)

    print(a[i], end = "")
print()


    print(a[i], end = "")
print()


    print(a[i], end = "")
print()



    print(a[i], end = "")
print()


        print(a[i],end="")
print()         



print(" ".join(map(str, a)))


print(" ".join(map(str, a)))


    print(a[i], end = "")
print()

print(*A)



print(" ".join(map(str, a)))



print(" ".join(map(str, a)))


    print(a[i], end = "")
print()


print(" ".join(map(str, a)))




            



    print(*res_list)

    print(a[i], end = "")
print()



    print(a[i], end = "")




    print(a[i], end = "")
print()


    print(a[i], end = "")
print()


    print(a[i], end = "")
print()


    print(a[i], end = "")
print()



    print(*res_list)

print(*A)



    print(a[i], end = "")
print()



    print(i,end=" ")

    print(a[i], end = "")
print()


    print(A[i], end = " ")

    print(a[i], end = "")
print()



print(" ".join(map(str, a)))


print(*ans)


    print(A[i],end=" ")


    print(*res_list)

    print(b[i], end = "")
  


print(*A)

print(" ".join(map(str, a[k:]+a[0:k])))

    print(b[i], end = "")
  



print(*A)


    print(b[i], end = "")

    print(b[i], end = "")

    print(b[i], end = "")
  



print(*A)




    print(b[i],end="")

    print(b[i], end = "")
  


    print(b[i], end = "")
  


    print(b[i], end = "")

    print(b[i], end = "")
  

    print(b[i], end = "")
  


    print(b[i], end = "")
  



    print(b[i], end = "")

    print(b[i], end = "")

    print(b[i], end = "")




    print(b[i], end = "")
  



print(*A)






    print(b[i], end = "")
  



print(*A)








    print(b[i], end = "")
  


    print(b[i], end = "")
  


    print(b[i], end = "")
  


    print(b[i], end = "")
  



    print(b[i], end = "")
  



    print(b[i], end = "")
  

    print(b[i], end = "")
  











    print(b[i], end = "")
  

    print(b[i], end = "")


print(*A)


    print(b[i], end = "")
  











































































































































    print(b[i], end = "")
  





















    print(b[i], end = "")
  


    print(b[i], end = "")
  


















    print(f"{T2[i]}", end="")
print()

    print(b[i],end="")



    print(b[i], end = "")
   


print(*(b+c))

print(" ".join(map(str, a[k:]+a[0:k])))


    print(f"{T2[i]}", end="")
print()    


    print(b[i], end = "")


    print(b[i], end = "")
  











    print(b[i], end = "")
  


    print(b[i], end = "")
  


    print(b[i], end = "")
  






    print(b[i], end = "")
  



    print(b[i], end = "")
  



    print(b[i], end = "")



    print(b[i], end = "")


    print(*res_list)


    print(*res_list)

    print(b[i], end = "")
  

    print(b[i], end = "")


    print(b[i], end = "")




    print(b[i],end="")

    print(b[i], end = "")
  


    print(b[i], end = "")

    print(b[i], end = "")
  


    print(b[i], end = "")
  



print(" ".join(map(str, a[k:]+a[0:k])))


    print(b[i], end = "")
  


print(" ".join(map(str, a[k:]+a[0:k])))





            



print(*A)


    print(b[i], end = "")
  


    print(b[i], end = "")
  


print(*A)


    print(b[i], end = "")
  


    print(b[i], end = "")
  


    print(b[i], end = "")
  



    print(*res_list)

    print(b[i], end = "")
  


    print(b[i], end = "")
  


    print(i,end=" ")

    print(b[i], end = "")
  



    print(A[l+i], end=" ")
    print(A[i], end=" ")

    print(b[i], end = "")
  

print(" ".join(map(str, a[k:]+a[0:k])))


print(*d)


    print(A[i],end=" ")


    print(a[i], end = "")
print()


print(*sorted(A))


    print(*A)

print(" ".join(map(str, sorted(a))))

    print(a[i], end = "")
print()


    print(a[i], end = "")
print()



    print(a[i], end = "")
print()


    print(a[i], end = "")
print()

    print(a[i], end = "")
print()


print(" ".join(map(str, sorted(a))))



    print(a[i],end="")
print()    

    print(a[i], end = "")
print()


    print(a[i], end = "")
print()


    print(a[i], end = "")
print()

    print(a[i], end = "")
print()



    print(a[i], end = "")
print()


    print(a[i], end = "")
print()




print(*sorted(A))

    print(a[i], end = "")
print()

    print(a[i], end = "")
print()





    print(a[i], end = "")
print()


print(" ".join(map(str, sorted(a))))









    print(a[i], end = "")
print()


    print(a[i], end = "")
print()



    print(*A)

print(" ".join(map(str, sorted(a))))


    print(a[i], end = "")
print()


    print(a[i], end = "")
print()


    print(a[i], end = "")
print()



    print(a[i], end = "")
print()



print(" ".join(map(str, sorted(a))))


    print(a[i], end = "")
print()



  











    print(a[i], end = "")
print()


    print(a[i], end = "")
print()



    print(a[i], end = "")
print()


  











































































































































print(" ".join(map(str, sorted(a))))

  





















    print(a[i], end = "")
print()





















    print(f" {v}", end="")
print()

print(" ".join(map(str, sorted(a))))

  



print(*sorted(A))
   


print(*a)

print(" ".join(map(str, sorted(a))))


    print(f" {v}", end="")
print()    


    print(a[i], end = "")
print()

    print(a[i], end = "")
print()

  











    print(a[i], end = "")
print()


    print(a[i], end = "")
print()


    print(a[i], end = "")
print()

    print(a[i], end = "")
print()







    print(a[i], end = "")
print()


    print(a[i], end = "")
print()




    print(a[i], end = "")
print()




    print(a[i], end = "")
print()




    print(a[i], end = "")
print()


print(" ".join(map(str, sorted(a))))


    print(a[i], end = "")
print()



    print(a[i], end = "")
print()

  














print(" ".join(map(str, sorted(a))))

print(" ".join(map(str, sorted(a))))


    print(a[i], end = "")
print()

print(*sorted(A))


    print(a[i], end = "")
print()



print(" ".join(map(str, sorted(a))))


    print(a[i], end = "")
print()

print(" ".join(map(str, sorted(a))))






            


    print(a[i], end = "")
print()



    print(a[i], end = "")
print()


    print(a[i],end="")

    print(a[i], end = "")
print()



    print(a[i], end = "")
print()


print(" ".join(map(str, sorted(a))))




    print(*A)


print(*sorted(A))


    print(a[i], end = "")
print()


    print(i,end=" ")

    print(a[i], end = "")
print()


    print(A[i], end=" ")

    print(a[i], end = "")
print()


print(" ".join(map(str, sorted(a))))


print(*a)


    print(A[i],end=" ")



    print(*A)

    print(a[i], end = "")
print()


print(*sorted(A, reverse=True))

print(" ".join(map(str, sorted(a, reverse=True))))

    print(a[i], end = "")
print()



    print(a[i], end = "")
print()


    print(a[i], end = "")
print()


    print(a[i],end="")
print()    

    print(a[i], end = "")
print()

    print(a[i], end = "")
print()


    print(a[i],end="")
print()    


    print(a[i], end = "")
print()



print(*sorted(A, reverse=True))

    print(a[i], end = "")
print()



print(*sorted(A, reverse=True))







    print(a[i], end = "")
print()



    print(a[i], end = "")
print()


    print(a[i],end="")
print()    


    print(a[i],end="")
print()    




  











































































































































    print(a[i], end = "")
print()






  












print(*sorted(A, reverse=True))






















    print(a[i], end = "")
print()


print(" ".join(map(str, sorted(a, reverse=True))))


  



    print(*A)

print(*a)

    print(a[i], end = "")
print()


    print(a[i], end = "")
print()

    print(a[i], end = "")
print()


    print(a[i], end = "")
print()



print(*sorted(A, reverse=True))







    print(a[i], end = "")
print()


print(" ".join(map(str, sorted(a, reverse=True))))


    print(a[i], end = "")
print()



    print(a[i], end = "")
print()

  














print(" ".join(map(str, sorted(a, reverse=True))))


    print(a[i],end="")
print()

    print(a[i], end = "")
print()

    print(a[i], end = "")
print()

















  


print(" ".join(map(str, sorted(a, reverse=True))))




print(" ".join(map(str, sorted(a, reverse=True))))


    print(a[i], end = "")
print()



    print(*A)

    print(a[i],end="")

    print(a[i], end = "")
print()


    print(a[i], end = "")
print()



    print(a[i], end = "")
print()


    print(i,end=" ")

    print(a[i], end = "")
print()


    print(a[i], end = "")
print()


    print(a[i], end = "")
print()


print(" ".join(map(str, sorted(a, reverse=True))))


    print(A[i],end=" ")

print(*a)


    print(a[i], end = "")
print()

    print(A[i],end=" ")


        print(0)
        print(2)
        print(-2)
        print(1)
        print(-1)

print(ans)

    print(2)
    print(-2)
    print(0)
    print(1)
    print(-1)

print(ans)



print(ans)

print(ans)


print(rap)    

print(ans)

print(ans)


print(ans)


print(ans)


print(ans)

print(ans)


print(rap)    







print(ans)


        print(0)
        print(2)
        print(-2)
        print(1)
        print(-1)

print(ans)







  











































































































































print(ans)























print(ans)




print(ans)


print(ans)


  


print(ans)

   


    print(2)
    print(-2)
    print(0)
    print(1)
    print(-1)


    print(2)
    print(-2)
    print(0)
    print(1)
    print(-1)


    print(0)
    print(1)
    print(2)
    print(-1)
    print(-2)

print(ans)


print(ans)


print(ans)







print(ans)


    print(2)
    print(-2)
    print(0)
    print(1)
    print(-1)


print(ans)



print(rap)    















print(ans)


    print(2)
    print(-2)
    print(0)
    print(1)
    print(-1)


print(ans)

print(ans)




  


print(ans)


    print(2)
    print(-2)
    print(0)
    print(1)
    print(-1)


print(ans)


print(ans)



print(ans)


print(ans)


    print(2)
    print(-2)
    print(0)
    print(1)
    print(-1)


print(ans)


    print(0)
        print(2)
        print(1)
        print(-2)
        print(-1)

    print(2)
    print(-2)
    print(0)
    print(1)
    print(-1)




print(ans)


print(ans)


    print(2)
    print(-2)
    print(0)
    print(1)
    print(-1)


    print(0)
    print(2)
    print(-2)
    print(1)
    print(-1)

    
print(solve())



print(ans)
    

print("{:.4f}".format(math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)))

print(math.sqrt(c))


print(P)

print(dis)

print(round(dist,8))

print(math.sqrt((x2 - x1)**2 + (y2 - y1)**2))

print(math.sqrt(z))

print(math.sqrt((x2-x1)**2+(y2-y1)**2))


print(anal)



print(math.sqrt(dx**2 + dy**2))

print(r)

print(result)

print(distance(x1,y1,x2,y2))


print(distance)


print(d)

print(f'{ans:.05f}')

print(AB)

print(distance)


print(math.hypot(x2 - x1, y2 - y1))

print(dist)


print(distance)



print(math.sqrt(x**2+y**2))


print(((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5)


print(distance)


print(math.sqrt(dx*dx+dy*dy))


print(((a - c) ** 2 + (b - d) ** 2) ** 0.5)

print(math.sqrt((x1-x2)**2+(y1-y2)**2))


print(distance)



print(d2**0.5)







print(distance)

print(f'{ans:.05f}')

print(math.hypot(x2 - x1, y2 - y1))

print(math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2))


print(math.sqrt(((x1-x2)**2)+(y1-y2)**2))

print(ans)


print(math.sqrt(X + Y))


print()


print("{:.8f}".format(distance))


print(f"{distance:.5f}")

print(distance)


print(distance)

print("{:.4f}".format(distance))


print(f"{result:.4f}")

print(distance)



print(length)

print(distance)

print(math.hypot((x2-x1),(y2-y1)))

print(math.hypot(x2 - x1, y2 - y1))

print(math.hypot(x2 - x1, y2 - y1))

print(dis)


print("{:.4f}".format(distance))

print(math.sqrt(dx*dx+dy*dy))

print(math.hypot(x2 - x1, y2 - y1))


print("{:.4f}".format(distance))

print(math.hypot(x2-x1, y2-y1))


print(math.hypot(x2 - x1, y2 - y1))

print(((x2-x1)**2 + (y2-y1)**2)**0.5)

print(math.hypot(x2-x1,y2-y1))


print("%.10f"%calc_len(p1,p2))


print(distance)

print(distance) 


print(math.hypot(x2 - x1, y2 - y1))

print(distance) 


print(math.sqrt(E**2+F**2))

print(math.hypot(x2 - x1, y2 - y1))

print(math.hypot(x2-x1, y2-y1))

print('{:.5f}'.format(d))
        


    


print(distans)

print(math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2))


print(math.sqrt(without_sqrt))


print(math.sqrt(dis))

print("{:.4f}".format(s))
print("{:.4f}".format(l))
print("{:.4f}".format(h))


print(s)
print(l)
print(h)

print('{0:8f}\n{1:8f}\n{2:8f}'.format(S, L, h))


print(S)
print(L)
print(h)



print(S)
print(L)
print(h)

print(S)
print(L)
print(h)

print(S)
print(length)
print(h)


print(S)
print(L)
print(h)

print(s)
print(l)
print(h)


print(S, L, h)

print(area(a,b,C))
print(length(a,b,C))
print(b*math.sin(math.radians(C)))

print('{:.8f}'.format(S))
print('{:.8f}'.format(L))
print('{:.8f}'.format(h))



print(s)
print(a+b+l)
print(h)

print(f'{S:.5f}')
print(f'{L:.5f}')
print(f'{h:.5f}')

print(S,L,h)

print("{:.8f}".format(S))
print("{:.8f}".format(L))
print("{:.8f}".format(h))


print(S, L, h, sep="\n")

print(S,L,h)


print(S, L, h)


print(S)


print(a + b + c)


print(b * math.sin(C))

print(S)
print(a + b + c)
print(h)


print("{:.8f}".format(S))
print("{:.8f}".format(L))
print("{:.8f}".format(h))



print(a * h / 2, a + b + (a * a + b * b - 2 * a * b * math.cos(c)) ** 0.5, h)

print(a*b*math.sin(math.pi*C/180)/2,a+b+math.sqrt(a**2+b**2-2*a*b*math.cos(math.pi*C/180)),b*math.sin(math.pi*C/180))


print(S)
print(L)
print(h)




print(S, a+b+d2**(1/2), h)







print(a*b*math.sin(C)/2)
print(math.sqrt((b*math.sin(C))**2 + (a-b*math.cos(C))**2)+a+b)
print(b*math.sin(C))


print(S)
print(L)
print(h)


print(S)
print(L)
print(h)

print(S)
print(L)
print(h)

print(f'{S:.5f}')
print(f'{L:.5f}')
print(f'{h:.5f}')

print(S,L,h, sep="\n")


print(S, L, h, sep="\n")


print('{:.5f}'.format(S))        
print('{:.5f}'.format(L))        
print('{:.5f}'.format(h))        


    


print("{:.10f}".format(S))

print("{:.10f}".format(L))

print("{:.10f}".format(h))



print(S)
print(L)
print(h)

print(S, L, h, sep="\n")


print(S)
print(L)
print(h)


print(s)
print(l)
print(h)

print(S, L, h, sep="\n")

print('%.10f'%S)
print('%.10f'%L)
print('%.10f'%h)

print(S)
print(L)
print(h)


print(f'{S:.5f}')
print(f'{L:.5f}')
print(f'{h:.5f}')


print(f"{s:.8f}")
print(f"{l:.8f}")
print(f"{h:.8f}")



print(f'{S:8f}')
print(f'{L:8f}')
print(f'{h:8f}')



print(S)
print(L)
print(h)

print(S)
print(L)
print(h)



    print(f"{S:.5f}")
    print(f"{L:.5f}")
    print(f"{h:.5f}")


print(f"{area_value:.5f}")
print(f"{circumference_value:.5f}")
print(f"{height_value:.5f}")


print(S)
print(L)
print(h)

print(a*b*math.sin(math.radians(deg))/2)
print(a+b+math.sqrt(a**2+b**2-2*a*b*math.cos(math.radians(deg))))
print(b*math.sin(math.radians(deg)))

print(S)
print(L+a+b)
print(h)

print(S, L, h, sep="\n")

print(S, L, h)

print(S)
print(a+b+c)
print(h)

print(f"{s:.8f}")
print(f"{l:.8f}")
print(f"{h:.8f}")



print(S)
print(L)
print(h)

    print("{:.4f}".format(sd))

    print(math.sqrt(a))


    print(f'{st_dev:.8f}')

    print(round(HH,8))

    print(a)

    print(math.sqrt(bunsan))


        print(s)


        print(al)

    
    print('{:.8f}'.format(std_deviation))


    print(standard_deviation(n,point))

    
    print(math.sqrt(b/n))

    print(f'{a:.5f}')

    print((a_sum / n)**0.5)

    print("{:.8f}".format(std_deviation))


    print(sd)

    print(std_deviation)


    print((SD/n)**0.5)
    


    print(math.sqrt(ttotal / n))

    print(f'{a:.5f}')



    print("{:.8f}".format(standard_deviation))


    print((sum([(a - i) ** 2 for i in s]) / n) ** 0.5)

    print(math.sqrt(a2))

        
    print(math.sqrt(a))
    


    print((sigma2/n)**0.5)







    print(math.sqrt(sum(s_e2)/n))

    print(math.sqrt(sum(a)/len(a)))


    print(q)

    print(f'{a:.5f}')

    print((var_sum/n)**0.5)
    

    print((var_sum/n)**0.5)

    print('{:.5f}'.format(v))
    




    


    print('%.12f'%(s))
        


    print("{:.10f}".format(dis))

    print((var_sum/n)**0.5)

    
    print(pow(t/n,1/2)) 


    print(math.sqrt(a/n))




        
    print((a / n) ** 0.5)

    print('%.10f'%math.sqrt(p/n))
        
        

    print(f'{standard_deviation:.8f}')

    print(f'{i:.5f}')
    
    


        print(hensa)

        print(f"{a:.8f}")

    

    print((var_sum/n)**0.5)

    print(alpha)

    print(f'{a:.5f}')

        print(ans)



        print("{:.4f}".format(result))


  print(out)

    
  


    print(math.sqrt(temp/n))

    print(i)


    print(f'{a:.5f}')

    print(math.sqrt(sum([(s - m)**2 for s in S]) / n))


  print(a)


    print(dev)

    print(f"{ans:.8f}")


    
    print(ans)


    print(data_std)


    print(sd)

    print(f'{ans:.5f}')

    print(f"{std_dev:.8f}")

    print("{:.6f}".format(float(d)))
print("{:.6f}".format(float(d)))


print('{0:.6f}\n{1:.6f}\n{2:.6f}\n{3:.6f}'.format(dis_1, dis_2, dis_3, dis_infinite))


print(f'{p1:.6f}')
print(f'{p2:.6f}')
print(f'{p3:.6f}')
print(f'{ma:.6f}')

print(D_1)
print(D_2)
print(D_3)
print(D_inf)


print(sum(p_1))
print(math.sqrt(p_2))
print(p_3 ** (1/3))
print(max(p_1))

print(d1)
print(d2)
print(d3)
print(d4)


print(p1)
print(math.sqrt(p2))
print(p3 ** (1/3))
print(pinf)

print(d)
print(math.sqrt(d))
print(d**(1/3))
print(d)



print(sum_1)
print(math.pow(sum_2, 1/2))
print(math.pow(sum_3, 1/3))
print(sum__)

    print("{0:.6f}".format(sum([abs(a-b)**p for a, b in zip(X, Y)])**(1/p)))
print("{0:.6f}".format(max([abs(a-b) for a, b in zip(X, Y)])))


print(d1)
print(d2)
print(d3)
print(dp)

    
    print(dxy_1)
    print(math.sqrt(dxy_2))
    print(math.pow(dxy_3,1/3))
    print(max(dxy))

print("{0:.6f}".format(S1**(1/1)))

print("{0:.6f}".format(S2**(1/2)))

print("{0:.6f}".format(S3**(1/3)))

print("{0:.6f}".format(S4_max))

    print("{0:.6f}".format(sum([abs(a-b)**p for a, b in zip(X, Y)])**(1/p)))
print("{0:.6f}".format(max([abs(a-b) for a, b in zip(X, Y)])))



print(dist1)
print(dist2)
print(dist3)
print(dist4)

    print(f"{distance:.5f}")


    print("{0:.6f}".format(sum([abs(a-b)**p for a, b in zip(X, Y)])**(1/p)))
print("{0:.6f}".format(max([abs(a-b) for a, b in zip(X, Y)])))



print(p1)
print(math.sqrt(p2))
print(p3 ** (1/3))
print(pmax)

print(dist(1, X, Y))
print(dist(2, X, Y))
print(dist(3, X, Y))
print(max(abs(x - y) for x, y in zip(X, Y)))



print(sum(a))
print(sum([i ** 2 for i in a]) ** (1 / 2))
print(sum([i ** 3 for i in a]) ** (1 / 3))
print(max(a))


print(D[0])
print(D[1]**(1/2))
print(D[2]**(1/3))
print(D[3])

    
print(d1)
print(d2)
print(d3)
print(d4)



print(manhattan)
print(euclid**0.5)
print(p3**(1/3))
print(chebi)



print(distance(x, y, 1))
print(distance(x, y, 2))
print(distance(x, y, 3))

print(max(result))

    print(c)
print(c)

    print("{0:.6f}".format(sum([abs(a-b)**p for a,b in zip(x,y)])**(1/p)))
print(max([abs(a-b) for a,b in zip(x,y)]))


print(p1)
print(p2)
print(p3)
print(pm)

print(f'{d1:.6f}')
print(f'{d2:.6f}')
print(f'{d3:.6f}')
print(f'{dinf:.6f}')

    print("{0:.6f}".format(sum([abs(a-b)**p for a,b in zip(X,Y)])**(1/p)))
print("{0:.6f}".format(max([abs(a-b) for a,b in zip(X,Y)])))


    print("{0:.6f}".format(sum([abs(a-b)**p for a, b in zip(X, Y)])**(1/p)))
print("{0:.6f}".format(max([abs(a-b) for a, b in zip(X, Y)])))

print("{:.5f}".format(d1(a,b)))
print("{:.5f}".format(d2(a,b)))
print("{:.5f}".format(d3(a,b)))
print("{:.5f}".format(d_inf(a,b)))
    




    


    print(f'{dis:.6f}')
print(f'{dis:.6f}')
    

    


print("{:.10f}".format(Minkowski_distance(1)))
print("{:.10f}".format(Minkowski_distance(2)))
print("{:.10f}".format(Minkowski_distance(3)))
print("{:.10f}".format(Minkowski_distance(math.inf)))

    print("{0:.6f}".format(sum([abs(a-b)**p for a, b in zip(X, Y)])**(1/p)))
print("{0:.6f}".format(max([abs(a-b) for a, b in zip(X, Y)])))


print(sum(lst_sa))
print(pow(sum(lst_sa2),1/2))
print(pow(sum(lst_sa3),1/3))
print(max(lst_sa)) 

print('%.10f'%m1)
print('%.10f'%math.sqrt(m2))
print('%.10f'%math.pow(m3,1/3))
print('%.10f'%tmp)

    print(i)

    print(f'{d:.5f}')
    


    print(res)


    print(D)
  
    print(D)

print(p1)
print(p2)
print(p3)
print(p_inf)

    print(f'{dist(i,x,y):.7f}')
print(max(abs(x[i]-y[i]) for i in range(len(x))))

print(f'{d1:.6f}')
print(f'{d2:.6f}')
print(f'{d3:.6f}')
print(f'{dinf:.6f}')


print(sum_p1)
print(sum_p2 ** 0.5)
print(sum_p3 ** (1 / 3))
print(sum_p_i)




    print(minkowski(x, y, n, 1))
    print(minkowski(x, y, n, 2))
    print(minkowski(x, y, n, 3))
    print(chebyshev(x, y ,n))





print(f"{D1_value:.6f}")
print(f"{D2_value:.6f}")
print(f"{D3_value:.6f}")
print(f"{infinite_value:.6f}")

print(k_1)
print(k_2**(1/2))
print(k_3**(1/3))
print(k)
  


    print(str( (reduce(lambda x,y:x+(y**i),dist,0) )**(1/i)))
print(max(dist))

    print(get_distance(x, y, p))


print(max([abs(i-j) for i, j in zip(x, y)]))

print(f"{d1:.8f}")
print(f"{d2:.8f}")
print(f"{d3:.8f}")
print(f"{di:.8f}")


  print(D)
print(Dmax)

    print('{:f}'.format(i))



print(D1)
print(D2)
print(D3)
print(Dinf)

    print(d)


print(max(distances))

    
    print(f"{distance:.6f}")


print(f"{sum(p1_lst):.6f}")



print(f"{sum(p2_lst)**0.5:.6f}")



print(f"{sum(p3_lst)**(1/3):.6f}")


print(f"{max(pmx_lst):.6f}")

    print(result[i])
print(d1) 
print(d2**0.5)
print(d3**(1/3))
print(di)

print(dice[0])


print(dice[1])


print(dice[0])

print(daice[0])        

print(L[0])



print(dice[0])

print(a)

print(a[0])


print(L[0])


print(d[0])

print(result)


print(dice.get_top())


print(no[0])
    


print(dice.searching_top_value())

print(a[0])

        
print(dice.top)



print(dice.top())



print(dice.show_top())



print(a[0])


         print(self.a)


print(dice[0])


print(result)


print(dice_number[upper - 1])


print(dice.getTop())














print(dice1.top())

print(roll_dice(instructions, dice_dict))


    print(d.U)


print(dice_value[dice.top - 1])


        
print(a[0])



print(dice.top())

print(number[dice['top'] - 1])

print(top)

print(num[0])

print(number[0])


print(F_T)


print(dice.show_top())



print(dice[top])


print(dice.result())



print(dice.u)


print(dice[0])

print(dice.show_top())


print(val[top])


print(dice[0])

print(number[0])


        
print(dice.top)

print(number[0])

print(num[0])


print("%d"%(dice.get_Top()))

print(number[0])

print(number[dice['top'] - 1])

print(number[dice['top'] - 1])

print(number[dice['top'] - 1])


print(dice.show_top())

print(l[data[1]-1])


print(dice[0])

print(dice.get_top())
    


print(d1.surface[0])

print(dice.sequence[0])




print(dice_simulator.get_top_face())

print(number[0])

        print(self.d1)
print(d.top())


print(label[0])


        print(self.top)

                print(dice[j])
    print(dice[2])

    print(daice[2])       

                    print(L[S[i][k-3]])

            print(cls.dice1[cls.dict(cls.dice1.index(x[0]),cls.dice1.index(x[1]))])

    
    print(newdice[2])
            

        print(a)
        print(b)
        print(c)
        print(d)
        print(e)
        print(f)


    print(a[2])

 print(d[n[n.index(f)+1]])

    print(dice.right)


    print(dice.searching_rightside_value(top,front))




    print(a[2])

                    print(dice.east)

    print(a[2])

    print(right)


    print(w[(w.index(d) + 1) % 4])

         print(self.a)

            print(dice.c)
            print(dice[k])
            print(dice[5-k])


    print(dice_number[answer - 1])


            print(dice.e)
                print(dice1.get_right())
    print(dice_value[dice.right[a_idx][b_idx]-1])


    print(a[2])
    

			print(num[tmp[(j+1)%4]-1])

        print(self.surface[2])
    

        print(start_of_dice[2])

        print(start_of_dice[3])
    
        print(start_of_dice[1])

        print(start_of_dice[4])

        print(start_of_dice[0])

        print(start_of_dice[5])

    print(dicea.d3)
    

    print(d.right())
    



        print(label[0])
        print(label[1])
        print(label[2])
        print(label[3])
        print(label[4])
        print(label[5])

            print(self.e)
            print(self.s)
            print(self.w)
            print(self.n)

        print(self.top)

        print(dice[0])
        print(dice[1])
        print(dice[2])
        print(dice[3])
        print(dice[4])
        print(dice[5])


  print(dice.right())


            print(numbers[2])
            
            print(numbers[4])
            
            print(numbers[3])
            
            print(numbers[1])
            
            print(numbers[2])
            
            print(numbers[0])
            
            print(numbers[3])
            
            print(numbers[5]) 
        
            print(numbers[5])
            
            print(numbers[4])
            
            print(numbers[0])
            
            print(numbers[1])
        
            print(numbers[1])
            
            print(numbers[0])
            
            print(numbers[4])
            
            print(numbers[5])
        
            print(numbers[2])
            
            print(numbers[5])
            
            print(numbers[3])
            
            print(numbers[0])
        
            print(numbers[3])
            
            print(numbers[4])
            
            print(numbers[2])
            
            print(numbers[1])
        

        print(self.top)

            print("received invalid data")
        

        print(d.get_right())
    print(numbers[side[k]])

    print(dice.query_southNumber(t, s))

    print(d[(a, b)])


                print(dice.sides[2])


    print(dice.right())

                    print(L[S[i][k-3]])


    print(d.getRight())
    print(d[2])

        print(dp[0])

    print(dice.ans2(a,b))

    
    print(dice[2])


    


        print(self.label[self.top])
    
        print(self.label[self.right])
        
    print(dice[2])

        
    print(a[2])
    
    


    print(x[2])

    print("%d"%(dice.query(top_num, front_num)))


                print(dice.sequence[3])



print(*ans,sep="\n")

    print(dice.get_right_plane_num(u, f))

    print(ret[2])

    print(answer[j])


        print(d.get_east())



        print(solve.numlist[2])
        print(solve.numlist[3])
        print(solve.numlist[0])
        print(solve.numlist[5])
        print(solve.numlist[4])
        print(solve.numlist[1])
    


          print(num[d3])
        print("Yes")
        print("No")


print('Yes' if equal(dice1, dice2) else 'No')


    print('Yes')
    print('No')


print("Yes" if ok else "No")

            print("Yes")
            print("No")
        

    print("Yes")
    print("No")

    print("No")
    print("No")
    print("No")
    print("No")
    print("Yes")

    print("Yes")
    print("No")

print(('No','Yes')[t])

        print('Yes')
    print('No')

        print("Yes")
    print("No")


    print("Yes")
    print("No")

    print('Yes')
    print('No')


         print(self.a)

    print('Yes')
    print('No')

    print('Yes')
    print('No')

    print('Yes')
    print('No')
    

    print('Yes')
    print('No')

    print("Yes")
    print("No")


    print("Yes")
    print("No")


    print('Yes')
    print('No')

	print("Yes")
	print("No")	

    print('Yes')
    print("No")
    

print('Yes' if bool==1 else 'No')

    print('Yes')
        print('Yes')
        print('No')

    print("No")
            print("Yes")
        print("No")



                print("No")
print("Yes")


              print('No')
          print('Yes')
          print('No')
        print(f'              {self.surface_num[self.pos_status[4]]}')
        print('        ---------')
        print(f'   {self.surface_num[self.pos_status[3]]}  ／  {self.surface_num[self.pos_status[0]]}    ／│')
        print('    ／       ／  │')
        print('    --------     │')
        print(f'    │       │  {self.surface_num[self.pos_status[2]]} │')
        print(f'    │  {self.surface_num[self.pos_status[1]]}    │  ／')
        print('    │       │／')
        print('    --------')
        print(f'      {self.surface_num[self.pos_status[5]]}')
    
        print('Yes')
        print('No')




        print(self.top)

        print("No")
        print("No")
        print("No")
        print("No")
        print("Yes")


    print(self.seq[0])

    print(self.seq)
  
print(out)


        print("Yes")
        

print("No")


print('Yes') if dice1.isSame(dice2) else print('No')

                print("Yes")
print("No")


    print('Yes')
    print('No')


    print("Yes")
    print('No')


print(result)

    print('Yes')
    print('No')

print(dice1.ans3(dice2))




  print('Yes')
  print("No")
    



    


        print(self.label[self.top])
    
        print(self.label[self.right])
        
        print("Yes")
        print("No")
        
print(eq)

    print("Yes")
    print("No")


  print('Yes')
  print('No')

    print("Yes")
    print("No")


    
print('Yes' if minimize(input()) == minimize(input()) else 'No')


    print('Yes')
    print('No')

        print("Yes")
        print("No")
    print("No")


print('Yes' if r == True else 'No')


    print("Yes" if d1 == d2 else "No")


            print("No")
    
                print("No")
            
    print("Yes")
    print("No")

                print('Yes')
print('No')
    print('Yes')
    print('No')
      print("Yes")
print("Yes" if d1.norm() == d2.norm() else "No")

print("Yes" if d1.norm() == d2.norm() else "No")


print("Yes" if dice.get_surface(2) == other.get_surface(2) else "No")

    print(dice.query(another_numbers))
    print("No")


                print("Yes")
                print("No")
                print("Yes")
                print("No")
                print("Yes")
                print("No")
                print("Yes")
                print("No")
    print("Yes")
    print("No")

    print("No")
    print("Yes")



    print("No")
    print("Yes")


    print('Yes')
    print('No')

        print(self.top)

            print("Received invalid data. Try again.")
        print("No")
        print("Yes")


print('No') if flg else print('Yes')



    print("Yes" if f else "No")


    print("No")
    print("Yes")


print("Yes" if len(s) == n else "No")

        print("No")
print("Yes")

    print("No")
    print("Yes")


            print("No")
                print("No")
    print("Yes")

            print("No")
    print("Yes")

print(result)

    print("No")
    print("Yes")


print("Yes" if not has_same_dice else "No")

                print("No")
    print("Yes")

    print("Yes")
    print("No")

print('Yes' if len(surface_set) == n else 'No')


        print("No")
        print("Yes")


    print('Yes')
    print('No')

        print("No")
            print("Yes")
print(result)

        print(self.label[self.top])
    
        print(self.label[self.right])
        
                print("No")
    print("Yes")
    
        print('No')
    print('Yes')
 


        print('No')
    print('Yes')



    
print('No' if dep else 'Yes')

        print("No")
    print("Yes")

      print("No")
  print("Yes")

print(Dice.isdifferent(dices))

        print('[top   ] :', self.__dice[Dice.__top])
        print('[front ] :', self.__dice[Dice.__front])
        print('[right ] :', self.__dice[Dice.__right])
        print('[left  ] :', self.__dice[Dice.__left])
        print('[back  ] :', self.__dice[Dice.__back])
        print('[bottom] :', self.__dice[Dice.__bottom])


        print("No")

print("Yes")

                print('No')
print('Yes')


print(ret)


print("Yes" if chk else "No")


            print("▲err")
print("Yes" if len(ans) == cnt else "No")


            print("No")
        print("Yes")


print("No") if b > 0 else print("Yes")

            print('No')
    print('Yes')

print(f())

        print('No')
        print('Yes')

        print('No')
        print('Yes')

    print("Yes")
            print("No")


print("Yes")

	print('Yes')
	print('No')

            print('No')
        print('Yes')


            print('No')
        print('Yes')


            print('No')
        print('Yes')


    print("Yes")
    print("No")


	print("Yes")
	print('No')

print(f())

print(f())

	print('Yes')
	print('No')

            print('No')
        print('Yes')


				print("No")	
	print("Yes")


        print(self.dice[0])
    
        print("No")
        
print("Yes")

    print("Yes")
    print("No")

print(f())

print("Hello World")

print("Hello World")



print("Hello World")

print("Hello World")

print("Hello World")

print("Hello World")

print("Hello World")

print("Hello","World")

print("Hello World")

print("Hello World")

print("Hello World")

print("Hello World")

print('Hello World')

print("Hello World")

print("Hello World")

print('Hello World')

print("Hello World")

print("Hello World")

print("Hello World")

print("Hello World")

print("Hello World")

print("Hello World")

print("Hello World")

print("Hello World")


print("Hello World")

print('Hello World')

print("Hello World")

print("Hello World")

print("Hello World")

print('Hello World')

print("Hello World")

print("Hello World")


print("Hello World")

print("Hello World")

print("Hello World")

print('Hello World')

print("Hello World")

print("Hello World")


print("Hello World")

print(result)

print('Hello World')

print("Hello World")

print("Hello World")

print('Hello World')

print("Hello World")

print("Hello World")

print("Hello World")

print("Hello World")

print('Hello World')

print("Hello World")

print("Hello World")

print('Hello World')

print("Hello World")

print(x**3)

print(n)


print(out_x)

print(x**3)


print(x**3)

print(x**3)

print(x*x*x)

print(x**3)


print(x**3)

print(x**3)

print(x**3)

print(x**3)

print(x**3)

print(x**3)


print(x**3)

print(x**3)

print(n**3)


print(a**3)

print(x*x*x)

print(number**3)

print(x*x*x)

print(x**3)


print(x*x*x)

print(x**3)

print(x**3)

print(int(input())**3)

print(ans)

print(x**3)

print(X**3)


print(int(input())**3)

print(x**3)

print(x**3)


print(number**3)

print(x**3)

print(y)


print(x ** 3)

print(x**3)

print(x**3)



print(x**3)



print(x ** 3)

print(x**3)

print(a**3)

print(result)


print(x*x*x)

print(x**3)

print(num*num*num)

print(x ** 3)


print(x**3)

print(a*b, a*2+b*2)


print(area, peri)

print(str(c)+" "+str(d))

print(a*b,2*a+2*b )


print(a*b, 2*(a+b))


print(A*B,2*(A+B))

print(a * b, a * 2 + b * 2)


print(a*b,2*(a+b))

print(a * b, a * 2 + b * 2)


print(S,R)

print(n*m, 2*n+2*m)

print(a*b,a*2 + b*2)

print("{} {}".format(x*y, 2*x+2*y))

print(x*y,x*2+y*2)


print(A*B,2*(A+B))

print(a*b,(a+b)*2)

print(a*b,2*(a+b))



print(a*b,(a+b)*2)

print(a*b,a*2+b*2)

print(str(ans1) + " " + str(ans2))

print(a * b, a * 2 + b * 2)

print(a*b,a*2+b*2)

print(a*b,(a+b)*2)

print(Area,circ)

print(A*B, 2*A+2*B)

print(x*y,(x+y)*2)

print(a*b,2*(a+b))



print(x * y, x * 2 + y * 2)

print(a*b,2*(a+b))


print(x*y,2*(x+y))

print(x*y,2*(x+y))

print(area,length)

print(a*b,a*2+b*2)

print(a*b,2*a+2*b)

print(a*b,2*a+2*b)


print(a*b,2*(a+b))

print(a * b, a * 2 + b * 2)

print(a*b, a*2+b*2)

print(x*y, 2*(x+y))


print(area, cirLength)

print(a*b,a*2+b*2)


print(m,l)

print(a*b,2*(a+b))


print(a * b, 2*a + 2*b)


print(a*b, 2*(a+b))

print(a*b, a*2+b*2)


print(a * b, b * 2 + a * 2)

print(a * b, a * 2 + b * 2)

print(a*b, 2*a+2*b)

print(a*b, a*2+b*2)


print(f"{hours}:{minutes}:{seconds}")

print("{0}:{1}:{2}".format(int(h), int(m), int(s)))

print(f"{s//3600}:{s%3600//60}:{s%60}")

print(f"{h}:{m}:{s}")

print(f"{h}:{m}:{s}")

print(h,m,s, sep=":")

print(f"{h}:{m}:{s}")

print("{0}:{1}:{2}".format(h, m, s))


print(h,m,s,sep =":")

print(f"{hour}:{minute}:{second}")


print("%d:%d:%d"%(S/3600,(S%3600)/60,S%60))

print(f"{h}:{m}:{s}")

print(f"{h}:{m}:{s}")


print(x//3600,(x-(x//3600)*3600)//60, x-(x//60)*60,sep = ":")

print(f"{hour}:{minute}:{second}")


print("%d:%d:%d"%(S/3600,(S%3600)/60,S%60))

print(S//3600,S%3600//60,S%60,sep=":")




print(f'{h}:{m}:{s}')

print(f"{h}:{m}:{s}")

print(f"{h}:{m}:{s}")

print(f"{h}:{m}:{s}")


print(int(n/3600), ":", int((n%3600) /60), ":", n %60, sep="")


print(h,':',m,':',s,sep='')

print(f"{hour}:{min}:{sec}")

print(f"{h}:{m}:{s}")



print(h,':',m,':',s,sep='')

print(f"{h}:{m}:{s}")

print(f"{h}:{m}:{s}")


print("%d:%d:%d" %(h,m,s))

print(f"{h}:{m}:{s}")


print('%d:%d:%d'%(h,m,s))

print(hh + ":" + mm + ":" + ss)

print(h, m, s, sep = ':'  )

print(f"{h}:{m}:{s}")

print(str(h)+':'+str(m)+':'+str(s))

print("%d:%d:%d" % (S//3600,(S//60)%60,S%60))

print(f"{h}:{m}:{s}")



print(f"{h}:{m}:{s}")


print(f"{h}:{m}:{s}")

print(f"{h}:{m}:{s}")


print(f"{h}:{m}:{s}")


print(f"{h}:{m}:{s}")

print(str(h)+":"+str(m)+":"+str(s))

print(f"{h}:{m}:{s}")

print(str(h)+":"+str(m)+":"+str(s))

print(str(h) + ":" + str(m) + ":" + str(s))


print(h,m,s,sep = ':')

print(f"{h}:{m}:{s}")


print(str(A)+":"+str(C)+":"+str(D))



print(str(h) + ':' + str(m) + ':' + str(s))

print(f"{h}:{m}:{s}")

    print("a > b")
    print("a < b")
    print("a == b")

        print("a < b")
        print("a > b")
        print("a == b")


  print("a > b")
  print("a < b")
  print("a == b")

    print("a < b")
    print("a > b")
    print("a == b")

    print("a > b")
    print("a == b")
    print("a < b")

    print("a > b")
    print("a < b")
    print("a == b")

    print("a < b")
    print("a == b")
    print("a > b")

    print("a < b")
    print("a > b")
    print("a == b")

 print("a < b")

 print("a > b")
 
 print("a == b")

    print("a > b")
    print("a < b")
    print("a == b")

    print("a > b")
    print("a < b")
    print("a == b")

    print("a < b")
    print("a > b")
    print("a == b")

    print("a > b")
    print("a < b")
    print("a == b")

    print("a < b")
    print("a > b")
    print("a == b")



    print("a < b")
    print("a > b")
    print("a == b")

  print('a < b')
  print('a > b')
  print('a == b')

   print('a < b') 
    print('a > b') 
    print('a == b')

    print("a > b")
    print("a < b")
    print("a == b")

    print("a < b")
    print("a > b")
    print("a == b")

    print("a > b")
    print("a < b")
    print("a == b")

    print("a < b")
    print("a == b")
    print("a > b")

    print('a > b')
    print('a == b')
    print('a < b')

    print("a < b")
    print("a > b")
	print("a == b")

    print('a == b')
    print('a < b')
    print('a > b')

    print("a > b")
    print("a < b")
    print("a == b")

    print('a < b')
    print('a > b')
    print('a == b')

    print("a > b")
    print("a < b")
    print("a == b")

        print("a > b")
        print("a < b")
        print("a == b")

    print('a < b')
    print('a > b')
    print('a == b')

    print('a > b')
    print('a < b')
    print('a == b')

  print("a < b")
  print("a > b")
  print("a == b")

    print('a < b')
    print('a > b')
    print('a == b')

    print("a > b")
    print("a < b")
    print("a == b")

    print("a < b")
    print("a > b")
    print("a == b")


    print("a < b")
    print("a > b")
    print("a == b")


  print("a > b")
  print("a < b")
  print("a == b")

    print("a < b")
    print("a > b")
    print("a == b")

  print("a < b")
  print("a > b")
  print("a == b")

    print("a < b")
    print("a > b")
    print("a == b")

    print("a < b")
    print("a > b")
    print("a == b")


    print("a > b")
    print("a < b")
    print("a == b")

    print('a < b')

    print('a > b')

    print('a == b')

    print("a < b")
    print("a > b")
    print("a == b")


    print('a > b')
    print('a < b')
    print('a == b')


    print("a < b")
    print("a > b")
    print("a == b")

    print("a > b")
    print("a == b")
    print("a < b")

    print("a < b")
    print("a > b")
    print("a == b")

    print("a > b")
    print("a < b")
    print("a == b")

    print("a < b")

    print("a > b")

    print("a == b")


    print("a > b")
    print("a == b")
    print("a < b")


print({a>b:"a > b",a<b:"a < b"}.get(True,"a == b"))

  print('a < b')
  print('a > b')
  print('a == b')

    print("Yes")
    print("No")

        print("Yes")
        print("No")


  print("Yes")
  print("No")
  

    print("Yes")
    print("No")

    print("Yes")
    print("No")

    print("Yes")
    print("No")

    print("Yes")
    print("No")

 print("Yes")
 print("No")


    print("Yes")
    print("No")

    print("Yes")
    print("No")

    print("Yes")
    print("No")

    print("Yes")
    print("No")

    print('Yes')
    print('No')

  print('Yes')
  print('No')

    print("Yes")
    print("No")

    print('Yes')
    print('No')

    print("Yes")
    print("No")



    print("Yes")
    print("No")

        print("Yes")
        print("No")
    print("No")

    print("Yes")
    print("No")

    print('Yes')
    print('No')

    print("Yes")
	print("No")

    print('Yes')
    print('No')

    print("Yes")
    print("No")


    print('Yes')
    print('No')

    print('Yes')
    print('No')


print(_check(a, b, c))

    print('Yes')
    print('No')

    print('Yes')
    print('No')

    print("Yes")
    print("No")

    print("Yes")
    print("No")

  print("Yes")
  print("No")

  print("Yes")
  print("No")

    print("Yes")
    print("No")

  print("Yes")
  print("No")

    print("Yes")
    print("No")


    print("Yes")

    print("No")

    print("Yes")
    print("No")
    

    print("Yes")
    print("No")

    print('Yes')
    print('Yes')

    print('No')

    print('Yes')
    print('No')


    print('Yes')
    print('No')

    print("Yes")
    print("No")

    print("Yes")
    print("No")

    print("Yes")
    print("No")

    print("Yes")

    print("No")

    print("Yes")
    print("No")

    print('Yes')
    print('No')


print({a<b<c:"Yes"}.get(True,"No"))

  print('No')

    print('Yes')
    print('No')


print(first, middle, third)

    print("{0} {1} {2}".format(input_list[0],input_list[1],input_list[2]))



print(a,b,c, sep=" ")

print(a[0],a[1],a[2])

        print(sortList[i])
        print(sortList[i],end=" ")

print(*sorted(map(int,input().split())))

        
print(' '.join(map(str,a)))
            



print(a[0],a[1],a[2])



print(' '.join(map(str,a)))



print(l[0],l[1],l[2])

print(*l)

print(a,b,c)

print(*sorted(map(int,input().split())))



print(' '.join(map(str,a)))

print("{} {} {}".format(a, b, c))

print(num[0],num[1],num[2])

print("{} {} {}".format(a[0], a[1], a[2]))


print(' '.join(map(str,a)))
    

print(min, sum - min - max, max)

print(' '.join(map(str, a)))

print(*sorted_numbers)


print(a[0],a[1],a[2])


 print(a,b,c)
 print(a,c,b)
 print(b,a,c)
 print(b,c,a)
 print(c,b,a)
 print(c,a,b)


    
print('%d %d %d'%(a,b,c))

print(" ".join(map(str,A)))

print(x[0],x[1],x[2])

print(" ".join(map(str,x)))


print(a, b, c)

print(f"{a} {b} {c}")

print(ls[0], ls[1], ls[2])


print(' '.join(map(str, a)))


print(a,b,c)

print(a,b,c)

print(' '.join(map(str,A)))


print(str(b[0])+' '+str(b[1])+' '+str(b[2]))



print(' '.join(map(str, sorted(n))))



print(f'{a} {b} {c}')


print(a[0], a[1], a[2])
    
    

    print(a,b,c)
    print(b,a,c)
    print(c,b,a)
    print(a,c,b)
    print(b,c,a)
    print(c,a,b)

print(a[0], a[1], a[2])



print(" ".join(map(str,sorted_numbers)))

print(*a)


print(a,b,c)


print(num[0], num[1], num[2])

print(" ".join(map(str,sorted(lis))))

print(*sorted(map(int, input().split())))  

print(*sorted_numbers)


print(a[0],a[1],a[2])


print(*numbers)


        print(a,b,c)
        print(a,c,b)
        print(b,a,c)
        print(b,c,a)
        print(c,a,b)
        print(c,b,a)

    print("No")
    print("Yes")

         print("Yes")
         print("No")



    print("Yes")
    print("No")

    print("No")
    print("No")
    print("Yes")

    print('Yes')
    print('No')

    print("Yes")
    print("No")

    print("Yes")
    print("No")

    print("Yes")
    print("No") 


    print("Yes")
    print("No")

  print('No')
  print('No')
  print('No')
  print('No')
  print('Yes')

    print("Yes")
    print("No")

print('Yes' if x >= r and y >= r and x <= w - r and y <= h - r else 'No')


    print(N)
    print(N)
    print(Y)

    print("No")
    print("No")
    print("Yes")


    print("Yes")
    print('No')

    print("Yes")
    print("No")


    print('Yes')
    print('No')

 print("No")
 print("No")
 print("No")
 print("No")
 print("Yes")

    print('Yes')
    print('No')

    print("Yes")
    print("No")

    print('Yes')
    print('No')


    print("Yes")

    print("No")

    print('Yes')
    print('No')

    print("No")
    print("Yes")
    print("No")

  print("Yes")
  print("No")

    print("Yes")
    print("No")

  print("Yes")
  print("No")

    print("Yes")
    print("No")
    

    print("Yes")
    print("No")

    print("Yes")
    print("No")



    print('Yes')
    print("Yes")
    print("No")

    print('Yes')
    print('No')


    print('Yes')
    print('No')

    print("Yes")
    print("No")

    print("Yes")
    print("No")
    

    print("Yes")
    print("No")

    print("Yes")
    print("No")

    print('Yes')
    print('No')



    print("Yes")
    print("No")
   print("No")

    print("Yes")
    print("No")

    print('Yes')
    print('No')

    print('No')
    print('Yes')

    print("Yes")
    print("No")



    print("Yes")
    print("No")

    print("No")
    print("Yes")

print("Yes"*(r<=x<=W-r)*(r<=y<=H-r)or"No")

    
print(flag)


print(circle(W, H, x, y, r))

    print("Yes")
    print("No")

    print("Hello World")

    print("Hello World")

    print("Hello World")

    print("Hello World")

    print("Hello World")

    print("Hello World")

    print("Hello World")

    print("Hello World")

    print("Hello World")
    print("Hello World")

    print('Hello World')
    print("Hello World")

    print("Hello World")

print("Hello World\n"*1000)

    print('Hello World')


    print("Hello World")

    print('Hello World')

    print("Hello World")


    print('Hello World')

    print("Hello World")
    print('Hello World')

    print("Hello World")

    print('Hello World')

    print("Hello World")

    print('Hello World')

  print("Hello World")
        print("Hello World")
    print("Hello World")
    

    print('Hello World')
    print('Hello World')

    print("Hello World")

    print("Hello World")


    print('Hello World')
 print("Hello World")

    print("Hello World")
    print("Hello World")

    print("Hello World")

  print("Hello World")
    print('Hello World')
  print("Hello World")
    print('Hello World')

    print('Hello World')

    print("Hello World")


    print("Hello World")

  print('Hello World')
    print("Hello World")

        print(f'Case {i}: {l}')





    


    print(f"Case {i+1}: {li[i]}",end="")

    print("Case " + str(i) + ": " + e)

        print(f"Case {idx}: {x}")
            print(f"Case {i+1}: {v}")

    print("Case {0}: {1}".format(i + 1, list_data[i]))

    
    print(f"Case {i}: {k}")
    print("Case {}: {}".format(i,x))
    
    print(f"Case {casenum}: {x}")
    print(f"Case {i}: {x}")
    print("Case ",cnt,": ",x,sep='')




    print(f"Case {cnt}: {x}")
    print("Case " + str(i) + ": " + str(x))

        print(f"Case {i+1}: {x}")
    print('Case %d: %d'%(count,x))
    print("Case ", i, ": ", x, sep="")
    print(f"Case {case_number}: {x}")
    
    print('Case %d: %s'%(count,x))
    print(f"Case {i}: {num}")

    print("Case %d: %d" %(i, x))

        print("Case {}: {}".format(count,x))

    print(f"Case {i}: {x}")
    

    print(f"Case {k}: {x}")



 print(f"Case {i}: {x}")

    print('Case ' + str(i+1) + ': ' + str(x[i]))


    print(f'Case {n}: {x}')


        print(f"Case {i}: {x}")
    print(f'Case {c}: {x}')

    print(f"Case {i}: {x}")
  print("Case",str(i)+":",x)

        print(f"Case {n}: {X}")

    print(f"Case {case_number}: {x}")
    
    print("Case %d: %d"%(x, y))
    print(f"Case {j + 1}: {b[j]}")

      print(r)
    print("Case " + str(cnt) + ": " + str(x))

  print("Case " + str(cnt) + ": " + str(x))

  print("Case "+str(i)+": "+str(x))
    print(f'Case {i}: {n}')
    print(f"Case {case}: {x}")

    print(f"Case {count}: {i}")
    

    print(f'Case {count}: {num}')
        print(f"Case {i}:", x)


        print(f"Case {i}: {x}")
    print(f'Case {i+1}: {x}')
        print(b,a)
        print(a,b)

    print(out_x, out_y)

        
    print(a,b)

        print(x[0],x[1])
        print(x[1],x[0])

        print(str(x)+" "+str(y))
        print(str(y)+" "+str(x))

            print(y,x)
            print(x,y)


        print(b, a)
        print(a, b)

    print(x,y)

        print(x,y)
        print(y,x)

            print(x,y)
            print(y,x)
        
        

        print(y,x)
        print(x,y)

    print(min(a, b), max(a, b))

        print(x, y)
        print(y, x)


        print(x, y)
        print(y, x)


        print(x, y)
        print(y, x)


        print(x, y)
        print(y, x)


        print(x, y)
        print(y, x)


    print(a[0], a[1])


    print(a[0], a[1])


        print("%d %d" %(y, x))

        print("%d %d" %(x, y))

        print(y,x)
        print(x,y)

    print(x, y)
    print(y, x)

        print(x,y)
        print(y,x)

      print(b,a)
      print(a,b)


    print(x[0],x[1])

        print(f"{x} {y}")
        print(f"{y} {x}")
        


        print(b, a)
        print(a, b)

        print(y, x)
        print(x, y)

            print(f"{y} {x}")
            print(f"{x} {y}")



        print(f"{y} {x}")
        print(f"{x} {y}")
        

		print(a, b)
		print(b, a)


      print(str(a),str(b))
      print(str(b),str(a))

        print(b, a)
        print(b, a)
        

    print(x,y)
    print(y,x)

        print(f"{x} {y}")
        print(f"{y} {x}")


        print(a[0], a[1])
        print(f"{Y} {X}")
        print(f"{X} {Y}")




      print(str(x),str(y))
      print(str(x),str(y))
    print(a,b)

    print(x,y)  

        print(b,a)
        print(a,b)
        

  print(a, b)

    print(f'{a} {b}')
    


        print(x, y)
        print(y, x)


    print(f"{a[i]} {b[i]}")


print(j)


print(count)


print(count)

print(count)

print(count)

        
print(f"{count}")


print(ans)

print(count)


print(ans)

print(n)

print(cnt)

print(count)


print(count)


print(count)

print(count)


print(k)


print(count)

print(sum([a <= i <= b for i in L]))


print(count)


print(x)


print(i)


print(l)

print(j)

print(n)
        


print(d)

print(n)


    
print(cnt)

print(n)


print(number)


print(number)

        
print(i)

        
print(count)


print(count)        

print(ans)

print(ans)

print(cnt)

print(count)
    

print(cu)

print(count)

print(count)



print(count)        
    


print(ansList.count(0))

        
print(len(x))

    print(y)
    print(y)
print(count)


print(count)



print(ans)



print(cnt)

print(count)

        print(str(count))
print(d)


print(count)

print(x)
    

print(a//b,a%b,round(a/b,6))


print("{} {} {:.05f}".format(d, r, f))


print(a//b, a%b, f"{a/b:.5f}")

print(int(a/b),a%b,f"{a/b:.5f}")

print(a//b,a%b,'{:.5f}'.format(a/b))


print(f"{a//b} {a%b} {a/b:.5f}")



print(d,r,f)

print(d,r,f"{m:.6f}")


print("{} {} {:.6f}".format(a // b, a % b, a / b))

print(d,r,f"{f:.6f}")


print('%d %d %f'%(a/b,a%b,a/b))

print(d, r, round(f, 6))

print(d,r,f'{f:.6f}')

print(d, r, "{:.5f}".format(f))


print(f"{d} {r} {f:.6f}")


print('%d %d %f'%(d,r,f))


print("%d %d %f" %(d, r, f))

print(f"{d} {r} {f:.5f}")

print(c, d, f"{e:.6f}")

print(d,r,f"{f:.5f}")

print(f"{d} {r} {f:.6f}")

print(f"{d} {r} {f:.5f}")


print("{} {} {:.5f}".format(d, r, f))



print(f"{d} {r} {f:.6f}")


print(f"{d} {r} {fmtd}")


print(d, r, f'{f:.5f}')


print(f'{a // b} {a % b} {a / b: .5f}')

print(d,r,f'{f:.6f}')


print(d,r,f"{f:.5f}")

print(a//b,a%b,"{:.5f}".format(a/b))

print(str(d),' ',str(r),' ','{:.5f}'.format(f))

print(d, r, "{:.5f}".format(f))

print(d, r, f"{f:.6f}")

print(d, r, "{:.5f}".format(f))


print(d, r, "{:.5f}".format(f))

print(a//b, a%b, "{0:10.20f}".format(a/b))

print(f"{d} {r} {f:.6f}")



print(d, r, f'{f:.05f}')

print(a//b , " " , a%b , " {:.5f}".format( a/b) )

print(d, r, "{:.5f}".format(f))


print(c,d,f"{e:.5f}")

print(d, r, f"{f:.10f}")


print(a // b, a % b, '{:.05f}'.format(x))


print(f"{ans1} {ans2} {ans4}")


print(int(a/b), a%b, format(a/b, '.10f'))

print(d, r, '{:.05f}'.format(f))

print(a//b,a%b,round(a/b,6))


print(f'{d} {r} {f:5f}')


print("{0} {1} {2:.12f}".format(a // b, a % b, a / b))


print(a // b, a % b, f"{a / b:.6f}")

print(a//b,a%b,end=' ')
print(f)

print(round(pi*r*r,5) , round(2*pi*r,5))

print("{:.06f} {:.06f}".format(area, length))

print(pi*r*r,pi*2*r)


print(f"{r**2*math.pi:.6f} {r*2*math.pi:.6f}")


print("%.10f %.10f" %(area,circumference))

print(r*r*3.141592653589,r*2*3.141592653589)




print(f"{math.pi*r**2:.6f} {math.pi*2*r:.6f}")






print(s,d)

print(math.pi*r**2,2*math.pi*r)

print("{:.6f} {:.6f}".format(r * r * math.pi, 2 * r * math.pi))

print(f'{S:.6f} {l:.6f}')


print('%f %f'%(pi*r*r,2*pi*r))

print(round(r * r * math.pi, 6), round(2 * r * math.pi, 6))

print("{0:.6f} {1:.6f}".format(area,circ))

print("{:.6f} {:.6f}".format(area, circumference))


print(S,L)

print("{0:.6f} {1:.6f}".format(pi*r**2, 2*pi*r))



print('%f %f'%(s,l))

print(f"{S:.6f} {L:.6f}")

print(f"{S:.5f} {L:.5f}")


print(r*r*p, 2*r*p)



print(f"{for_area} {for_peri}")


print(f'{r*r*pi:.6f}', f'{2*r*pi:.6f}')



print(M, N)


print("{} {}".format(area, length))


print(f"{r * r * math.pi: .6f} {r * 2 * math.pi: .6f}")



print(d, l)


print(pi*r**2,2*pi*r)

print("%f %f"%(area,peri))

print(area,len)

print(f"{menseki:.6f} {enshu:.6f}")

print("{:.6f} {:.6f}".format(area, circumference))


print(f"{area:.6f} {length:.6f}")


print(f"{S:.6f} {d:.6f}")


print('%-5f %-5f' % (math.pi * r ** 2, 2* math.pi * r))

print(math.pi * r ** 2,r*2*math.pi)

print("{0:.5f} {1:.5f}".format(r*r*3.141592653589 , 2*r*3.141592653589 ))

print("{:.6f} {:.6f}".format(area, circumference))



print(a,b)


print(r * r * math.pi, 2 * r * math.pi)

print((r ** 2 * math.pi), (2 * r * math.pi))



print(f"{ans1} {ans2}")

print('{0:.6f} {1:.6f}'.format(r*r*math.pi, 2*r*math.pi))


print(r * r * math.pi, 2 * r * math.pi)

print('{:.06f}'.format(s), '{:.06f}'.format(l))

print(str(S) + " " + str(L))

print(r*r*math.pi,2*r*math.pi)


print('{0:.05f} {1:.05f}'.format(r*math.pi*r, 2*r*math.pi))


print(s, l)


print(f'{S:.5f} {L:.5f}')


print(f"{r * r * pi:.6f} {2 * pi * r:.6f}")

print(p*(r**2),2*r*p)

        print(a+b)
        print(a-b)
        print(a*b)
        print(a//b)
    print(call)

        print(int(a) // int(c))
    
    print(eval(a + b + c))

        print(a+b)
        print(a-b)
        print(a*b)
        print(int(a/b))
        print(A + B)
        print(A - B)
        print(A * B)
        print(A // B)


        print(f"{a+b}")
        print(f"{a-b}")
        print(f"{a*b}")
        print(f"{a//b}")
        print(d)
        print(eval(ans))

    print(ans)


        print(a + b)
        print(a - b)
        print(a * b)
        print(a // b)

        print(a+b)
        print(a-b)
        print(a*b)
        print(a//b)
    print(ans)

        print(a+b)
        print(a-b)
        print(a*b)
        print(a//b)


    print(result)


        print(a + b)
        print(a - b)
        print(a * b)
        print(int(a / b))
        print(a+b)
        print(a-b)
        print(a*b)
        print(a//b)
        print("%d"%(a+b))
        print("%d"%(a-b))
        print("%d"%(a/b))
        print("%d"%(a*b))


        print(a + b)
        print(a - b)
        print(a // b)
        print(a * b)

        print(a+b)
        print(a - b)
        print(a * b)
        print(a // b)

        print(a+b)
        print(a-b)
        print(a*b)
        print(a//b)

        print(a + b)
        print(a - b)
        print(a * b)
        print(a // b)
        print(a + b)
        print(a - b)
        print(a * b)
        print(a // b)


        print(a + b)
    
        print(a - b)
    
        print(a * b)
    
        print(a // b)
    
        print(a + b)
        print(a - b)
        print(a * b)
        print(a // b)
        print("%d" %(a + b))
        print("%d" %(a - b))
        print("%d" %(a * b))
        print("%d" %(a // b))

    print(ans)


    print(ans)



    print(s)

    print(a+b)
    print(a-b)
    print(a*b)
    print(int(a/b))

    print(result)


        print(int(a) // int(b))
        print(int(a) + int(b))
        print(int(a) - int(b))
        print(int(a) * int(b))

            print(c + d)
            print(c - d)
            print(c * d)
            print(c // d)








        print(a+b)
        print(a-b)
        print(a*b)
        print(a//b)
        print(a + b)
        print(a - b)
        print(a * b)        
        print(a // b)    
    print(result)


        print(a+b)
        print(a-b)
        print(a*b)
        print(a//b)

        print(a+b)
        print(a-b)
        print(a*b)
        print(a//b)

    print(a + b)
  
    print(a - b)
    
    print(a * b)
  
    print(a // b)

        print(int(a) + int(b))
        print(int(a) - int(b))
        print(int(a) * int(b))
        print(int(int(a) / int(b)))
        print(int(a + b))
        print(int(a - b))
        print(int(a * b))
        print(int(a / b))
 print(d)

    print(int(num_op[0])+int(num_op[2]))
  
    print(int(num_op[0])-int(num_op[2]))
  
    print(int(num_op[0])*int(num_op[2]))
  
    print(int(num_op[0]) // int(num_op[2]))

        print(a+b)
        print(a-b)
        print(a*b)
        print(a//b) 

    print(ans)

    
    print(ans)       
        

        print(a+b)
        print(a-b)
        print(a*b)
        print(a//b)

        print(a+b)
        print(a-b)
        print(a*b)
        print(a//b)
        print(a+b)
        print(a-b)
        print(a*b)
        print(a//b)
        print(a+b)
        print(a-b)
        print(a*b)
        print(a//b)


        print(a + b)
        print(a - b)
        print(a * b)
        print(a // b)
      print(i)
        print(a+b)
        print(a-b)
        print(a*b)
        print(a//b)
        print(a + b)
        print(a - b)
        print(a * b)
        print(a // b)
    print(a + b)
    print(a - b)
    print(a * b)
    print(a // b)

print(min,max,sum)    

print(min(l),max(l),sum(l))

print(min(b), max(b), sum(b))

print("%d %d %d" %(min,max,sum))

print(number[0],number[n-1],total)


print(f"{a} {b} {c}")


print(f"{a} {b} {c}")

print(a,b,c)

print(mini, maxi, total)

print(m,M,S)

print(b,c,e)


print(min_value, max_value, sum_value)


    
print('%d %d %d'%(a[0],a[n-1],sum))

print(min_number, max_number, sum_numbers)


print(min(A),max(A),sum(A))

    
print('%d %d %d'%(min,max,sum))

print(mi, ma, sum)



print(s, m, x)

print(a[0], a[n-1], j)


print(mn, mx, sm)


print(min,max,sum)


print(f"{min} {max} {sum}")


print(min(a), max(a), sum(a))



print(a, b, c)

print(min(data), max(data), sum(data))



print(min_num, max_num, sum_num)




print(min_num, max_num, sum_num)




print(min_num, max_num, sum_num)



print(minA,maxA,sumA)

print(s,b,c)

print(s,b,c)


print(f"{a} {b} {c}")


print(min(x),max(x),sum(x))

print(min_num, max_num, sum_num)


print(min(a),max(a),s)


print(min(b), max(b), sum(b))


print(min(a), max(a), sum)



    
print(min(num), max(num), sum(num))    
    
    
    

    
print(min(num), max(num), sum(num))    
    
    
    

    
print(min(num), max(num), sum(num))    
    
    
    

print(min(get_lst), max(get_lst), sum(get_lst))


print(c, d, e)

print(min(num_seq),max(num_seq),sum(num_seq))

print(min(num_list),max(num_list),sum(num_list))

print(f"{a} {b} {c}")

    
print(f'{min_v} {max_v} {sum_v}')



print(min(b), max(b), sum(b))

print(min(a), max(a), sum(a))

print(min(a),max(a),sum(a))

print(min(A),max(A),sum(A))

print(str(min) + " " + str(max) + " " + str(total))
    
    

print(min(a),max(a),sum(a))


print(f"{min(l)} {max(l)} {sum(l)}")

print(m, M, total)


print(Min,Max,Sum)


print(Min,Max,Sum)


        print(hash_n)

        print()


        print("#" * b)
    
    print("")

        print("#"*b)
    print()
    

            print("#"*w)
        print()    

        print(block)
    print()
        

            print("#"*W)
    print()

        print("#"*b)
    print()

        print('#'*W)
    print()    

        print("#" * W)
    
    print()


        print("#"*(W))
    print()

        print("#"*W)
    print()

        print('#' * b)
    print()

                print("#"*w)
                print("#"*w + "\n")
    

        print('#' * W)
    print()


        print("#" * W)
    
    print()


    print("#"*W)
  print()

            print("#"*W)
        print()
    
        

        print("#" * W)
    
    print()

        print("#" * W)
    
    print()


        print('#' * w)
    print('')

        print(n)
    print("")    

        print("#" * W)
    print()
    

        print("#"*W)
    print()

      print('#' * W)
    print()
        print('#' * W)
    print()
        
        

        print('#'*W)
    print('')

        print('#'*b)
    print()



    print("\n".join(["#" * W] * H) + "\n")

            print('#'*W)
        print()

        print('#'*w)
    print()

        print("#"*W)
    print("")

        print('#'*w)
    print()

        print("#"*i[1])
    print()


        print("#"*W[i])
    print()


            print("#"*w)
        print()

            


        print('#'*W)
    print('')

        print(Rectangle)
    print()

        print(y)

    
    print()

      print("#"*w)
    print()
            

        print(row)
      print("\n", end="")
        print(s)
    print()
    
    

        print("#"*W)
    print()

    print()
        print("#"*W)
    print()

        print(n)
    print()

        print('#'*W)


    print()

        print("#"*W)
        
    print()

        print('#'*W)
    print()

        print("#" * W)
    
        print('#' * W)
    
    print()

        print('#'*b)
    print()

        print('#'*W)
            
    print()


    print()

      print("#"*W)
    print()

        print("#"*W)
    print()

        print("#"*W)
    print()

        print("#"*W)
    print()

        print("#"*W)
    print()
    

        
        print(hash_n)

        print()

        print("")
            print("#" * W)
                print("#" * W)
                print("#" + "." * (W-2) + "#")
                
    print("")

            print("#"*w)
            print("#"+"."*(w-2)+"#")
    print()

                print("#"*(lst[i][1]))
                print("#"*(lst[i][1]))
                print("")
                print("#", end="")
                print("."*(lst[i][1] - 2), end="")
                print("#")
        print("#"*lst[i][1])
        print("")

                print("#"*W)
                print("#"+"."*(W-2)+"#")
    print()

    print("#"*W)
        print("#"+("."*(W-2))+"#")
    print("#"*W)
    print()


    print("#" * W)
        print("#" + "." * (W-2) + "#")
    print("#" * W)
    print()

            print("#" * W)
            print("#" + "." * (W - 2) + "#")
    
    print()


            print("#"*W)
            print("#"*W)
            print("#{}#".format("."*dot))
    print()

    
    print('#'*W)
        print('#',end='')
        print('.'*(W-2),end='')
        print('#')
    print('#'*W)
    print()

            print("#" * b)
            print('#{}#'.format("."*c))
    print()

               print("#"*w)
                print("#"*w + "\n")
                print("#" + "."*(w-2) + "#")
               

    print('#' * W)
        print('#' + '.' * (W-2) + '#')
    print('#' * W)
    print()


            print("#" * W)
            print("#" + "." * (W - 2) + "#")
    
    print()


  print("#"*W)
    print("#"+"."*(W-2)+"#")
  print("#"*W)
  print()

            print('#'*W, end = '')
            print('#', end = "")
            print('.'*(W-2), end ="")
            print('#', end = "")
        print('')
    print('')

            print("#" * W)
            print("#" + "." * (W - 2) + "#")
    
            print("#" * W)
            print("#" + "." * (W - 2) + "#")
    
    print()



    print('#' * w)
        print('#' + '.' * (w - 2) + '#')
    print('#' * w + '\n')

        print("#"*W)
            print("#" + "."*(W-2) + "#")
        print("#"*W)
        print()
        
            
    

    print(u)
        print( ("#" + "."*(w - 2) + "#" ) )
    print( u )
    print("")


    print("#" * W)
        print("#" + "."*(W-2) + "#")
    print("#" * W)    
    print()

            print('#' * W)
            print('#',end='')
            print('.' * (W - 2),end='')
            print('#')
    print()


                print('#' * W, sep='')
                print('#' * W)
                print()
                print(f"#", "." * (W - 2), "#", sep='')

            print("#" * W)
            print("#" + "." * (W - 2) + "#")
    print("")

        print('#'*W)
            print('#'+'.'*(W-2)+'#')
        print('#'*W+'\n')

    print('#' * W)
        print('#' + '.' * (W-2) + '#')
    print('#' * W)
    print()

    print("#"*W)
        print("#","."*(W-2),"#",sep="")
    print("#"*W)
    print("")

        print('#'*w)
        print('#'+'.'*(w-2)+"#")
    print()

    print("#"*a)
        print("#"+("."*c)+"#")
    print("#"*a)
    print()

    print("#"*i[1])
        print("#"+cm+"#")
    print("#"*i[1])
    print()


            print("#"*W[i])
            print("#" + (W[i]-2)*"." + "#")
    print()
    print("#"*W)
        print( "#"+ ("."*(W-2)) +"#")
    print("#"*W)
    print()

    print("#" * W)
        print(Frame)
    print("#" * W)
    print()

    print(y)
    
        print(f'#{z}#')
    
    print(y)
    
    
    print()

    print("#" * W)
        print("#" + "." * (W - 2) + "#")
    print("#" * W)


    print()

          print(row1)
          print(row2)
      print("\n", end="")
        print(s)
    print()
        

    print("#"*w)
    print("#"*w)
    print()
        print(row)
    
    print('#'*W)
        print("#"+"."*(W-2)+"#")
    print('#'*W)
    print()
    

            print("#"*W)
            print("#"+"."*(W-2)+"#")
    print()

        print("#"*H)
            print("#"+"."*(H-2)+"#")
        print("#"*H)
        print()
    print("#"*w)
        print("#"+"."*(w-2)+"#")
    print("#"*w)
    print()
    
        
    

        print(b)
            print("#" + a + "#")
        print(b)
            print(a)
    print()

                    print("#" * w)
                    print(f'#{dot}#')
                    print("#" * w)
                    print()

    print(W*"#")
        print("#",(W-2)*".","#",sep="")
    print(W*"#")
    print()


    print("#" * W)
        print("#" + "." * (W - 2) + "#")
    print("#" * W)
    print()

            print("#"*W)
            print("#"+ "."*(W-2) + "#")
    print()
        

    print("#" * W)
        print("#" + "." * (W - 2) + "#")
    print("#" * W)
    print()

        print('#'*w)
        print('#'+'.'*(w-2)+'#')
    
    print()
            print('#'*w)
            print('#'+'.'*(w-2)+'#')


            print('#' * W)
            print('#' + '.' * (W - 2) + '#')
    print() 

            print("#"*W)
            print("#" + "."*(W-2) + "#")
    print()

            print("#" * W)
            print("#" + "." * (W - 2) + "#")
    
    
    print()

    print('#' * w)
        print('{}{}{}'.format('#', '.' * (w-2), '#'))
    print('#' * w)
    print()

    print('#' * W)
         print("#" + "." * (W-2) + "#")
    print('#' * W)
    print()

    print('#'*W)
        print('#%s#'%('.'*(W-2)))
    print('#'*W+'\n')

    print("#" * W)
        print("#",end="")
        print("." * (W - 2),end="")
        print("#")
    print("#" * W)
    print()

                print("#."*n+"#"*r)
                print(".#"*n+"."*r)
    print()
    

            print("#." * (W // 2) + ("#" * (W % 2)))
            print(".#" * (W // 2) + ("." * (W % 2)))
    
    print()


    print()

        print((H_0 + "\n" + H_1 + "\n")*(h//2))
        print((H_0 + "\n" + H_1 + "\n")*((h - 1)//2) + H_0 + "\n")  

                print('#' + '.#' * (j // 2))
                print('#' + '.#' * (j // 2) + '.')
                print('.' + '#.' * (j // 2))
                print('.' + '#.' * (j // 2) + '#')
    print()

                print('#.'*q+'#'*r)
                print('.#'*q+'.'*r)
        print()

            print(chess)
            print(chess_reverse)
        print()
        print(chess)
        print()
            print(chess)
            print(chess_reverse)
        print(chess)
        print()

          print(row1)
          print(row2)
      print("\n", end="")
        print(s)
    print()


            print("#."*math.floor(W/2)+"#"*w)
            print(".#"*math.floor(W/2)+"."*w)
    print()

    print()

        print(line)
    print() 
        

                print("#." * (W[i]//2))        
                print("#." * (W[i]//2) + "#")
                print(".#" * (W[i]//2))        
                print(".#" * (W[i]//2) + ".")


    print()

                print("#." * E1)
                print("#." * E1 + "#")
                print(".#" * E1)
                print(".#" * E1 + ".")
    print()

                print('#')
                print('.')
                    print('#.' * (w//2))
                    print('{}{}'.format('#.' * (w//2), '#'))
                    print('.#' * (w//2))
                    print('{}{}'.format('.#' * (w//2), '.'))
    print()    

        print(s[i:i+W])
    print()

        print(pat[i:i + w])
    print()



        print(line)
        print(l)



    print()


     print(('#.'*w)[i%2:w+i%2])
 print()

      print(fence1)
      print(fence2)
  print('')

            print('#.' * (W // 2) + '#' * (W % 2))
            print('.#' * (W // 2) + '.' * (W % 2))


    print()

        print("#." *int(b/2))
        print("#" + (".#" * int((b-1)/2)))
         print(".#" * int(b/2))
        print("." + ("#."*int((b-1)/2)))
  print()

    print("#."*(x//2)+"#"*(w%2))
    print(".#"*(x//2)+"."*(w%2))

            print("#."*(w//2))   
            print("#."*((w-1)//2)+"#"*(w%2))
    print(""*2)

                print('#.' * (W // 2), end='')
                print('#.' * (W // 2) + '#', end='')
            print()
                print('.#' * (W // 2), end='')
                print('.#' * (W // 2) + '.', end='')
            print()
    print()

      print(x)
      print(y)
    
  print()

        print(l[i%2][:w])
    print("")


                print("#."*(W//2))
                print("#")
                print("#."*(W//2)+"#")
                print(".#"*(W//2))
                print(".")
                print(".#"*(W//2)+".")
    print()

                print("#."*(W//2))
                print("#."*(W//2)+"#")
                print(".#"*(W//2))
                print(".#"*(W//2)+".")
    print()


            print(rowEven)
            print(rowOdd)
    print()

        print(line)
        

    print()

                    print("#." * int(w//2))
                    print("#." * int(w//2), end="")
                    print("#")
                    print(".#" * int(w//2))
                    print(".#" * int(w//2), end="")
                    print(".")
        print()
                    

            print(("#." * ((W+1) // 2))[:W])
            print((".#" * ((W+1) // 2))[:W])
    print()

                print(".#"*(W//2) + ".")
                print("#."*(W//2) + "#")
                print(".#"*(W//2) )
                print("#."*(W//2))
    print()
            
        


                  print('#.' * int(W / 2))
                    print("#."* int((W -1)/ 2), end = "")
                    print("#")
            
                  print('.#' * int(W / 2))
                    print(".#"* int((W -1)/ 2), end = "")
                    print(".")
    print()

                print((W // 2) * ('#' + '.'), end='')
                    print('#')
                    print('')
                print((W // 2) * ('.' + '#'), end='')
                    print('.')
                    print('')
                print((W // 2) * ('#' + '.'), end='')
                    print('#')
                    print('')
                print((W // 2) * ('.' + '#'), end='')
                    print('.')
                    print('')
            print((W // 2) * ('#' + '.'), end='')
                print('#')
                print('') 
        print('')

        print(s * (w // 2))
        print(s * (w // 2) + "#")
        print(s2 * (w // 2))
        print(s2 * (w // 2) + ".") 
      
        
  print()

            print("#."*(w//2), end="")
            print("#"*(w%2))
            print(".#"*(w//2), end="")
            print("."*(w%2))
        print("")


      print('#.' * (W // 2) + ('#' if W % 2 == 1 else ''))
      print('.#' * (W // 2) +('.' if W % 2 == 1 else ''))
  print()

                print('#.' * (W // 2), end='')
                print('#.' * (W // 2) + '#', end='')
            print()
                print('.#' * (W // 2), end='')
                print('.#' * (W // 2) + '.', end='')
            print()

    print()


    print()
                print('#.'*(W//2))
                print('#.'*(W//2)+'#')
                print('.#'*(W//2))
                print('.#'*(W//2)+'.')
    print()
            

            print(row)
            print(row)
    print()

        print( pattern[st:W+st])
 
    print()     

            print(("#." * (W // 2)) + ("#" if W % 2 != 0 else "")) 
            print((".#" * (W // 2)) + ("." if W % 2 != 0 else ""))
    print()

            print("#."*(n[1]//2)+"#"*(n[1]%2))
            print(".#"*(n[1]//2)+"."*(n[1]%2))
    print()

            print(line[1:w+1])    
            print(line[0:w])
    print()


        print(a)
    print()

            print('#.' * (W // 2) + '#' * (W % 2))
            print('.#' * (W // 2) + '.' * (W % 2))
    print()

        print(ll[m])
    print()
            print("#."*(W//2)+"#"*(W%2))
            print(".#"*(W//2)+"."*(W%2))
    print("")


                print("#."*(b//2))
                print("#."*(b//2),end = "")
                print("#")
                print(".#"*(b//2))
                print(".#"*(b//2),end = "")
                print(".") 
    print("")

            print("#."*(w//2))
            print(".#"*(w//2))
            print("#."*(w//2)+"#")
            print(".#"*(w//2)+".")
            print("#."*(w//2))
            print(".#"*(w//2))
        print("#."*(w//2))
            print("#."*(w//2)+"#")
            print(".#"*(w//2)+".")
        print("#."*(w//2)+"#")
    print("")

            print(even[:w])
            print(odd[:w])
    print("")

        print(result)
    print()

        print(pat[i:i + w])
    print()

            print('#.' * (w//2))
            print('.#' * (w//2))
            print('#.' * (w//2) + '#')
            print('.#' * (w//2) + '.')
        print('#.' * (w//2) + '#')
            print('#.' * (w//2))
            print('.#' * (w//2))
        print('#.' * (w//2))
            print('#.' * (w//2) + '#')
            print('.#' * (w//2) + '.')
    print()


        
        print(row)
    
    print()



                    print(('#' + '.') * (W // 2))
                    print(('#' + '.') * ((W - 1) // 2) + '#')
                    print(('.' + '#') * (W // 2))
                    print(('.' + '#') * ((W - 1) // 2) + '.')


    print('')

                print('#.'*(W//2) + '#')
                print('#.'*(W//2))
                print('.#'*(W//2) + '.')
                print('.#'*(W//2))
    print()

                print(string1)
                print(string2)
                print(string3)
                print(string4)


    print(" ")

            print("#."*(W // 2))
            print(".#"*(W // 2))
            print("#."*(W // 2) + "#")
            print(".#"*(W // 2) + ".")
            print("#."*(W // 2))
            print("#."*(W // 2) + "#")
    print()

                    print("#."*(h//2))
                    print(".#"*(h//2))
            print()
                    print("#."*(h//2) + "#")
                    print(".#"*(h//2) + ".")
            print()

        print(" " + str(a), end="")

print(" ",end="")
        print(i+1,end=" ")

        print(f"{i}", end = " ")
                print(f"{i}", end = " ")
print("") 

    print(' ', val, end = '')

                print(" %d"%i,end = "")
print()


        print(f" {i}", end = "")
                print(f" {i}", end = "")
        print(i, end=" ")

        print(i, end=" ")
                print(i, end=" ")
print()

    print(" " + str(i), end ="")
        print(" " + str(i), end ="")
print()


    print(j)

                print(" %d"%i,end = "")
print()

        print(" %d" % i, end = "")
                print(" %d" % i, end = "")
print()
        

print(" ".join(result))


        print(i, end = ' ')
print()

        print(" {}".format(i), end="")
print()

            print(f" {i}", end="")


    print()

    
print(' '.join(map(str, my_list)))

        print(f"{i}", end=" ")
        

		print(" {}".format(i), end = '')
print()


        print(i)
            print(i)
		print(" {}".format(i), end = '')
print()


        print(" " + str(i), end="")
            print(" " + str(i), end="")

print()

                print(" %d"%i,end = "")
print()


    print(" " + " ".join(map(str, result)))

        print(i, end=" ")


print(' ', end = '')    

        print(i,end = ' ')
        
        print(i,end = ' ')
    
        print(i, end = ' ')
        
        print(i, end = ' ')
        
        print(i, end = ' ')
        
        print(i, end = ' ')
        
        print(i, end = ' ')
    
        print(i, end = ' ')

            print(" ", i, end='')
                print(" ", i, end='')
    print()
print(s)

print("")
        print(i)
        print("")
        print(i)
        print("")

        print(" "+str(i),end='')
                print(" "+str(i),end='')
        print(f" {i}",end="")
        print(f" {i}",end="")
        
    

            print(' '+str(i+1),end='')

                print(" %d"%i,end = "")
print()


        print(" {}".format(i), end="")
print()


        print(" {}".format(i), end="")
print()

        print(f" {i}",end="")
                print(f" {i}",end="")
print(' ',end='')
        print(i,end=' ')
print(end='\n')

print(*ans)

        print(" {}".format(i), end="")
print()

        print(" {}".format(i), end="")
print()


print(end = '')
        print(i,end = " ")
          print(i,end = " ")

            print(" ", i, end='')


    print()


        print(i, end = ' ')
          print(i, end = ' ')
        print(i,end=" ")
        print(i,end=" ")

    print(" %d"%i,end = "")
        print(" %d"%i,end = "")
print()

        print(" ", i, end = "")

        print(" ", i, end = "")

        print(f" {i}", end="")
            print(f" {i}", end="")
        print(" %d"%i, end="")
                print(" %d"%i, end="")
print()

    print(f"{i}", end = " ")
print()

        print(f' {i}', end=" ")
        print(f' {i}', end=" ")

            print(" ", i, end="")

                    print(" ", i, end="")

    print()

        print(" {}".format(i), end = "")
print()

                print(' %d'%x,end = "")
        print(" %d"%i,end="")
                print(" %d"%i,end="")
print()

print(" ".join(map(str,L)))

        print(int_list[n-1-j],end =(" ") )
    
        print(int_list[n-1-j])

print(" ".join(map(str, l)))

    print(a[i],end=" ")
print(a[0])
    

    print(yoso[i],end=" ")
print(yoso[N-1])

print(*lst)
    

print(*H)

      print(get_lst[len(get_lst) - i - 1], "", end="")
       print(get_lst[len(get_lst) - i - 1])

    print(res[n - 1 - i] + ' ', end = '')
print(res[0])

print(*reversed_numbers)

        print(an[n-i-1])
        print(an[n-i-1],end=" ")
    print(seq_rev[k],end="")
        print(" ",end="")
print()

		print(" ", end = '')
	print(a[i], end = '')
print()


    print(a[i],end="")
        print(" ",end="")
print()

print(ilist[n - 1], end='')
    print('', ilist[i], end='')
print('')

print(*a)


print(' '.join(map(str,B)))


print(*A)


print(*a)


print(*x[::-1])

        print(" ", end = "")
    print(elem, end = "")
print()

print(*nums)


    print(a[i],end='')
print()

print(" ".join(il))

        print(a[b-i], end=" ")
        print(a[b-i])

		print(" ", end = '')
	print(a[i], end = '')
print()


print(' '.join(a))


print(" ".join(map(str,l)))

print(*a)


print(" ".join(map(str, reversed_numbers)))


print(*reversed_numbers)


  print(a[n-i-1],end=" ")
print(a[0])

print(" ".join(map(str,a)))

print(" ".join(map(str, reversed_sequence)))



print(" ".join(map(str,s)))

print(" ".join(map(str,lst)))



print(' '.join(a))

   print(a[i],end=" ")
print(a[-1])

         print(S[c])
        print(S[c], end = ' ')
print(*l)

print(*get_lst)


print(' '.join(sub_array))

        print(an)
        print(an,end = " ")

print(" ".join(reversed(list(input().split()))))

print(" ".join(num_list))

    print(a[i],end='')
        print(' ',end='')
print()
        

    print(a[i],end='')
print()



print(' '.join(map(str, my_list)))

print(*l)



print(' '.join(input('').split(' ')[::-1]))

print(*list(map(int,input().split()))[::-1])

print(" ".join(reversed(a)))

print(*sample_list)

  print(a[i],end="")
print()

print(" ".join(map(str,l)))

print(*A[::-1])

print(" ".join(a))

print(" ".join(i[::-1]))


         print(" ",end="")
     print(a[i], end="")
print()

        print(a[0])
    print(a[n-1-i], end=" ")

            print('S',i)
            print('H',i-13)
            print('C',i-26)
            print('D',i-39)

    print("S", cards["S"][i])
    
    print("H", cards["H"][i])

    print("C", cards["C"][i])

    print("D", cards["D"][i])

        print("S %d"%(i+1))
        print("H %d"%(i+1))
        print("C %d"%(i+1))
        print("D %d"%(i+1))
    

            print(str(c)+" "+str(k+1))
    

            print(pattern[i], j+1)


    print(mark, suji)

            print(suit[i], j + 1)

            print(pattern[i], j+1)

        print(f"S {i}")
        print(f"H {i-13}")
        print(f"C {i-26}")
        print(f"D {i-39}")
    
    

        print(P[(j//13)],q)

    print(x[0],x[1])

            print("{0} {1}".format(mark[i], j+1))


    print('S',slist[i])
    print('H',hlist[i])
    print('C',clist[i])
    print('D',dlist[i])

    print('S %d'%i)
    print('H %d'%i)
    print('C %d'%i)
    print('D %d'%i)

            print(suit[i], j + 1)

            print(a[i], j + 1)

                print(f"S {ii+1}")
                print(f"H {ii+1}")
                print(f"C {ii+1}")
                print(f"D {ii+1}")


    print(*card_list[i])

            print("S {}".format(i - 0))
            print("H {}".format(i - 13))
            print("C {}".format(i - 26))
            print("D {}".format(i - 39))

			print("S {}".format(i - 0))
			print("H {}".format(i - 13))
			print("C {}".format(i - 26))
			print("D {}".format(i - 39))


            print(l[j], h+1)

            print("{0} {1}".format(mark[i],j+1))

            print(patterns[i], j+1)


    print(f"{card[0]} {card[1]}")

            print("%c %d"%(mark[ch],num))


        print(*card)

            print(F"{pattern[i]} {j+1}")

            print(mark[i], j+1)


        print(s, i)

    print(card[0], card[1])


            print(pattern[i], j+1)


        print(*card)

            print(m, i) 
        
        print(mark+" "+str(num))

    print("S {}".format(int(i)))
    print("H {}".format(int(i)-13))
    print("C {}".format(int(i)-26))
    print("D {}".format(int(i)-39))

            print(suit, rank)



    print(f'{card[0]} {card[1]}')

            print(S[i],j+1)

            print(pattern[i], j+1)



    print(i)
    


    print(f"{suit} {rank}")


            print("%c %d"%(mark[ch],num))



      print(sp,i)

                print(f"S {j+1}")
                print(f"H {j+1}")
                print(f"C {j+1}")
                print(f"D {j+1}")

    print("\n".join(sorted(missing_cards, key=lambda x: (priority.index(x[0]), int(x[2:])))))


      print(pattern[i], j+1)

    print(f"{j[0]} {j[1]}")



      print(pattern[i],j+1)

      print(pattern[i],j+1)

            print("%c %d"%(Z[i],j))



            print("%c %d"%(Z[i],j))



            print(suit[i],j)


    print("S", k)
    print("H", l)
    print("C", m)
    print("D", n)
    
    

            print(pattern[i],j+1)

        print("S",S[0])
            print("H",H[0])
                print("C",C[0])
                    print("D",D[0])
                print(f'S {j+1}')
                print(f'H {j+1}')
                print(f'C {j+1}')
                print(f'D {j+1}')

    print("S",missing_S[i])

    print("H",missing_H[i])

    print("C",missing_C[i])

    print("D",missing_D[i])


        print(' ',end='')
        print(' '.join(map(str,L[i][j])))
        print('####################')

            print(f" {A[i][j][k]}", end="")
        
        print("")
        
        print("#" * 20)

            print(f" {tou[b][f][v]}",end = "")
        print("")
        print("####################")


        print("", lst[i*30+j*10+k],end="")
        print("", lst[i*30+j*10+k])
    print("#"*20)

        print(' ' + ' '.join(map(str, billdings[i][j])))
        print('#' * 20)

            print(f" {home[i][j][k]}",end="")
        print()
        print("####################")

      print(" "+str(list1[j][k][i]),end="")
    print()
      print("#",end="")
    print()
  

            print(" ",end="")
            print(count[i][j][k],end="")
        print()    
        print("####################")


print("#"*20)
print("#"*20)
print("#"*20)
            print(' ',num[i][j][k],sep='',end='')
        print()
            print('#',end='')
        print()


        print(" " + " ".join(map(str, num[b][f])))
        print("#"*20)


            print('', tenant[i][j][k], end='')
        print('')
        print('####################')
    

            print(' %d'%(list[m][o][p]),end='')
        print()
    
        print('#',end='')
    print()
    
            print(' %d'%(list[3][o][p]),end='')
        print()

            print(" ", count[k][j][i], sep = "", end = "")
        print()
            print("#", end = "")
        print()

        print(" "+" ".join(map(str, data[i][ii])))
        print("#"*20)


		print("#" * 20)
			print(' ', end = '')
			print(a[i * 30 + j * 10 + k], end = '')
		print()


            print('',room[k][j][i], end = '')
        print('')
        print(s)     

            print(' ',c[i][j][k],sep='',end='')
        print()
            print("#",end="")
        print()

            print("",pb[k][j][i], end = "")
        print()
        print("#" * 20)

            print(f" {room_info[b][f][r]}", end="")
        print()
        print("####################")


            print(" %d"%(number_of_pepple), end="")
        print("")
            print(" " + str(dormitories[b][f][r]), end="")
            print(f" {s[i][j][k]}",end="")
        print()
        print("####################")


print(("\n" + "#" * 20 + "\n").join(["\n".join([" " + " ".join([str(s) for s in j]) for j in i]) for i in p]))

            print(" " + str(building[b][f][r]), end="")
        print()
        print("#" * 20)


        print(f" {apart[i][j]}", end = '')
    print()
        print('####################')

            print(' {}'.format(output[i][j][k]), end='')
        print()
        print('#'*20)


        print('', *f)
        print('#' * 20)

        print("", *live[i][n])
        print("#"*20)

        print(" ".join(str_list))
        print("#"*20)


        print("####################")
            print(" " + str(building[b][f][r]), end="")
        print()


            print(" {}".format(k),end="")
        print()
        print("#"*20)
      print(' '+' '.join(map(str,x)))
    print('####################')

      print(' '+' '.join(map(str,x)))
  
            print(' {}'.format(room), end='')
        print()
      print('#' * 20)

        print("#" * 20)
        print(answer)

        print('',*p)
        print('#'*20)

            print(" " + str(room), end = "")
        print()
    print("#" * 20)
        print("#" *20)

            print(" %d"%count[i][j][k],end="")
        print()



        print(" ", end = "")
        print(" ".join(map(str, data[i][j])))
        print("####################")
            

       print(' '+str(lis[b][f][r]), sep='',end='')
    print()
    print(kugiri)

        print(" " + " ".join(map(str, floor)))
        print("#"*20)


      print("", l[i][j][k], end = "")
    print()
    print("####################")

    print(end=" ")
    print(A[j][k], end="")
  print()
  print("#", end="")
print()
    print(end=" ")
    print(B[j][k], end="")
  print()
  print("#", end="")
print()
    print(end=" ")
    print(C[j][k], end="")
  print()
  print("#", end="")
print()
    print(end=" ")
    print(D[j][k], end="")
  print()

            print(" ",end="")
            print(count[i][j][k],end="")
        print()
        print("####################")

            print(f" {a[j][k][l]}", end="")
        print()
        print("####################")


            print(" " + " ".join(map(str, building[b][f])))
            print("#" * 20)

            print(' ',num[i][j][k],sep = '',end = '')
        print()
            print('#',end = '')
        print()

        print('', *f)
        print('#' * 20)

    print(end = " ")
    print(*i)
print("####################")

    print(end = " ")
    print(*j)
print("####################")        

    print(end = " ")
    print(*k)
print("####################")

    print(end = " ")
    print(*l)

        print("#"*20)
            print(" %d"%(table[i][j][k]),end = "")
        print()

        print("#"*20)
            print(" %d"%(table[i][a][b]),end = "")
        print()



        print(' '+' '.join(map(str, count[i][j])))
    print("####################")


            print(f" {room}", end="")
        print()
        print("####################")
        print(' '+' '.join(map(str,apart[i][l])))
        print(" ", end="")
                        print(subli[3])
                        print(subli[3], end=" ")
                    print(0)
                    print(0, end=" ")
            print("#", end="")
        print()

        print('', *f)
        print('#' * 20)
        

        print('', *f)
        print('#' * 20)

                  print(" "+" ".join([str(k) for k in all[i][j]]))
                  print("#"*20)
            print(' '+str(counts[i][j][k]),end='')
        print()
        print('#'*20)

            print("",count[i][j][k],end="")
        print("")
        print("#"*20)

    print(C[i])

    
    print(sum)

    print(c[i])

    print(answer[i])

    print(c_i)

  print(sum(ans))
  print(list2[i])

    print(C[i],sep = "\n")
         

    print(x[i])
    

    print(x)

	print(ans)

    print(ans[i])

    print(sum)

 

    print(c[u])
    

    print(s)

  print(sum)


	print(ans)


    print(sum)

    print(c)

    print(element)


    print(c_i)



    print(ans)

    print(sum([a[i][j] * b[j] for j in range(m)]))

    print(value)


    print(c)

    print(inner_product(row, vector))


    print(c)
    print(sum)

    print(num)

    print(i)


    print(c)

  
  print(sum)
    print(Ans)

    print(s)

    
    print(c[i])


    print(c[i])

    print(c[i])

  print(ans[i])

    print(i)


    print(sum((s1*s2) for s1, s2 in zip(a[k], b)))


    print(c_i)


  print("%d"%(tmp))


    print(c[i])

    print(i)


    print(c[i])

    print("%d"%(tmp))

    print(c)
    

    print(c[i])

    print(Vector_c[i])
    print(C[i])
    

    print(sum)
    

    print(sum)

    print(vector_c)


    print(i)

    print(sum)
    

    print(result)

    print(sum)

    print(c_i)
    


    print(ans)

    print(c)
    print(r)

    print(sum)

        print('F')
        print('A')
        print('B')
        print('C')
            print('C')
            print('D')
        print('F')

        print("F")
            print("C")
            print("D")
        
        print("C")
        print("B")
        print("A")

        print("F")
        print("A")
        print("B")
        print("C")
            print("C")
            print("D")
        print("F")

        print("F")
        print("A")
        print("B")
        print("C")
            print("C")
            print("D")

        print("F")
            print("C")
            print("D")
        print("C")
        print("B")
        print("A")


    print("F")
    print("A")
    print("B")
    print("C")
    print("F")
      print("C")
      print("D")

    print(hyouka)

    print("F")
    print("A")
    print("B")
    print("C")
      print("C")
      print("D")
    print("F")

        print("F")
        print("A")
        print("B")
        print("C")
            print("C")
            print("D")
        print("F")

        print("F")
        print("A")
        print("B")
        print("C")
            print("C")
            print("D")
        print("F")
        print("F")
        print("A")
        print("B")
        print("C")
        print("C")
        print("D")
        print("F")

        print("F")
        print("A")
        print("B")
        print("C")
            print("C")
            print("D")
        print("F")

        print("F")
        print("A")
        print("B")
        print("C")
            print("C")
            print("D")
        print("F")


        print("F")
        print("A")
        print("B")
        print("C")
            print("C")
            print("D")
        print("F")


    print(grade)

            print("F")
            print("A")
            print("B")
            print("C")
                print("D")
                print("C")
            print("F")

        print("F")
        print("A")
        print("B")
        print("C")
            print("C")
            print("D")
        print("F")   


    print("F")
    print("A")
    print("B")
    print("C")
    print("D")
    print("F")


        print('F')
        print('F')
            print('D')
            print('C')
        print('C')
        print('B')
        print('A')


        print('F')
        print('A')
        print('B')
        print('C')
        print('D')
        print('F')

        print("F")
        print("A")
        print("B")
        print("C")
            print("C")
            print("D")
        print("F")

    print(grade)


        print("F")
        print("A")
        print("B")
        print("C")
            print("C")
            print("D")
        print("F")


        print("F")
            print("D")
            print("C")
        print("C")
        print("B")
        print("A")

    print('F' if l['midterm'] == -1 or l['final'] == -1 else 'A' if l['midterm'] + l['final'] >= 80 else 'B' if l['midterm'] + l['final'] >= 65 else 'F' if l['midterm'] + l['final'] < 30 else 'D' if l['midterm'] + l['final'] < 50 and l['makeup'] < 50 else 'C')

        print('F')
        print('A')
        print('B')
        print('C')
            print('C')
            print('D')
        print('F')
        print('A')
        print('B')
        print('C')
            print('C')
            print('D')
        print('F')

    print(lank)

        print("F")
        print("A")
        print("B")
        print("C")
            print("C")
            print("D")
        print("F")
        print("A")
        print("B")
        print("C")
            print("C")
            print("D")
        print("F")

        print("F")
        
        print("A")
        
        print("B")
        
        print("C")
        
        print("F")


        print("F")
        print("A")
        print("B")
        print("C")
            print("C")
            print("D")
        print("F")


    
  print(grade)



    print('F')
  
    print('A')
  
    print('B')
  
    print('C')

    print('D')
  
    print('F')

        print('F')
        print('A')
        print('B')
        print('C')
            print('C')
            print('D')

        print("F")
        print("A")
        print("B")
        print("C")
            print("C")
            print("D")
        print("F")



        print("F")
        print("A")
        print("B")
        print("C")
        print("D")

    print('F')
    print('A')
    print('B')
    print('C')
    print('C')
    print('D')
    print('F')

        print("F")
            print("C")
            print("D")
        print("C")
        print("B")
        print("A")


        print("F")
        print("A")
        print("B")
        print("C")
            print("C")
        print("D")
        print("F")


        print('F')
        
                print('C')
                print('D')
            print('C')
        
            print('B')
            
            print('A')

    print("F")
    print("A")
    print("B")
    print("C")
      print("C")
      print("D")
    print("F")

            print("A")
            print("B")
            print("C")
            print("D")
            print("F")

        print("F")
        print("A")
        print("B")
        print("C")
            print("C")
            print("D")
        print("F")
        

        print("F")
        print("A")
        print("B")
        print("C")
            print("C")
            print("D")
    print(judge(m, f, r))

        print("F")
        print("A")
        print("B")
        print("C")
            print("C")
            print("D")

        print("F")
        print("A")
        print("B")
        print("C")
            print("C")
            print("D")
        print("F")

        print("F")
        print("A")
        print("B")
        print("C")
        print("D")
     
        print("F")

        print("F")
    
        print("A")

        print("B")

        print("C")

        print("C")

        print("D")

        print("F")

        print('F')
            print('A')
            print('B')
            print('C')
                print('C')
                print('D')
            print('F')


        print('F')

        print('A')

        print('B')

        print('C')

            print('C')
            print('D')

         print('F')
         
         
    

        print("F")
        print("A")
        print("B")
        print("C")
            print("C")
            print("D")
        print("F")

        print("F")
        print("A")
        print("B")
        print("C")
            print("C")
            print("D")
        print("F")

        print("F")
        print("A")
        print("B")
        print("C")
        print("D")
        print("F")



    print(grade)


        print('F')
            print('A')
            print('B')
            print('C')
                print('C')
                print('D')
            print('F')
            

    print("F")
    print("A")
    print("B")
    print("C")
    print("D")
    print("F")

        print("F")
        print("A")
        print("B")
        print("C")
        print("D")
        print("F")

        print('F')
        print('A')
        print('B')
        print('C')
            print('C')
            print('D')
        print('F')



        print("F")
        print("A")
        print("B")
        print("C")
            print("C")
            print("D")

        print("F")
        print("A")
        print("B")
        print("C")
            print("C")
            print("D")
        print("F")
        print("A")
        print("B")
        print("C")
            print("C")
            print("D")
    print(ans)

        print(0)
        print(cont)

        print(ans)
    print(count)

                
    
    print(cnt) 

    print(sum(1 if j < x - i - j <= n else 0 for i in range(1, n -1) for j in range(i + 1, n)))


    print(ans)


    print(ans)

    print(ans)

    print(Ans)

        print(len(result))

    print(count)


        
 

    print(counter)

    print(cnt)
    

    print(cnt)

    print(cnt)


    print(count)

    print(count)
    

    print(cnt)


    print(cnt)

    print(combinations)


                
    print(ans)

    print(cnt)

    print(ans)


    print(m)

    print(count)


    print(ans)

    print(count)
        

    print(result)


    print(ans)

    print(count)


    print(count)


    print(cnt)

    print(cnt)


    print(ans)

  print(getNumCombi(n, x), end="\n")

        print(a)


    print(cnt)

    print(cnt)

    print(count)
    

    print(ans)

    print(cou)

    print(cnt)


    print(ans)

    print(cnt)

    print(cnt)

  print(m)


    print(ans)

    print(ans)


    print(ans)

    print(ans)

    print(cnt)



    print(cnt)


    print(cnt)


    print(ans)

    print(ans)


    print(ans)

    print(check(n, x))

    print(ans)

    print(ans)

  print(cnt)


    
    print(ans)



    print(ans)

    
    print(counter)

    print(' '.join(map(str,A[p])))    

    print(" ".join(map(str, C[i])))

print(*map(sum,zip(*m)))

    print(' '.join(map(str, table[i])))

    print(" ".join(map(str, ans[i])))


    print(list2[k],end=" ")
  print(c)
  print(list1[i],end=" ")
print(c)
  

            print(f"{lst[k]} ", end="")
            print(lst[k])

        print(f"{csum[l]} ", end="")
        print(csum[l])

        print(f"{l} ", end="")
    print(s)
    print(f"{s1} ", end="")
print(sum(lists))


    print(' '.join(map(str, a[i])))

        


    print(*k)

    print(" ".join(map(str, table[i])) + " " + str(row_sums[i]))

print(" ".join(map(str, col_sums)) + " " + str(total_sum))


    print(" ".join(map(str, row)))

print(" ".join(map(str, col_sums)))


    print(*row)


    print(' '.join([str(s) for s in l]))
print(' '.join([str(s) for s in t]))


    print(" ".join(map(str, row)))


        print(list_rc[i][j], end=' ')
    print(list_rc[i][c])

        print(ssum, end = ' ')
print(ssum)

    print(*sheet[i])
print(*Column_sum)

    print(" ".join(list(map(str,array[i]))))

    print(*table[i], row_sums[i])


print(*col_sums, total_sum)


    print(*r)
print(*s)


  print(*row)


    print(*a)
print(*S)

    print(" ".join(map(str, mat[i])))

    print(" ".join(map(str,row)))
        

    print(' '.join(map(str, table[i])), row_sums[i])

print(' '.join(map(str, col_sums)), sum(col_sums))




    print(*sheet[i])
print(*Column_sum)

        print(' '.join(map(str, question_list[column])))
        
    print(' '.join(map(str,table[i])))
        
    

    print(*sheet[i])
print(*Column_sum)


    print(*sheet[i])
print(*Column_sum)


    print(" ".join(map(str,A[i])))

  print(' '.join(map(str, a[i])))

    print(*sheet[i])
print(*Column_sum)

    print(*row)

print(*col_sums)


    print(*sheet[i])
print(*Column_sum)

    print(*sheet[i])
print(*Column_sum)

    print(" ".join(list(map(str, a[i]))))


print(" ".join(list(map(str, csum))))

        print(' '.join(map(str, row)))

    print(' '.join(map(str,row_item)))

    print(" ".join(map(str, new_table[i])))

print(*map(sum,zip(*m)))
        


    print(" ".join(list(map(str, arr[p]))))

    print(*speadsheet[i])

        print(column, end=" ")
    print(sum(row))
    print(temp, end=" ")
print(sumrows)





  print(' '.join(map(str, a[i])))


    print(" ".join(map(str, row)))


    print(*i)

    print(' '.join(map(str, i)))
print(' '.join(map(str, last)))

    print(*table[i])

  print(*i)

    print(*X[i], end=' ')
    print(sum(X[i]))

        print(list_x[i][j], end=" ")
            print(sum_row)

print(" ".join(map(str,list_sum_col))+ " " + str(sum(list_sum_col)))
    
        
    

    print(" ".join(map(str,a[row])) )

    print(' '.join(map(str, l[i])))

  print(*m, sum(m))
  print(f"{tmp} ", end="")


print(s)

        print(" ".join(map(str, row)))

    print(*m, sum(m))
print(*n, sum(n))


    print(*sheet[i])

print(*sums)

    print(*s)
print(*map(sum,zip(*num_list)))

    print(*list_all[m])
print(*list_bottom)
        
        
        
        
        
    

  print(' '.join(map(str, m[i])))

    print(*ans)

    print(*row_c)


    print(' '.join(map(str,i)))

    


    print(" ".join(map(str,row)))

        print(out[i][j], end = "")
            print(" ", end = "")
    print()

    print(" ".join(map(str, C[i])))

        print(sum([a[i][k]*b[k][j] for k in range(m)]), end='\n' if j == l - 1 else ' ')

  print(*row)

    print(" ".join(map(str, c)))


    print(*c[i])

    print(" ".join(map(str, row)))


    print(" ".join(map(str,X[row])) )


  print(*w)

    print(*an)


        print(sum(A[i][k]*B[k][j]for k in range(m)),end=" ")
    print(sum(A[i][k]*B[k][-1]for k in range(m)))


    print(*i)

    print(" ".join(map(str, row)))

    print(*Ans[i])

    print(' '.join(map(str, row)))

    print(*i)

    print(" ".join(map(str, c)))

    print(*X[i][:])


    print(*line)

    print(*C[i])


    print(' '.join(map(str,s)))

        print(*r)

        print(*row)

    print(*r)

    print(*row)


        print(*c)


    print(*row)


    print(*row)


    print(*result)

    print(*result)

    print(*result)

    print(*result)


    print(*ans)


    print(*C[i])

    print(*row)


    print(*result)


  print(*x)


    print(*result)


    print(*li)

    print(" ".join(map(str, re)))


    print(*cal4[i])

  print(' '.join(map(str, line)))


print("\n".join([ " ".join([ str(sum([ xa * xb for xa, xb in zip(ta, tb) ])) for tb in B ]) for ta in A ]))


    print(*result)

    print(*i)



    print(*result)


    print(*i)


        print(" ".join(map(str, TabC)))

    print(*row)

    print(*line)

    print(' '.join(map(str,row)))

    print(' '.join(map(str,row)))

    print(*c)

  print(*row)

    print(*result)

    print(*c_row)


            print('{}'.format(C), end = '')
            print('{}'.format(C), end = ' ')
    print()

        print(item, sep='', end=' ')
        print(type(item))
    print()
    print("%d"%C[row_num][0],end = "")
        print(" %d"%(C[row_num][col]),end = "")
    print()


    print(*c)

    print(*c)

    print(*C)

    print(' '.join(map(str, C[i])))

    print(*C)

    print(*C)

print(', '.join(Lst))

print(str.swapcase())


print(str.swapcase())

print(string)

print(s)

    print(chr(ord(s[i])-ord("a")+ord("A")),end="")
    print(chr(ord(s[i])-ord("A")+ord("a")),end="")
    print(s[i],end="")
print()

print(str.swapcase())

print(strs.swapcase())

print(str.swapcase())

print(s.swapcase())

        print(ch.upper(), end="")
        print(ch.lower(), end="")
        print(ch, end="")
print()


print(moji.swapcase())

print(str.swapcase())


print("".join(sl1))

print(str2)


print(arg.swapcase())


print(str.swapcase())

print(swapped_str)



print(output_string)



print(s.swapcase())

print(ch.swapcase())


print(A)

print(output_str)


print(words.swapcase())

print(input().swapcase())


print(result_str)


        print(c.lower(), end="")
        print(c.upper(), end="")
        print(c, end="")
print("")


print(''.join([c.upper() if c.islower() else c.lower() for c in input()]))

print(a.swapcase())


print("{}".format(output_chr[0]), end="")
    print(",{}".format(output_chr[i]), end="")
print()
    

print(Ans)


print(str11)

print(s.swapcase())

print("".join(str_swap))

print(a.swapcase())

print(string_out)

print(input().swapcase())

print(text.swapcase())

print(m)
    

print(w.swapcase())

print(s.swapcase())

print(s.swapcase())

print(a.swapcase())


print(result)


print(output_str)


print(moji.swapcase())



print(str2)



print(result)


print(output_string)


print(output_string)

print(s2)


print(str.swapcase())

print(str.swapcase())

print(str.swapcase())

print(a.swapcase())

print(moji.swapcase())

print(words.swapcase())

print(words.swapcase())

print(str.swapcase())


print(swap_case(input_string))

print(words.swapcase())

    print(chr(res+32), end="")
    print(chr(res-32), end="")
    print(i, end="")
print("")

print(words.swapcase())


print(words.swapcase())

print(w.swapcase())

print(s2)

    print(ans)

    print(sum(list(map(int, [k for k in a]))))

    print(sum)



    print(total)

    print(result)

    print(sum)

    print(ans)


    print(tem)

        print(sum)

  print(sum)

        print(sum(i))

    print(count)




    print(sum)


    print(ans)


    print(digit_sum)


    print(digit_sum)


            print(sum)
    



    print(sum)

        print(sum([int(val) for val in x]))

    print(total)

    print(digit_sum)


    print(ans)

    print(sum_digit)


    print(digit_sum)


    print(s)


    print(sum([int(c) for c in s]))

    print(sum)
    


    print(Ans)

  print(sum)


    print(output_number[j])


  print(ans)

    print(sum([int(val) for val in str]))


    print(sum)

    print(ans)


    print(sum(i))

    print(sum([int(val) for val in x]))



    print(ans)

        print(a)

    print(sum)

    print(ans)
    

    print(ans)

    print(main(ns))






    


    print(sum)
        

    print(sum)

    print(num_sum)

    print(ans)

    print(ans)


    print(ans)

    print(total)
    

    print(sum(map(int, s)))

    print(sum)

    print(y)

    print(sum)

        print(AddDigits(q))

  print(sum_list[i])

    print(sum)

    print(data)
    
    print(sum(list(map(int,value))))

    print(sum)

    print(sum)

    print(chr(ord('a') + i), ':', alf[i])

    print(chr(ord('a')+i),":",counter[i])

    print(chr(ord("a")+i),":",alf[i])


    print(f'{chr(i)} :',cnt)


    print("%s : %d" % (chr(i + ord("a")),counter[i]))

    print(chr(i), ':', dict_alpha[chr(i)])
    

            print(f"{chr(i+97)} : {counter[i]}")

    print(f"{chr(ord('a') + j)} : {count[j]}")

  print(al[i],":",lst[i])

    print(c + " : ", end="")
    print(l1[i])


    print(i, ':', j)

    print(chr(i + ord("a")), " : ", c[i], sep = "")





    print(a[i], ":", c[i])
        


    print("{} : {}".format(char, count))

    print(f"{letter} : {count}")


    print(f"{chr(x)} : {i}")
    print(f"{chr(j + 97)} : {counter[j]}")
    


    print(chr(i), ':', count)



    print(f"{chr(ord('a') + i)} : {dictional[i]}")

    print(f"{char} : {count}")


    print(letters[i]+" : "+str(cnt[i]))

    print(f"{c} : {s.count(c)}")

    print(chr(ord("a")+i),":",alf[i])


    print(f"{chr(i)} : {c}")


    print(c, ':', cnt[c])


    print(f'{chr(i+97)} : {C[i]}')

    print(f"{letter} : {count}")

    print("{} : {}".format(chr(k + 97), count[k]))


  print(i+' : ', s.count(i), sep='')

    print(f"{chr(code)} : {count[i]}")

    print(chr(ord("a")+i),":",count[i])

    print(f"{j} :", i.count(j))

    print(f"{alphabet[i]} : {j}")
    print(chr(ord("a")+i),":",alf[i])

    print(letters[i]+ " : " +str(cnt[i]) )

    print(f'{i} : {a}')

    print(letters[i]+" : "+str(cnt[i]))
    

    print(letters[i]+" : "+str(cnt[i]))

    print(chr(ord('a')+i),':',count[i])
            

    print(f'{i} : {alphabet_dict[i]}')








    


    print(f"{letter} : {count}")


    print(chr(ord("a")+i),":",alphabet[i])
        

    print(letters[i]+" : "+str(cnt[i]))

    print(chr(ord("a")+i),":",alf[i])


    print(letters[i]+" : "+str(cnt[i]))


    print(f'{chr(i)} : {count_table[i]}')


    print(chr(i+ord('a')),":",count[i])

  print(chr(i+ord('a')),':',cnt)

        print(c + " : " + str(CountChar(c, question)))

    print(chr(ord('a')+i)+' : '+str(alp[i]))
        


    print(f"{key} : {value}")

    print(f"{chr(97 + j)} : {num[j]}")


    print(chr(i),":",s.count(chr(i)),end="")
    print()

    print( "{} : {}".format(alpha_k[i],cnt[i]))


    print(letters[i]+" : "+str(cnt[i]))

    print(f"{chr(97+i)} : {counts[i]}")

        print(d, strs.count(d), sep=' : ')

    print(f"{chr(97 + x)} : {count[x]}")

    print(i, ":", text.count(i))

  print("%c : %d"%(t[i], c[i]))


            print(f"length over [{len(line)}]")
            print(f"needs within {len(line)}")
        print(f"{charactor} : {counter[i]}")


    print('Yes')
    print('No')

    print("Yes")
    print("No")

    print("Yes")
    print("No")


    print('Yes')
    print('No')

    print("Yes")
    print("No")

    print("No")
    print("Yes")

    print("Yes")
    print("No")

    print("Yes")
    print("No")


    print("Yes")
  print("No")


    print("Yes")
    print("No")

        print("Yes")
        print("No")

    print("Yes")
    print("No")

    print("Yes")
    print("No")

    print('Yes')
    print('No')


    print("Yes")
    print("No")

print(result)


    print("Yes")
    print("No")


        print('Yes')
    print('No')

    print("Yes")
    print("No")

    print("Yes")
    print("No")


                print("Yes")
    print("No")

print(result)


  print("No")
  print("Yes")

    print('Yes')
    print('No')

    print("Yes")
    print("No")

    print("Yes")
    print("No")


print("Yes" if p in s else "No")


  print("Yes")
  print("No")

    print('Yes')
    print('No')


print(judge)


  print('Yes')
  print('No')

    print("Yes")
    print("No")

print("Yes" if j in i*2 else "No")


    print('Yes')
    print('No')

print("Yes" if b in k else "No")

    print("Yes")
    print("No")

print('Yes' if p in s else 'No')

print('Yes' if p in s else 'No')

    print('Yes')
    print('No')
    

print(c)

    print('Yes')
    print('No')

print(result)







    


    print("Yes")
    print("No")

    print('Yes')
    print('No')

    print("Yes")
    print("No")

print(["Yes", "No"][x.find(input()) == -1])

    print('Yes')
    print('No')

    print("Yes")
    print("No")

    print('Yes')
    print('No')



    print("Yes" if FindCircle(str_circle, question) else "No")

    print('Yes')
    print('No')
    
    

    print('Yes')
    print('No')

print(answer)

    print("Yes")
    print("No")


    print("Yes")
    print("No")

    print("Yes")
    print("No")


    print("Yes")
    print("No")

    print("Yes")
    print("No")


    print("Yes")
    print("No")

        print('Yes')
        print('No')



print(count)


print(count)

print(cnt)


print(count1)


print(f"{ans}")


print(cnt)

print(count)

print(cnt)

print(t.upper().split().count(w.upper()))

                
print(count)

print(ii)


print(count)

print(tem)


print(ans)


        
print(answer)

print(word_count)


print(count)



print(count)

print(count)


print(count)

print(result)



print(C)

print(cnt)

print(S_list.count(W))


print(ans)




print(count)



print(cnt)

print(cnt)


print(Ans)


print(counter)


print(count)

print(cnt)




print(text.split().count(i))



print(count)

print(wc)
    

print(n)

print(l.count(s))


print(count)


     
print(count)


print(count)


print(count)

print(count)



print(word_count)

print(count)



print(result)

print(count)    


print(cnt)


print(count)

print(tangosuu)

print(cnt)

print(cnt)

print(result)

print(T.lower().split().count(W))

print(ans)


print(answer)

print(count)

print(cnt)


print(cnt)

print(n)        


print("%d"%(ans))


print(count)

print(count) 

print(count)

print(sentents.lower().split().count(w))

print(cnt)

print(a)


print(count)





    


    
print(count)


print(counter)

    print(deck[h:] + deck[:h])


    print(a)

    print(str)

    print(cards)

    
    print(text)

        
    print(a)

    print(string)

    print(w)

        print(cards)

    print(str[start:], end='')
    print(str[:start])

        print("".join(s))


    print(letters)
        
    

    print(moji)    
    

  print(s)


    print(result)


    print(s)

    print(C)

    print(final_order)


  print(i)


    print(result)

    print(cards)

    print(final_deck)


    print(s)

    print(s)


    print(C)



    print(a)


    print(c[h:] + c[:h])

    print(S)

        print(card[j], end="")
    print()


    print(s)





    print(chars)


    print(card)

    print(cards)

        print(s[ans%l:l],end = '')
        print(s[ans%l-ans%l:ans%l])
        print(s[0:l])

        print(s)

        

    print(s)

    
    print(s)

    print(C)

    print(cards)
    

    print(cards)

print('\n'.join(result))




    


    print(text)
        

    print(word)

    print(cards)


    print(words[num:] + words[:num])

    print(str)

    print(''.join(letters))
    



    
    print(result_str)
        

        print(str2_[move:stop])
        

    print(A)
    

    print(s)
    


        print(shuffle_deck(deck, shuffle))


    print(current_order)

    print(str_ans[i])

            
        print(strs)


    print(ans)


    print(s)


    print(s)

        print(each_set)


        print(cards)

print(*points)


print(t,h)

print(f'{T_point} {H_point}')

print(t_win,h_win)

print(p1,p2)


print(" ".join(map(str, point)))

print(t_point, h_point)

print(tarou,hanako)


print(f"{point[0]} {point[1]}")


print(tp, hp)


print(a_count, b_count)

print(taro,end=" ")
print(hana)


print("{} {}".format(taroCount,hanakoCount))


print(tem[0],tem[1])

print(taro_score, hanako_score)


print(a,b)

print(taro,hanako)

print(H,T)


print(taro_score, hanako_score)



print(taro, hanako)

print(f"{Taro} {Hanako}")

print(T, H)

print(taro_score, hanako_score)



        
print(taro,hanako)


print(taro_score, hanako_score)


print(p, q)


print(c1, c2)



print(ap, bp)

print(*point)


print("{} {}".format(taro_count, hanako_count))


print(sum(A), sum(B))





print(f"{point_t} {point_h}")

print(a, b)


print("%d"%(taro) , "%d"%(hanako))

print(f"{taro_point} {hanako_point}")


print(taro,hana)

print(T, H)



print(point1,point2)

print(x,y)

print(T,H)


print(T, H)

    
print(s_point,t_point) 


print(ts,hs)
    




    


    
        
print(point[0],point[1])


print(f"{t_point} {h_point}")

print(T, H)

print(T,H)


print(T, H)


print(t_point, h_point)
    

print(ap,bp)
        

        
print(taro,hanako)

print(Taro,Hana)


    
print(t,h)


print(taro_point,end = ' ')
print(hanako_point)
    

print(taro_score, hanako_score)

print(f"{taro} {hana}")



print(*check(cards_list))


print(taro,hanako)


    print(points[0], points[1])


print(f"{scores['Taro']} {scores['Hana']}")


    print(score_taro, score_hanako)


print(taro, hanako)

        print(str[a:b+1])
        print(st[o:l+1])
    
        print(str[ord2 : ord3 + 1])
        print(s[a:b+1])
        print(ans[int(head):int(bottom)+1])
        print(s[a:b+1])
        print("".join(result[start:end+1]))
        print(str[a:b+1])
        print("".join(sl[a:b+1]))
        print(str[a:b+1])
        print(letters[int(h[1]):1+int(h[2])])
        print(text[a:b+1])
        print(tmp[int(i[1]):int(i[2])+1])

        print(str[a:b+1])
        print(str[a:b+1])
        print(s[a:b+1])
        print(text[a:b+1])
        print(S[a:b])
        print(s[a:b+1])
        print(*s[a:b+1], sep='')
        print(s[int(q[1]) : int(q[2]) + 1])
        print(''.join(str[s: e + 1]))

            print(s,end='')
        print()
        print(''.join(map(str, str_list[first: last])))

        print(s[a:b+1])
        print(str[a:b])
		print(b)

        print(str[int(order[1]) : int(order[2]) + 1])


        print(text[a:b+1])
        print(S[op[1]:op[2]+1])
        print(s[a:b+1])
        print(_slice())
        print(text[a:b+1])
        print(text[a:b+1])
        print(nowStr[a:b+1])
        print(text[int(ope[1]):(int(ope[2])+1)])
        print(str[int(order[1]):int(order[2])+1])

        print(str[a:b+1])





    

        print(text[a:b+1])
            print(s[j],end = "")
        print()
        print(words[a:b + 1])

        print(str[A[1]:A[2]+1])
    print(ans)

        print(A[a:b+1])
            print(s[c_2:c_3+1])
            
        print(s[a:b])
    
        print(text[a:b+1])
  print(result[i])

        print(text[a:b + 1])
            print(str[a:b+1])
        print(s[a:b])
        print(string[start_idx:end_idx])
        print(word[min:max])

    print(output_str)

            print(f"invalid number of element in command [{command_line}]")
                print(f"invalid arguments: f{command_line}")
                print(f"invalid arguments: f{command_line}")
                print(f"invalid arguments: f{command_line}")
            print(f"invalid command [{command_line}]")
        print(s[a:b + 1])
      print(inputed_str[start_index:end_index])
        print( str( target[int(X[1]):int(X[2])+1] ) )

    print(s[a:b+1])
        print(s[a:b+1])


        print(ans)
print(f'{x:032b}')
print(f'{x_rev:032b}') 
print(f'{x_lshift:032b}') 
print(f'{x_rshift:032b}') 

    print(v, end="")
print()
    print(v, end="")
print()
    print(v, end="")
print()
    print(v, end="")
print()


print(bin(x)[2:].zfill(32)[-32:])
print(bin(~x & 0b11111111111111111111111111111111)[2:].zfill(32)[-32:])
print(bin(x << 1)[2:].zfill(32)[-32:])
print(bin(x >> 1)[2:].zfill(32)[-32:])

print( f'{x:032b}')
print( f'{~x & MASK:032b}' )


print( f'{x << 1:032b}'[-32:]) 
print( f'{x >> 1:032b}')

print(str.join("", [str(b) for b in bits]))
print(str.join("", [str(int(not bool(b))) for b in bits]))

print(str.join("", [str(int(b)) for b in left]))

print(str.join("", [str(int(b)) for b in right]))


print(b)

        print(1, end='')
        print(0, end='')
print()

        print(0, end='')
        print(1, end='')
print(0, end='')
print()


print(0, end='')
        print(0, end='')
        print(1, end='')
print()



print(format(n, "032b"))
print(format(n ^ 0xFFFFFFFF, "032b"))
print(format(n << 1 & 0xFFFFFFFF, "032b"))
print(format(n >> 1, "032b"))


print("{:032b}".format(x))
print("{:032b}".format(~x & (2**32-1)))
print("{:032b}".format(x << 1 & (2**32-1)))
print("{:032b}".format(x >> 1 & (2**32-1)))

print(bin(n)[2:].zfill(32))
print(bin(2**32-n-1)[2:].zfill(32))
print(a[-32:])
print(bin(n>>1)[2:].zfill(32))


    print(fmt.format(n))
    print(fmt.format(~n + 2**32))
    print(fmt.format(n << 1 & ~(1 << 32)))
    print(fmt.format(n >> 1))


print("{:032b}".format(x))
print("{:032b}".format(~x & MASK))
print("{:032b}".format((x << 1) & MASK))
print("{:032b}".format((x >> 1) & MASK))



print(bin_x)
print(bin_x1)
print(bin_x2)
print(bin_x3)


print(f'{n:032b}')
print(f'{~n & 0xffffffff:032b}')
print(f'{((n << 1) & 0xffffffff):032b}')
print(f'{n >> 1:032b}')

print("{:032b}".format(n))
print("{:032b}".format(~n & MASK))
print("{0:032b}".format(n << 1 & MASK))
print("{0:032b}".format(n >> 1 & MASK))



print('{:032b}'.format(x))
print('{:032b}'.format(~x & (2 ** 32 - 1)))
print('{:032b}'.format(x << 1 & (2 ** 32 - 1)))
print('{:032b}'.format(x >> 1))


print(format(x,'032b'))
print(format(b,'032b'))
print(format(c,'032b'))
print(format(d,'032b'))



print("{:032b}".format(x))
print("{:032b}".format(~x & MASK))
print("{:032b}".format((x << 1) & MASK))
print("{:032b}".format((x >> 1) & MASK))

print('{:032b}'.format(n))
print('{:032b}'.format(~n & mask))
print('{:032b}'.format((n<<1)& mask))
print('{:032b}'.format((n>>1)& mask))


print("{:032b}".format(x))
print("{:032b}".format(~x & BITMASK))
print("{:032b}".format((x << 1) & BITMASK))
print("{:032b}".format((x >> 1) & BITMASK))


print(f'{x:032b}')
print(f'{x:032b}'.translate(str.maketrans('01', '10')))
print(f'{x<<1:032b}'[-32:])
print(f'{x>>1:032b}')


print(pady+y)
print(padz+z)
print(padu+u)

print(padv+v)


    print(f"{x:032b}")
    print(f"{~x & mask:032b}")
    print(f"{(x << 1) & mask:032b}")
    print(f"{(x >> 1) & mask:032b}")


print("{:032b}".format(b))
print("{:032b}".format(~b & MAX))
print("{:032b}".format((b << 1) & MAX))
print("{:032b}".format((b >> 1) & MAX))

print( format(x, "032b") )
print( format( ~x & 0b11111111111111111111111111111111, "032b") )
print( format( x<<1, "032b")[-32:] )
print( format( x>>1, "032b") )



print(n)
print(inversion_n)
print(left)
print(right)

print(s)
print(s.replace("0","2").replace("1","0").replace("2","1"))
print(s[1:] + "0")
print("0" + s[:-1])


    
    print(b)
    print(bi)
        print(bl[-32:])
        print(bl)


    print(br)


print("{:032b}".format(n))
print("{:032b}".format(~n&m))
print("{:032b}".format(n<<1&m))
print("{:032b}".format(n>>1))

print("{:032b}".format(x))
print("{:032b}".format(~x & (2**32-1)))
print("{:032b}".format(x << 1 & (2**32-1)))
print("{:032b}".format(x >> 1))

print(f'{x:032b}')
print(f'{~x & 0xffffffff:032b}')
print(f'{x << 1 & 0xffffffff:032b}')
print(f'{x >> 1:032b}')

print("{:032b}".format(x))
print("{:032b}".format(~x & MASK))
print("{:032b}".format((x << 1) & MASK))
print("{:032b}".format((x >> 1) & MASK))



    print(format(n&mask,"032b"))

print(format(x,"032b"))
print(format(~x & 0b11111111111111111111111111111111,"032b"))
print(format(x<<1,"032b")[-32:])
print(format(x>>1,"032b"))


print(b)

print()

print(0,end='')
print()


print(0,end='')
print()

print(f.format(x))
print(f.format((x ^ m) & m))
print(f.format((x << 1) & m))
print(f.format((x >> 1) & m))

print('{:032b}'.format(x))
print('{:032b}'.format(xx))
    print(xx)
    print(xx[1:])
print('{:032b}'.format(xx))

print(bin(x + (1 << 32))[3:])
print(bin(x ^ ((1 << 32) - 1) + (1 << 32))[3:])
print(bin((x << 1) % (1 << 32) + (1 << 32))[3:])
print(bin((x >> 1) % (1 << 32) + (1 << 32))[3:])


print(format(x, '032b'))
print(format(~x & 0b11111111111111111111111111111111, '032b'))
print(format(x << 1 & 0b11111111111111111111111111111111, '032b'))
print(format(x >> 1 & 0b11111111111111111111111111111111, '032b'))

print(f"{x:032b}")
print(f"{~x & MASK:032b}")
print(f"{x << 1 & MASK:032b}")
print(f"{x >> 1:032b}")

print('{:032b}'.format(x))
print('{:032b}'.format(~x & ((1 << 32) - 1)))
print('{:032b}'.format((x << 1) % (1 << 32)))
print('{:032b}'.format(x >> 1))



  print(s if len(s)==32 else s[1:])

        print('{:032b}'.format(self.x))
    
        print('{:032b}'.format(result))

        print('{:032b}'.format(result))

        print('{:032b}'.format(result))



print(format(N, '032b'))
print(format(~N & 0b11111111111111111111111111111111,'032b'))

print(s[l:])
print(format(N>>1, '032b'))


        print(''.join(f'{num:0>32b}'))


print(format(x & 0b11111111111111111111111111111111, '032b'))
print(format(~x & 0b11111111111111111111111111111111, '032b'))
print(format(x<<1 & 0b11111111111111111111111111111111, '032b'))
print(format(x>>1 & 0b11111111111111111111111111111111, '032b'))

print(ans)
print(''.join(inv))
print(''.join(left))
print(''.join(right))


print(format(x, "#034b")[2:])
print(format(~x & 0b11111111111111111111111111111111, "#034b")[2:])
print(format((x << 1) & 0b11111111111111111111111111111111, "#034b")[2:])
print(format(x >> 1, "#034b")[2:])

    print(tmp)

    print(not_tmp)

        print(tmp[1:])
        print(tmp)

    print(tmp)


print(format(x << 1, "032b")[-32:])   # 左シフトする(33桁にならないよう、右側32桁分だけ取り出す)

print(f"{n:032b}")
print(f"{n ^ mask:032b}")
print(f"{(n << 1) & mask:032b}")
print(f"{(n >> 1) & mask:032b}")

print("{:032b}".format(x))
print("{:032b}".format(~x & MASK))
print("{:032b}".format((x << 1) & MASK))
print("{:032b}".format((x >> 1) & MASK))


print(a)
print(b)
print(c)
print(d)



print(ans_1)
print(ans_2)
print(ans_3)
print(ans_4)


print(f'{n:032b}')
print(f'{n^x:032b}')
print(f'{n<<1&x:032b}')
print(f'{n>>1:032b}')

print(''.join(ans_1))

print(''.join(ans_2))
print(''.join(ans_3))
print(''.join(ans_4))


print('\n'.join([x,re,ls,rs]))

print(*calc(x, n), sep='')
print(*calc(x, n, reverse=True), sep='')
print(*calc(x << 1, n), sep='')
print(*calc(x >> 1, n), sep='')

    print(bin((n) & msk)[2:].zfill(32))
    print(bin((n ^ msk) & msk)[2:].zfill(32))
    print(bin((n << 1) & msk)[2:].zfill(32))
    print(bin((n >> 1) & msk)[2:].zfill(32))



print(format(x & 0xffffffff, '032b'))
print(format(~x & 0xffffffff, '032b'))
print(format((x<<1) & 0xffffffff, '032b'))
print(format((x>>1) & 0xffffffff, '032b'))


    print(result)
    print(r_result)
    print(l_shift_result)
    print(r_shift_result)



print(binary_format[-32:])
print(inverted_string[-32:])
print(logical_left_shift[-32:])
print(logical_right_shift[-32:])


print(''.join(list(map(str,f'{AND:032b}'))))
print(''.join(list(map(str,f'{OR:032b}'))))
print(''.join(list(map(str,f'{XOR:032b}'))))



print(f'{a & b:032b}')
print(f'{a | b:032b}')
print(f'{a ^ b:032b}')


    print(v, end="")
print()
    print(v, end="")
print()
    print(v, end="")
print()

print(bin(a & b)[2:].zfill(32)[-32:])
print(bin(a | b)[2:].zfill(32)[-32:])
print(bin(a ^ b)[2:].zfill(32)[-32:])



print( f'{ a & b:032b}')
print( f'{ a | b:032b}' )
print( f'{ a ^ b:032b}') 

print(str.join("", [str(x) for x in to_bit(a&b)]))
print(str.join("", [str(x) for x in to_bit(a|b)]))
print(str.join("", [str(x) for x in to_bit(a^b)]))

print(convert(a & b))
print(convert(a | b))
print(convert(a ^ b))



print(format(a & b, "032b"))
print(format(a | b, "032b"))
print(format(a ^ b, "032b"))


print(f'{a & b:032b}')
print(f'{a | b:032b}')
print(f'{a ^ b:032b}')

print(bin(a & b)[2:].zfill(32))
print(bin(a | b)[2:].zfill(32))
print(bin(a ^ b)[2:].zfill(32))


    print(fmt.format((a & b) & mask))
    print(fmt.format((a | b) & mask))
    print(fmt.format((a ^ b) & mask))


print("{:032b}".format(a & b))
print("{:032b}".format(a | b))
print("{:032b}".format(a ^ b))




print(bin_x)
print(bin_x1)
print(bin_x2)



print(f'{a & b:032b}')
print(f'{a | b:032b}')
print(f'{a ^ b:032b}')

print("{:032b}".format(a & b))
print("{:032b}".format(a | b))
print("{0:032b}".format(a ^ b))



print('{0:032b}'.format(a & b))
print('{0:032b}'.format(a | b))
print('{0:032b}'.format(a ^ b))


print(format(c,'032b'))
print(format(d,'032b'))
print(format(e,'032b'))



print("{:032b}".format(a & b))
print("{:032b}".format(a | b))
print("{:032b}".format(a ^ b))

print('{:032b}'.format(a & b))
print('{:032b}'.format(a | b))
print('{:032b}'.format(a ^ b))


print("{:032b}".format(a & b))
print("{:032b}".format(a | b))
print("{:032b}".format(a ^ b))


print("{:032b}".format(a & b))
print("{:032b}".format(a | b))
print("{:032b}".format(a ^ b))

print(f'{a&b:032b}\n{a|b:032b}\n{a^b:032b}')

print("{:032b}".format(a & b))
print("{:032b}".format(a | b))
print("{:032b}".format(a ^ b))


print("{:032b}".format(a&b))
print("{:032b}".format(a|b))
print("{:032b}".format(a^b))

    print(f"{(a & b) & mask:032b}")
    print(f"{(a | b) & mask:032b}")
    print(f"{(a ^ b) & mask:032b}")


print("{:032b}".format(a & b))
print("{:032b}".format(a | b))
print("{:032b}".format(a ^ b))


print( format( a&b, "032b") )
print( format( a|b, "032b") )
print( format( a^b, "032b") )


print(format(a&b,'032b'))
print(format(a|b,'032b'))
print(format(a^b,'032b'))

print("{:032b}".format(a&b))
print("{:032b}".format(a|b))
print("{:032b}".format(a^b))


    print(format(an, "032b"))
    print(format(o,  "032b"))
    print(format(xo, "032b"))


print("{:032b}".format(n&m))
print("{:032b}".format(n|m))
print("{:032b}".format(n^m))

print("{:032b}".format(a & b))
print("{:032b}".format(a | b))
print("{:032b}".format(a ^ b))


print("{:032b}".format(a & b))
print("{:032b}".format(a | b))
print("{:032b}".format(a ^ b))

print(f'{a & b:032b}')
print(f'{a | b:032b}')
print(f'{a ^ b:032b}')

    print(format(n&mask,"032b"))



print(format(a&b,"032b"))
print(format(a|b,"032b")[-32:])
print(format(a^b,"032b"))


print(convert(a&b))
print(convert(a|b))
print(convert(a^b))

print('{:032b}'.format(a & b))
print('{:032b}'.format(a | b))
print('{:032b}'.format(a ^ b))

print(bin((a & b) + (1 << 32))[3:])
print(bin((a | b) + (1 << 32))[3:])
print(bin((a ^ b) + (1 << 32))[3:])


print(format(a&b,'032b'))
print(format(a|b,'032b'))
print(format(a^b,'032b'))

print(f"{a & b:032b}")
print(f"{a | b:032b}")
print(f"{a ^ b:032b}")

  print(s if len(s)==32 else s[1:])

print('{:032b}'.format(a & b & mask))
print('{:032b}'.format(a | b & mask))
print('{:032b}'.format(a ^ b & mask))

print(format(a&b & 0b11111111111111111111111111111111, '032b'))
print(format(a|b & 0b11111111111111111111111111111111, '032b'))
print(format(a^b & 0b11111111111111111111111111111111, '032b'))


print(format((a & b) & 0b11111111111111111111111111111111, "#034b")[2:])
print(format((a | b) & 0b11111111111111111111111111111111, "#034b")[2:])
print(format((a ^ b) & 0b11111111111111111111111111111111, "#034b")[2:])


    print(bin(a & b)[2:].zfill(32))
    print(bin(a | b)[2:].zfill(32))
    print(bin(a ^ b)[2:].zfill(32))



print(f"{(a & b) & mask:032b}")
print(f"{(a | b) & mask:032b}")
print(f"{(a ^ b) & mask:032b}")


print(f'{a & b:032b}')
print(f'{a | b:032b}')
print(f'{a ^ b:032b}')


print(f"{(a & b):032b}")
print(f"{(a | b):032b}")
print(f"{(a ^ b):032b}")



print(''.join(ans_1))
print(''.join(ans_2))
print(''.join(ans_3))


print("{:032b}".format(a & b))
print("{:032b}".format(a | b))
print("{:032b}".format(a ^ b))


print(*calc(a & b, n), sep='')
print(*calc(a | b, n), sep='')
print(*calc(a ^ b, n), sep='')

    print(bin(a & b)[2:].zfill(32))
    print(bin(a | b)[2:].zfill(32))
    print(bin(a ^ b)[2:].zfill(32))



print(format((a & b) & 0xffffffff, '032b'))
print(format((a | b) & 0xffffffff, '032b'))
print(format((a ^ b) & 0xffffffff, '032b'))

    print(format(x & b32, '032b'))


        print(l[i])
        print(int(all(l)))
        print(int(any(l)))
        print(int(l.count(1) == 0))
        print(sum(l))
        print(num)


print('\n'.join(ans))

    print(int(bool(x & 1<<i)))
    print(int(x & m == m))
    print(int(x & m != 0))
    print(int(x & m == 0))
    print(bin(x).count('1'))
    print(x)


            print(1 if flag[i]==1 else 0)
            print(1 if sum(flag)==len(flag) else 0)
            print(1 if sum(flag)!=0 else 0)
            print(1 if sum(flag)==0 else 0)
            print(sum(flag))
            print(int(''.join(list(map(str,flag)))[::-1],2))

    print(1 if flag[i] == 1 else 0)
    print(1 if flag == [1]*64 else 0)
    print(1 if sum(flag)>0 else 0) 
    print(1 if sum(flag)==0 else 0)
    print( sum(flag))
    print(int(v,2))

print("\n".join(ans))

            print(1)
            print(0)
            print(1)
            print(0)
            print(1)
            print(0)
            print(1)
            print(0)
        print(count)
        print(val)

        print((n >> q.index) & 1)
        print(int(n == 0xFFFF_FFFF_FFFF_FFFF))
        print(int(n != 0))
        print(int(n == 0))
        print(sum(list(map(int, format(n, 'b')))))
        print(n)

            print((b >> query[1]) & 1)
            print(int(b == (1 << 64) - 1))
            print(int(b != 0))
            print(int(b == 0))
            print(popcount(b))
            print(b)


        print(b.test(i))
        print(b.bitwise_all())
        print(b.bitwise_any())
        print(b.bitwise_none())
        print(b.count())
        print(b.get_val())

        print(a >> i & 1)
        print(int(a == (1 << 64) - 1))
        print(int(a > 0))
        print(int(a == 0))
        print(bin(a).count("1"))
        print(a)


        print(1)
        print(0)

        print(1)
        print(0)

        print(1)
        print(0)

        print(1)
        print(0)

    print(bin(flag).count("1"))

    print(flag)


        print(f[query[1]])
            print(0)
            print(1)
            print(1)
            print(0)
            print(0)
            print(1)
        print(f.count(1))
        print(int(t, 2))

        print(1 if flag.test(data[0]) else 0)
        print(1 if flag.is_all_on() else 0)
        print(1 if flag.is_any_on() else 0)
        print(1 if flag.is_none_on() else 0)
        print(flag.get_on_count())
        print(flag.flag)

print(*query(Q), sep='\n')



print(*query(Q), sep='\n')


        print((flag >> i) & 1)
        print(count)
        print(flag)
    


        print(*n)
         print(li.count(1))
        print(int(int_li,2))
         

            print(num >> q[1] & 1)
        
            print(1 if num == 2 ** 64 - 1 else 0)
        
            print(1 if num != 0 else 0)
        
            print(1 if num == 0 else 0)
        
            print(count)
        
            print(num)


        print((bit >> i) & 1)
        print(int(bit == mask))

        print(int(bit != 0))

        print(int(bit == 0))

        print(bin(bit).count('1'))

        print(bit)


                print(1)
                print(0)
                print(0)
                print(1)
                print(1)
                print(0)
                print(0)
                print(1)
            print(flag.count("1"))
            print(int(s,2))

        print(ret)
        print(0 if num[int(query[1])] == "0" else 1)
        print("1" if num.count("1") == 64 else "0")
        print("1" if num.count("1") >= 1 else "0")
        print("1" if num.count("1") == 0 else "0")
        print(num.count("1"))
        print(int("".join(num[::-1]),2))

            print(1)
            print(0)
    
            print(1)
            print(0)
    
            print(1)
            print(0)
    
            print(1)
            print(0)
    
        print(cnt)
    
        print(Bit)


            print(1 if (bits & (1 << line_numbers[1])) else 0)
            print(1 if bits == (2**64 - 1) else 0)
            print(1 if bits else 0)
            print(0 if bits else 1)
            print(num_ones)
            print(bits)
        print(a>>q[1]&1)
            print(1)
            print(0)
            print(1)
            print(0)    
            print(0)
            print(1)  
        print(count_true(a))
        print(a)  

                print("1")
                print("0")

                print("1")
                print("0")
            
                print("1")
                print("0")

                print("1")
                print("0")

            print(format(state, "064b").count("1"))

            print(int(state))

    print(+((x & (1 << i)) != 0))
    print(+(x == mask))
    print(+(x != 0))
    print(+(x == 0))
    print(bin(x).count('1'))
    print(x)
    
            print(1)
            print(0)
            print(1)
            print(0)
            print(1)
            print(0)
            print(1)
            print(0)
        print("{:64b}".format(bit_flag).count("1"))
        print(bit_flag)
        print(ans)

    print("{:b}".format(data))

        print(bitCheck(n,qry[1]))
        print(isbitAll(n))
        print(isbitAny(n))
        print(isbitNone(n))
        print(bitCount(n))
        print(n)


        print((bit & (1 << i)) >> i)
            print(1)
            print(0)
            print(1)
            print(0)
            print(1)
            print(0)
        print(str(bin(bit)).count('1'))
        print(bit)

        print(1 if 0 != (st & (1<<i)) else 0)
        print(1 if st == b64 else 0)
        print(1 if 0 != st else 0)
        print(1 if 0 == st else 0)
        print(bin(st).count('1'))
        print(st)


        print((X >> i) & 1)
        print(int(X == mask))
        print(int(X != 0))
        print(int(X == 0))
        print(bin(X).count("1"))
        print(X)


    print(int(bool(x & 1<<i)))
    print(int(x & m == m))
    print(int(x & m != 0))
    print(int(x & m == 0))
    print(bin(x).count('1'))
    print(x)

        print(1)
        print(0)
        print(1)
        print(0)
        print(0)
        print(1)
        print(1)
        print(0)
    print(bin(a).count('1'))
            print(1)
            print(0)
            print(1)
            print(0)
            print(1)
            print(0)
            print("1")
            print("0")
        print(bin(flag)[2:].count("1"))
        print(flag)

        print(qlist[i])
            print(1)
            print(0)
            print(1)
            print(0)
            print(1)
            print(0)
        print(c)
        print(dec_q)


        print(1 if l[int(query[1])] else 0)
        print(1 if all(l) else 0)
        print(1 if any(l) else 0)
        print(1 if not any(l) else 0)
        print(sum(l))
        print(tmp)
        print(int(bool(self.data & 1 << int(arg))))

        print(int(bin(self.data).count('1') == 64))

        print(int(self.data != 0))

        print(int(self.data == 0))

        print(bin(self.data).count('1'))

        print(self.data)

                print(1)
                print(0)
                print(1)
                print(0)
                print(1)
                print(0)
                print(1)
                print(0)
            print(sum(bits))
            print(f"{int(bin_str, 2)}")


        print(int(bool(self.data & 1 << int(arg))))

        print(int(bin(self.data).count('1') == 64))

        print(int(self.data != 0))

        print(int(self.data == 0))

        print(bin(self.data).count('1'))

        print(self.data)

                print(1)
                print(0)

                print(1)
                print(0)

                print(1)
                print(0)

                print(1)
                print(0)

            print(bitflag.count_flag_on())

            print(bitflag.flag_int)


        print(test(num))

        print(all())

        print(any())

        print(none())

        print(count())

        print(val(current_flag))


		print(0 if self.v & (1 << i) == 0 else 1)
		print(1 if self.v == 0xffffffffffffffff else 0)
		print(1 if self.v != 0 else 0)
		print(1 if self.v == 0 else 0)
		print(format(self.v, '064b').count('1'))
		print(self.v)
		
        print(L[query[1]])
        print(sum(L)//64)
        print(1 if sum(L)>=1 else 0)
        print(1 if sum(L)==0 else 0)
        print(sum(L))
        print(ans)

            print(0)
            print(1)
            print(1)
            print(0)
            print(1)
            print(0)
            print(1)
            print(0)
        print(a.count(1))
        print(ans)


    print(test(v, l[1]))
    print(all(v))
    print(any(v))
    print(none(v))
    print(count(v))
    print(val(v))


        print(flag[query[1]])

            print(1)
            print(0)

            print(1)
            print(0)

            print(1)
            print(0)

        print(x)

        print(x)

        print(cnt)
        print(res)

        print((bit >> i) & 1)
            print(1)
            print(0)
            print(1)
            print(0)
            print(1)
            print(0)
        print(cnt)
        print(bit)


            print(0)
            print(1)

            print(1)
            print(0)
            print(1)
            print(0)
            
            print(1)
            print(0)
            
        print(counter)
        
        print(n)
    


                print(1)
                print(0)
                print(1)
                print(0)
                print(1)
                print(0)
                print(1)
                print(0)
            print(flg.count())
            print(flg.val())


            print(1)
            print(0)
            print(1)
            print(0)
            print(1)
            print(0)
            print(1)
            print(0)
        print( b.count())
        print( b.val() )

        print(a >> x & 1)
        print(int(a & m[x] == m[x]))
        print(int(a & m[x] > 0))
        print(int(a & m[x] == 0))
        print(bin(a & m[x]).count("1"))
        print(a & m[x])


        print(b.test(i))
        print(b.bitwise_all(mask[m]))
        print(b.bitwise_any(mask[m]))
        print(b.bitwise_none(mask[m]))
        print(b.count(mask[m]))
        print(b.get_val(mask[m]))

    print(1 if flag[i] == 1 else 0)
    print(1 if all([flag[a] == 1 for a in mask[m]]) else 0)
    print(1 if sum( [flag[a] for a in mask[m] ]) > 0 else 0 ) 
    print( 1 if sum( [flag[a] for a in mask[m] ]) == 0 else 0)
    print( sum( [ flag[a] for a in mask[m] ]))
    print(int(v,2))

        print(1 if flag[num]==1 else 0)
        print(1 if sum(tmp)==len(mask[num]) else 0)
        print(1 if sum(tmp)!=0 else 0)
        print(1 if sum(tmp)==0 else 0)
        print(sum(tmp))
        print(int(''.join(list(map(str,tmp)))[::-1],2))

        print((flag >> m) & 1)
        print(tmp_flag)
        print(tmp_flag)
        print(tmp_flag)
        print(count)
        print(sum)



print("\n".join(ans))

print('\n'.join(ans))

            print(num >> q[1] & 1)
            print(1 if num & mask == mask else 0)
        
            print(1 if num & mask != 0 else 0)
        
            print(1 if num & mask == 0 else 0)
        
            print(tmp.count('1'))
        
            print(num & mask)


        print(a >> x & 1)
        print(int(a & m[x] == m[x]))
        print(int(a & m[x] > 0))
        print(int(a & m[x] == 0))
        print(bin(a & m[x]).count("1"))
        print(a & m[x])


        print((b >> q.index) & 1)
        print(int(b & masks[q.mask_id] == masks[q.mask_id]))
        print(int(b & masks[q.mask_id] != 0))
        print(int(b & masks[q.mask_id] == 0))
        print(sum(list(map(int, format(b & masks[q.mask_id], 'b')))))
        print(b & masks[q.mask_id])



print(*query(Q), sep='\n')


        print(f[query[1]])
            print(1)
            print(0)
            print(1)
            print(0)
            print(0)
            print(1)
        print(flag)
        print(int(t, 2))

        print(1 if flag.test(i) else 0)
        print(1 if flag.is_all_on(mask[i]) else 0)
        print(1 if flag.is_any_on(mask[i]) else 0)
        print(1 if flag.is_none_on(mask[i]) else 0)
        print(flag.get_on_count(mask[i]))
        print(flag.get_value(mask[i]))


print(*query(Q), sep='\n')

            print(1)
            print(0)
            print(1)
            print(0)
            print(1)
            print(0)
            print(0)
            print(1)
        print(count)
        print(x)

        print((stat >> i)&1)
            print(1)
        print(0)
                print(1)
            print(0)
                print(0)
            print(1)
        print(cnt)
        print(ans)


        print(a>>q[1]&1)
            print(0)
            print(1)
            print(1)
            print(0)    
            print(0)
            print(1)  
        print(count_true(masks[q[1]]&a))
        print(masks[q[1]]&a)  

            print(1)
            print(0)
            print(1)
            print(0)
            print(1)
            print(0)
            print(1)
            print(0)
        print(bin(bitset & masks[m]).count("1"))
        print(bitset & masks[m])


            print(1)
            print(0)
            print(1)
            print(0)
            print(1)
            print(0)
            print(1)
            print(0)
        print(bin(bit_flag & list_mask[m]).count("1"))
        print(bit_flag & list_mask[m])
    print(+((x & (1 << i)) > 0))
    print(+(x & masks[i] == masks[i]))
    print(+(x & masks[i] > 0))
    print(+(x & masks[i] == 0))
    print(bin(x & masks[i]).count('1'))
    print(x & masks[i])
    
        print(ans)

        print((X >> i) & 1)
        print(int((X & m[i]) == m[i]))
        print(int((X & m[i]) != 0))
        print(int((X & m[i]) == 0))
        print(bin(X & m[i]).count("1"))
        print(X & m[i])


    print("{:b}".format(n))

        print(bitCheck(b,qry[1]))
        print(isMaskAll(b,masks[qry[1]]))
        print(isMaskAny(b,masks[qry[1]]))
        print(isMaskNone(b,masks[qry[1]]))
        print(MaskCount(b,masks[qry[1]]))
        print(b&masks[qry[1]])

            print(0)
            print(1)
 
            print(1)
            print(0)

        
            
            print(1)
            print(0)
             
            print(1)
            print(0)
            
        print(bin(n & mask[query[1]]).count("1"))
        
         
        print(mask[query[1]] & n)


        print(1)
        print(0)
        print(1)
        print(0)
        print(0)
        print(1)
        print(1)
        print(0)
    print(bin(a&mask[m]).count('1'))
            print(0)

        print(1)
        print(0)

        print(1)
        print(0)

        print(0)
        print(1)

    print(cnt)

        print((b>>m)&1)
        print(1 if b&mask[m]==mask[m] else 0)
        print(1 if b&mask[m] else 0)
        print(1 if not b&mask[m] else 0)
        print((format(b&mask[m],"032b")).count("1"))
        print(b&mask[m])


            print(1)
            print(0)
    
            print(1)
            print(0)
    
            print(1)
            print(0)
    
            print(1)
            print(0)
    
        print(str(bin(ans)).count('1'))
    
        print(ans)


                print("1")
                print("0")

                print("1")
                print("0")
            
                print("1")
                print("0")

                print("1")
                print("0")

            print(format(current, "064b").count("1"))

            print(int(current))

    print(flag[i])

        print(1)
        print(0)

        print(1)
        print(0)

        print(1)
        print(0)

    print(judge.count(1))

    print(a)

        print(qlist[i])

                print(0)
            print(1)

                print(1)
            print(0)

                print(0)
            print(1)

        print(cnt)

        print(sum)



        print(ret)
    print(flag[i])

        print(1)
        print(0)

        print(1)
        print(0)

        print(1)
        print(0)

    print(judge.count(1))

    print(a)

        print(qlist[i])

                print(0)
            print(1)

                print(1)
            print(0)

                print(0)
            print(1)

        print(cnt)

        print(sum)


        print(1 if 0 != (st & (1<<v[1])) else 0)
        print(1 if (st & m) == m else 0)
        print(1 if 0 != (st & m) else 0)
        print(1 if 0 == (st & m) else 0)
        print(bin(st & m).count('1'))
        print(st & m)


        print(test(query[1]))

        print(all(mask))

        print(any(mask))

        print(none(mask))

        print(count(mask))

        print(val(mask))


                print(1)
                print(0)
                print(1)
                print(0)
                print(1)
                print(0)
                print(1)
                print(0)
            print(count)
            print(f"{int(bin_str, 2)}")


                print(1)
                print(0)

                print(1)
                print(0)

                print(1)
                print(0)

                print(1)
                print(0)

            print(bitflag.count_flag_on(a[0]))

            print(bitflag.get_mask_decimal(a[0]))


		print(0 if self.v & (1 << i) == 0 else 1)
		print(1 if (self.v & self.mask[i]) == self.mask[i]  else 0)
		print(1 if (self.v & self.mask[i]) != 0 else 0)
		print(1 if (self.v  & self.mask[i]) == 0 else 0)
		print(format(self.v & self.mask[i], '064b').count('1'))
		print(self.v & self.mask[i])
		
        print(int(bool(self.data & 1 << int(arg))))

        print(int(all([self.data & 1 << m for m in self.masks[arg]])))

        print(int(any([self.data & 1 << m for m in self.masks[arg]])))

        print(int(all([(self.data & 1 << m)==0 << m for m in self.masks[arg]])))

        print(len([True for m in self.masks[arg] if self.data & 1 << m]))

        print(sum(self.data & 1 << m for m in self.masks[arg]))


        print(int(bool(self.data & 1 << int(arg))))

        print(int(all([self.data & 1 << m for m in self.masks[arg]])))

        print(int(any([self.data & 1 << m for m in self.masks[arg]])))

        print(int(all([(self.data & 1 << m)==0 << m for m in self.masks[arg]])))

        print(len([True for m in self.masks[arg] if self.data & 1 << m]))

        print(sum(self.data & 1 << m for m in self.masks[arg]))


            print(1)
            print(0)

            print(1)
            print(0)

            print(1)
            print(0)

            print(1)
            print(0)

        print(bin(self.current & self.masks[mask_idx]).count("1"))

        print(self.current & self.masks[mask_idx])


    print(btest(v, l[1]))
    print(ball(v, m[l[1]]))
    print(bany(v, m[l[1]]))
    print(bnone(v, m[l[1]]))
    print(bcount(v, m[l[1]]))
    print(bval(v, m[l[1]]))


            print(1)
            print(0)

            print(1)
            print(0)

            print(1)
            print(0)

            print(0)
            print(1)

        print(cnt)

        print(ans)

        print(cnt)
        print(res)

                print(1)
                print(0)
                print(1)
                print(0)
                print(1)
                print(0)
                print(1)
                print(0)
            print(bit.count(val))
            print(bit.val(val))


    print(s)

        print(f"{i}:", *ans)
        print(f"{i}:")


    
    print(k,end = '')
    print(':',*temp)


print("0:")
    print(f'{i}:', *elems)


    print(i, end='')
    print(":", end='')
            print(" ", j, sep='', end='')
    print()



print(''.join(s), end='')



print(''.join(s), end='')


print('0:')
    print(f'{x}: {" ".join(map(str, bits))}')


print('\n'.join(ans))



        
        print(ans)


print('0:')
    print(f'{x}: {" ".join(map(str, bits))}')


    print(" ".join([f"{j}:"] + [str(x) for x in range(n) if j >> x & 1]))

    print('{}: {}'.format(i, ' '.join(map(str, sub)))) if len(sub) != 0 else print(f'{i}:')

    print(f"{num}:{''.join(map(lambda digit: f' {digit}', digits))}")

    print(f"{j}:",end="")
    
        print(f" {item}", end="")
    print("")


        
        print(str(i)+':',*ans_list)



    print(f"0:")
        print(f"{d}: ", end="")
        print(" ".join([str(elem) for elem in range(bit) if d & (1 << elem)]))


    print(f'{i}:', *count(i, n))

    print(i, end="")
    print(":", end="")
            print(" ", end="")
            print(j, end="")
    print()

print('\n'.join(ans))


        print("{}:{}".format(i, "".join([" {}".format(v) for v in vs])))


  print(f'{i}:', *x)

    print(f'{d:d}:', *s)


        print(str(i) + ":")
        print(str(i) + ": " + ans)


    print(f"{i}:", *enumerate(n, i))


        print(str(i) + ":")
        print(str(i) + ": " + t)

    print(" ".join(res))

    print(f"{i}:", end="")
    print(t)

    print(str(bit) + ":" + "".join(L))


    print(*rs) 

    print("{}:".format(i), *a)


    print(f"{str(bit)}:{L}")


print("0:")

    print(str(b)+":",*ans)

    print(f"{i}: " + " ".join(map(str, ans[i])) if ans[i] else f"{i}:")

        print(f"{d}: ", end="")
        print(*list_e)
        print(f"{d}:")


        print(str(i)+':')
        print("{}: {}".format(i,' '.join(map(str,t))))
        print("{}:".format(i))
        print("{}: ".format(i), end="")
    print(*l)


print("0:")
    print(k,end="")
    print(": ",end="")
    print(*sorted_M[k])

print("0:")
    print(f"{i}:",end=" ")
    print(*tmp)

        print("0:")
        print("{}: ".format(i), end="")
    print(*l)

    print(f'{_i}:',end = '')
        print()
        print("0:")
        print(str(i) + ": " + tmp_str)


        print(str(i) + ": " + " ".join(li))
        print(str(i) + ":")


    print(i,end=":")
        print(" "+' '.join(map(str,disp)),end="")
    print()


    print(i,end="")
        print(":",end=" " )
        print(*temp2)
        print(":")


    print(f"{i}:", end="")
            print(f" {j}", end="")
    print()

    print(f"{i}:", end="")
            print(f" {j}", end="")
    print()


    print(f"{i}:",end = '')
            print(f" {j}",end = '')
    print()

    print(f"{i}:",end="")
            print(" ",j,sep="",end="")
    print()


    print(str(i) + ':', end='')
            print(' ' + str(idx), end='')
    print()

    print(i,end='')
    print(":",end='')
    print()

    print(i,":",sep="",end="")
            print(" ",count,sep="",end="")
    print()

    print(f'{i}:', end='')
        print(f' {s[i][j]}', end='')
    print()



print("0:")

    print("%d:"%(index),end="")
            print(" %d"%(loop),end="")
    print()
    print(str(i)+":",end="")

            print(" "+str(j),end="")
    print()


	print("{:d}:".format(i), end="")
			print(" {:d}".format(j), end="")
	print()

    print(s)

        print(f"{i}:", *ans)


        print(str(k)+':',*temp)

    print("0:")
        print(f'{i}:', *elems)


    print(i, end='')
    print(":", end='')
            print(" ", j, sep='', end='')
    print()


    print(*reversed(ans), sep="\n")



print(''.join(s), end='')


        
        print(ans)




print("\n".join(ans))

    print('{}: {}'.format(i, ' '.join(map(str, sub)))) if len(sub) != 0 else print(f'{i}:')

            print('0:')
            print(f'{x}: {" ".join(map(str, bits))}')

            print('0:')
            print(f'{x}: {" ".join(map(str, bits))}')


        print(f"{num}:{''.join(map(lambda digit: f' {digit}', digits))}")


        print(f"0:")
            print(f"{d}: ", end="")
            print(" ".join([str(elem) for elem in range(bit) if d & (1 << elem)]))


        print(i, end="")
        print(":", end="")
                print(" ", end="")
                print(j, end="")
        print()

    print(f'{x}:', *ans)

        print("{}:{}".format(i, "".join([" {}".format(v) for v in vs])))


print('\n'.join(ans))



    print(f'{d:d}:', *s)


        print(f"{i}:", *enumerate(n, i))


print(f"{b}:",end=endl)
print(*bits[1:])
    print(f"{x}:",end=" ")
    print(*part)

    print(*rs) 

        print("{}:".format(i), *a)


        print(f"{d}: ", end="")
        print(*list_e)
        print(f"{d}:")


        print(str(b)+":",*ans)

        print(val, end=": ")
        print(*ans)
        print(R, end=":\n")

        print(str(i)+":",*s)
        print("{}:".format(i))
        print("{}: ".format(i), end="")
    print(*l)


        print("0:")
        print("{}: ".format(i), end="")
    print(*l)
    

        print(str(i)+':')
        print("{}: {}".format(i,' '.join(map(str,t))))
        print(f'{_i}:',end = '')
            print()
            print("0:")
            print(str(i) + ": " + tmp_str)

            print(str(i) + ": " + tmp_str)


    print("0:")
        print(y,end="")
        print(": ",end="")
        print(*sorted_M[y])

        print(str(i)+':',*bit_list)

            print(str(i) + ": " + " ".join(li))
            print(str(i) + ":")


            print(str(i) + ':')
            print(str(i) + ': ' + ans)

        print(a)

        print(i,end=":")
            print(" "+' '.join(map(str,disp)),end="")
        print()


        print(i,end="")
            print(":",end=" " )
            print(*temp2)
            print(":")


        print(f"{i}:",end = '')
                print(f" {j}",end = '')
        print()

        print(f"{i}:", end="")
                print(f" {j}", end="")
        print()

        print(f"{i}:", end="")
                print(f" {j}", end="")
        print()


    
    print(f"{i}:",end="")
            print(" ",j,sep="",end="")
    print()


    print(i,end='')
    print(":",end='')
    print()

        print(i,":",sep="",end="")
            print(" ",a,sep="",end="")
        print()


		print("{}:".format(i), end="")
			print(" {}".format(x), end="")
		print()

    print(f"{sum_}:{s}")



print("0:")
        print(str(l[0] + x) + ": " + " ".join(map(str, t)))
    print(*reversed(ans), sep="\n")


            print(f"{d}: {ans}")
            print(f"0:")


    
    print(no,end = '')
    print(':',*temp)

    print(f'{v}: {combi}' if v else '0:')


    print(f'{v}: {combi}' if v else '0:')



        print("{}:{}".format(i, "".join([" {}".format(v) for v in vs])))


    print(str(sum) + ":", sep="", end='')
            print(" ", b[j], sep='', end='')
    print()


        print(f'{output_state}:' + output_str)

    print('{}: {}'.format(sub[0], ' '.join(map(str, sub[1])))) if len(sub[1]) != 0 else print(f'{sub[0]}:')

        print(f"{k}: ", end="")
        print(*v)
        print("0:")

        
        print(ans)


        print(f'{y[0]}:')
        print(f'{y[0]}: {y[1]}')


print('\n'.join(ans))



    print(f'{val}:', *ans)
    

    print(f"{s}:", *elements(n, s))

        print(f"{d}: ", end="")
        print(*tuple_e)
        print(f"{d}:")


print("0:")

        print(f"{2**pow_}:{''.join(map(lambda digit: f' {digit}', digits))}")
    print(result)
    print(v, end="")
    print(":", end="")
            print(" ", end="")
            print(t[j], end="")
    print()

print("".join(ans)[:-1])


    print(f"{item[0]}:",end=endl)
    print(*item[1])

    print(f'{m:d}:', *s)


print("0:")
    print(y,end="")
    print(": ",end="")
    print(*sorted_M[y])

    print("0:")

print("0:")
    print(str(sum) + ": " + c_str)


print("0:")
    print(str(i)+":",*j)


    print("{}:".format(res), *a)


    print(str(tmp)+":",*rs) 

    print(str(tmp)+":",*rs) 


print("0:")

    print("{}: ".format(num), end="")
    print( *p )



print("0:")

    print("{}: ".format(num), end="")
    print( *p )



        print(nm,end=': ')
        print(*ans)
        print(nm,end=':')
        print()

    
    print(str(number)+':',*add_list)


print('0:')    
    print(b, ': ', sep='', end='')
    print(*num_set)


        print("0:")
        print(str(sum(calc))+":",end="")
        print(" "+' '.join(map(str,disp)))


	print("{}:".format(k), end="")
		print(" {}".format(v), end="")
	print()

    print(i,":",sep="",end="")
            print(" ",a,sep="",end="")
    print()


    print(f"{i}:", end="")
            print(f" {j}", end="")
    print()


    print(sum,end='')
    print(":",end='')
    print()

    print(comb[0],end = '')
    print(':',*comb[1])

        print(f"{i}:", *ans)



print("\n".join(ans))

    print(b, ': ', sep='', end='')
    print(*num_set)



print('\n'.join(ans))

    print(f'{n}: {combi}')


    print(f'{n}: {combi}')

    print('{}: {}'.format(sub[0], ' '.join(map(str, sub[1])))) if len(sub[1]) != 0 else print(f'{sub[0]}:')

    print(f'{n}: {combi}')


    print(*reversed(ans), sep="\n")


    print(f"{v}:",end=" ")
    print(*l)   

    print(str(ans[0]) + ":", *ans[1:])

    print("{}: ".format(i), end="")
    print( *l)


    print(f"{k}: ", end="")
    print(*v)

            
            print(ans)


    print(f"{t}:", *elements(n, t))
    print("{}: ".format(i), end="")
    print(*j)

        print(f"{d}: ", end="")
        print(*tuple_e)
        print(f"{d}:")


    print(f"{num_comb}:{''.join(map(lambda digit: f' {digit}', digits))}")


        print(f"{d}: ", end="")
        print(" ".join(str(j) for j in range(n) if d & (1 << j)))


    print(str(i)+":",*j)

    print("{}:".format(i), *a)


        print(f'{ans[0]}:')
        print(f'{ans[0]}: {ans[1]}')


    print(str(sum) + ": " + c_str)

    print(y,end="")
    print(": ",end="")
    print(*sorted_M[y])

    print(i[1])


    print(i, end='')
    print(":", end='')
            print(" ", j, sep='', end='')
    print()


        print("{}: {}".format(bit(ns), " ".join([str(i) for i in ns])))


        print(i, end="")
        print(":", end="")
                print(" ", end="")
                print(j, end="")
        print()

    print(i,":",sep="",end="")
            print(" ",a,sep="",end="")
    print()
        print(f'{i}:', *a)

    print(f'{d:d}:', *s)


            print(f'{state}:', end='')
                    print(f' {j}', end='')
            print()

        print("{}:".format(i),end =" ")
        print(*st)



        print(str(i)+':',*num_list)
        

        print(f"{bit}:", end="")
            print(f" {l_i}", end="")
        print()


    print(i,end='')
    print(":",end='')
    print()

		print("{}:".format(i), end="")
			print(" {}".format(x), end="")
		print()

        print(f"{str(bit)}:{L}")

        
        print(f'{_i}:',end = '')
            print()
         
        print(f'{_i}:',end = '')
            print()
        print(str(i) + ": " + " ".join(li))


    print("0:")
        print(str(c)+": "+' '.join(map(str,All[x])))
    print(''.join(ans), end='')

    print(''.join(ans), end='')

        print(que[int(s[2:-1])])
        print(que[int(s[2:-1])])
        print(A[int(a[1])])
        print(vector[int(tmp[1])])
        print(ans[i[1]])
        print(l[int(n[1])])
    print(A[x])

        print(self.array[p])

        print(A[int(que[i][1])])
    print(a[query[1]])
            print(A[next(args)])
        print(l[inp[1]])
        print(l[inputs[1]])
        print(vector[query[1]])
        print(f[a[1]])
        print(x[int(line[1])])
        print(myarray[myquery[1]])
            print(lst[x])


        print(A[B[1]])
        print(A[a[1]])
        
        print(b[cmd[i][1]])
        print(vector[p])
    print(max(max_a - a[i],a[i] - min_a))
        print(stack[a[1]])
        print(a[com[1]])
        print(A[query[1]])
        print(a[order_list[1]])
            print(a[q[1]])
        print(A[queri[1]])
        print("invalid input") 

        print(que[int(query[1])])
    print(i.strip())

            print(queue[int(q[0])])
			print(v[parts[1]])


        print(A[int(query[1])])
    print(list_input[p])


        print("%d"%(A[ind]))
        print(vector[int(arg[0])])
        print(A[int(s[1])])
        print(l[int(temp[1])])
        print(l[lx[1]])
    print(a[int(line[1])])
            print(arr[x])


            print(arr[x])


        print(a[s[1]])
        print(a[s[1]])

print(*ans,sep='\n')

        print(A[query[1]])
        print(deq[int(q[1])])
        print(A[p])
    print(''.join(ans), end='')

    print(''.join(ans), end='')

    print("".join(ans), end="")
print(''.join(ans), end='')

        print(queue[int(cmd[1])])
        print(A[int(a[1])])
        print(self.array[p])

        print(d[int(x[1])])
  print(ans)
        print(int(a[int(l[1])]))
        print(A[p])
        print(de[int(l[1])])
        print(a[com[1]+left])
    print(a[query[1]])
        print(a[com[1]+left])
		print(my_deque[parts[1]])
        print(l[inputs[1]])
        print(l[lx[1]])
        print(a[l + 1 + t[1]])
        print(A[query[1]])
        print(a[com[1]+left])
        print(A[query[1]])
        print(A[int(query[1])])
        print(f[a[1]])
        print(que[int(s[2:-1])])
        print(A[s[1]])
        print(A[myquery[1]])
        print(lst[p])
        print(que[p])
        print(d[query[1]])
        print(A[int(query[1])])
        print(que[int(query[1])])
        print(deq[int(arg[0])])
        print(A[int(query[2:])].strip())
        print(A[int(s[1])])
                print(array[query[1]])

        print(dq.get(*que))
        print(A[int(s[1])])
		print(q[int(cmd[1])],sep='\n')
        print(dq[int(temp[1])])
        print(A[p])
        print(D[i[1]])
            print(dq[query[1]])
            print(dq[q2])
print(*res, sep="\n")


            print(L[q[1]])
        
        print(dq[q[1]])

print(*ans,sep='\n')

print(*ans, sep='\n')

    print(''.join(L), end='')

    print(''.join(L), end='')

    print(''.join(L), end='')

    print("".join(L),end= "")
    print(''.join(L), end='')


print("".join(list(d)[:-1]), end="")

print(''.join(list(dq)),end='')

    print(v)



print(*left, *right, sep='\n')

    print(i)
    print(i)

print(*L,sep='\n')

    print(x)
    print(x)


    print(di)


    print(x)
    print(x)

    print(i)
    print(i)
        

    print(x)
    print(x)
    print(ele)

    print(ele)

    print(a)

    print(*deq, sep="\n")

            print(ele)
        
print(*ans, sep="\n")


            print(q.value)
    print(i)
    print(i)


print('\n'.join(ll.to_list()))


    print(lst[cur].val)

print('\n'.join(ll.to_list()))



    print(cursor.value)
print(*ans, sep="\n")


    print(*L, sep='\n')

    
        print(val)
        print(val)




print(*L,sep='\n')


        print("invalid input") 
    print(p.value)
print(*A, sep="\n")



    print(a[c][0])
print("\n".join(list(map(str,front))))


print(*l.list(), sep="\n")


    print(i)

    print(v)

    print(val)
    
    print(v)

    print(i)
    print(i)


print(*L, sep='\n')

    print(i)

        print(out, end='')

            print(node.value)
        print(out, end='')

print("\n".join(map(str, list(l_deque))))


        print(a)

            print(out)
            print("")
        print(*A[t])
        print(" ".join(map(str,a[v[1]])))
        print(str.join(" ", [str(i) for i in lists[query[1]]]))
        print(" ".join(map(str, LST[t])))
        print(" ".join(map(str,A[que[1]])))
        print(' '.join(map(str, a[t])))
        print(*a[query[1]])
        print(*a[g[1]])
            print("")
            print(*d[x[1]])
        print(' '.join(list(A[int(query[1])])))
        print(*A[t],sep=' ')
    print('\n'.join(ans))

        print(*lists[t])
        print(*l[t])
        print(' '.join(dyna_list[list_id]))
    print('\n'.join(ans))

        print(" ".join(arrays[arg[0]]))
        print('')
            print(f'{j}')
            print(f'{j}',end=' ')
print("".join(ans), end="")

        print(' '.join(a[t]))
            print(v, end="")
                print(" ", end="")
        print()
            print('')
                print(c, end=' ')
                print(c)
       print(*A[index])
        print(' '.join(q_list[l[1]]))
		print(*list2[int(cmd[1])])
            print(*A[t])
        print(*A[query[1]])
            print(' '.join(map(str,A[q[1]])))
            print()
        print(" ".join(map(str, a[query[1]])))
    print("\n".join(" ".join(map(str, v)) for v in matrix))


    print(' '.join(A[t]))
            print(' '.join(map(str, lists[index])))

            print(*L[q[1]])
        
        print(*a[t[0]])
        print(*A[query[1]])
        print(*A[com[1]])

    print(*A[t])
    
        print(*A[p])
print(ans, end='')

        print(*Q[t])
        print(*A[t])
            print(*Q[t])
            print()
        print(*A[int(op[1])])
        print(*L[int(query[1])])
        print(*a[int(t)])
        print(*A[int(t)])
                print(' ' + i if frag else i, end = '')
            print()
        print(A[t][-1])
            print(now)
        print(lists[query[1]][-1])
            print(LST[t][-1])

print('\n'.join(ans))


            print(stack[t[1]][-1])
         print(A[args[i][1]][length-1])
        print(A[l[1]][-1])
        
            print(a[g[1]][-1])
            print(a[t][-1])
            print(d[x[1]][-1])
    
    print('\n'.join(ans))

            print(S[t][target[t]])
        print(x)
        print(S[t][-1])
            print(stacks[t][-1])
            print(A[idx][-1])

print("\n".join(ans), end="\n")

            print(d[x[1]][-1])
            print(arrays[arg[0]][-1])
            print(stacks[stack_id][-1])
            print(stack[t][-1])
			print(list2[t][-1])
            print(A[index][-1])
            print(d[t][-1])
                print(L[q[1]][-1])
        
    print(i)

            print(S[q[1]][-1])
                print(stacks[index][-1])

            print(s[query[1]][-1])
        print(stacks[t][-1])
            print(S[t][-1])
    
    print(S[t][-1])
    
    
      print(stack[t][-1])
print(ans, end='')

            print(S[query[1]][-1])
      print(l[query[i][1]][-1])
            print(Q[int(a[1])][-1])
        print(S[t][-1])
        
        print(S[t][-1])
            print(d[int(t[1])][-1])
            print(T[t][-1])

        print(A[tmp[1]][-1])
                print(S[int(query[1])][-1])
        print(A[tmp[1]][-1])
                print(stack[query[1]][-1])
            print(stacks[int(t)][-1])
            print(S[t][-1])
            print(S[t][len(S[t])-1])
                print(que[t][-1])
    print(s[i][-1])
        print(item)


        print(A[t][0])
    print('\n'.join(ans))

            print(now)
         print(A[args[i][1]][0])
        print(A[l[1]][0])
        
        print(lists[query[1]][0])
            print(a[g[1]][0])
            print(d[x[1]][0])
            print(A[idx][0])
            print(LST[t][0])
        print(ql[t][0])
            print(d[x[1]][0])
            print(queues[t][0])
            print(Q[t][target[t]])
            print(S[ind][0])
print("\n".join(ans), end="\n")

            print(queues[arg[0]][0])
    print(i)


            print(A[index][0])
            print(d[t][0])
        print(queues[q[1]][0])
                print(L[q[1]][0])
            
            print(Queue[q[1]][0])
            print(s[query[1]][-1])
            print(S[t][0])
      print(dq[t][0])
    
    print(Q[t][0])

                print(queues[index].front())


print(ans, end='')

			print(self.head.data)

      print(l[query[i][1]][0])
            print(Q[query[1]][0])
        print(Q[t][0])
        
        print(S[t][0])
        print(Q[a[1]][0])
        print(A[tmp[1]][0])
                print(S[int(query[1])][0])
                print(que[query[1]][0])
        print(s[int(t)][0])
            print(Q[t][0])

            print(queues[int(t)][0])
                print(que[line[1]][0])
            print(S[t][0])
        print(d[y[0]][0])
            print(d[com[1]][-1])
            print(queue[t][0])
    
            print(d[c[1]][0])
            print(box[b][0])
            print(Q[t][0])

            print(que[t][0])
            print(Que[query[1]][0])
            print(-queues[lo[1]][0])
        print(-A[t][0])

         print((-1) * A[args[i][1]][0])
            print(-now)
        print(-Q[t][0])
                print(-colas[t][0])
            print(str(-Q[x[1]][0]))
                print(-x)
        print(x)
          print(-a)
    print('\n'.join(map(str, ans)))

    print('\n'.join(map(str, ans)))

    print(i)


    


print("\n".join(ans))

            print(-A[index][0])
            print(-1*A[index][0])
            print(-queues[arg[0]][0])
            print(-d[t][0])
                print(-tmp)
            print(-H[q[1]][0])
			print(pqueues[t][0]*-1)

            print(-q_list[l[1]][0])
            print(-S[t][0])
    print(Q[t][0]*(-1))
        
      print(-hq[t][0])
            print(Q[t][0])
print(ans, end='')

            print(-Q[query[1]][0])
                print(-queue_list[query[1]][0])
        print(-S[t][0])
        print(-S[t][0])
            print(max_value * -1)

        print(-box[b][0])
            print(pq[int(t)][0]*-1)
        print(-Q[y[0]][0])
	    print(-Q[query[1]][0])
        print(-L[a][0])
        print(-h[com[1]][0])
            print(-A[t][0])
            print(-A[t][0])
        print(-queues[s[1]][0])
            print(-pq[t][0])

            print(-stack[query[1]][0])
                print(-m)
        print(-A[tmp[1]][0])
        print(" ".join(map(str,S[t])))
        print(" ".join(map(str, res[int(query[1])])))

        print(*d[t])
        
        print(*a[g[1]])
        
print("\n".join(ans))

    print('\n'.join(ans))

        print(*res[::-1])
print('\n'.join(ans))


                print('')
                print(num, end='')
                    print(' ', end='')
        print('')            
            print("")

        print(NODES[head].value, end="")

            print(f" {NODES[cur].value}", end="")

        print("")

        print(" ".join(L[int(query[1])]))
        print(*Q[s])
        print(*L[t])
        print(*L[t])
        print(*L[t])
        print(*L[t])
            print(' '.join(map(str,L[q[1]])))
            print()
            print(' '.join(map(str,L[q[1]])))
            print()
      print(' '.join(map(str, li[t])))
					print(" ".join(map(str, olist[t][1::])), "", end='')
				print(" ".join(map(str, olist[t][1::])))
            print(*L[q[1]])
        
            print(*A[q[1]])
    print(*L[t])
    

print(ans, end='')

		print(" ".join(l[idx]))
        print(*L[query[1]])
        print(*ans)
        
        
            print()
        print(s)
    
        print(*lists[list_num])
            print(*li[para[0]])

        print(*lists[s[1]])

        print(*L[t])
        print(*L[t])
        print(*L[qi[1]])
        print(*l_lists[t_in])
        print(*A[op[1]])
    print(*l[query[1]])
        print(' '.join(map(str, self.lists[t])))

        print(*L[query[1]])
        print(*ls[query[1]])
        print(*L[t])
    
        print(*L[query[1]])
        print(*L[query[1]])
        print(*L[query[1]])
    print(*Llist[t])


print(mi,ma)

        
print(a,end = ' ')
print(c)
    

print(min(nums),max(nums))


print(min(a), max(a))

print(min(a,b,c), end = " ")
print(max(a,b,c))

print(a[0],a[2])

print(min(l), max(l))


print(min(a),max(a))


print(min(a, b, c), max(a, b, c))

print(min(a,b,c),max(a,b,c))


print(f'{miny} {maxy}')

 print("%d %d" %(b, c))
 print("%d %d" %(c,a))
 print("%d %d" %(b,a))

print(f"{min} {max}")


print(min_value, max_value)


print(f"{min(lx)} {max(lx)}")

print(min(a), max(a))


print(n,m)

print("%d %d" % (min(sp), max(sp)))


print(min(a, b, c), max(a, b, c))

print(f"{left} {right}")



print(f"{min_} {max_}")


print(min, max)


    print(x, y)


print("{0} {1}".format(min(A), max(A)))


print(min(a), max(a))

print('{} {}'.format(min([a,b,c]), max([a,b,c])))


    print(" ".join(map(str, [a, c])))

print(min(a, b, c), max(a, b, c))

print('{} {}'.format(min(a), max(a)))

print(min(num), max(num))

print(min(a), max(a))

print(A[0], A[-1])

print(min(num), max(num))

print(min(nums), max(nums))

print(min(a),max(a))


print(min(abc), max(abc))


print(str(min(num))+" "+str(max(num)))


print("%d %d"%(min(a),max(a)))

print(min(ary), max(ary))


print(min(a),max(a))

print(min(a,b,c),max(a,b,c))


print(min(list_num), max(list_num))


print(min(a),max(a))


	print(min(a,b,c),max(a,b,c))



print(min(a),max(a))

print(min(a), max(a))

print(res[0], res[-1])


    print(min(line), max(line))
    

print(min(a), max(a))

 
print(min(abc), max(abc))

 
print(min(abc), max(abc))

print(min(a), max(a))



print(min(a),max(a))

print(mn,mx)


        print(c, b)
        print(a, c)
        print(a, b)
        print(c, a)
        print(b, c)
        print(b, a)

    print(f"{min_num} {max_num}")


print("{} {}".format(min(l),max(l)))

print(min(a),max(a))

print('%d %d' % (min(a), max(a)))

print(min(a),max(a))

print(min(temp), max(temp))

print(a[0],a[-1])

        print(min(a[b:c]))
        print(max(a[b:c]))

        print(min(nums[b:e]))
        print(max(nums[b:e]))


        print(min(a[b:e]))
        print(max(a[b:e]))

        print(min(al[b:e]))
        print(max(al[b:e]))


        print(min(A[b:e]))
        print(max(A[b:e]))

        print(min(A[b:c]))
        print(max(A[b:c]))

        print(min(l_sub))
        print(max(l_sub))

        print("%d" %(min(array[b:c])))
        print("%d" %(max(array[b:c])))
        

        print(min(array[query[1]:query[2]]))
        print(max(array[query[1]:query[2]]))

	    print(min(a[b:e]))
	    print(max(a[b:e]))


    print(result)

        print(min(a[b:e]))
        print(max(a[b:e]))


            print(minimum(N, b, e - 1, 0))
            print(maximam(N, b, e - 1, 0))


        print(min(A[b:e]))
        print(max(A[b:e]))

        print(ans)
        print(ans)

            print(min(li[b:e]))
            print(max(li[b:e]))
        print(min(A[b:e]))
        print(max(A[b:e]))


        print(min(a[b:e]))
        print(max(a[b:e]))


    print(min(a[b:e]))
    print(max(a[b:e]))

        print(max(a[b:e]))
        print(min(a[b:e]))

        print(min(A[query[1]:query[2]]))
        print(max(A[query[1]:query[2]]))

            print(min(a[b:e]))
            print(max(a[b:e]))


        print(min(arr[int(b):int(c)]))
        print(max(arr[int(b):int(c)]))
        print(min(A[query[1]:query[2]]))
        print(max(A[query[1]:query[2]]))


            print(min(l[i[1]:i[2]]))
            print(max(l[i[1]:i[2]]))


    
        print(max(nums[f:l]))
        print(min(nums[f:l]))



        print(max(a[l[1]:l[2]]))
        print(min(a[l[1]:l[2]]))
        

    print(f[c](a[b:e]))

        print(min(box[b:c]))
        print(max(box[b:c]))

        print(min(A[b:e]))
        print(max(A[b:e]))
			print(min(A[b:e]))
			print(max(A[b:e]))



        print(min(A[int(b):int(e)]))
        print(max(A[int(b):int(e)]))


        print(max(A[b:e]))
        print(min(A[b:e]))

        print(mn)
        print(mx)


    print('\n'.join(ans))

            print(min_num)
            print(max_num)


        print(min( L[b:e] ))
        print(max( L[b:e] ))

        print(min(a[b:e]))
        print(max(a[b:e]))

        print(min(a[query[1]:query[2]]))
        print(max(a[query[1]:query[2]]))

            print(a[e-1])
            print(min(a[b:e]))
            print(a[e-1])
            print(max(a[b:e]))

            print(min(seq[int(param[1]):int(param[2])]))
            print(max(seq[int(param[1]):int(param[2])]))

	print(min(a[s:t]) if x==0 else max(a[s:t]))

        print(min(A[q[1]:q[2]]))
        print(max(A[q[1]:q[2]]))

        print(min(listnum[eachq[1]:eachq[2]]))
        print(max(listnum[eachq[1]:eachq[2]]))


        print(min(A[query[1]:query[2]]))
        print(max(A[query[1]:query[2]]))

        print(min(A[b:e]))

        print(max(A[b:e]))

        print(min(li))
        print(max(li))

        print(min(l[b:c]))
        print(max(l[b:c]))

        print(min(X[t:s]))
        print(max(X[t:s]))


        print(min(a[b:e]))
        print(max(a[b:e]))

    print(min(A[b:c]))
    print(max(A[b:c]))



        print(min(l[start:end]))
        print(max(l[start:end]))


    print(min(B))

    print(max(B))

        print(min(A[com[1]:com[2]]))
        print(max(A[com[1]:com[2]]))

            print(min(A[q[1]:q[2]]))
            print(max(A[q[1]:q[2]]))


        print(min(num[start:end]))
        print(max(num[start:end]))

    print((nums[b:e]).count(k))


    print(ans)

    print(la[lo[0]:lo[1]].count(lo[2]))

    print(c)


    print(a[b:e].count(k))

    print(al[b:e].count(k))


    print("%d" %(array[a:b].count(c)))
        

    print(array[query[0]:query[1]].count(query[2]))

	print(a[b:e].count(k))


    print(a[b:e].count(k))


    print(result)

    print(num)

    print(nums[op[0]:op[1]].count(op[2]))

        print(li[b:e].count(k))


	print(a[b:e].count(k))

    print(A[int(b):int(e)].count(k))

    print(arr[b:e].count(k))

      print(right_wall - left_wall)
      print(0)

    print(a[b:e].count(k))

    print(nums[f:l].count(v))



    print(a[b:e].count(k))


    print(a[b:e].count(k))

	print(a[b:e].count(k))


    
    print('\n'.join(ans))

    print( L[b:e].count(k))

    print(a[b:e].count(k))

    print(a[q[0]:q[1]].count(q[2]))   

    print(cnt)
        print(seq[b:e].count(k))
    print(A[b:e].count(k))

    print(A[query[0]:query[1]].count(query[2]))

    print(l[b:e].count(k))

    print(arr[l:r].count(k))

    print(ans)

        print(A[q[0]:q[1]].count(q[2]))


    print(A[int(b):int(e)].count(k))


    print(b[int(d1):int(d2)].count(int(d3)))

  print(result)


    print(a[b:e].count(k))

    print(a[b:e].count(k))

    print(a[b:e].count(k))


    print(l[s:e].count(k))

  print(l[b:e].count(k))


  print(a[b:e].count(k))
  

    print(a[b:e].count(k))

  print(a[b:e].count(k))

    print(a_list[b:e].count(k))


    print(A[b:e].count(k))

        print(A[b:e].count(k))

 
    print(str(A[b:e].count(k)))


    
    print(A[b:e].count(k))

    print(a[com[0]: com[1]].count(com[2]))

  print(A[b:e].count(k))


    print(B.count(q[2]))


print(ans, end='')

    print(A[b:e].count(k))

    print(a[b[i]:e[i]].count(k[i]))

    print(lst[line[0]: line[1]].count(line[2]))

    print(a[l[0]:l[1]].count(l[2]))

    print(a[b:e].count(k))


    print(a[b:e].count(k))


    print(L[b:e].count(k))


  print(a[b:e].count(k))

print(1) if b>a else print(0)

        print(1)
        print(0)
    print(winner)
    

        print(1)
        print(0)
    print(1)
    print(0)

	print('1')
	print('0')

print(res)

print(int(al < bl))


print(result)


print("%d" %f)
    


        print(1)
        print(0)
    print(1)
    print(0)

        print(1)
        print(0)
        print(0)
        print(1)


    print(1 if b > a else 0)
    print(1 if nb > na else 0)


print(f)


print(0 if a >= b else 1)


    print("1")
    print("0")


    print(1)
    print(0)


print(rst)

    print("1")
    print("0")


print(f)

        print(0)
        print(1)
        print(0)
        print(1)

  print(1)
  print(0)

print(int(a<b))

print(1 if A < B else 0)

print(+(A < B))


        print(0)
        print(1)
    print(1)
    print(0)


        print([0, 1][c1 < c2])
    print([0, 1][n1 < n2])


print(ans)


    print(1)
    print(0)


    
print(f)

print(1 if a<b else 0)




print(1 if a<b else 0)


        print(0)
        print(1)
    print(0)
    print(1)

    print(1)
    print(0)



	print(win)


print(ans)


 
print(ans)

        print(1)
        print(0)
        print(0)
            print(0)
            print(1)
        print(1)
        print(0)


        print(1)
        print(0)

        print(1)
        print(0)
    print(0)
    print(1)


print(+(a < b))

        print(1)
    print(0)


    print(is_big)
print(1 if a < b else 0)


print(1 if A<B else 0)

    print(1)
    print(0)

    print(0)
    print(1)

    print(1)
    print(0)

    print(1)
    print(0)

print(+(a<input()))

    print(1)
    print(0)


  print(0)
  print(1)


        print(0)
        print(1)
        print(0)
        print(1)
    print(0)
            print(1)
            print(0)
    print(1)
    print(0)

    print(1)
    print(0)

    print(1)
    print(0)



print(0) if a >= b else print(1)

        print(1)
        print(0)
    print(ans)

    print(0)
    print(1)

print(1 if l_1 < l_2 else 0)

print(" ".join(map(str,a)))

    print(ai, end='')
        print(' ', end='')
print('')

print(*a)

print(*w)

print(*al)


print(" ".join(A))



print(*A,sep=' ')

print(*a)


print(*la)

print(*a)


print(*a)



print(" ".join(map(str, A)))



print(' '.join(list(map(str, a))))


    print(" ".join(li))



    print(' '.join(map(str, A)))


print(*a)

print(" ".join(map(str, a)))

print(*A)


print(*a, sep=' ')

print(*A)


print(' '.join(str(n) for n in num))



print(*arr)

print(*a)


print(' '.join(map(str,A)))


print(*a)

print(' '.join(map(str, nums)))

print(*box)

print(*A)



	print(*A)


print(*a)

print(*A)


print(*a)



    print(" ".join([str(elem) for elem in a]))


    print(l[i],end="")
        print(" ",end="")


print()


print(*a)

    
print(*a)

    print(*seq)
print(*A)


print(" ".join(map(str, listnum)))



print(*A)

print(' '.join(map(str,l)))

print(*a)

print(*a)

print(*a)


print(*a)


print(*A)


print(" ".join(A))

print(" ".join(map(str, A)))

print(*s)

print(*a)

print(*b)

print(*A)


print(*a)


    
print(*a)

print(*a)

print(*a)

print(*a)


print(*a)


print(*l)

print(" ".join(map(lambda x:str(x), A)))


print(*a)

print(*nums)

    print(' '.join(map(str, A)))


    print(ai, end='')
        print(' ', end='')
print('')


print(*A)

print(*a)


print(*a)

print(*a)



    print(' '.join(map(str, A)))


print(" ".join(map(str, a)))


print(*arr)

print(*a)


print(' '.join(map(str, nums)))



print(' '.join(map(str,l)))

    
print(*a)

print(*a)


    print(' '.join(map(str, A)))


print(*a)

print(*A)

    
    print(*A)

 
print(*a)



print(*a)

print(*a)

        
print(*A)


print((" ").join([str(num) for num in A]))

	
print(" ".join(map(str, a)))


print(*la)


    print(" ".join(li))


print(*a)

 
print(*a)

print(*a)



print(*a)

print(" ".join(list(map(str,a))))


print(*A)

print(*a)

print(' '.join(l))


print(*a)



print(*a)

print(*a)
    

print(" ".join(map(lambda x:str(x), A)))

print(*a)

    
    print(result)

        
        

print(*A)

print(*a)



print(*A)



print(*A)


print(*A)


print(*sequence)


	
print(" ".join(map(str, a)))

       
print(*arr)

print(*a)

print(*a)



    print(NODES[cur].value, end="")

        print(f" {NODES[cur].value}", end="")


    print()


    print(' '.join(A))

print(*a)

print(" ".join(map(str,a)))


print(" ".join(A))


print(*A,sep=' ')

    print(*prt)


print(*A)

print(*a)

print(*a)

    print(ai, end='')
        print(' ', end='')
print('')

    print(' '.join(map(str, A)))

     
print(*A,sep=' ')

print(str.join(" ", [str(i) for i in array]))

print(*a)


print(*la)



print(*sequence)


print(*a)

print(*L)


print(" ".join(map(str,a)))

print(' '.join(map(str,l3)))

print(*a)

print(*a)

    print(' '.join(map(str, A)))


    
    print(*A)

 
	
print(" ".join(map(str, a)))

print(*a)


print(*arr)


print(*a)


print(" ".join(map(str,a)))


print(' '.join(map(str,a)))

print(*al)


print(" ".join(A))


print(*a)


print(*a)


print(*a)


print(*arr)

print(*a)


print(' '.join(map(str, nums)))




	print(" ".join(list2))


print(*a)


    print(' '.join(A))

print(*l)

print(*A)


print(*sequence)


print(*A)

print(*A)

print(*A)

print((" ").join([str(num) for num in A]))

    print(NODES[cur].value, end="")

        print(f" {NODES[cur].value}", end="")


    print()



    print(' '.join(map(str, A)))



    print(" ".join(li))


    print(' '.join([str(x) for x in ary]))


print(' '.join(map(str,A)))


    print(*seq)

    print(*prt)


print(*memo)

print(' '.join(list(map(str, a))))

print(" ".join(map(str, a)))

print(*A)


print(' '.join(str(n) for n in num))

print(*A)


             
print(*a)

print(*A, sep=' ')


print(" ".join(list(dict.fromkeys(input().split()))))

print(" ".join(list(dict.fromkeys(input().split()))))


print(" ".join(list(dict.fromkeys(input().split()))))

print(" ".join(list(dict.fromkeys(input().split()))))

print(' '.join(map(str,a)))


print(' '.join(map(str,a)))


print(' '.join(map(str,a)))

print(*sorted(list(set(A))))

print(*b)

print(*sorted(list(set(a))))

print(*sorted({*map(int,input().split())}))

print(*sorted(s))


print(str.join(" ", [str(i) for i in array]))


print(*a)


print(*la)

print(*c)



print(*unique_sequence)

print(' '.join(l))

        print(a_list[i],end='')
        print('',a_list[i],end='')
print('')


print(uniq[0], end='')
    print(' ' + str(uniq[i]), end='')
print()


    print(' '.join(ans))


print(*a.keys())


print(A[0], end="")
    print(" " + str(A[i]), end="")
print()

    print(' '.join(ans))

    print(" ".join(map(str, A)))



print(" ".join(OrderedDict.fromkeys(a)))

print(*get_different(a))


print(*list(dict.fromkeys(l)))

print(*list(dict.fromkeys(l)))

print(*A)

print(*list(dict.fromkeys(a)))

print(' '.join(map(str,a)))


print(" ".join([str(x) for x in output]))



print(*list(dict.fromkeys(a)))


print(' '.join(map(str, A)))


print(' '.join(str(a) for a in ans))



print(' '.join(map(str,A)))


print(' '.join(map(str,s)))


print(*B)

print(*ans)

print(' '.join(map(str, sorted(A))))

print(*A)

print(' '.join(list(map(str, a))))


    print(" ".join([str(x) for x in unique(li)]))


print(" ".join(map(str, li)))

print(*sorted(set(list(map(int,input().split())))))


print(" ".join(map(str, A)))

print(*sorted(list(set(a))))


print(*sorted(list(set(L))))

print(" ".join(map(lambda x:str(x), A)))

print(*h)

print(*sorted(set(a)))

print(*ans)

print(*sorted(set(A)))

print((" ").join([str(num) for num in A]))

print(*sorted(list(set(a))))

print(*sorted(list(set(a))))

print(*box)

print(*sorted(list(S)))

    print(*s)

print(*sorted(list(set(a))))

print(*sorted(list(set(a))))

print(*L)

print(*ANS)



print(*sorted(A))


    print(*pos)

    print(*i)


    print(x, y)


    print(x, y)


    print(xy[0], xy[1])
    print(z[0],z[1])

    print(z[0],z[1])


    print(*p)


    print(v[0], v[1])

    print(x,y)

  print(*p)

    print(b[d][0], end = " ")
    print(b[d][1])

    print(p)

print('\n'.join(map(lambda x: f'{x[0]} {x[1]}', pts)))

    print("\n".join(" ".join(map(str, v)) for v in matrix))


    print('\n'.join(ans))
    
    
    print(*i)


    print(f'{l[i][0]} {l[i][1]}')

		print(*B[i])


    print(i[0],i[1])
        print(x, y)

 
    print(*t)

        print(*ps[i])


    print(" ".join(map(str, i)))

print(*[f'{point[0]} {point[1]}' for point in points], sep='\n')

    print(*i)


    print(*i)

    print(*a)

    print(x, y)

    print(*i)

    print(*i)

    print(*data)

    print(*p)


    print(*i)

    print(*i)

    print(i[0], i[1])

    print(*i)

    print(*xy)


    print(v, k)

    print(*i)

        print(*xy)


    print(*x)

  print(*p)


    print(*i)

    print(*i)

    print(x, y)

    print(c[0],c[1])

    print(*l[i])

    print(*points[i])

    print(*item)

    print(*i)


    print(*item)


    print(*xy)


  print(*i)

    print(ans[0],ans[1],ans[2],ans[3],ans[4])


    print(z[0],z[1],z[2],z[3],z[4])


    print(v[0], v[1], v[2], v[3], v[4])

    print(*e)


    print(v,w,t,d,s)

    print(v, w, t, d, s)


    print(str.join(" ", [str(x) for x in t]))

    
    print('\n'.join(items))

    print("\n".join(" ".join(map(str, v)) for v in matrix))


    print(*t)


print('\n'.join(map(lambda x: " ".join(map(str, x)), goods)))

    print(*i)


		print(*B[i])


    print(*t)

        print(*l)

 
    print(i[0],i[1],i[2],i[3],i[4])
    print(" ".join(map(str, i)))

        print(*ps[i])


    print(*i)

        print("{} {} {} {} {}".format(*e))


    print(*i)

print(*[" ".join(map(str, item)) for item in goods], sep='\n')

    print(*i)

    print(*a)

    print(*i)

    print(*i)

    print(*list(elem.values()))

    print(*i)


    print(*t)
    

    print(*x)

    print(*i)

    print(*arr[i])

    print(*a)

    print(*tmp[i])
    

    print(*x)

	print(*i)

    print(*a)


    print(*i)



    print(*i)


  print(*vwtds)

        print(' '.join(list(map(str,L_1))))
    
        
print(' '.join(list(map(str,L))))


        print(' '.join(list(map(str,L_2))))
  print(*beforeA)
print(*A)
  print(*afterA)

    print(*kth_perm(n, i - 1))
print(*al)
    print(*kth_perm(n, i + 1))


        print(v, end="")
            print(" ", end="")
    print()
    print(v, end="")
        print(" ", end="")
print()
        print(v, end="")
            print(" ", end="")
    print()

    print(*p)
print(*a)
    print(*n)


        print(*a[:i], end=" ")

    print(tail[fst_index], end=" ")

    print(*tail)


        print(*a[:i], end=" ")

    print(tail[fst_index], end=" ")

    print(*tail)


    print(*a)
        print(" ".join([str(x) for x in ps]))


    print(*p)
print(*a)
    print(*n)


print(*a)
    print(" ".join(map(str, arr)))


    print(" ".join(map(str, arr)))


    print(" ".join(map(str, A)))
  print(*beforeA)
print(*A)
  print(*afterA)

    print(*before)
print(*a)
    print(*after)

    print(*a)
print(*a)
    print(*a)


      print(prev_List[i],end=" ")
      print(prev_List[i],end="\n")

    print(List[i],end=" ")
    print(List[i],end="\n")

      print(next_List[i],end=" ")
      print(next_List[i],end="\n")


    print(*pre_sequence)
print(*sequence)
    print(*follow_sequence)



print(*a)

        print(*item)


print(*a)
        print(*list_num)
            print(*list_num_previous)

        print(*list_num)
	print(*s)
	print(*[1,2])
	print(*[2,1])
		print(*s)
		print(*l[a+1])
		print(*l[a-1])
		print(*l[a])
		print(*l[a-1])
		print(*l[a])
		print(*l[a+1])

        print(*(permutation[a_idx-1]))
    print(*a)
        print(*(permutation[a_idx+1]))

        print(' '.join(map(str,p[loc+j])))


        print(' '.join(map(str,p[loc+j])))

    print(*permutation_lists[i-1])
print(*permutation_lists[i])
    print(*permutation_lists[i+1])


            print(*per[j])
        print(' '.join(map(str,p[loc+j])))

           print(*prev)
        print(*s)
            print(*s)
    print(*a)


    print(*a)


    print(*p[i])

    print(*c[idx - 1])


print(*c[idx])

    print(*c[idx + 1])


    print(*d[ok - 1])
print(*s)
    print(*d[ng])

    print(*PS[i-1])
print(*A)
    print(*PS[i+1])


    print(*perm[i-1])
print(*perm[i])
    print(*perm[i+1])

        print(*v)
            print(*p)
        print(*a)
            print(' '.join(map(str,prev)))
        print(' '.join(map(str,a)))
        print(' '.join(map(str,l)))
    print(*a)


    print(*PS[i-1])
print(*A)
    print(*PS[i+1])

    print(*B[idx-1])
print(*A)
    print(*B[idx+1])

    print(*i)

            print(*p)
                print(*prev)
            print(*p)
        print(*perms[i - 1])
    print(*perms[i])
        print(*perms[i + 1])

    print(1)
            print(*pre)
        print(*a)
        print(*j)
print(*pre)
print(*a)

	print(" ".join(map(str, b[index-1])))
print(" ".join(map(str, a)))
	print(" ".join(map(str, b[index+1])))

    print(*possible[idx-1])
print(*possible[idx])
    print(*possible[idx+1])

        print(*i)
	print(*s)
	print(*[1,2])
	print(*[2,1])
		print(*s)
		print(*l[a+1])
		print(*l[a-1])
		print(*l[a])
		print(*l[a-1])
		print(*l[a])
		print(*l[a+1])

        print(p[inde-1][0], end="")
            print(" {}".format(p[inde-1][i]), end="")
        print()
    print(p[inde][0], end="")
        print(" {}".format(p[inde][i]), end="")
    print()
        print(p[inde+1][0], end="")
            print(" {}".format(p[inde+1][i]), end="")
        print()
    


		print(*seq2[ind])
			print(*seq2[ind+1])
		print(*seq2[ind-1])
		print(*seq2[ind])
		print(*seq2[ind-1])
		print(*seq2[ind])
		print(*seq2[ind+1])


    print(' '.join(list(map(str, a))))

    print(a[0])
        print(' '.join(map(str,A[count-1])))
        print(' '.join(map(str,a)))
        print(' '.join(map(str,b)))
        print(' '.join(map(str,A[1])))
        print(' '.join(map(str,A[A.index(a)-1])))
        print(' '.join(map(str,a)))
        print(' '.join(map(str,A[A.index(a)+1])))


        print(A_s)
            print(A_s)
            print(' '.join(map(str, lex[idx+1])))
            print(' '.join(map(str, lex[idx-1])))
            print(A_s)
            print(' '.join(map(str, lex[idx-1])))
            print(A_s)
            print(' '.join(map(str, lex[idx+1])))

        print(*P)
            print(*Prev)
        print(*A)
            print(*l[i-1])
        print(*a)
            print(*l[i+1])
        print(*p[now-1])
    print(*a)
        
        print(*p[now+1])

    print(1)
    print(*pats[0])
    print(*pats[1])
    print(*pats[ans-1])
    print(*pats[ans])
    print(*pats[ans-1])
    print(*pats[ans])
    print(*pats[ans+1])

    print('\n'.join(ans))

print(ans2)

print("\n".join(ans))

print('\n'.join(output))

print('\n'.join(ans))

print(ans, end='')

    print(' '.join(p))


    print(' '.join(map(str,a)))

    print(' '.join(map(str,a)))

    print(*per)


    print(*p)


    print( *perm)

    print(*i)

    print(*item)

    print(*elem)

    print(1)
	print(*a)
	    print(*a)


    print(" ".join(i))

    print("\n".join(" ".join(map(str, v)) for v in matrix))


        print(*arr)
        print(*p)


    print(str.join(" ", [str(x) for x in p]))

    print(*list_lexicographic_order)


    print(" ".join(map(str, i)))




  print(' '.join(map(str, p)))



	print(" ".join(map(str, p)))

    print(" ".join(map(str, i)))

    print(' '.join(list(map(str,l))))

  print(" ".join(map(str, ele)))

    print(" ".join(map(str, i)))

    print(' '.join(map(str,A[i])))


    print(' '.join(map(str,a)))

    print(" ".join([str(j) for j in i]))


    print(' '.join(list(map(str, a))))

    print(*p)


    print(*v)

    print(*p)

        print(*a)


	print(*i)

        print(ans[:-1])
    print(*i)

  print(*i)

    print(*i)


    print(*p)


  print(*t)



        print(*tup)

 
    print(*i)

        print(" ".join([str(num) for num in elem]))


    print(*i)

	print(*i)

    print(*i)

    print(*p)

    print(*i)


    print(*y)

print("\n".join(ans))

print("\n".join(ans))

    
    print('\n'.join(ans))

    print( 1 if k in S else 0 )

    print( 1 if k in S else 0 )

        print(1)
        print(0)

  print(1 if k in B else 0)


    print(int(input().rstrip() in a))


    print('\n'.join(ans))


    print(int(k == al[i%n]))


    print(1 if bin_search(a, k) != -1 else 0)


            print(0)
            print(1)

            print(0)

 
        print('1')
        print('0')


print('\n'.join(K))

    print(1 if in_array(a, k) else 0)


    print(int(int(input()) in a))


        print(int(upper_bound > 0 and A[upper_bound - 1] == target))


    
    print(1 if n>pos and A[pos]==k else 0)
    

        print(int(search(AN, k)))


        print(1)
        print(0)


        print(1)
        print(0)

    print(1 if la[i] == t else 0)

        print(1)
        print(0)


print(ans, end='')

        print(1)
        print(0)


    print(1 if binary_search(int(input()), array, 0, len(array)) else 0)

    print(flag)

    print(1 if bin_search(int(c)) else 0)


        print(1)
        print(0)

        print(binarySearch(k, a))


    print(search(A, k))

        print('1')
        print('0')


        print(1)
        print(0)

            print(1)
            print(0)
    print(int(input() in A))
    

        print(1)
        print(0)

    print(1 if x in a else 0)

            print(1)
            print(0)


    print(l, key, left, right)
        print(1)
        print(0)

    print(int(k in a))


    print(+(k in a))

        print(1)
        print(0)

	print(1 if a[p] == k else 0)


        print(0)
        print(1)

        print(0)
        print(0)
        print(1)

            print(1)
            print(0)


    print(1 if a[p] == k else 0)


    print(1 if a[p] == k else 0)


        print(1)
        print(0)


        print(0)
        print(1)
        print(0)


		print(0)
		print(1)

            print(1)
            print(0)


    print(1 if i < l and a[i] == k else 0)


    print(0)
    print(1)

        print(str(1))
        print(str(0))

    print(1 if a[place] == k else 0)


print( int(B <= A))

    print(1)
    print(0)

    print(1)
    print(0)


            print(1)
print(0)

    print(1)
    print(0)
        
        

    print(1)
    print(0)


print(int(cnt == m))


        print(0)
    print(1)


print(1 if B <= A else 0)


print('1' if B <= A else '0')


print(1 if b <= a else 0)


        print(1)
        print(0)
  print(1)
  print(0)

    print(1)
    print(0)


    print('1')
    print('0')

print(+a.issuperset(set(map(int, input().split()))))


print(1 if B <= A else 0)

    print(1)
    print(0)


print(int(f() <= a))

  print(1)
  print(0)


print(int(len(not_in_arr1) == 0))

                print(1)
        print(0)

print(1 if len(b-a)==0 else 0)

print(int((a & b) == b))


    print(1)
    print(0)

print(int(arrb.issubset(arra)))

print(1 if b.issubset(a) else 0)

print(1 if b<=a else 0)

    print(1)
    print(0)

    print(1)
    print(0)


        print(0)
print(1)


print(int(all((x in a) for x in input().rstrip().split())))


print(int(check(la, lb)))

    print("1")
    print("0")


    print(1)
    print(0)

    print(0)
print(1)

print(+(len(A & B) == M))

		print("1")
		print("0")


  print(1)
  print(0)

    print(0)
print(1)


    print(str(1))
    print(str(0))

            print(0)
            print(0)
    print(1)


    print(1)
    print(0)

print(1 if b.issubset(a) else 0)

print(1 if b.issubset(a) else 0)

    print(0)
    print(1)

	print('1')
	print('0')

    print(1)
    print(0)


print([0,1][set(A).issuperset(set(B))])

    print(1)
    print(0)

    print(1)
    print(0)


    print('1')
    print('0')


        print(1)
        print(0)



print(1 if b.issubset(a) else 0)

    print(int(set(B) <= set(A)))


    print(1)
    print(0)

    print(1)
    print(0)


print(int(A & B == B))


        print("1")
        print("0")

  print(1)
  print(0)


    print(1)
    print(0)

    print(i)


print("\n".join(ans))

print('\n'.join(ans))

print("\n".join(ans))

    print( idx )

    print(bisect.bisect_left(a, qi))


    print('\n'.join(str(bl(A, int(f_i.readline()))) for i in range(q)))


    print(loc)

    print(loc)


        print(bisect_left(A, k))

 
    print(bisect_left(a, k))


    print(bl(A, int(ipt())))


        print(bisect_left(a,k))

    print(bisect_lib(A,int(input.readline()),n))

        print(n)
    print(i)

    print(lower_bound(A, k))


        print(lower_bound(AN, k))


    print(lower_bound(int(input()), array, 0, len(array)))

print('\n'.join(M))

    print(get_index(array, key))

    print(ans[i])

    print(max_indent[center][1])
    

    print(bin_search(int(e)))


        print(lower_bound(A, int(scan())))


    print(lower_bound(A, k))

        print(binarySearch(k, a))


    print(bisect.bisect_left(A, int(input())))

    print(bisect_left(a, k))

	print(bisect_left(a, k))

	print(bisect_left(a, k))


        print(i)
        
    print(bisect_left(A, k))


    print(bisect_left(a, int(k)))


    print(bisect.bisect_left(A,k))


    print(bisect_left(box,k))

    print(bisect_left(a, k))

    print(bisect_left(A, x))

    print(bisect_left(a, k))

    print( bisect_left(L,x) )

    print(bisect.bisect_left(a, k))



    print(bisect_left(A, k))


    print(bisect_left(a,k))

  print(bisect.bisect_left(a, k))


    print(bisect_left(a, int(input())))

    print(bisect.bisect_left(a, k))


    print(bisect_left(a, k))

    
    print(bisect_left(L,p))

    print(bisect.bisect_left(a, k))

    print(bisect(A, k-1))

        print(i)


  print(bisect_left(a, k))

    print(bisect_left(a,k))


    print(bisect_left(a, k))


		print(bi)


		print(n)
		print(t)


    print(bisect.bisect_left(A,k))

    print(bisect_left(l,q))


    print(l, r)


    print(bisect.bisect_left(a, qi), bisect.bisect_right(a, qi))


    print( idx_l,idx_u )

    print(loc1,loc2)


    print(loc1,loc2)

    print(l_index, r_index)


    print(loc1, loc2)


print('\n'.join(ans))

        print(bisect_left(A, k), bisect_right(A, k))

 
print('\n'.join(ans))

print('\n'.join(ans))


    
    print('\n'.join(ans))

print("\n".join(ans))

    print(i, j)


    print(BS.bisect_left(A, k), BS.bisect_right(A, k))


        print(lower,upper)
    

        print(bisect_left(a,k), bisect_right(a,k))

    print(bisect_left(a, k), bisect_right(a, k))


        print(f"{n} {n}")
    print(f"{pos_lower} {pos_upper}")

    print(*bisect_lib(A,x,n))

    print(BS.bisect_left(A, k), BS.bisect_right(A, k))

    print(f"{lower} {upper}")

        print(lower_bound(AN, k), upper_bound(AN, k))


    print(lower_bound(A, k), upper_bound(A, k))


print('\n'.join(M))

    print(lwb[i],upb[i])

    print(bisect.bisect_left(A, k), bisect.bisect_right(A, k))

    print(bisect_left(A, k), bisect(A, k))

    print(bisect_left(a, k), bisect_right(a, k))

    print(lower_bound, upper_bound)


    print(bisect.bisect_left(a, k), bisect.bisect_right(a, k))


    print(bisect_left(A, k), bisect_right(A, k))


	print(bisect_left(a, k), bisect_right(a, k))

    print(bisect.bisect_left(A,k),bisect.bisect_right(A,k))


  print(bisect.bisect_left(a, k), bisect.bisect_right(a, k))

    print(bisect_left(a, k), bisect_right(a, k))

    print(bisect.bisect_left(a, k),bisect.bisect_right(a, k))



    print(bisect.bisect_left(a, k), bisect.bisect_right(a, k))


    print(bisect_left(a, k), bisect_right(a,k))

    print(bisect_left(box,k),bisect(box,k))

        print(f"{bisect(a, k - 1)} {bisect(a, k)}")


    print(bisect.bisect_left(a,k),bisect.bisect(a,k))

    print(left, right)



    print(bisect_left(A, k), bisect_right(A, k))


    print(bisect_left(a,k),bisect(a,k))

    print(bisect.bisect_left(l,q), bisect.bisect_right(l,q))

    print(bisect_left(A, k), bisect_right(A, k))


    print(bisect_left(a, k), bisect_right(a, k))

    print(bisect.bisect_left(a,k),bisect.bisect_right(a,k))

  print(bisect_left(a, k), bisect_right(a, k))

    print(bisect_left(A, k), bisect_right(A, k))

    print(bisect_left(a, k), bisect_right(a,k))

        print("{0} {1}".format(l, u))

    print(bisect.bisect_left(A,k),bisect.bisect_right(A,k))

    print(lower_bound(A, k), upper_bound(A, k))

    print(bisect_left(a, k), bisect_right(a, k))

		print(bi_l,bi_r)



    
    print(bisect_left(L,p),bisect(L,p))

        print(n, n)
        print(bisect.bisect_left(num, k), bisect.bisect_right(num, k))


    print(bisect_left(L,x), bisect_left(L,x+1))

    print(x, y)

        print(len(s))
        print(int(lx[1] in s))

        print(len(s.keys()))
        print(int(x in s))


print('\n'.join(ans))


print('\n'.join(ans))

        print(len(tbl))
            print(1)
            print(0)



print("\n".join(ans))

        print(len(S))
            print(1)
            print(0)


        print(len(s))
            print(1)
            print(0)



        print(len(s))
        print(int(x in s))


        print(len(s))
        print(int(query[1] in s))

        print(len(d))
        print(int(s in d))


    print(len(s)) 

    print(1 if x in s else 0)

        print(len(s))
        print(int(q[1] in s))


        print(len(a))
            print(1)
            print(0)

        print(len(s))
        print(int(q[1] in s))

    print('\n'.join(ans))

        print(int(x in a))
        print(len(a))


        print(len(S))
        print(1 if val in S else 0)

            print(len(ans))
                print(1)
                print(0)


        print(len(s))
        print(int(x in s))

        print(len(s))
        print(1 if param[1] in s else 0)


        print(len(s))
            print(1)
            print(0)

            print(1 if C[x] != 0 else 0)
            print(len(C))

 
    print(a)

  print(result)


    print(len(st))
    print(1 if x in st else 0)


        print(len(S))
            print(1)
            print(0)


print('\n'.join(out))

        print(len(S))
            print(1)
            print(0)

    print(len(s))
      print(1)
      print(0)


            print(len(S))
            print(1 if x in S else 0)


            print(len(s))
                print("1")
                print("0")
        print(len(t))
        print(len(s))
        print(int(x in s))


		print(len(tbl))
        print(len(S))
        print(1 if int(a[1]) in S else 0)

        print(len(s))
            print(1)
            print(0)


			print(len(S))
				print("1")
				print("0")


        print(len(S))
            print(1)
            print(0)


        print(len(s))
            print(1)
            print(0)

		print(len(tbl))
        print(len(s))
            print(1)
            print(0)

        print(len(S))
        print(1 if value in S else 0)

        print(len(s))
        print(1 if x in s else 0)


        print(1*(b in s))
        print(len(s))

		print(len(s))
				print(1)
				print(0)

        print(len(S))
            print(1)
            print(0)

        print(len(S))
            print(1)
            print(0)

            print(len(S))
            print(len(S))
            print(1)
            print(0)

            print(1)
            print(0)

        print(Slen)

        print(len(seen))
            print(1)
            print(0)


        print(len(st)) 
            print(1)
            print(0)
        

        print(len(s))
        print(int(lx[1] in s))
        print(len(s))
        print(int(x in s))
print("\n".join(ans))

print('\n'.join(ans))

        print(len(tbl))
            print(1)
            print(0)
        print(len(S))
            print(1)
            print(0)
        print(len(s))
        print(int(x in s))
        print(len(s))
        print(1 if x in s else 0)
    print(len(s)) 

    print(1 if x in s else 0)

        print(len(s))
        print(int(query[1] in s))
        print(len(s))
        print(1 if x in s else 0)
        print(len(s))
        print(int(q[1] in s))
        print(len(a))
            print(1)
            print(0)
        print(len(s))
        print(int(x in s))
            print(len(ans))
                print(1)
                print(0)
        print(int(x in a))
        print(len(a))


        print(len(s))
        print(1 if param in s else 0)
        print(len(s))
            print(1)
            print(0)
    print(len(S))
    
    print(1 if x in S else 0)
    
            print(1 if C[x] != 0 else 0)
            print(len(C))
print('\n'.join(out))

    print(a)

        print(len(S))
            print(1)
            print(0)
    print(len(st))
    print(1 if x in st else 0)
            print('len', self._len)
            print('load', self._load)
            print('offset', self._offset)
            print('len_index', len(self._index))
            print('index', self._index)
            print('len_maxes', len(self._maxes))
            print('maxes', self._maxes)
            print('len_lists', len(self._lists))
            print('lists', self._lists)
        print(len(S))
            print(1)
            print(0)
    print(len(s))
      print(1)
      print(0)
        print(len(t))
		print(len(tbl))
            print(len(S))
                print(1)
                print(0)
            print(len(s))
                print("1")
                print("0")
        print(len(s))
        print(int(x in s))
		print(len(tbl))
        print(len(S))
        print(1 if int(a[1]) in S else 0)
        print(len(S))
            print(1)
            print(0)
		print(len(s))
		print("1" if x in s else "0")


        print(len(S))
            print(1)
            print(0)
            print(len(s))
                print(1)
                print(0)
        print(len(seen))
            print(1)
            print(0)
        print(len(s))
            print(1)
            print(0)
        print(+(x in se))
        print(len(se))
        print(len(s))
            print(1)
            print(0)
        print(len(s))
            print(1)
            print(0)
        print(len(S))
            print(1)
            print(0)
        print(len(num))
            print(1)
            print(0)
        print(len(S))
            print(1)
            print(0)
            print(len(S))
            print(len(S))
            print(1)
            print(0)
		print(len(s))
				print(1)
				print(0)
        print(len(s))
    
        print(1 if x in s else 0)
    
        print(len(S))
        print(1 if value in S else 0)
        print(len(s_set))
            print(1)
            print(0)
		print(len(tbl))
        print(len(S))
            print(1)
            print(0)
                    print(x)
                    
                    print(i)


        print(len(s))
        print(int(query[1] in s))
                    print(l[i])
                    print(i)
print("\n".join(ans))


print('\n'.join(ans))

        print(len(s))
        print(1 if x in s else 0)
        print(len(s))
        print(1 if x in s else 0)
        print(len(s))
        print(int(int(q[1]) in s))
                    print(i)
                print(i)

            print(len(C))
            
            print(1 if C[l[0]] != 0 else 0)

                        print(num)
            
                    print(num)


 
        print(len(a))
            print(1)
            print(0)
            print(c)

print('\n'.join(out))

        print(len(s))
            print(1)
            print(0)
                    print(j)
                    print(k)

		print(cnt)
	        print(dict[ki])
	        print(0)
			    print(keytbl[j])


        print(cnt)
        print(+used[idx])
                print(rs[j])

        print(cnt)
        print(+used[idx])
                print(rs[j])


            print(self.key)
        print(self.key)
        print(self.key)
        print(size)
            print(1)
            print(0)
            print(len(s))
                print("1")
                print("0")
                        print(i)
                        print(e)
            print(len(ans))
                print(1)
                print(0)
                        print(i)
                        print(a)
        print(len(S))
            print(1)
            print(0)
                    print(y)
                    print(z)

    print(len(s))

        print(1)
        print(0)

                print(i)
                print(i)


        print(len(S))
            print(1)
            print(0)
                    print(i)
                print(i)

        print(len(S))
            print(1)
            print(0)
                    print(i)
                    print(i)

        print(len(S))
            print('1')
            print('0')
                    print(s)
                    print(s)


        print(len(S))

            print(1)
            print(0)

                    print(i)
        print(Slen)

            print(1)
            print(0)

        print(len(st))
        print(cnt)
                    print(i)
                print(k)
        

        print(len(self.S))

            print(1)
            print(0)

                    print(i)
                    print(i)

        print(len(s_set))
            print(1)
            print(0)
                print(left)
            print("\n".join(map(str, s_list)))


        print(len(S))
            print(1)
            print(0)
          print(_)
        print(len(S))
            print(1)
            print(0)
          print(_)
        print(cnt)
        print(color[b] if b in color else 0)
                print(ss[i])

                print(cnt)
            
            print(cnt)
        
                    print(1)
                    print(0)
                print(0)
        
                print(S[j])


      print(len(s))
      print(1 if i<len(s) and s[i]==x else 0)
    print(len(s))
    
    print( 1 if x in s else 0 )

        print(x)


      print(len(s))
      print(1 if i<len(s) and s[i]==x else 0)
        print(len(s))
        print(1 if x[0] in s else 0)
                print(li)
                

        print(s[i])

        print(len(s))
        print(find(s, param[0]))
        print(len(a)-2)
        print(1 if a[p] == b[1] else 0)
            print(a[j])


        print(len(dic))
            print(1)
            print(0)
                print(s)
        print(c)
                print(1)
                print(0)
            print(0)
                print(S[j])

        print(s_len)
        print(be_found)
            print(S[i])


        print(len(ss))
        print(int(x in ss))
            print(*ans, sep="\n")


        print(cnt)
		print(cnt)
    print(count)
        print('\n'.join(map(str,S[s:e])))

        print(find(S,query[1])[0])
		print(cnt)
        print(len(S))
            print(1)
            print(0)
            print(element)
		print(self.len())
		print(1 if i < self.len() and self.a[i] == x else 0)	
			print(x)

            print(len(orderset))
                print(1)
                print(0)
                print(i)


            print(len(s))
            print(int(x in s))
                print(k)


        print(self.total)

        print(self.ms.get(x, 0))

            print(f'{k}\n' * v, end='')


        print(len(a))
        print(1 if xina else 0)
            print(ai)


        print(self.total)

        print(self.ms.get(x, 0))

            print(f'{k}\n' * v, end='')


        print(len(a)-2)
        print(1 if a[p] == b[1] else 0)
            print(a[j])







        print(self.total)

        print(self.ms.get(x, 0))

            print(f'{k}\n' * v, end='')


            print('len', self._len)
            print('load', self._load)
            print('offset', self._offset)
            print('len_index', len(self._index))
            print('index', self._index)
            print('len_maxes', len(self._maxes))
            print('maxes', self._maxes)
            print('len_lists', len(self._lists))
            print('lists', self._lists)
        print(len(S))
            print(1)
            print(0)
            print(S[i])
        

            print((' ' * num_spaces) + str(_curr.val))
                print(size)
                print(int(contains))
                print(next_value)
        print(count)
        print(d[query[1]] if query[1] in s else 0)
                        print(l[i])
                        print(i)
		print(cnt)
		print(cnt)

print('\n'.join(ans))

print("\n".join(ans))

            print(count)
            
            print(C[l[0]])

                            print(num)
            
                    print(num)


            print(cnt)
            print(d[x])
print('\n'.join(out))

        print(counter)
        print(S.get(data[0], 0))
                        print(i)
                        print(s)
        

        print(cnt)
        print(d[x])
	            print(self.key)
        print(self.key)
        print(self.key)
        print(size)
            print(num[x])
            print(0)
        print(cnt)
        print(counter[idx])
                print(rs[j])


        print(cnt)
        print(counter[idx])
                print(rs[j])


print("\n".join(map(str, ans)))

            print(element_count)

            print(values[para[0]])

                    print(para[0])

                        print(i)
            
                        print(s)

        print(cnt)
        print(color[b] if b in color else 0)
                print(ss[i])

        print(elem_num)
        print(dic.get(cmd[1],0))
                print(c)

        print(total)
            print(count[value])
            print(0)
            print(i)
    print(S)
    print(count)
        print(cnt)
        print(color[b] if b in color else 0)
                print(ss[i])

    print(cnt)

    print(d[x])

                print(i)
                    print(i)


    print(sum_c)
    
    print( cnt[x] )

            print(x)

            print(len(s))
            print(s.get_num_elements(x))
                print(*x_list, sep='\n')

        print(len(s))
        print(end - first)
            print('\n'.join(list(map(str,[i for i in s[first:end]]))))

        print(count)
        print(dict[t] if t in dict else 0)
            print(*lis, sep="\n")

		print(cnt)
		print(cnt)
        print(s[i])

        print(len(s))
        print(find(s, param[0]))
		print(cnt)
      print(len(s))
      print(cntr)
        print(cnt)
        print(MS.total)
        print(MS.find(nums[0]))
            print(n)

        print(self.total)

        print(self.ms.get(x, 0))

            print(f'{k}\n' * v, end='')


        print(self.total)

        print(self.ms.get(x, 0))

            print(f'{k}\n' * v, end='')


    print(count)
        print('\n'.join(map(str,S[s:e])))

        print(y1-y0)
        print(s_count)
        print(s_dict[x])
                print(key)


        print(len(S))
        print(bisect.bisect_right(S,query[1])-bisect.bisect_left(S,query[1]))
            print(y)

            print(size)
            print(s.get(query[1], 0))
                    print(i)
        print(len(S))

        print(index_right - index_left)

        print(len(l))
        print(len(l[leftIndex:rightIndex]))
            print(i)

        print(len(S))
        print(index_right_x - index_left_x)
            print(element)
        print(len(S))
        print(len(S[left: right]))
            print(s)


        print(len(a)-2)
                    print(count)
            print(a[j])







        print(len(S))
        print(len(S[indL:indR]))
            print(s)


        print(len(a))
        print(bisect_right(a,x) - idx)
            print(ai)


		print(self.len())
		print(e-b)
			print(x)
			
            print(len(multiset))
            print(multiset.count(v[0]))
        print(len(lst))
        print(len(lst[l:r]))
            print(li)
            

        print(len(S))
        print(len(S[indL:indR]))
            print(s)

            print('len', self._len)
            print('load', self._load)
            print('offset', self._offset)
            print('len_index', len(self._index))
            print('index', self._index)
            print('len_maxes', len(self._maxes))
            print('maxes', self._maxes)
            print('len_lists', len(self._lists))
            print('lists', self._lists)
        print(len(S))
        print(S.count(x))
            print(S[i])
        

        print("{} {}({})".format(prefix, curr.x, curr.qty))
            print("empty")
    print("Empty tree find(1)={}".format(t.find(1)))
    print("insert(1) find(1)= got {}".format(t.find(1)))
    print("insert(1) find(1)= got {}".format(t.find(1)))
    print("erase(1) find(1)= got {}".format(t.find(1)))
    print("erase(1) find(1)= got {}".format(t.find(1)))
    print("insert(1) insert(2) find(1)= got {} exp=1".format(t.find(1)))
    print("find(2)= got {} exp=1".format(t.find(2)))
    print("insert(2) find(2)= got {} exp=2".format(t.find(2)))


    print("begin fuzz")
            print("t.find({})={} != d[{}]={}".format(k, t.find(k), k, v))
                print("Nok2")
                print("Nok4")
        print("fuzz ok!")


            print(m.size)
            print(m.find(*remainder))
                print(next_value[0])
        print(len(s))
        print(s.count(x))
            print(*ans, sep="\n")
            print(len(counter))
            print(counter.get(value[0]))
                print(i)
        print(d[q.key])

print('\n'.join(ans))

        print(d[query[1]])

        print(d[key])


	    print(dict[a[1]])


        print(m[p[0]])


        print(m[k])

            print(d[query[1]])


print("\n".join(ans))

        print(dic[q[1]])

        print(m[key])
    print(dic[key])

    print(s[l[1]])


        print(d[q[1]])

        print(d[l[2:-1]])


        print(a[x])
            print(ans[key])


        print(M[op[1]])

        print(M[data[0]])

            print(D[l[0]])
        
        print(get(map, param[0]))


        print(M[key])

        print(dic[b])

        print(d[query[1]])

        print(x)


print('\n'.join(out))

			print(d[cmd[1]])


            print(dict[line[1]])


        print(dict[a[1]])

        print(d[key])

            print(d[key])

        print(M[query[1]]) 

            print(d[v[0]])


            print(d[para[1]])
    print(dictionary[key])


        print(Map[L[1]])


        print(M[key])

        print(d[key])
        

        print(dct[cmmd[1]])

        print(M[query[1]])

		print(d[a[1]])

        print(d[com[1]])


    print(d[q[1]])

        print(dic[keyword])


                print(v)


        print(d[a[1]])

        print(M[query[1]])

        print(dict.get(val[0]))

    print(d[q[1]])
            print(d[q.key])
            print('0')
print('\n'.join(ans))

print("\n".join(ans))

        print(d[key])
        print(d[query[1]] if query[1] in d else 0)
            print(d.get(query[1], 0))
	        print(dict[ki])
	        print(0)
        print(d[key])
            print(0)
            print(m[k])
            print(m[key])
            print(0)
    print(dic[key] if key in dic else 0 )

                print(ans[key])
                print(0)
        print(d[x[1]])
        print(d.get(q[1], 0))
        print(a[x])
        print(dic.get(q[1],0))
    print(s[l[1]] if l[1] in s else 0)
        print(M.get(data[0], 0))
            print(M[op[1]])
            print(0)
            print(D[l[0]])
        
            print(M[key])
            print(0)
        print(get(map, param[0]))
        print(dic[b] if b in dic else 0)
    print(output)


            print(d[query[1]])
            print(0)
print('\n'.join(out))

            print(d[para[1]])

        print(d.get(key, 0))

				print(d[cmd[1]])
				print("0")
                print(dict[line[1]])
                print('0')
    print(d.get(k,0))
            print(dict[a[1]])
            print(0)
            print(0)
            print(d[key])
        print(d.get(key, 0))
            print(dct[cmmd[1]])
            print(0)
            print(M[query[1]])
            print(0)

		print(d[x] if x in d else 0)

            print(d.get(k, 0))
                print(d.get(v[0]))
                print(0)
            print(M[query[1]])
            print(0)
        print(mp.get(Q[1],0))
			print(l[t[1]])
			print("0")
        print(M[key])   # キーがkeyである要素を出力(defaultdictなので、keyが存在しない場合は0と出力される)
        print(dict[ki] if ki in dict else 0)
            print(dict[line[1]])
            print(0)
    print(d[q[1]])
            print(dic[order[1]])
            print(0)
        print(dic.get(keyword, 0))
        print(d[query[1]] if query[1] in d else 0)
                print(k, d[k])

            print(d[key])
            print(0)
            print(sk[i], d[sk[i]])
            

print('\n'.join(ans))

print("\n".join([elem for elem in ans if elem]))

        print(d[a[1]] if a[1] in d else 0)
        print(d[a[1]] if a[1] in d else 0)
        print(M.get(data[0], 0))
                print(key, M[key])


            print(0)
            print(d[idx])
                print(rs[j], d[j])

                print(d[para[1]])
                print("0")

                print("{} {}".format(sorted_keys[i], d[sorted_keys[i]]))

            print(M[query[1]])
            print(0)
                print(sorted_keys[i], M[sorted_keys[i]])

		print(dict[ki] if ki in dict else 0)
			    print(keytbl[j], dict[keytbl[j]])


            print(self.key, self.value)
        print(self.key)
        print(self.key)
        print(t.get(k))
        print(m[key] if key in m else 0)
                print(keytbl[i], m[keytbl[i]])


            print(dict[query[1]])
            print(0)
                print(d[j], dict[d[j]])

                print(ans[key])
                print(0)
                    print(sorted_keys[i], ans[sorted_keys[i]])


    print(dic[key] if key in dic.keys() else 0 )

        print(key,dic[key])


        print(d[key] if key in d else 0)
                print(*an)


            print(m.get(key))
                    print(k, v)

        print(dic.get(q[1],0))
                print(key,dic[key])

    print(s[l[1]] if l[1] in s else 0)
            print(s.get(query[1], 0))
                print(k, v)


            print(" ".join(map(str, self.arr[i])))
            print(m.get(key))
        print(dic[b] if b in dic else 0)
                print(box[L], dic[box[L]])
            print(S[a[i][1]])
            print(0)
                print(W[j],S[W[j]])

        print(m_dict.get(query[1], 0))
                print(query[1], m_dict[query[1]])
                    print(key_list[j], m_dict[key_list[j]])


                print(dict[query[1]])
                print(0)
        
                    print(key_list[j], dict[key_list[j]])


		print(dict[ki] if ki in dict else 0)
		print(dict[ki] if ki in dict else 0)
		print(dict[ki] if ki in dict else 0)
        print(self.rm.get(x, 0))

                print(f'{k} {self.rm[k]}')


		print(dict[ki] if ki in dict else 0)
        print(M[x[0]] if x[0] in M and M[x[0]] != 0 else 0)
                print(tbl[i], M[tbl[i]])

                print(d[v[0]])
                print(0)
                    print(keys[k], d[keys[k]])


            print(d[query[1]])
            print(0)
            print(s,d[s])


        print(self.M.get(key,0))
                    print("{} {}".format(current_key,self.M[current_key]))
    
        print(dict[ki] if ki in dict else 0)
                print(keytbl[j],dict[keytbl[j]])


            print(dic[order[1]])
            print(0)
                print(l[i],dic[l[i]])

                print(0)
                print(M[key])
            print(0)
                print(key_ans, M[key_ans])
		print(dict[ki] if ki in dict else 0)
        print(d[key])
        print(0)

            print(k, d[k])


        print(h[k] if k in h else 0)
            print(key, h[key])


                print(M[key])
                print(0)
            print(0)

                print(key_ans, M[key_ans])

            print(M[key])
            print(0)
                print(key, M[key])


            print(MS.ms[key])
            print(0)
                print(n,MS.ms[n])

            print('len', self._len)
            print('load', self._load)
            print('offset', self._offset)
            print('len_index', len(self._index))
            print('index', self._index)
            print('len_maxes', len(self._maxes))
            print('maxes', self._maxes)
            print('len_lists', len(self._lists))
            print('lists', self._lists)
            print(M[key])
            print(0)
            print(S[i], M[S[i]])
        

                    print(f"{s+c} {node.d[c].value}")
        print(d.get(q.key))
        print(self.map[p][1] if self.exists(p, key) else 0)

            print(k, v)

        print(self.map[key] if key in self.map else 0)

            print("\n".join([f"{k} {self.map[k]}" for k in keys[lp:rp]]))
		print(self.value[i] if i < self.len() and self.key[i] == key else 0)	
			print(self.key[i], self.value[i])

            print(0)
            print(self.data[idx][1])
            print(0)

            print(0)
            print(x[p])
            print(key[j],x[j])

                print(m[key])
                print(0)
                print(k, v)
        print(N[y])
        print(0)

            print(M[i][0]+" "+str(M[i][1]))

                print(v)
                print(k, v)

print('\n'.join(ans))

print('\n'.join(ans))

print("\n".join(ans))


                print(v)
                    print(key, v)

                print(v)
                    print(key, v)


		    print(*dict[ki], sep='\n')
			    print(keytbl[j], k)


                print(value)
                    print(keytbl[i], value)


            print(item)
                print(rs[j], item)

                print(y)
                    print(sorted_keys[i], z)


                        print(d[para[1]][i])
                        
                    print("{} {}".format(sorted_keys[i], d[sorted_keys[i]][j]))

                print(*v_list, sep='\n')
                        print(k, v)

                print(self.key, v)
        print(self.key)
        print(self.key)
            print(v)
            print(*d[key], sep="\n")
                    print(key, x)


        print(x)

            print(key,x)

            print('len', self._len)
            print('load', self._load)
            print('offset', self._offset)
            print('len_index', len(self._index))
            print('index', self._index)
            print('len_maxes', len(self._maxes))
            print('maxes', self._maxes)
            print('len_lists', len(self._lists))
            print('lists', self._lists)
            print(val)
                print(key, val)
        


            print(v)
                print(key,v)

            print("\n".join(map(str, m_dict[query[1]])))
                    print(key_list[j], value_)


                print(i)
                    print(k, i)
                print(keytbl[j],k)


                        print(f"{s+c} {v}")
            print(v)
                    print(elem)
                    print(keys[k], elem)


                print(i)
                print(l[i],j)

                print(item)
                print(s,item)


                    print(value)

                    print(keyAns, valueAns)


                    print(value)
                    print(key_ans, value_ans)
            print(val)

                print(k, val)


            print(*self.mm[x], sep='\n')

                print(f'{k} {v}')


            print(val)
                print(key, val)


                print(v)
                print(key,value)

            print(*M[key], sep='\n')
                    print(key, str(M[key][i]))


        print('\n'.join(map(str,M[key])))

                print(D[i],j)

                print(v)

                print(k, v)

            print(*self.map[key], sep="\n")

                print(k, v)

				print(value)	
				print(self.key[i], value)

            print("\n".join(pri))
                    print(box[L], i)
                    print(value)
                print(k, v)
                print(x[p+count])
            print(key[j],x[j])


print(*ans, sep="\n")


    print(v)

    print(c)

    print(val)


    print(v)

    print(ci)


    print(i)

    print(v)

    print(elem)


        print('\n'.join(map(str, arr)))


print('\n'.join(map(str, s)))

print('\n'.join(map(str,C)))


print('\n'.join(map(str, sorted(C))))

print(*sorted(A | B), sep='\n')


print(*sorted(A | B), sep='\n')



print(*sorted(a | b), sep='\n')

print(*sorted(A | B), sep='\n')

print("\n".join(map(str, sorted([value for value in A|B]))))

print("\n".join(map(str, sorted(list(a.union(b))))))


print("\n".join(map(str, ab_union)))


print(*sorted(A | B), sep='\n')


        print(i)


        print(res[i])


print(*sorted(a | b), sep="\n")


    print(ans)



print(*sorted(a | b), sep="\n")


  print(*sorted(a|b),sep='\n')

print(*sorted(A | B), sep = '\n')

        print(ab)



print(*sorted(A.union(B)), sep ="\n")


    print(c)

    print(i)


        print(i)
print(*sorted(s_union), sep="\n")

    print(i)

    print(val)

    print(x)

        print(v)


    print(ans)


    print(i)


  print(_)

    print(ele)


    print(i)

print('\n'.join(ans))

    print(a)

    print(i)

    print(elem)

    print(i)

    print(ans[i])

	print(i)
	

  print(number)


    print(i)

    print(a)

    print(*ans, sep="\n")


    print(i)

    print(c)

    print(v)

    print(val)


    print(v)

    print(ci)


    print(elem)

    print(v)

  print('\n'.join(map(str, sorted(C))))

        print(i)


    print(ans)


    print(*sorted(C), sep='\n')

    print(i)


    print(*sorted(s_intersection), sep="\n")

    print(i)

    print(ans[i])

    print(a[i])



  print(_)

    print(ele)


    print(a)

    print(i)


    print(*sorted(C), sep='\n')


    print('\n'.join(map(str,C)))


	print(i)
	

    print(elmnt)

    print(a)

    print(i)
    

    print(*ans, sep='\n')


        print(i)
    print(i)

    print(x)

    print(c)


    print(i)

    print(elem)

    print(*sorted(c), sep='\n')

  print(element)


        print('\n'.join(map(str, intersection)))


    print(i)

  print('\n'.join(ans))

    print(i)


        print(num)


    print(val)

    print(x)

    print(ans)

        print(v)


    print('\n'.join(map(str, s)))

  print(*sorted(a&b),sep='\n')

    print(*sorted(C), sep='\n')

        print(elem)


    print(*sorted(c),sep="\n")

    print(i)

    print(*sorted(a & b), sep="\n")


    print(*ans, sep="\n")


    print(v)

    print(val)


    print(v)

    print(i)

    print(c)

    print(ci)


    print(elem)

    print(v)

    print('\n'.join(map(str,C)))


        print('\n'.join(map(str, difference)))
        print('\n'.join(map(str, A[i:])))


    print('\n'.join(map(str,C)))

  print('\n'.join(map(str, sorted(C))))

    print(*sorted(C), sep='\n')

    print(*sorted(C), sep='\n')


    print(*sorted(s_difference), sep="\n")

    print(*sorted(c), sep='\n')

  print('\n'.join(ans))

        print(i)


    print('\n'.join(map(str, s)))

    print(i)


    print(i)


        print(i)
    print(i)

    print(x)

    print(elmnt)

  print(_)

    print(a)

    print(a)

    print(c)

        print(v)


    print(elem)


    print(ans[i])

	print(i)
	

    print(i)
    

    print(i)


  print(element)


    print(*sorted(S), sep='\n')

    print(i)

    print(i)

    print(*sorted(C), sep='\n')

    print(*sorted(a - b), sep="\n")


    print(a[i])


    print(item)

  print(*sorted(a-b),sep='\n')

    print(*C, sep='\n')



        print(num)


    print(ans)

		print(i)


    print(*sorted(c),sep="\n")

    print(i)

    print(x)

    print(ans)


    print(*ans, sep="\n")


    print(v)

    print(ci)


    print(c)

    print(v)

    print(val)


    print(i)

    print(elem)

    print(v)

            print('\n'.join(map(str, arr)))

    print('\n'.join(map(str,C)))


    print('\n'.join(map(str, s)))

  print('\n'.join(map(str, sorted(C))))

  print('\n'.join(map(str, sorted(C))))

    print(*sorted(C), sep='\n')


    print(*sorted(C), sep='\n')

        print(v)


    print(*sorted(C), sep='\n')

    print(*sorted(ans), sep="\n")

        print(i)


    print(*sorted(e), sep='\n')


    print(*sorted(C), sep='\n')

    print(*C, sep='\n')


    print(i)


    print(*sorted(c),sep="\n")

    print(i)

    print(elem)



    print(x)

  print(_)

    print(a)

    print(i)

    print(c)

    print(i)


    print(*sorted(a ^ b), sep="\n")


    print(a)

    print(ans)


    print(i)

    print(ans[i])

  print(element)


    print(i)

	print(i)
	

    print(elmnt)

        print(i)
    print(i)

        print(num)


    print(*sorted(S), sep='\n')

    print(i)
    

    print(e)


    print(i)


	print(i)

  print('\n'.join(ans))

    print(ans)

		print(i)



print(str(n) + ":", *prime_factorize(n))


print(f"{n}: {s}")

  
print("{0}:".format(n),*ans)


print(temp, ':', end=' ', sep='')
print(*ans)


print(f"{n}:", *elems)


print(f"{n}: {' '.join(fa)}")



print(f"{N}:",end="")
	print(f" {e}",end="")
	print(f" {int(n)}",end="")
print("")

print(str(N) + ":", end = "")

        print(" " + str(b), end = "")
print()

  
print(f'{n}:',*prime)


print(str(num)+": ", end="")
print(*prime_factors)

    print(str(n)+':',end='')
                print(' '+str(i), end='')
        print(' '+str(tmpn),end='')
    print()


print(f"{n}: {' '.join(map(str, factors))}")


print(res)

    print(f"{n}:", *factorize(n))


print(f"{n}: ", end="")
print(*factors)


print(str(n_c) + ": " + " ".join(map(str, primes)))


print(str(n)+":",*sorted(prime_factorize(n)))


print(f"{nn}: {' '.join(b)}")

print(f"{n}: {' '.join(map(str, factors))}")

    print(" ".join(str(i) for i in ans))
print(f"{n}:", " ".join(str(r) for r in res))


print('{}: {}'.format(N,string))

print(f"{n}:", *ans)



print(f"{m}:", *ans)



print(n, end = ':')


        print(end = ' ')
        print(i, end = '')
    print(end = ' ')
    print(n)
    print()

print(*ans)


print("{0}:".format(f_n),*l)

print(str(n)+':',*prime_decomposition(n))


print(str(n) +":", end=" ")
print(*factorize(n), sep=' ')

print(result)

print(str(n)+":",end = " ")

    print("2",end = " ")
        print(str(d),end = " ")
print(str(n))


print(str(n)+":",*l)

print(n+': ',end='')
    print(d,end=' ')
        print(d,end=' ')
print(n)

print(str(n)+":",*function(n))


print(result)

print(str(N)+": "+(" ".join(a)))

    print("{}: ".format(n), end='')
        print(n)
        print(*ans)

print("{0:d}".format(n)+": "+" ".join(map(str,prime_decomposition(n))))


    print("{0}: {1}".format(N, ' '.join(map(str, elementary_number_list))))

print(n)

print(str(M) + ": " + " ".join(map(str, result)))

print(str(nc) + ": " + " ".join(result))

print(str(n) + ': ' + ' '.join([str(x) for x in simple_prime_factrize(n)]))

print(s.format(n),end="")
	print(s2.format(lst[i]),end="")
print()


print(*ans)

print('%d:' % (n), end='')
	print(' %d' % (result[i]), end='' if i < len(result) - 1 else '\n')



print("{}:".format(N), *prime_factorization(N))


print(num[0]+" "+str(n) if len(num) == 1 else " ".join(num))

print("")




print('{}: '.format(n), end = '')
print(*ans)




print(n2+":"," ".join(map(str,factorint(n))))


print(str(num) + ": " + ' '.join(str(f) for f in fct))


print(str(n)+": ",end="")
print(*soinnsuubunnkai(n))


print(str(N) + ': ', end = '')


print(' '.join(map(str, L)))


print(str(n)+": "+" ".join(map(str, primeFact(n))))


print(n,': ',sep='',end='')
print(*prime_factorize(n))


print("%d:" %N,*ans)
        
        




        print(' 2',end="")
                print(f' {i}',end="")
        print(f' {n}',end="")
print(f'{n}:',end="")
print()


print(i,end="")
print(":",end="")

    
    print(" ",end="")
    print(d, end="")
print()

    print('{}: {}'.format(n,n))
    print('{}: {}'.format(n,' '.join(map(str,plist))))

print(str(_n) + ': ' + " ".join(ans))

print(n + ":", end="")
    print(" 2", end="")
    print()
            print(" " + str(d), end="")
        print(" " + str(n))
print(w)

print(pow(m,n,1000000007))

print(ans)

print(pow(m,n,1000000007))


print(pow(m,n, 1000000007))


print(pow(m,n,1000000007))

print(modpow(m, n, 1000000007))

print(pow(a,b,m))

print(pow(M, N, MOD))

        
print(kurikaeshi(m,n,mod))
            

print(pown(x, n))


    print(pow(m, n, MOD))


print(res)


print(power_mod(m, n, 1000000007))


print(calc(m,n))

print(c)

    print(mod_pow(m, n, MOD))


print(pow(m, n, MM))


print(ans)

print(mod_exp(m,n,mod))

    print(pow(x,y,1000000007))
print(ans)


    print(power(m, n, 1000000007))


print(ans)



print(res)


print(reppow(m,n,MOD))


print(pow(m, n, MOD))

    print(pow(m, n, 1000000007))

print(amari(m,n))

print(pow(m, n, 1000000007))

print(r)

print(pow(m, n, mod))

print(ans)

print(pow(m, n, 1000000007))

print(pow(m, n, int(1e9) + 7))

    print(pow(m, n, 1000000007))

print(pow(m, n, C))

print(int(pow(*map(int,input().split()),10**9+7)))

print(pow(m, n, 1000000007))


    print(pow(m, n, M))


print(pow(m,n,1000000007))

print(pow(m, n, 1000000007))

print(pow(m, n, int(1e9) + 7))

print(ans)


print(pow(m,n,1000000007))

    print(pow(m, n, 1000000007))

print(pow(a,b,1000000007))

print(pow(m, n, 1000000007))

print(power(data[0], data[1], 1000000007))

    print(pow(m, n, 1000000007))


print(pow(n,m,int(1e9+7)))

print(pow(m, n, 10 ** 9 + 7))

print(pow(m,n,1000000007))

print(a) 


print(pow(m,n,1000000007))

print(power(M,N))


print(m)


    print(pow(m, n, 1_000_000_007))


print(ans)

print(pow(m,n,mod))

print(ans)

print(pow(m, n, 10 ** 9 + 7))

print(pow(m, n, MOD))

print(pow(m, n, 10**9 + 7))



print(pos(M, N))


print(pow(*map(int,input().split()),10**9+7))

print(ans)

print(ans)



print(lcm(*A))


print(ans)

    print(ans)



print(ans)



print(lcm_list(nums))


print(math.lcm(*a))


    

print(ans)

print(ans)

print(int(p))

print(b)

    
print(ans)

print(b)

print(b)


print(tmp)


print(ans)


print(ans)

print(lcml([int(x) for x in input().split()]))

print(b)

print(sum)


    print(lcm_list(L))



print(lcm)

print(a_s[0])


print(ans)
    
    


print(int(num[n - 1]))

print(int(ans))

print(arr[0])

print(result)

print(ans)

	print(ans)


print(int(a_last))

print(int(ans))

print(now)



print(a[n-1])


print(b)


print(ans)


print(ans)


print(ans)

print(multi_lcm(a))

print(l)

print(lcm)



print(lcm)


print(ans)

print(lcm)

    print(lcm([int(x) for x in input().split()]))



print(x)

print(lcm)


print(r)

print(lcm)


print(ans)

print(ans)

print(out)

print(ans)


print(f)


print(tmp)


print(res)

    
print(ans)

print(c[0])

    print(ans)

print(a)

print(int(l))


print(b)


print(ans)


print(Eulers_totient_function(N))

print(ans)

    print(ans)
    
print(ans)


print(int(ans))

print(result)




print(res)


print(int(ans))


                
       

print(m)

print(int(phi(n)))

    print(ans)

print([p,p*(n-1)//n][n>1])

print(eulers_phi_function(n))



print(int(n))




print(ans)


print(phi(int(input())))

print(m)

print(int(sum))


print(ans)

print(m)

print(phi(n))

print(euler_phi(n))

print(euler_phi(n))


print(int(answer))


print(m)

print(product)



print(ans)


  
print(int(ans))

print(phi(Q))


    print(euler_totient(int(input())))



print(ans)



print(int(ans))


print(m)

print(euler_phi(N))

print(num)


print(Euler(n))



print(N - s)



print(int(ans))

print(int(euler_phi(n)))

print(ans)


print(int(n))



print(int(ans))

print(n - cnt)   




print(Euler_phi(n))

    print(N-1)
    print(int(res))



print(euler_phi(n))


    print(euler_phi(N))

print(ans)

print(ans)


print(int(phi))



print(euler_fai(n))



    print(euler_totient_function(N))


print(ans)            

print(ans)

print(n)


print(int(res))


print(answer)


print(n)




    print(solve(n))

print(int(ans))

print(phi(n))


print(int(ans))

    print(1)
print(s)


print(round(m))


print(Euler_phi(int(input())))

print(phi(N, nums))

        print(0)
        print(N)


print(int(ans))


print(euler_phi(n))

print(int(ans))

print(m)


print(m)

    print(*ext_euc(a, b))
    
print(x, y)


print(*extGCD(a//g,b//g))


print(p, q)


print(*res)

print(*queue.pop())

 
print(a0, b0)

  
print(a0, b0)

        print(*args)

    print("{} {}".format(x, y))

        print(0, 1)
        print(1, 0)
        print(*coe[1])

print(a,b)

print(x, y)

print(*extended_euclid(n,m))



    print(x_sp, y_sp)


print(*extended_euclid(*map(int, input().split())))

    print(x, y)


    print(a1,b1)
    print(b2,a2)
        print(a1,b1)
        print(b2,a2)

print(ans[1], ans[2])

print(x,y)

   print(*ext_gcd(a,b))
print(*extgcd(a, b)[:2])

print(ans[0],ans[1])

print(x, y)

print(x, y)


print(int(x), int(y))

print(*E(a,b)[:2])

print(c,f)

print(a[1],a[2])


print(a,b)

    print(c, f)


print(x, y)

print(*ex_euclid(a,b))

print(ans[1],ans[2])



print(x, y)



print(a,b)



print(x, y)



print(x,y)

print("{} {}".format(x, y))


print(a, b)

print(f"{x} {y}")


print(x, y)

print(a,b)

print(x,y)

    print(x, y)

print(x[0],y[0])

print(" ".join([str(x),str(y)]))


print(x, y)


    print(x, y)
    print(x-b1, y+a1)
    print(x, y)
    print(x-b1, y+a1)

print(x, y)

print(*min(ans,key=lambda x:abs(x[0])+abs(x[1])))

print(res1, res2)

print(x,y)

    print(0,1)

print(b,c)


    print(x, y)


print(a0, b0)


print(*xgcd(a, b))


print(*extgcd(a,b)[1:])


print(x0, y0)

print(x, y)


print(p, q)


print(x, y)

print(ans_a, ans_b)

    print(x, y)


    print(j, k)



print(Decimal(a) + Decimal(b))

print(a+b)

print(a + b)


print(a + b)

print(a+b)

print(A+B)

print(sum(map(int, input().split())))

print(sum(map(int, input().split())))

print(*ans,sep="")




print(a + b)


print(a+b)

print(a + b)

print(sum([int(i) for i in input().split()]))

print(a+b)

print(a + b)

print(sum(map(int,input().split())))

print(eval(input().replace(" ","+")))

print(a+b)

print(a+b)

print(A+B)


print(n + m)


print(a + b)

print(a+b)

print(a+b)


print(sum(map(int,input().split())))


print(sum(map(int, input().split())))

print(sum([int(x) for x in input().split()]))


print(a + b)

print(a+b)


print(A + B)

print(sum(list(map(int,input().split()))))


    print(A + B)
    

print(a + b)



print(a + b)

print(sum(map(int,input().split())))

print(a+b)

print(A+B)

print(a + b)

    print(a+b)
print(sum(map(int, input().split())))

print(a+b)


print(a+b)

print(a + b)


print(int(a)+int(b))

print(m+n)



print(a + b)

print(a + b)

print(a + b)

print(a + b)


print(sum(map(int,input().split())))

print(A+B)


print(a+b)

print(sum(map(int,input().split())))

print(a+b)

print(a + b)


    print(A + B)


print(a+b)

print(a+b)

print(a + b)


print(Decimal(a) - Decimal(b))


print(a-b)

print(a-b)

print(a - b)


print(a-b)

print(A-B)

print(x - y)

print(*ans,sep="")

print(a - b)

print(n - m)


print(a - b)

print(a-b)

print(x-y)

print(a-b)


print(a - b)


print(A - B)

print(a - b)

print(A-B)


print(a-b)

print(a-b)

print(a - b)


print(int(a)-int(b))

print(a-b)

print(a-b)

print(a - b)

print(a-b)


print(a-b)

print(a - b)

print(a-b)

print(A-B)

print(A-B)

print(a - b)


    print(A - B)
    


print(int(a) - int(b))


    print(a - b)

print(a-b)

print(a-b)

print(a - b)

print(a-b)

print(A - B)

print(A - B)

print(A-B)

print(a - b)

print(a - b)

print(a-b)

print(a - b)

print(m-n)

print(a - b)

    print(a-b)


print(a-b)

print(a - b)


print(a-b)

print(eval(input().replace(*' -')))

print(a-b)

print(ans)


print(a - b)

print(a-b)

print(a-b)


print(n-m)

print(int(a[0]) - int(a[1]))

print(A-B)

print(m,end = ": ")
    print(ans[i], end = " ")
print(ans[-1])
print(ans)
print(sum)
print(int(sum))
    print(0,1)
print(ans[0],ans[1])
print(a+b)
print(a-b)


print(z[0]-z[1])

print(a-b)

print(eval(input().replace(" ","-")))

    print(A-B)

print(a-b)

print(a-b)

print(A - B)

print(a - b)

print(a-b)


print(a*b)

print(a*b)

print(a * b)


print(a*b)

print(A*B)

print(x * y)

print(a * b)


print(a * b)

print(a*b)

print(a*b)

print(A*B)

print(a*b)

print(a * b)


print(a*b)

print(a*b)

print(x*y)

print(A * B)

print(eval(input().replace(' ','*')))

print(a * b)

print(A * B)


print(A * B)

print(a*b)

print(a*b)

print(A*B)

print(a * b)

print(a*b)

print(a*b)

print(a * b)

print(A * B)


print(A * B)

print(A * B)

print(int(a[0]) * int(a[1]))

print(A*B)

print(A*B)

print(a * b)

    print(A * B)


print(a * b)

print(a * b)

print(int(a) * int(b))

print(a*b)

    print(a * b)


print(z[0]*z[1])

print(a * b)

print(eval(input().replace(" ","*")))


print(a*b)

    print(A*B)

print(a*b)


print(a * b)


print(a*b)

print(a*b)

print(a*b)

print(a * b)

print(a*b)

print(A * B)

print(a * b)


print(a*b)


print(A*B)



print(a*b)

print(a*b)


print(a * b)

print(a*b)

print(int(s[0]) * int(s[1]))

print(a * b)

print(a*b)

print(a*b)

print(ans)

print(n * m)


print(a*b)

print(c)

    print(-(-a // b))
    print(a // b)


print(a//b if a*b>=0 else -(abs(a)//abs(b)))

print((abs(A)//abs(B))*f)

print(result if x * y > 0 else -result)

print(c)

print(-C if A^B < 0 else C)

print(-c if a*b<0 else c)

print(((a // abs(a)) if a != 0 else 1)* (b // abs(b)) * (abs(a) // abs(b)))


    print(-1*(abs(a)//abs(b)))
    print(a//b)

print(ans)

print(-c if a * b < 0 else c)

    print(abs(a) // abs(b))
    print(abs(a) // abs(b) * -1)

print(-ans if a^b < 0 else ans)

    print(A//B)
    print(-1*(A//B))
    print(-1*(A//B))
    print(A//B)

print(abs(a) // abs(b) if a*b >= 0 else -(abs(a) // abs(b)))

  print(-(abs(a)//abs(b)))
  print(a//b)


print(c)

print(-C if A^B < 0 else C)

    print( a // b )
    print( -( -a // b) ) 

    print(abs(A) // abs(B) * sign)


print(-c if a ^ b < 0 else c)

    print(a//b)
    print(-(-a//b))

        print(-c)
        print(c)


print(c if a*b>=0 else -c)

    print(-ans)
    print(ans)

print(c*(-1)**(a*b<0))

    print(c)
    print(-c)

print(a)

print((a // b) * sign)

    print(-1*(-1*a//b))
    print(a // b)


    print(0)
    print(abs(a)//abs(b) * (a//abs(a)) * (b//abs(b)))

    print(0)
    print(abs(a)//(abs(b)))
    print(-(abs(a)//(abs(b))))

print(abs(a) // abs(b) * s)

  print(abs(a)//abs(b)*-1)
  print(abs(a)//abs(b))


    print(A//B)
        print(A//B)
        print(A//B+1)


    print(-c)
    print(c)

print(a//b if a*b > 0 else -(-a//b))

print((-1 if a*b<0 else 1)*(abs(a)//abs(b)))


print(res)

print(ans)

print(ans)

print(((-1)**sign)*(abs(a)//abs(b)))

    print(0 - abs(a) // abs(b))
    print(a//b)

	print(abs(n) // abs(m) * -1)
	print(abs(n) // abs(m) * -1)
	print(n // m)


    print(a//b)
    print(-1*(abs(a)//abs(b)))

print(ans)

print(-C if A^B < 0 else C)

  print(res+1)
print(res)

print(-c if a * b < 0 else c)

print(-c if a * b < 0 else c)

print(-c if a * b < 0 else c)

    print(a//s)
    print(-(abs(a)//abs(s)))

    print(-c)
    print(c)

print(a*b//(abs(a)*abs(b))*(abs(a)//abs(b)) if a else 0)

print(-c if a*b < 0 else c)

print(abs(a)//abs(b)*k)

print(a//b + bool(a*b < 0 and a % b))

print(ans)

print(a//b*(-1)**mi)

    print(-(m//n))
    print(-(m//n))
    print(m//n)


print(round(a, b))

print(-1 * c if a * b < 0 else c)



print(a%b)

print(a%b)

print(a % b)


print(a%b)

print(A%B)

print(x % y)


print(a%b)

   print(a%b)


print(a%b)

print(a%b)

print(A % B)

print(a%b)


print(a % b)


print(a%b)

print(a%b)

print(x%y)

print(eval(input().replace(' ','%')))

print(a % b)

print(A % B)


print(A % B)

print(a % b)

print(a%b)

print(A%B)

print(a % b)

print(a%b)

print(a % b)



print(A % B)


print(A % B)

print(int(a[0]) % int(a[1]))

print(a%b)

print(a % b)

    print(A % B)


print(a % b)

print(a % b)

print(int(a) % int(b))

print(a%b)

    print(a % b)


print(a%b)

print(a % b)

print(eval(input().replace(" ","%")))


print(a%b)

    print(A%B)

print(a%b)


print(a % b)


print(a % b)

print(a % b)

print(a%b)


print(a%b)

print(a%b)

print(A % B)

print(a % b)


print(a%b)


print(A%B)



print(a%b)

print(a%b)

print(a%b)

print(A % B)

print(a % b)


print(a % b)

print(a%b)

print(a%b)

print(a%b)

print(a%b)

print(n % m)


print(a%b)

    print(0)
    print(ans)

    print(0)
    print(a * b)

    print(0)
    print(ans)

    print(0)
    print(ans)

print(A*B)


print(a*b)

print(n*m) 

print(a*b)

print(a * b)


print(A*B)

print(x * y)

   print(a*b)


print(a * b)


print(A * B)

print(nums[0] * nums[1])

print(A * B)

print(a*b)

print(a * b)

print(a*b)

print(a*b)

print(a * b)

print(a*b)

print(eval(input().replace(*' *')))

print(a * b)

print(A*B)

print(a*b)

print(a * b)

print(a * b)

print(a*b)

print(str(a*b))

print(A * B)

print(a*b)

print(eval(input().replace(' ','*')))

print(a*b)

print(A * B)

print(a*b)

print(int(a[0]) * int(a[1]))

print(eval(input().replace(" ","*")))

print(a*b)

print(A * B)

print(a * b)

print(a*b)

print(a * b)

print(a*b)



print(a * b)

print(a*b)

print(ans)


    print(a * b)

print(A*B)

print(a*b)

print(a * b)


print(a * b)

print(a * b)

print(a*b)

print(a * b)

print(a * b)

