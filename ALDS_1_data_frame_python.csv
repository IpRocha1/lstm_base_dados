judgeId,problemId,sourceCode
8240200,ALDS1_1_A,"def insert(N,A):
    x = map(str,A)
    print("" "".join(x))
    for i in range(1,N):
        v = A[i]
        j = i-1
        while j >= 0 and A[j] > v:
            A[j+1] = A[j]
            j -= 1
        A[j+1] = v
        y = map(str,A)
        print("" "".join(y))
    return A
    
n = int(input())
A = list(map(int,input().split()))
z = insert(n,A)
"
8246017,ALDS1_1_A,"N = int(input())
A = list(map(int, input().split()))

for n in range(N):
    B = sorted(A[:n+1]) + A[n+1:]
    print(*B)
    A = B
"
8246655,ALDS1_1_A,"N = int(input())
L = input()
print(L)
L = list(map(int,L.split()))

for i in range(1,N):
    v = L[i]
    j = i - 1
    while j >= 0 and L[j] > v:
        L[j+1] = L[j]
        j -= 1
    L[j+1] = v
    print(' '.join(list(map(str,L))))
    
"
8253993,ALDS1_1_A,"n = int(input())
a = list(map(int, input().split()))

for i in range(1, n):
  print(*a)
  v = a[i]
  j = i-1
  while j>=0 and a[j]>v:
    a[j+1] = a[j]
    j -= 1
  a[j+1] = v
print(*a)
"
8255239,ALDS1_1_A,"N = int(input())
A = list(map(int, input().split()))

for i in range(N):
    v = A[i]
    j = i - 1
    while j >= 0 and A[j] > v:
        A[j + 1] = A[j]
        j -= 1
    A[j + 1] = v
    for k in range(N):
        if k == N - 1:
            print(A[k])
        else:
            print(A[k], end = ' ')
"
8255553,ALDS1_1_A,"num=int(input())
num_list=list(map(int,input().split("" "")))


# for i in range(1,num):
#     v=num_list[i]
#     j=i-1
#     #vの手前がvより小さかったら交換
#     while j>=0 and num_list[j]<v:
#         num_list[j+1]=num_list[j]
#         j-=1
#         num_list[j+1]=v
#         print(num_list)

        
for i in range(1,num):
    v=num_list[i]
    j=i-1
    print(*num_list,sep =' ')
    #jは入れ替えの対象となる左側
    while j>=0 and num_list[j]>v:
        num_list[j+1]=num_list[j]
        num_list[j]=v
        j-=1
    
print(*num_list,sep =' ')
"
8270645,ALDS1_1_A,"def insertion_sort(arr):
    for i in range(1, len(arr)):
        key = arr[i]
        j = i - 1
        while j >= 0 and arr[j] > key:
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = key
        print("" "".join(map(str, arr)))

# Read input
N = int(input())
sequence = list(map(int, input().split()))

# Initial sequence
print("" "".join(map(str, sequence)))

# Perform Insertion Sort
insertion_sort(sequence)

"
8272986,ALDS1_1_A,"n = int(input())
data = [int(s) for s in input().split()]
print(*data)
for i in range(1, n):
    for j in range(1, i + 1):
        if data[i-j+1] < data[i-j]:
            data[i-j], data[i-j+1] = data[i-j+1], data[i-j]
        else:
            break
    print(*data)
"
8290047,ALDS1_1_A,"N=eval(input())
l=list(map(int,input().split()))
print(*l)
for n in range(1,N):
    v=l[n]
    m=n-1
    while m>=0 and l[m]>v:
        l[m+1]=l[m]
        m=m-1
    l[m+1]=v
    print("" "".join(map(str,l)))
"
8291098,ALDS1_1_A,"N = int(input())
A = list(map(int, input().split()))

for i in range(N):
    v = A[i]
    j = i-1
    while j >= 0 and A[j] > v :
        A[j+1] = A[j]
        j = j-1
    A[j+1] = v
    print("" "".join(map(str,A)))
"
8292891,ALDS1_1_A,"def sort_list(unsorted_list:list, sort_revel:int) -> list:
    """"""{sort_level}回だけsortした配列を返す

    Args:
        unsorted_list (list): 入力配列
        sort_revel (int):ソートする回数

    Returns:
        list: ソートされた配列
    """"""
    for count in range(sort_revel):
        while((unsorted_list[count] > unsorted_list[count+1]) and count >= 0):
            tmp = unsorted_list[count]
            unsorted_list[count] = unsorted_list[count+1]
            unsorted_list[count+1] = tmp
            count -= 1
    sorted_list = unsorted_list

    return sorted_list

def make_input_list(query_count:int) -> list:
    """"""入力から長さ{query_count}の配列を返す

    Args:
        query_count (int): 配列の長さ

    Returns:
        list: 入力された配列
    """"""
    input_list:list = []
    input_str = input()
    for i in range(query_count):
        input_list.append(int(input_str.split("" "")[i]))

    return input_list

def make_sorted_list_collection(input_list:list, query_count:int) -> list:
    """"""0回~{query_count}回ソートした配列を格納した配列を返す

    Args:
        input_list (list): 入力された配列
        query_count (int): 配列の長さ

    Returns:
        list: ソートした配列を格納した配列
    """"""
    sorted_list_collection:list = []
    for i in range(query_count):
        sorted_list:list = sort_list(input_list, i)
        sorted_list_collection.append(sorted_list.copy())

    return sorted_list_collection

def print_list_collection(list_collection:list) -> None:
    """"""配列を格納した配列から、I行ずつ配列を表示する

    Args:
        list_collection (list): 表示する配列を格納した配列
    """"""
    for list in list_collection:
        print_str = ''
        length = len(list)
        for i in range(length):
            if (i == length - 1):
                print_str += f'{list[i]}'
            else:
                print_str += f'{list[i]} '
        print(print_str)
        
query_count = int(input())
input_list_collection = make_input_list(query_count)
sorted_list_collection = make_sorted_list_collection(input_list_collection, query_count)
print_list_collection(sorted_list_collection)
"
8294819,ALDS1_1_A,"n = int(input()) 
numbers = list(map(int, input().split()))  # 空白区切りの数字を読み込んでリストに変換

def insertion_sort(list, n):
    print("" "".join(map(str, list)))
    for i in range(1, n):
        v = list[i]
        j = i - 1
        while j >= 0 and list[j] > v:
            list[j+1] = list[j]
            j -= 1
        list[j+1] = v
        print("" "".join(map(str, list)))

insertion_sort(numbers, n)
"
8295303,ALDS1_1_A,"n = int(input())
A = list(map(int, input().split()))

for i in range(n):
    v = A[i]
    j = i - 1
    while j >= 0 and A[j] > v:
        A[j+1] = A[j]
        j -= 1
    A[j+1] = v
    for k in range(n):
        if k < n-1:
            print(f""{A[k]} "", end="""")
        else:
            print(A[k])
"
8317392,ALDS1_1_A,"a = input()
a = input().split(' ')
print(' '.join(a))

for i in range(1, len(a)):
    for j in range(i - 1, -1, -1):
        if int(a[i]) > int(a[j]):
            a.insert(j + 1, a.pop(i))
            break
    else:
        a.insert(0, a.pop(i))

    print(' '.join(a))
"
8338685,ALDS1_1_A,"def insertion_sort(n,A):
    print(*A)
    for i in range(1,n):
       v = A[i]
       j = i - 1
       while j >= 0 and A[j] > v:
            A[j+1] = A[j]
            j -= 1
            A[j+1] = v
       print(*A)

n = int(input())
A = list(map(int, input().split()))
insertion_sort(n,A)

"
8338785,ALDS1_1_A,"def insertionSort(a,n):
    for i in range(n):
        v=a[i]
        j=i-1
        while j>=0 and a[j]>v:
            a[j+1]=a[j]
            j=j-1
        a[j+1]=v
        for i in range(len(a)):
            if i==len(a)-1:
                print(a[i],end="""")
            else:
                print(a[i],end="" "")
        print()

n=int(input())
a=list(map(int,input().split()))
insertionSort(a,n)
"
8338849,ALDS1_1_A,"N = int(input())
A = list(map(int, input().split()))

print(*A)

for i in range(1, len(A)):
    v = A[i]
    j = i - 1
    while j >= 0 and A[j] > v:
        A[j + 1] = A[j]
        j -= 1
    A[j + 1] = v
    print(*A)
"
8341864,ALDS1_1_A,"N=int(input())
A=list(map(int,input().split()))
def insertionSort(A, N):
    for i in range(N):
        v=A[i]
        j=i-1
        while j>=0 and A[j]>v:
            A[j+1]=A[j]
            j-=1
        A[j+1]=v
        print(*A) 
insertionSort(A, N)
"
8348192,ALDS1_1_A,"def print_array(A: list):
    for i in range(len(A)):
        if i == (len(A) - 1):
            print(A[i])
        else:
            print(A[i], end="" "")


def main():
    N = int(input())

    A = list(map(int, input().split()))
    print_array(A)

    for i in range(1, N):
        v = A[i]
        j = i - 1
        while j >= 0 and A[j] > v:
            A[j + 1] = A[j]
            j -= 1
        A[j + 1] = v
        print_array(A)


if __name__ == ""__main__"":
    main()

"
8349318,ALDS1_1_A,"def insertionSort(A, N):
    print(*A)
    for i in range(1, N):
        v = A[i]
        j = i -1
        while j >= 0 and A[j] > v:
            A[j + 1] = A[j]
            j -= 1
        A[j + 1] = v
        print(*A)

N = int(input())

A = list(map(int, input().split()))

insertionSort(A, N)
"
8351830,ALDS1_1_A,"n = int(input())
a = list(map(int, input().split()))

for i in range(n):
    j = i - 1
    while j >= 0 and a[j] > a[j + 1]:
        a[j], a[j + 1] = a[j + 1], a[j]
        j -= 1

    print("" "".join(map(str, a)))

"
8367862,ALDS1_1_A,"def my_insertionSort(A, N):
    print(*A)
    for i in range(1,N):
        v = A[i]
        j = i - 1
        while j >= 0 and A[j] > v: #挿入したい要素より大きい要素は配列の後ろに送る
            A[j+1] = A[j]
            j -= 1
        A[j+1] = v
        print(*A)


n = int(input())
a = list(map(int, input().split()))
my_insertionSort(a, n)
"
8369075,ALDS1_1_A,"N = int(input())
lst = list(map(int, input().split()))
for k in range(N):
    if k != N-1:
      print(lst[k],end="" "")
    else:
      print(lst[k])

for i in range(N-1):
  v = lst[i+1]
  j = i-1
  while lst[j+1] > v and j+1 >= 0:
    lst[j+2] = lst[j+1]
    j -= 1
  lst[j+2] = v
  for k in range(N):
    if k != N-1:
      print(lst[k],end="" "")
    else:
      print(lst[k])
"
8381629,ALDS1_1_A,"def insertionSort(A,N):
    for i in range(N):
        v = A[i]
        j = i - 1
        while j >= 0 and A[j] > v:
            A[j+1] = A[j]
            j -= 1
        A[j+1] = v

        for j in range(N):
          if j != N-1:
            print(A[j], end = ' ')
          else:
            print(A[j])

        
N = int(input())

A = list(map(int, input().split()))

insertionSort(A,N)
"
8389211,ALDS1_1_A,"n = int(input())
a = list(map(int, input().split()))

for i in range(0, n):
    v =a[i]
    j = i -1
    while j>=0 and a[j] > v:
        a[j+1] = a[j]
        j -= 1
        a[j+1] = v
    print(*a)
    
"
8401601,ALDS1_1_A,"def insert_sort(A, N):
    for i in range(1,N):
        v = A[i]
        j = i -1
        while j >= 0 and A[j] > v:
            A[j+1] = A[j]
            j-=1
        A[j+1] = v
        print(' '.join(map(str, A)))
    return A
N = int(input())
A = list(map(int, input().split()))
print(' '.join(map(str, A)))
insert_sort(A, len(A))
"
8413484,ALDS1_1_A,"N=int(input())
A=list(map(int, input().split()))

#print(N, A)

for i in range(N):
    v=A[i]
    j=i-1
    while j>=0 and A[j]>v:
        A[j+1]=A[j]
        j-=1
    A[j+1]=v
    print(*A)
"
8414547,ALDS1_1_A,"n = int(input())
A = list(map(int, input().split()))
for i in range(n):
    v = A[i]
    j = i - 1
    while j >= 0 and A[j] > v:
        A[j+1] = A[j]
        j -= 1
    A[j+1] = v
    print(*A)
"
8416530,ALDS1_1_A,"def insertionSort(A, N):
    for i in range(1, N):
        v = A[i]
        j = i-1
        while j >= 0 and A[j] >v:
            A[j+1] = A[j]
            j -= 1
        A[j + 1] = v
        print(*A)
    return A

N = int(input())
A =[int(j) for j in input().split()]

print(*A)

insertionSort(A, N)

"
8421670,ALDS1_1_A,"N = int(input())
A = [*map(int, input().split())]

for i in range(N):
    v = A[i]
    j = i-1
    while j >= 0 and A[j] > v:
        A[j+1] = A[j]
        j -= 1
    A[j+1] = v
    print(*A)
"
8426894,ALDS1_1_A,"def insertionSort(a, n):
    for i in range(1,n):
        v = a[i]
        j = i-1
        while j >= 0 and a[j] > v:
            a[j+1] = a[j]
            j -= 1
        a[j+1] = v
        print(' '.join(list(map(str, a))))


n = int(input())
a = list(map(int, input().split()))
print(' '.join(list(map(str, a))))
insertionSort(a, n)
"
8429077,ALDS1_1_A,"import sys

input = sys.stdin.readline

def print_list(array):
    print("" "".join(map(str, array)))

def insertion_sort(n, array):
    print_list(array)
    for i in range(1, n):
        temp = array[i]
        j = i - 1
        while j >= 0 and array[j] > temp:
            array[j + 1] = array[j]
            j -= 1
        
        array[j + 1] = temp
        print_list(array)

def main():
    n = int(input())
    array = list(map(int, input().split()))
    
    insertion_sort(n, array)

if __name__ == ""__main__"":
    main()
"
8435038,ALDS1_1_A,"n = int(input())

a = list(map(int,input().split()))

for i in range(n):
    v = a[i]
    j = i -1
    while j >= 0 and a[j] > v:
        a[j + 1] = a[j]
        j -=1
        
    a[j+1] = v
        
    print(*a)
    
"
8442718,ALDS1_1_A,"def insertion_sort(arr, n):
    for i in range(n):
        v = arr[i]
        j = i - 1
        while j >= 0 and arr[j] > v:
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = v
        print(' '.join(map(str, arr)))

n = int(input().strip())
arr = list(map(int, input().strip().split()))
insertion_sort(arr, n)

"
8446596,ALDS1_1_A,"def insertionSort(A, N): #N個の要素を含む0-オリジンの配列A
    for i in range(1,N):
        v = A[i]
        j = i -1
        while j >=0 and A[j] > v:
            A[j+1] = A[j]
            j -= 1
        A[j+1] = v
        print(*A)
    return A
    

N = int(input()) #配列の要素数
A = list(map(int, input().split())) #配列の要素
print(*A)
sort_A = insertionSort(A,N)
"
8456553,ALDS1_1_A,"n = int(input())
A = list(map(int,input().split()))
for i in range(n):
    j=i
    while j>0 and A[j-1]>A[j]:
        A[j],A[j-1]=A[j-1],A[j]
        j-=1
    print(*A)
        
"
8461928,ALDS1_1_A,"def printArr(intArr):
    n = len(intArr)
    s = """"

    for k in range(0,n):
        if k < n-1:
            s += str(intArr[k]) + "" ""
        else:
            s += str(intArr[k])

    print(s)

n = int(input())
strArr = input().split()
intArr = [int(s) for s in strArr]

printArr(intArr)

for i in range(1,n):
    v = intArr[i]
    j = i - 1
    while j >= 0 and intArr[j] > v:
        intArr[j+1] = intArr[j]
        j -= 1

    intArr[j+1] = v
    printArr(intArr)


"
8463754,ALDS1_1_A,"n = int(input())
a = list(map(int, input().split()))
for i in range(n):
    a = sorted(a[:i+1])+a[i+1:]
    print(*a)
"
8464407,ALDS1_1_A,"import math as ma

N = int(input())

A = list( map( int,input().split() ) )

for i in range(N):

    v = A[i]
    j = i - 1

    while (j >= 0) & (A[j] > v):

        A[j+1] = A[j]
        j-=1

    A[j+1] = v

    print(*A)
"
8475596,ALDS1_1_A,"def insertion_sort(A,n):
    for i in range(1,n):
        print(*A)
        v=A[i]
        j=i-1
        while j>=0 and A[j]>v:
            A[j+1]=A[j]
            j-=1
        A[j+1]=v


n=int(input())
A=[int(i) for i in input().split()]
insertion_sort(A,n)
print(*A)
'''
python .\Insertion_sort.py
6
5 2 4 6 1 3

2 5 4 6 1 3
2 4 5 6 1 3
2 4 5 6 1 3
1 2 4 5 6 3
1 2 3 4 5 6
'''
"
8484667,ALDS1_1_A,"N = int(input())
A = input().split()

for i in A:
    if i != A[len(A)-1]:    
        print(i,end="" "")
    else:
        print(i)

for i in range(1,len(A)):
    key = int(A[i])
    j = i-1
    while j >= 0 and int(A[j]) > key:
        A[j+1] = A[j]
        j -= 1
    A[j+1] = key
    for j in A:
        if j != A[len(A)-1]:    
            print(j,end="" "")
        else:
            print(j)
    
"
8490148,ALDS1_1_A,"num = int(input())
a = list(map(int, input().split()))

for i in range(num ):
    key = a[i]
    j = i - 1
    while j >= 0 and a[j] > key:
       # print(j)
        a[j+1] = a[j]
        j = j-1
    a[j+1] = key
    for i in range(num):
        if i != num-1:print(a[i], end=' ')
        else:print(a[i])

"
8507623,ALDS1_1_A,"N = int(input())
A = [*map(int, input().split())]
for i in range(N):
    v = A[i]
    j = i - 1
    while j >= 0 and  A[j] > v:
       A[j+1] = A[j]
       j -= 1
    A[j+1] = v
    print(*A)

    
"
8508392,ALDS1_1_A,"N = int(input())
A = list(map(int, input().split()))

print("" "".join(map(str, A)))  # 配列の初期状態を出力
for i in range(1, N):
    v = A[i]
    j = i - 1
    while j >= 0 and A[j] > v:
        A[j + 1] = A[j]
        j -= 1
    A[j + 1] = v
    print("" "".join(map(str, A)))  # 各ステップでの配列の状態を出力

"
8510503,ALDS1_1_A,"count = int(input())
card = list(map(int,input().split()))
for i in range(0,count) :
    v = card[i]
    j = i - 1
    while j >= 0 and card[j] > v :
        card[j + 1] = card[j]
        j -= 1
    card[j + 1] = v
    print("" "".join(map(str,card)))

"
8519983,ALDS1_1_A,"cnt = int(input())
ten = []
ten = list(map(int, input().split()))
for n in range(cnt-1):
      print(ten[n],end="" "")
print(ten[cnt-1])

for n in range(1,cnt,1):
    tmp = ten[n]
    m = n -1
    while (m >=0 and ten[m] > tmp):
        ten[m+1] = ten[m]
        m = m - 1
    ten[m+1] = tmp
    for n in range(cnt-1):
      print(ten[n],end="" "")
    print(ten[cnt-1])
"
8527905,ALDS1_1_A,"def show_list(A):
    for i, num in enumerate(A):
        if i != len(A)-1:
            print(num, end="" "")
        else:
            print(num)


def insertionSort(A, N):
    show_list(A)
    for i in range(1, N):
        tmp = A[i]
        j = i - 1
        while (j >= 0) and (A[j] > tmp):
            A[j+1] = A[j]
            j -= 1
        A[j+1] = tmp
        show_list(A)

N = int(input())
A = list(map(int, input().split()))
insertionSort(A, N)
"
8532599,ALDS1_1_A,"def insertion_sort(A, N):
    for i in range(N):
        v = A[i]
        j = i - 1
        while j >= 0 and A[j] > v:
            A[j+1] = A[j]
            j -= 1
        A[j+1] = v
        print(' '.join(list(map(str, A))))

def main():
    N = int(input())
    A = list(map(int, input().split(' '))) 

    insertion_sort(A, N)

if __name__ == '__main__':
    main()
"
8550539,ALDS1_1_A,"#!/usr/bin/python

def print_array(in_list: list):
    for i in range(len(in_list)):
        if i < len(in_list) - 1:
            sep = "" ""
        else:
            sep = ""\n""
        print(in_list[i], end=sep)

    return()


if __name__ == ""__main__"":
    import sys

    prompt_1 = ""input number of array elements: ""
    prompt_2 = ""input integers to fill in each elements: ""

    N = int(input().strip())
    A = list(map(int, input().strip().split()))

    print_array(A)

    for i in range(1, N):
        v = A[i]
        j = i - 1
        while j >= 0 and A[j] > v:
            A[j+1] = A[j]
            j -= 1
        A[j+1] = v
        print_array(A)

    sys.exit()

"
8561658,ALDS1_1_A,"N = int(input())
a_list = list(map(int, input().split()))

print(*a_list)
for i in range(1, N):
    a = a_list[i]
    j = i - 1
    while j >= 0 and a_list[j] > a:
        a_list[j + 1] = a_list[j]
        j = j - 1
    a_list[j + 1] = a
    print(*a_list)

"
8569745,ALDS1_1_A,"def print_moji(seq):
  for i in range(len(seq)):
    if i!=len(seq)-1:
      print(seq[i], end=' ')
    else:
      print(seq[i])

N=int(input())
s=list(input().split())
for i in range(len(s)):
  s[i]=int(s[i])
print_moji(s)
for i in range(1,len(s)):
  v=s[i]
  j=i-1
  while s[j]>v and j>=0:
    s[j+1]=s[j]
    j-=1
  s[j+1]=v
  print_moji(s)



"
8570505,ALDS1_1_A,"n = int(input())
nums = list(map(int, input().split()))

for i in range(n):
    j = 0

    while(i > j):
        if(nums[j] > nums[i]):
            nums.insert(j, nums[i])
            del nums[i + 1]

            break

        j += 1

    print(*nums)
"
8241069,ALDS1_1_B,"def gcd(a,b):
    while a % b != 0:
        x = b
        b = a % b
        a = x
    return b

x,y = map(int,input().split())
A = gcd(x,y)
print(A)
"
8254053,ALDS1_1_B,"x, y = map(int, input().split())
x, y = max(x, y), min(x, y)

while x%y!=0:
  x, y = y, x%y
print(y)
"
8255249,ALDS1_1_B,"import math

a, b = map(int, input().split())
print(math.gcd(a, b))
"
8257285,ALDS1_1_B,"x,y=map(int,input().split())
if x < y:
    x,y=y,x
while y>0:
    r = x % y
    x = y
    y = r
print(x)
"
8257336,ALDS1_1_B,"def gcd(a, b):
    if b > a:
        a, b = b, a
    if a % b == 0:
        return b
    return gcd(b, a % b)


def main():
    a, b = map(int, input().split())
    print(gcd(a, b))


if __name__ == ""__main__"":
    main()
"
8290103,ALDS1_1_B,"def nya(a,b):
    an=a%b
    if an==0:print(b)
    else:nya(b,an)
x,y=map(eval,input().split())
nya(x,y)
"
8294071,ALDS1_1_B,"input_list = input().split()
a = int(input_list[0])
b = int(input_list[1])

while b > 0:
    if a < b:
        tmp = a
        a = b
        b = tmp
    tmp = a
    a = b
    b = tmp % b

print(a)
"
8296285,ALDS1_1_B,"x, y = map(int, input().split())

if y >= x:
    x, y = y, x

while y != 0:
    if x % y == 0:
        break
    else:
        t = y
        y = x % y
        x = t

print(y)
"
8315323,ALDS1_1_B,"x, y = map(int,input().split())

if x < y :
    a = y
    b = x
else :
    a = x
    b = y

while b != 0 :
    c = a % b
    a = b
    b = c

print(a)
"
8324505,ALDS1_1_B,"x,y=map(int,input().split())
def gcd(a:int,b:int):
    if(a>=b):
        if(a%b==0):
            # print('今ここ')
            return b
        else:
            # print('gcd({},{})を呼び出します'.format(b,a%b))
            return gcd(b,a%b)
    else:
        return gcd(b,a)

print(gcd(x,y))
"
8338730,ALDS1_1_B,"def gcd(x,y):
    if x < y:
        x,y = y,x
    while y > 0:
        r = x % y
        x = y
        y = r

    return x
x,y =map(int, input().split())
print(gcd(x,y))
"
8338870,ALDS1_1_B,"x, y = map(int, input().split())
while y:
    x, y = y, x%y
print(x)
"
8340562,ALDS1_1_B,"def gcd(a,b):
    while True:
        if a%b==0:
            return b
        temp=a%b
        a=b
        b=temp

a,b=map(int,input().split())
print(gcd(a,b))
"
8349374,ALDS1_1_B,"def gcd(x, y):
    if x < y:
        x,y = y, x
    while True:
        if x % y == 0:
            return y
        x,y = y, x % y
    

x, y  = map(int, input().split())

print(gcd(x,y))
"
8367895,ALDS1_1_B,"def culc_gcd(x : int, y : int) -> int:
    if x < y:
        tmp = x
        x = y
        y = tmp
    if x % y == 0:
        return y
    ret = culc_gcd(y, x % y)
    return ret

x, y = map(int, input().split())
print(culc_gcd(x, y))
"
8381332,ALDS1_1_B,"import math

x, y = [int(i) for i in input().split()]
print(math.gcd(x, y))
"
8389550,ALDS1_1_B,"def gcd_binary(m, n):
    if m == 0:
        return n
    if n == 0:
        return m

    k = 0
    while m & 1 == 0 and n & 1 == 0:
        k += 1
        m >>= 1
        n >>= 1

    if m & 1 == 0:
        m, n = n, m >> 1

    while True:
        while n & 1 == 0:
            n >>= 1

        if m > n:
            m, n = n, (m - n) >> 1
        elif m < n:
            m, n = m, (n - m) >> 1
        else:
            return m << k


x, y = map(int, input().split())
result = gcd_binary(x, y)
print(result)

"
8399139,ALDS1_1_B,"x,y=map(int,input().split())

import math

print(math.gcd(x, y))
"
8401904,ALDS1_1_B,"def gcd(a, b):
    if b == 0:
        return a
    else:
        return gcd(b, a%b)

a, b = map(int, input().split())
print(gcd(a,b))
"
8412270,ALDS1_1_B,"def GCD(x, y):
    if y == 0:
        return x
    return GCD(y, x % y)


x, y = map(int, input().split())
if y > x:
    x, y = y, x
print(GCD(x, y))

"
8413658,ALDS1_1_B,"x, y = map(int, input().split())

if x<y:
    x,y=y,x
while y>0:
    r=x%y
    x=y
    y=r
print(x)

#ans=0
#for i in range(1,min(x,y)+1):
#    if x%i==0 and y%i==0:
#        ans=max(ans, i)
#print(ans)
    

"
8416565,ALDS1_1_B,"max = 0
import math

[a,b] = [int(j) for j in input().split()]

# for i in range(1,b+1):
#     if a%i == 0 and b%i == 0:
#         max = i
#     else:
#         pass
# print(max)

# i = 0
# if a > b:
#     while i != 1:
#         i = a%b
#         if i > a:
#             i = b%a
#     else:
#         print(i)
# else:
#     while i != 1:
#         i = b%a
#         if i > b:
#             i = a%b
#     else:
#         print(i)


print(math.gcd(a,b))
"
8416731,ALDS1_1_B,"def GCD(x, y):
    if y == 0:
        return x
    else:
        return GCD(y, x%y)

def main():
    x, y = map(int, input().split())
    ans = GCD(x, y)
    print(ans)

if __name__ == ""__main__"":
    main()

"
8424277,ALDS1_1_B,"def gcd(a,b):
    if b>a:
        a,b=b,a
    c=a%b
    if c==0:
        return b
    k=gcd(b,c)
    return k

a,b=map(int,input().split())
f=gcd(a,b)
print(f)
"
8435099,ALDS1_1_B,"X, Y = map(int, input().split())

while Y != 0:
	T = X
	X = Y
	Y = T % Y
	
print(X)
"
8439225,ALDS1_1_B,"from math import gcd

x,y = map(int, input().split())

print(gcd(x,y))
"
8446646,ALDS1_1_B,"import math
x, y = map(int, input().split())

print(math.gcd(x,y))
"
8450888,ALDS1_1_B,"a1,a2 = map(int,input().split())
if a1 < a2:
    tmp = a1
    a1 = a2
    a2 = tmp
greatest_common = 0
while  greatest_common== 0:
    i = a1%a2
    if i == 0:
       greatest_common = a2
    else:
        a1 = a2
        a2 = i
print(greatest_common)
"
8457271,ALDS1_1_B,"def gcd(x, y):
    
    if x < y:
        x, y = y, x
    
    while True:
        r = x % y
        y, x = r, y
        
        if r == 0:
            break
    
    return x

x, y = map(int, input().split())
print(gcd(x, y))
"
8457526,ALDS1_1_B,"a,b = map(int,input().split())
c=a%b
while c!=0:
    a=b
    b=c
    c=a%b
print(b)
"
8463760,ALDS1_1_B,"import math
x, y = map(int, input().split())
print(math.gcd(x, y))
"
8464424,ALDS1_1_B,"import math as ma

x , y = map(int,input().split())

z=ma.gcd(x,y)

print(z)
"
8471359,ALDS1_1_B,"x,y = map(int,input().split())
import math
print(math.gcd(x,y))
"
8475627,ALDS1_1_B,"def gcd(x,y):
    while y>1:
        x,y=y,x%y
        if y==1:
            return y
    return x
    
L=[int(i) for i in input().split()]
x,y=L[0],L[1]
print(gcd(x,y))

"
8484700,ALDS1_1_B,"import math
x_y = input().split()
x = int(x_y[0])
y = int(x_y[1])
print(math.gcd(x,y))
"
8490218,ALDS1_1_B,"a, b = map(int, input().split())
x = min(a,b)
y = max(a,b)
while b > 0:
    d = a % b
    a = b
    b = d
print(a)

"
8499104,ALDS1_1_B,"a,b=(int(x) for x in input().split())
if(a<b):
    c = b
    b = a
    a = c
sa = a - b
while(sa != 0):
    a = sa
    if(a<b):
        c = b
        b = a
        a = c
    sa = a - b
print (a)
    
"
8532640,ALDS1_1_B,"def gcd(x, y):
    if x < y:
        dummy = x
        x = y
        y = dummy
    if x%y == 0:
        return y
    else:
        return gcd(y, x%y)

def main():
    x, y = list(map(int, input().split(' ')))
    print(gcd(x, y))

if __name__ == '__main__':
    main()
"
8533266,ALDS1_1_B,"def calc_GreatesetCommonDivisor(x, y):
    if x < y:
        x, y = y, x  
    d = 1e9
    while y > 1:
        x, y = y, x % y
    return x if y == 0 else y

l = list(map(int, input().split()))
gcd = calc_GreatesetCommonDivisor(*l)
print(gcd)
"
8541356,ALDS1_1_B,"def gcd(a,b):
    while b:
        a,b = b, a % b
    return a

x,y = map(int,input().split())
print(gcd(x,y))
"
8550793,ALDS1_1_B,"#!/usr/bin/python

if __name__ == ""__main__"":
    import sys
    import math

    prompt = ""input two numbers (x, y): ""

    x, y = map(int, input().strip().split())
    greate_common_div = math.gcd(x, y)

    print(greate_common_div)

    sys.exit()

"
8570570,ALDS1_1_B,"import math

x, y = (int(i) for i in input().split())

""""""if(x < y):
    x, y = y, x

while(y != 0):
     x, y = y, x % y""""""

print(math.gcd(x, y))
"
8571490,ALDS1_1_B,"def gcd(a,b):
  if a%b==0:
    return b
  else:
    return gcd(b,a%b)

j=list(input().split())
x=int(j[0])
y=int(j[1])
print(gcd(x,y))
"
8588111,ALDS1_1_B,"i = input().split()
a = int(i[0])
b = int(i[1])

while True:
    c = a % b
    if c == 0:
        break
    a = b
    b = c

print(b)

"
8602266,ALDS1_1_B,"a,b = map(int,input().split())

if a < b:
    a,b = b,a
while(b > 0):
    a,b = b,a % b
print(a)
"
8603582,ALDS1_1_B,"x, y = map(int, input().split())
while x != 0 and y != 0:
    if y > x:
        x, y = y, x
    x %= y
print(max(x, y))

"
8607747,ALDS1_1_B,"def my_gcd(x, y):
    a, b = x, y
    while(a%b != 0):
        a, b = b, a % b
    return b

Array = input()
a = list(map(int,Array.split()))
print(my_gcd(*a))
"
8609130,ALDS1_1_B,"def custom_gcd(x, y):
    while y != 0:
        x, y = y, x % y
    return x

x, y = map(int, input().split())
result = custom_gcd(x, y)
print(result)

"
8642666,ALDS1_1_B,"a, b = map(int, input().split())
while a % b != 0:
	x = b
	b = a % b
	a = x
print(b)
"
8666018,ALDS1_1_B,"def gcd(x, y):
    while y:
        x, y = y, x % y
    return x

x, y = [int(x) for x in input().split()]
print(gcd(x, y))
"
8666908,ALDS1_1_B,"import math

x,y = map(int,input().split())
z = math.gcd(x,y)
print(z)
"
8666942,ALDS1_1_B,"import math
x,y = map(int,input().split())
z = math.gcd(x,y)
print(z)

"
8666951,ALDS1_1_B,"from math import gcd

n, m = map(int, input().split())
print(gcd(n, m))




"
8666988,ALDS1_1_B,"""""""
n = int(input())
a = list(map(int,input().split()))
for i in range(1,n):
    print(*a)
    x = a[i]
    j = i-1
    while j >= 0 and a[j] > x:
        a[j+1] = a[j]
        j -= 1
    a[j+1] = x
print(*a)
""""""
import math
a,b = map(int,input().split())
print(math.gcd(a,b))
"
2345495,ALDS1_1_C,"import sys
prime = lambda x: True if x==2 else False if x<2 or not x%2 else pow(2,x-1,x)==1
inp = sys.stdin.readlines()
print(len([prime(e) for e in list(map(int, inp[1:])) if prime(e)==1]))
"
2413521,ALDS1_1_C,"# Fermat's little theorem
def is_prime(x):
    if x == 2:
        return 1
    elif x % 2 == 0:
        return 0
    else:
        return pow(2, x - 1, x) == 1

import sys

def solve():
    file_input = sys.stdin
    N = file_input.readline()
    cnt = 0
    for n in map(int, file_input):
        cnt += is_prime(n)
    print(cnt)

solve()
"
2424485,ALDS1_1_C,"from sys import stdin
def isPrime(x):
    if x == 2: return 1
    elif x % 2 == 0: return 0
    return pow(2, x - 1, x) == 1
print(sum([isPrime(int(stdin.readline())) for _ in range(int(stdin.readline()))]))
"
2568964,ALDS1_1_C,"ans = 0
N = int(input())
for i in range(N):
    a = int(input())
    if a == 2:
        ans += 1
    elif a%2 == 0:
        continue
    else:
        if pow(2, a-1, a) == 1:
            ans += 1

print(ans)
"
2580333,ALDS1_1_C,"n = int(input())
count = 0
for i in range(n):
    x = int(input())
    if (x == 2):
        count += 1
    elif (x % 2 == 0):
        continue
    else:
        if (pow(2, x - 1, x) == 1):
            count += 1
print(count)
 
"
2610265,ALDS1_1_C,"import sys
 
 
def is_prime(x):
    if x == 2:
        return True
    elif x < 2 or not x % 2:
        return False
 
    return pow(2, x - 1, x) == 1
 
 
def solve(_c_list):
    cnt = 0
    for ele in _c_list:
        if is_prime(ele):
            cnt += 1
    return cnt
 
 
if __name__ == '__main__':
    _input = sys.stdin.readlines()
    c_num = int(_input[0])
    c_list = list(map(int, _input[1:]))
    ans = solve(c_list)
    print(ans)
"
3159295,ALDS1_1_C,"import sys
prime = lambda x: True if x==2 else False if x<2 or not x%2 else pow(2,x-1,x)==1
inp = sys.stdin.readlines()
print(len([prime(e) for e in list(map(int, inp[1:])) if prime(e)==1]))
"
4481550,ALDS1_1_C,"def is_prime(x):
    if x == 2:
        return 1
    elif x % 2 == 0:
        return 0
    else:
        return pow(2, x - 1, x) == 1

import sys

def solve():
    file_input = sys.stdin
    N = file_input.readline()
    count = 0
    for n in map(int, file_input):
        count += is_prime(n)
    print(count)

solve()

"
4731822,ALDS1_1_C,"import sys
prime = lambda x: True if x==2 else False if x<2 or not x%2 else pow(2,x-1,x)==1
inp = sys.stdin.readlines()
print(len([prime(e) for e in list(map(int, inp[1:])) if prime(e)==1]))
"
5418484,ALDS1_1_C,"import sys
prime = lambda x: True if x==2 else False if x<2 or not x%2 else pow(2,x-1,x)==1
inp = sys.stdin.readlines()
print(len([prime(e) for e in list(map(int, inp[1:])) if prime(e)==1]))

"
5461767,ALDS1_1_C,"# Fermat's little theorem
def is_prime(x):
    if x == 2:
        return 1
    elif x % 2 == 0:
        return 0
    else:
        return pow(2, x - 1, x) == 1

import sys

def solve():
    file_input = sys.stdin
    N = file_input.readline()
    cnt = 0
    for n in map(int, file_input):
        cnt += is_prime(n)
    print(cnt)

solve()

"
5960125,ALDS1_1_C,"import sys
prime = lambda x: True if x==2 else False if x<2 or not x%2 else pow(2,x-1,x)==1
inp = sys.stdin.readlines()
print(len([prime(e) for e in list(map(int, inp[1:])) if prime(e)==1]))
"
6229074,ALDS1_1_C,"def main(value):
    ans = 0
    for i in value:
        if i == 2:
            ans += 1
        elif i%2 == 0:
            continue
        else:
            if pow(2, i-1, i) == 1:
                ans += 1
    return ans
    
N,*A=map(int,open(0).read().split())
a = main(A)
print(a)
"
6794248,ALDS1_1_C,"# Fermat's little theorem
def is_prime(x):
    if x == 2:
        return 1
    elif x % 2 == 0:
        return 0
    else:
        return pow(2, x - 1, x) == 1

import sys

def solve():
    file_input = sys.stdin
    N = file_input.readline()
    cnt = 0
    for n in map(int, file_input):
        cnt += is_prime(n)
    print(cnt)

solve()
"
8057844,ALDS1_1_C,"# Fermat's little theorem
def is_prime(x):
    if x == 2:
        return 1
    elif x % 2 == 0:
        return 0
    else:
        return pow(2, x - 1, x) == 1

import sys

def solve():
    file_input = sys.stdin
    N = file_input.readline()
    cnt = 0
    for n in map(int, file_input):
        cnt += is_prime(n)
    print(cnt)

solve()

"
1968816,ALDS1_1_C,"# coding: utf-8

def is_prime(q):
    q = abs(q)
    if q == 2: return True
    if q < 2 or q&1 == 0: return False
    return pow(2, q-1, q) == 1
    
ans = 0
n = int(input())
for i in range(n):
    if is_prime(int(input())):
        ans += 1
    
print(ans)
"
2094551,ALDS1_1_C,"def is_prime(n):
    n = abs(n)
    if n==2: return True
    if n<2 or n%2==0: return False
    return pow(2, n-1, n) == 1

cnt = 0
for i in range(int(input())):
    if is_prime(int(input())): cnt+=1
print(cnt)
"
2098729,ALDS1_1_C,"def is_prime(n):
  if n == 2: return True
  if n < 2 or n % 2 == 0: return False
  return pow(2, n - 1, n) == 1

count = 0
for i in range(int(input())):
  if is_prime(int(input())) : count += 1
print(count)
"
2175938,ALDS1_1_C,"def p(n):
    if n==2:return 1
    if not n&1:return 0
    return pow(2,n-1,n)==1
print(sum(1 for _ in range(int(input())) if p(int(input()))))
"
2497483,ALDS1_1_C,"def check_prime(num):
    if num == 2:
        return True

    if num < 2 or num % 2 == 0:
        return False

    return pow(2,num-1,num) == 1

cnt_num = int(input())
dataset = [int(input()) for i in range(cnt_num)]

count = 0
for i in dataset:
    if check_prime(i):
        count += 1

print(count)
"
2518475,ALDS1_1_C,"def isprime(x):
    if  x==2:
        return True
    if x<2 or x&1==0:
        return False
    return pow(2,x-1,x)==1

cnt=0
n=int(input())
for i in range(n):
    a=int(input())
    if isprime(a):
        cnt+=1
print(cnt)
"
2576436,ALDS1_1_C,"def is_prime(q):
    q = abs(q)
    if q == 2: return True
    if q < 2 or q&1 == 0: return False
    return pow(2, q-1, q) == 1

if __name__ == '__main__':
    i = 0
    N = int(input())
    a = []
    for j in range(N):
        a.append(int(input()))
        if(is_prime(a[j])) == True:
            i += 1
    print(i)
"
2580265,ALDS1_1_C,"n = int(input())
count = 0
for i in range(n):
  x = int(input())
  if x == 2:
    count += 1
  elif x % 2 == 0:
    continue
  else:
    if pow(2, x - 1, x) == 1: 
      count += 1
print(count)
"
2724627,ALDS1_1_C,"import sys
input()
print(sum(2 in[x,pow(2,x,x)]for x in map(int,sys.stdin)))
"
2860840,ALDS1_1_C,"n = int(input())
nums = [int(input()) for i in range(n)]
prime_num = 0

def prime(n):
    q = abs(n)
    if q==2: return True
    if q < 2 or q&1 == 0: return False
    return pow(2, q-1, q) == 1


for i in nums:
    if(prime(i)):
        prime_num += 1

print(prime_num)

"
3491352,ALDS1_1_C,"c = 0
for _ in range(int(input())):
	m = int(input())
	if m == 2 or (m % 2 and pow(2, m-1, m) == 1):
		c += 1
print(c)

"
3789007,ALDS1_1_C,"def p(n):
  if n==2:
    return 1
  if not n&1: 
    return 0
  return pow(2,n-1,n)==1
print(sum(1 for _ in range(int(input())) if p(int(input()))))
"
5185887,ALDS1_1_C,"def fermat_test(num):
    if num == 2:
        return True
    elif num % 2 == 0:
        return False
    
    else:
        # Check if 2^(num - 1) mod num == 1
        # Fermat's little theorem
        if(pow(2, num-1, num) != 1):
            return False
    return True

n = int(input())
A = []
for i in range(n):
    num = int(input())
    A.append(num)

count = 0
for i in A:
    if(fermat_test(i)):
        count += 1
print(count)
"
6306361,ALDS1_1_C,"import sys

prime = lambda x: True if x==2 else False if x<2 else pow(2,x-1,x)==1
inp = sys.stdin.readlines()
print(len([prime(e) for e in list(map(int, inp)) if prime(e)==True]))
"
6376391,ALDS1_1_C,"import sys
input()
print(sum(2 in[x,pow(2,x,x)]for x in map(int,sys.stdin)))

"
7018963,ALDS1_1_C,"import math

n = int(input())
l = [int(input()) for _ in range(n)]

c = 0
for i in l:
    if i == 1: continue
    if i == 2 or i == 3:
        c += 1
        continue
    if i % 2 == 0:
        continue

    if pow(2, i - 1, i) == 1:
        c += 1

print(c)

"
8388172,ALDS1_1_C,"n = int(input())

s = [2, 3]
for i in range(5, 10 ** 4, 2):
    i2 = int(i ** 0.5)
    for j in range(1, len(s)):
        if s[j] > i2:
            s.append(i)
            break
        if i % s[j] == 0:
            break

b = 0
for _ in range(n):
    m = int(input())
    m2 = int(m ** 0.5)
    for i in s:
        if i > m2:
            b += 1
            break
        if m % i == 0:
            break
    else:
        b += 1

print(b)
"
8737915,ALDS1_1_C,"# aizu_ ALDS1_1_C_PrimeNumbers.py  素数

def eratosthenes_generator():
    yield 2
    n = 3
    h = {}
    while True:
        m = n
        if n in h:
            b = h[n]
            m += 2 * b
            while m in h:
                m += 2 * b
            h[m] = b
            del h[n]
        else:
            m += 2 * n
            while m in h:
                m += 2 * n
            h[m] = n
            yield n
        # print(n, h)
        n += 2

def isprime(x):
    i = 0
    xx = (int(x**0.5))+1
    if x == 2 : return True
    while primes[i] <= xx:
        if x % primes[i] == 0: return False
        i += 1
    return True

primes = []
gen = eratosthenes_generator()    
while True:
    r = next(gen)
    primes.append(r)
    if r>=10**4+1:break

n = int(input())
cnt = 0
for _ in range(n):
    if isprime(int(input())): cnt += 1

print(cnt)
"
9016072,ALDS1_1_C,"N = 10**4
primes = range(2, N+1)
for d in range(2, int(N**.5)+1):
  primes = [x for x in primes if x % d or x == d]

count = 0
for _ in range(int(input())):
    x = int(input())
    if x <= N:
        count += (x in primes)
    else:
        for prime in primes:
            if x % prime == 0:
                break
        else:
            count += 1
print(count)

"
9154641,ALDS1_1_C,"n = int(input())
primes = [2, 3, 5, 7, 11, 13, 17, 19]
for candidate in range(primes[-1] + 2, 10 ** 4, 2):
    candidate2 = candidate ** 0.5
    for prime in primes:
        if prime > candidate2:
            primes.append(candidate)
            break
        if candidate % prime == 0:
            break
counter = 0
for _ in range(n):
    value = int(input())
    value2 = value ** 0.5
    for prime in primes:
        if value2 < prime:
            counter += 1
            break
        if value % prime == 0:
            break
    else:
        counter += 1
print(counter)

"
2148414,ALDS1_1_C,"def maybe_prime(d,s,n):
    for a in (2,3,5,7):
        x = pow(a,d,n)
        if x==1 or x==n-1:
            continue
        for i in range(1,s):
            x = x*x%n
            if x==1: return False
            elif x == n-1:
                break
        else:
                return False
    return True
 
def is_prime(n):
    if n in (2,3,5,7): return True
    elif 0 in (n%2,n%3,n%5,n%7): return False
    else:
        d,s = n-1, 0
        while not d%2:
            d,s = d>>1,s+1
        return maybe_prime(d,s,n)
cnt = 0
n = int(input())
for i in range(n):
  n = int(input())
  if is_prime(n): cnt+=1
 
print(cnt)
"
2164922,ALDS1_1_C,"n = int(input())
c = 0

def devisor(n):
    if n == 2:
        return 1
    else:
        if n < 2 or n % 2 == 0:
            return 0
        elif pow(2,n-1,n) == 1:
            return 1
        else: return 0

for i in range(n):
    x = int(input())
    c += devisor(x)

print(c)
"
2208992,ALDS1_1_C,"def isPrimeNum(in_num):
    if in_num <= 1:
        return False
    elif in_num == 2:
        return True
    elif in_num % 2 == 0:
        return False
    else:
        if pow(2, in_num-1, in_num) == 1:
            return True
        else:
            return False


num_len = int(input())
cnt = 0
for i in range(num_len):
    num = int(input())
    if isPrimeNum(num)==True:
        cnt = cnt + 1

print(str(cnt))
"
2320241,ALDS1_1_C,"def is_prime(q):
    q = abs(q)
    if q == 2: return True
    if q < 2 or q&1 == 0: return False
    return pow(2, q-1, q) == 1

num = []
prime_numbers = []

n = int(input())

for _ in range(n):
    i = int(input())
    num.append(i)

for i in num:
    if is_prime(i):
        prime_numbers.append(i)

print(len(prime_numbers))
"
2547082,ALDS1_1_C,"def f(i):
    if i == 2:return 1
    return pow(2, i-1, i) == 1
print(sum(1 for n in range(int(input())) if f(int(input()))))
"
2663645,ALDS1_1_C,"def is_prime(x):
    if x==2:
        return 1
    elif x&1==0:
        return 0
    elif pow(2,x-1,x)==1:
        return 1
    else:
        return 0
N = int(input())
c=0
for i in range(N):
    n=int(input())
    c+=is_prime(n)
print(c)
"
2998361,ALDS1_1_C,"f=lambda x: 1 if x == 2 or x == 3 or (x>3 and x&1==1 and pow(2, x-1, x)==1) else 0
print(sum(f(int(input())) for _ in range(int(input()))))
"
3269944,ALDS1_1_C,"def is_prime(q):
    q = abs(q)
    if q == 2: return True
    if q < 2 or q&1 == 0: return False
    return pow(2, q-1, q) == 1
cnt=0

for i in range(int(input())):
    if is_prime(int(input()))==1:cnt+=1

print(cnt)
"
3674723,ALDS1_1_C,"n = int(input())
c=0

#フェルマーの小定理
def is_prime(q):
    q = abs(q)
    if q == 2:
        return True
    if q < 2 or q&1 == 0:
        return False
    return pow(2, q-1, q) == 1

for i in range(n):
    m = int(input())
    if is_prime(m)==1:
        c+=1

print(c)
"
3766725,ALDS1_1_C,"def p(n):
    if n==2:return 1
    if not n&1:return 0
    return pow(2,n-1,n)==1
print(sum(1 for _ in range(int(input())) if p(int(input()))))
"
3769655,ALDS1_1_C,"import math

def is_prime(q):
    q = abs(q)
    if q == 2: return True
    if q < 2 or q&1 == 0: return False
    return pow(2, q-1, q) == 1

cnt = 0
for _ in range(int(input())):
    if(is_prime(int(input()))):
        cnt += 1
print(cnt)


"
4033479,ALDS1_1_C,"def main():
    A = set()
    n_prime = 0
    while True:
        try:
            x = int(input())
            A.add(x)
        except:
            break

    for x in A:
        n_prime += is_prime(x)

    print(n_prime)


def is_prime(x):  
    if x == 2:
        return 1
    elif x % 2 == 0:
        return 0
    else:
        return pow(2, x - 1, x) == 1   

main()
"
4581076,ALDS1_1_C,"import sys
input()
print(sum(2 in[x,pow(2,x,x)]for x in map(int,sys.stdin)))

"
4696403,ALDS1_1_C,"N = int(input())

def is_prime(q):
    q = abs(q)
    if q == 2: return True
    if q < 2 or q&1 == 0: return False
    return pow(2, q-1, q) == 1

total = 0
for i in range(N):
    n = int(input())
    if is_prime(n):
        total +=1
print(total)
"
4763585,ALDS1_1_C,"def p(n):
  if n == 2: return 1
  if not n & 1: return 0
  return pow(2, n-1, n) == 1
print(sum(1 for _ in range(int(input())) if p(int(input()))))
"
5125462,ALDS1_1_C,"import sys
sys.setrecursionlimit(10000000)
input=lambda : sys.stdin.readline().rstrip()

def is_prime(n):
    n = abs(n)
    if n == 2:
        return True
    if n == 1 or n & 1 == 0:
        return False
    d = n-1
    while d & 1 == 0:
        d >>= 1
    seed_primes = [2,7,61] if n < 4294967296 else [2,3,5,7,11,13,17,19,23,29,31,37]
    for a in seed_primes:
        if a >= n:
            continue
        t = d
        y = pow(a,t,n)
        while t != n-1 and y != 1 and y != n-1:
            y = (y * y) % n
            t <<= 1
        if y != n-1 and t & 1 == 0:
            return False
    return True

count = 0
for i in range(int(input())):
    count += 1 if is_prime(int(input())) else 0
print(count)


"
5320397,ALDS1_1_C,"def is_prime(q):
    q = abs(q)
    if q == 2: return True
    if q < 2 or q&1 == 0: return False
    return pow(2, q-1, q) == 1

def main(n, num):
    ans = 0
    for x in num:
        if is_prime(x):
            ans += 1
    return ans


if __name__ == ""__main__"":
    n = int(input())
    num = [int(input()) for i in range(n)]
    ans = main(n, num)
    print(ans)

"
5452999,ALDS1_1_C,"def check(a):
    if a == 2:
        return True
    elif a % 2 == 0:
        return False
    else:
        if(pow(2, a-1, a) != 1):
            return False
    return True

y = int(input())
b = []
for i in range(y):
    a = int(input())
    b.append(a)

c = 0
for i in b:
    if(check(i)):
        c += 1
print(c)
"
5816164,ALDS1_1_C,"def isprime(x):
    if x == 2:
        return 1
    elif x % 2 == 0:
        return 0
    else:
        return pow(2, x - 1, x) == 1
    
n = int(input())
c = 0
for _ in range(n):
    a = int(input())
    c += isprime(a)
print(c)
"
6375517,ALDS1_1_C,"import math

# 素数かどうか判定する
def isPrime(a):
    if (a == 2):
        return True
    elif (a%2 == 0):
        return False
    # フェルマーの小定理
    return pow(2, a-1, a) == 1

num = int(input())
nums = []
for i in range(num):
    nums.append(int(input()))
count = 0
for i in nums:
    if isPrime(i):
        count += 1
print(count)
"
6416465,ALDS1_1_C,"n = int(input())
count = 0
for i in range(n):
    num = int(input())
    if 0 < num <= 3:
        count += 1
        continue
    if num%2 == 0 or num%3 == 0:
        continue
    if pow(2, num-1, num) == 1:
        count += 1
print(count)
"
6603702,ALDS1_1_C,"def is_prime(x):
    if x == 2:
        return True
    if x < 2 or x % 2 == 0:
        return False
    return pow(2, x - 1, x) == 1

N = int(input())
s = list(int(input()) for _ in range(N))

ans = 0
for j in s:
    if is_prime(j):
        ans += 1
print(ans)

"
7019869,ALDS1_1_C,"n = int(input())
count = 0
for i in range(n):
    x = int(input())
    if(x == 2):
        count += 1
    elif(x % 2 == 0):
        continue
    else:
        if(pow(2, x - 1, x) == 1):
            count += 1
print(count)
"
7393985,ALDS1_1_C,"def is_prime(q):
    q = abs(q)
    if q == 2: return True
    if q < 2 or q&1 == 0: return False
    return pow(2, q-1, q) == 1

n = int(input())
tester = list()
for i in range(n):
    number = int(input())
    if is_prime(number):
        tester.append(number)

print(len(tester))
"
7659337,ALDS1_1_C,"
def isprime(x: int) -> int:
    if x == 2:
        return True 
    if x % 2 == 0:
        return False
    #フェルマーの小定理
    return pow(2, x-1, x) == 1

if __name__ == ""__main__"":
    count = 0
    for _ in range(int(input())):
        count += isprime(int(input()))
    print(count)
"
7810252,ALDS1_1_C,"def is_prime(x):
    if x == 2:
        return 1
    elif x % 2 == 0:
        return 0
    else:
        return pow(2, x - 1, x) == 1

import sys

def solve():
    file_input = sys.stdin
    N = file_input.readline()
    count = 0
    for n in map(int, file_input):
        count += is_prime(n)
    print(count)

solve()


"
1885127,ALDS1_1_C,"def composite(d,n,s):
    for a in (2,3,5,7):
        p = False
        if pow(a,d,n) == 1:
            continue
        for i in range(s):
            if pow(a, 2**i * d, n) == n-1:
                p = True
                break
        if not p:
            return True
    return False
 
def is_prime(n):
    if n in (2,3,5,7):
        return True
    elif 0 in (n%2,n%3,n%5,n%7):
        return False
    else:
        d,s = n-1, 0
        while not d%2:
            d,s = d>>1,s+1
        return not composite(d,n,s)
r = []
n = int(input())
for i in range(n):
  n = int(input())
  if is_prime(n):
    r.append(n)
 
print(len(r))
"
2027787,ALDS1_1_C,"n = int(input())
prime = 0

def is_prime(q):
    if q == 2:
        return True
    if q < 2:
        return False
    return pow(2, q-1, q) == 1


prime = 0
for i in range(n):
    m = int(input())
    if is_prime(m):
        prime += 1
print(prime)
"
2188381,ALDS1_1_C,"n = int(input())
count = 0

for i in range(n):
    data = int(input())
    data = abs(data)
    if data == 2:
        count += 1
    elif pow(2,data-1,data) == 1:
            count += 1

print(count)
"
2619913,ALDS1_1_C,"def is_prime(x) :
    if x == 2 :
        return True
    if x < 2 or x % 2 == 0 :
        return False

    return pow(2, x-1, x) == 1

def main() :
    n = int(input())
    nums = []
    for _ in range(n) :
        x = int(input())
        nums.append(x)

    count = 0
    for num in nums :
        if is_prime(num) :
            count += 1

    print(count)

if __name__ == '__main__' :
    main()
"
2657468,ALDS1_1_C,"
n = int(input())

def isPrime(x):
    if x < 2:
        return false
    if x == 2:
        return True
    return pow(2, x-1, x) == 1

s = []
for i in range(n):
    s.append(int(input()))

prime = 0
for i in s:
    if isPrime(i):
        prime += 1
print(prime)
"
3512605,ALDS1_1_C,"def witness(a, n, t, u):
    x = pow(a, u, n)  # x0 = a^u mod nを計算

    for _ in range(0, t):
        y = (x * x) % n

        # 法nの下での1の非自明な平方根が存在するのはnが合成数であるときに限る
        if y == 1 and x != 1 and x != (n - 1):
            return True
        x = y
    return y != 1

def is_probably_prime(n, witnesses):
    t = 1
    u = n >> 1
    while u & 1 == 0:
        t = t + 1
        u >>= 1
    assert(2**t * u == n - 1)

    for a in witnesses:
        if a < n and witness(a, n, t, u):
            return False
    return True

def is_definitely_prime(n):
    if ((not (n & 1)) and n != 2) or (n < 2) or ((n % 3 == 0) and (n != 3)):
        return False
    elif n <= 3:
        return True
    else:
        return is_probably_prime(n, [2, 7, 61])


n = int(input())
answer = 0
for _ in range(0, n):
    m = int(input())
    if is_definitely_prime(m):
        answer = answer + 1
print(answer)
"
3744180,ALDS1_1_C,"def is_prime(q):
    q = abs(q)
    if q == 2: return True
    if q < 2 or q&1 == 0: return False
    return pow(2, q-1, q) == 1

if __name__ == '__main__':
    counter = 0
    N = int(input()) #1行目のNを取得する
    for i in range(N):
        if is_prime(int(input())):
            counter += 1
    print(str(counter))
"
4005386,ALDS1_1_C,"def is_composite(n):
    r,d,a = 0,0,n-1
    while a%2 == 0:
        a = a >> 1
        r += 1
    d = a
    for a in [2,7,61]:
        x = pow(a,d,n)
        if x == 1 or x == n-1:
            continue
        for i in range(r-1):
            x = pow(x,2,n)
            if x == n-1:
               break
        else:
            return True
    return False

def is_prime(n):
    if n in [2,7,61]:
        return True
    elif 0 in (n%2,n%7,n%61):
        return False
    else:
        return not is_composite(n)

cnt = 0
n = int(input())
for i in range(n):
    s = int(input())
    if is_prime(s):
        cnt += 1

print(cnt)
"
5010398,ALDS1_1_C,"def isprime(n, miller_rabin=False):
    def _isprime(n):
        from math import sqrt
        if n < 2:
            return False
        for i in range(2, int(sqrt(n))+1):
            if n == 1 or n % i == 0:
                return False
        return True

    def _Miller_Rabin_Test(n, A=[2, 3, 5, 7, 11, 13, 17]):
        if n in A:
            return True
        elif n < 2 or n % 2 == 0:
            return False
        d = n-1
        r = (d & -d).bit_length() - 1
        d >>= r
        for a in A:
            if a > n:
                return True
            x = pow(a, d, n)
            if x == 1 or x == n-1:
                continue
            for _ in range(r-1):
                x = x*x % n
                if x == n-1:
                    break
            else:
                return False
        return True

    if miller_rabin or n < 10**8:
        return _Miller_Rabin_Test(n)
    else:
        return isprime(n)

n, *N = map(int, open(0).read().split())
print(len(list(filter(isprime, N))))
"
6026009,ALDS1_1_C,"N = int(input())
count = 0

for _ in range(N):
    num = int(input())
    if num == 2:
        count+=1
    elif pow(2,num-1,num) == 1:
        count+=1
print(count)
"
6842994,ALDS1_1_C,"n = int(input())
ct = 0
for i in range(n):
    a = int(input())
    if pow(2, a-1, a) == 1:
             ct += 1
    elif a == 2:
        ct += 1


print(ct)
"
7020222,ALDS1_1_C,"n = int(input())
print([1 if p==2 else pow(2, p-1, p) for p in [int(input()) for _ in range(n)]].count(1))
"
8390024,ALDS1_1_D,"import sys
a=1e10
b=-a
input()
for i in map(int,sys.stdin):
    if b<i-a:b=i-a
    if a>i:a=i
print(b)
"
2725739,ALDS1_1_D,"import sys
def m():
 s=1e10;b=-s
 input()
 for r in map(int,sys.stdin):
  if b<r-s:b=r-s
  if s>r:s=r
 print(b)
if'__main__'==__name__:m()
"
4835059,ALDS1_1_D,"import sys


def m():
    s = 1e10
    b = -s
    input()
    for r in map(int, sys.stdin):
        if b < r-s:
            b = r-s
        if s > r:
            s = r
    print(b)


if'__main__' == __name__:
    m()

"
5127009,ALDS1_1_D,"import sys


def p():
    start = 1e10
    between = -start
    input()
    for r in map(int, sys.stdin):
        if between < r - start:
            between = r-start
        if start > r:
            start = r
    print(between)


if '__main__' == __name__:
    p()

"
6332222,ALDS1_1_D,"import sys
def m():
 s=1e10;b=-s
 input()
 for r in map(int,sys.stdin):
  if b<r-s:b=r-s
  if s>r:s=r
 print(b)
if'__main__'==__name__:m()
"
6843020,ALDS1_1_D,"import sys
def lp():
 s=1e10;b=-s
 input()
 for j in map(int,sys.stdin):
  if b < j-s:b = j - s
  if s > j:s = j
 print(b)
if'__main__'==__name__:lp()
lambda *args: None
g = True
if g:
  pass
else:
  print('false')
"
8351809,ALDS1_1_D,"def main():
    n = int(input())
    r = [int(input()) for _ in range(n)]

    diffs = []
    low = r[0]
    for i in range(1, n):
        diffs.append(r[i] - low)
        if r[i] < low:
            low = r[i]

    print(max(diffs))


if __name__ == ""__main__"":
    main()

"
8426878,ALDS1_1_D,"def maximum_profit():
    # 静的配列の最大サイズ
    max_num = 200000
    R = [0] * max_num

    # 入力数の指定
    n = int(input())

    # 入力された価格を配列に格納
    for i in range(n):
        R[i] = int(input())

    max_value = float('-inf')
    min_value = R[0]

    for i in range(1, n):
        # 差額の最大値の更新
        if max_value < R[i] - min_value:
            max_value = R[i] - min_value

        # 価格の最小値を保持
        if min_value > R[i]:
            min_value = R[i]

    print(max_value)

# 使用例
maximum_profit()
"
8533375,ALDS1_1_D,"def check_Max_Profit(l):
    min_p , max_p = l[0], -1e9
    for num in l[1:]:
        max_p = num - min_p if num - min_p > max_p else max_p
        min_p = num if num < min_p else min_p
        # print(num, max_p, min_p)
    return max_p
    
N = int(input())
num_list = [int(input()) for _ in range(N)]
max_profit = check_Max_Profit(num_list)
print(max_profit)
"
8533556,ALDS1_1_D,"def main():
    n = int(input())
    min_price = float('inf')
    max_diff = -float('inf')

    for i in range(n):
        r = int(input())
        if r - min_price > max_diff:
            max_diff = r - min_price
        if r < min_price:
            min_price = r

    print(max_diff)

if __name__ == '__main__':
    main()
"
8343241,ALDS1_1_D,"n = int(input())
max_val = -1.0e9
rmin = int(input())
for j in range(1,n):
    rj = int(input())
    max_cand = rj - rmin
    if max_cand > max_val:
        max_val = max_cand
    
    if rj < rmin:
        rmin = rj
    

print(max_val)
"
8401884,ALDS1_1_D,"n = int(input()) - 1
c = int(input())
f = -10 ** 9

for _ in range(n):
    i = int(input())
    if f < i - c: f = i - c
    if c > i: c = i

print(f)
"
8464652,ALDS1_1_D,"import math as ma

n = int(input())

maxv=-1*10**9

minv = int(input())

for j in range( n-1 ):
  
    R=int(input())

    if(maxv < R-minv ):
        maxv = R-minv 

    if (minv > R ):
        minv = R


#for i in range(n):

#    for j in range(i+1,n):

#        if max<(R[j]-R[i]):
#            max=R[j]-R[i]

    
print(maxv)
"
8500269,ALDS1_1_D,"n = int(input())
a = [int(input()) for _ in range(n)]
minv = a[0]
maxv = -1000000000
for j in range(1,n):
    if maxv < a[j] - minv:
        maxv = a[j] - minv
    if minv > a[j]:
        minv = a[j]
print(maxv)
"
8643051,ALDS1_1_D,"N = int(input())
x = - 1<<31
s = int(input())
for _ in range(N - 1):
    r = int(input())
    if r - s > x:
        x = r - s
    if r < s:
        s = r
print(x)
"
8772937,ALDS1_1_D,"def solve():
    N = int(input())
    prices = []
    for _ in range(N):
        prices.append(int(input()))

    if len(prices) == 1:
        return 0

    maxv = -10**9
    minv = prices[0]
    for i in range(1, N):
        price = prices[i]
        maxv = max(maxv, price-minv)
        if price < minv:
            minv = price
    return maxv

if __name__ == ""__main__"":
    print(solve())

"
8928849,ALDS1_1_D,"N=int(input())
r = [int(input()) for i in range(N)]
min=r[0]
max=r[1]-r[0]
for i in range(0,N):
    if max<r[i]-min and i>0:
        #print(""r"",i,""-"",min,""="",r[i]-min)
        max=r[i]-min
    if min>r[i]:
        min=r[i]
        #print(""min="",min)
    
print(max)
"
8959813,ALDS1_1_D,"n = int(input())
P1 = int(input())
P2 = int(input())
profit = P2 - P1
if P1 > P2:
    P1 = P2
for i in range(n-2):
    P2 = int(input())
    if profit < P2 -P1:
        profit = P2 -P1
    if P1 > P2:
        P1 = P2
print(profit)
"
8987238,ALDS1_1_D,"n = int(input())
r = [int(input()) for i in range(n)]
start = r[0]
score = r[1] - r[0]
for i in range(1,n):
    if r[i] - start > score: score = r[i] - start
    if r[i] < start: start = r[i]
print(score)

"
9025955,ALDS1_1_D,"N = int(input())
rate_list = [int(input()) for _ in range(N)]
profit = -10000000000
min = 10000000000
for rate in rate_list:
    tmp = rate - min
    if (tmp > profit):
        profit = tmp
    if (rate < min):
        min = rate
print(profit)
"
9124644,ALDS1_1_D,"import math
n = int(input())
mi = 10 ** 9 + 1
mx = - (10 ** 9) - 1
for i in range(n):
    num = int(input())
    if i == 0:
        mi = num
        continue
    if i == 1:
        mx = num - mi
    if num - mi > mx:
        mx = num - mi
    if mi > num:
        mi = num
print(mx)
    
"
9154810,ALDS1_1_D,"n = int(input())
minimum = 2 * 10 ** 9
gain = -minimum
for value in list(int(input()) for _ in range(n)):
    if value - minimum > gain:
        gain = value - minimum
    if value < minimum:
        minimum = value
print(gain)

"
2663999,ALDS1_1_D,"import sys
i=input
n = int(i())
r0 = int(i())
r1 = int(i())
mx = r1-r0
mn = min(r1,r0)
for i in map(int,sys.stdin.readlines()):
    a=i-mn
    if mx<a:
        mx=a
        if 0>a:mn=i
    elif mn>i:mn=i
print(mx)
"
4679314,ALDS1_1_D,"import sys
max_value = 1e10
min_value = -max_value
input()
for v in map(int, sys.stdin):
    if min_value < v - max_value:
        min_value = v - max_value
    if v < max_value:
        max_value = v
print(min_value)

"
5161907,ALDS1_1_D,"import sys


def main():
    n = int(sys.stdin.buffer.readline())
    ans = -(10**10)
    r = [int(x) for x in sys.stdin.buffer.readlines()]
    t = r[0]
    for x in r[1:]:
        ans = max(x - t, ans)
        if x - t <= 0:
            t = x
    print(ans)


main()

"
8350745,ALDS1_1_D,"n = int(input())

A = []

for i in range(n):
    A.append(int(input()))

a = A[1] - A[0]
b = A[0]

for i in range(1, n):
    if A[i] - b > a:
        a = A[i] - b
    if b > A[i]:
        b = A[i]

print(a)

"
8376738,ALDS1_1_D,"n = int(input())
R = [None] * n

for i in range(n):
  R[i] = int(input())

maxv = -10**9

minv = R[0]

for j in range(1, n):
  if maxv < (R[j] - minv):
    maxv = R[j] - minv
  if minv > R[j]:
    minv = R[j]
    
print(maxv)
"
8424357,ALDS1_1_D,"b=int(input())
min=90000000000000
maxv=-100000000000000
for i in range(b):
    r=int(input())
    if maxv<r-min:
        maxv=r-min
    if r<min:
        min=r
    
print(maxv)
    
    
"
8571598,ALDS1_1_D,"N=int(input())
m=int(input())
minv=m
maxv=-10000000000000
for i in range(N-1):
  s=int(input())
  if maxv<s-minv:
    maxv=s-minv
  if s<minv:
    minv=s
  
print(maxv)
  

"
8616090,ALDS1_1_D,"n = int(input())

min = 0
ans = - (10**9)

for i in range(n):
    num = int(input())

    if i == 0:
        min = num
        continue
    
    if num  - min > ans:
        ans = num - min
    
    if  num < min:
        min = num
print(ans)
"
8760604,ALDS1_1_D,"n = int(input())
R = [int(input()) for _ in range(n)]

j = R[0]
rmin = []
for i in range(0, n):
    if R[i] < j:
        j = R[i]
    rmin.append(j)
t = [R[i] - rmin[i - 1] for i in range(1, n)]
max_profit = max(t)
print(max_profit)

"
8833104,ALDS1_1_D,"times = int(input())
# numbers = []
# for i in range(times):
#     numbers.append(int(input()))

# 過去に出てきた最小のものから、その後に出てきた最大のものをひく

current_num = int(input())
previous_num = 0
smallest_num = current_num
max_gap = -9999999999

for i in range(0, times - 1):
    current_num = int(input())
    smp = current_num - smallest_num
    if smp > max_gap:
        max_gap = smp
    if smallest_num > current_num:
        smallest_num = current_num  


print(max_gap)
"
8855572,ALDS1_1_D,"n = int(input())
ans = -1e10; pre =-ans 
for _ in range(n):
  r = int(input())
  if ans < r - pre:ans = r-pre
  if pre > r:pre = r
print(ans)
"
8875036,ALDS1_1_D,"N = int(input())

R1 = int(input())
R2 = int(input())
maxv = R2 - R1
minv = min(R1,R2)


for j in range(2,N):
  valuej = int(input())
  if (valuej - minv) > maxv:
    maxv = valuej -minv
  if valuej < minv:
    minv = valuej

print(maxv)


"
8936576,ALDS1_1_D,"num = int(input())

risuto = []

maxv = -99999999999999999999999999999999999999

for i in range(num):
    number = int(input())
    risuto.append(number)
    
minv = risuto[0]

for j in range(1, num):
    if maxv < risuto[j] - minv:
        maxv = risuto[j] - minv

    if minv > risuto[j]:
        minv = risuto[j]

        

        
        
        
print(maxv)
    
    
"
8938143,ALDS1_1_D,"N = int(input())

price = int(input())
min_price = price
max_profit = -10e9

for i in range(N-1):
    price = int(input())

    profit = price - min_price
    if profit > max_profit:
        max_profit = profit

    if price < min_price:
        min_price = price

print(max_profit)

"
8973115,ALDS1_1_D,"def max_profit(n, exchange_rates):
    max_profit = float('-inf')
    min_rate = exchange_rates[0]

    for i in range(1, n):
        current_rate = exchange_rates[i]
        profit = current_rate - min_rate
        max_profit = max(max_profit, profit)
        min_rate = min(min_rate, current_rate)

    return max_profit

n = int(input())
exchange_rates = [int(input()) for _ in range(n)]

result = max_profit(n, exchange_rates)
print(result)
"
8979300,ALDS1_1_D,"n=int(input())
min=1000000000000000000
max=-1000000000000000000
lst=[0]*n

for i in range(n):
    x=int(input())
    lst[i]=x
for i in range(n-1):
    if lst[i]<min:
        min=lst[i]
    if lst[i+1]-min>max:
        max=lst[i+1]-min
print(max)
"
9033865,ALDS1_1_D,"def maximumProfit(R):
    maxv = -10**9
    minv = R[0]
    for i in range(1, len(R)):
        maxv = max(maxv, R[i]-minv)
        minv = min(minv, R[i])
    return maxv

n = int(input())
R = [int(input()) for _ in range(n)]
print(maximumProfit(R))
"
9034527,ALDS1_1_D,"n = int(input())
minv = (10 ** 10)
ans = (10 ** 10) * (-1)
for _ in range(n):
    v = int(input())
    if v - minv > ans:
        ans = v - minv
    if minv > v:
        minv = v
print(ans)

"
2712698,ALDS1_1_D,"import sys
  
input()
minv = int(input())
maxv = -1000000000
  
for r in map(int,sys.stdin.readlines()):
  m = r-minv
  if maxv < m: 
    maxv = m
    if m < 0: minv = r
  elif m < 0: minv = r
  
print(maxv)
"
3222998,ALDS1_1_D,"#import sys

#input1 = [6,5,3,1,3,4,3]

#input2 = [3,4,3,2]

# Input Select Flag
#inputselflag = 1

#if inputselflag == 1:
#    inputs = input1[1:]
#elif inputselflag == 2:
#    inputs = input2[1:]
#else:
#    sys.exit()

# Calc
#for i in range(1, len(inputs)-1):
    #print(inputs[i-1])
    #result.append([inputs[i+1] - inputs[i]])
   #for j in range(i+1, len(inputs)):
        #print(inputs[j])
        #print(inputs[i])
        #print('\n')
        #result.append([inputs[j] - inputs[i]])
        #print(result[j-1])

import sys

def main():
    inputs = int(sys.stdin.readline().rstrip())
    maxv = -100000000000
    minv = int(sys.stdin.readline().rstrip())

    # Calc idel
    for i in range(1, inputs):
        compv = int(sys.stdin.readline())
        if compv - minv > maxv:
            maxv = compv - minv
        if compv < minv:
            minv = compv
        

    bigprice = maxv
    print(bigprice)



if __name__ == '__main__':
    main()
"
3428491,ALDS1_1_D,"n,*a=map(int,open(0).read().split())
ans=-99999999999999999999
mini=a[0]
for i in range(n-1):
    if a[i]<mini:
        mini=a[i]
    if a[i+1]-mini>ans:
        ans=a[i+1]-mini
print(ans)
"
4005557,ALDS1_1_D,"import sys
i = sys.stdin
_ = i.readline()
x = int(i.readline())
y = int(i.readline())
v = y-x
m = x if y>x else y

for s in map(int, sys.stdin):
    if s-m > v: v = s-m
    elif s < m: m = s

print(v)
"
8296466,ALDS1_1_D,"n = int(input())
Rt = []
for inp in range(n):
    Rt.append(int(input()))
minv = Rt[0]
maxv = Rt[1] - minv

for j in range(1, n):
    if Rt[j] - minv > maxv:
        maxv = Rt[j] - minv
    elif Rt[j] < minv:
        minv = Rt[j]

print(maxv)
"
8348152,ALDS1_1_D,"import sys


def main():
    n = int(input())

    min_ever = int(input())
    max_profit = -sys.maxsize

    for _ in range(n - 1):
        Rt = int(input())
        max_profit = max(Rt - min_ever, max_profit)

        min_ever = min(Rt, min_ever)

    print(max_profit)


if __name__ == ""__main__"":
    main()

"
8447585,ALDS1_1_D,"n = int(input())
R_list = []
for i in range(n):
    R_list.append(int(input()))

minv = R_list[0]
maxv = -100000000000000000000000000000000000000000
for j in range(1,n):
    if maxv <= R_list[j]-minv:
        maxv = R_list[j]-minv
    elif maxv > R_list[j]-minv:
        maxv = maxv
    if minv <= R_list[j]:
        minv = minv
    elif minv > R_list[j]:
        minv = R_list[j]
    #print(maxv)
    #print(minv)
print(maxv)
"
8482882,ALDS1_1_D,"n = int(input())
lst = []

for i in range(n):
  lst.append(int(input()))

max = -1000000000
min = lst[0]
for i in range(1, n, 1):
  if max < lst[i] - min:
    max = lst[i] - min
  if min > lst[i]:
    min = lst[i]

print(max)
"
8600992,ALDS1_1_D,"N = int(input())
R = [int(input()) for _ in range(N)]

minv = R[0]
maxv = -10**9

for j in range(1, N):
    maxv = max(maxv, R[j] - minv)
    minv = min(minv, R[j])

print(maxv)
"
8909802,ALDS1_1_D,"n = int(input())
z=[]
for i in range(n):
  a = int(input())
  z.append(a)
minv = 1000000000000
maxv = -100000000000
for j in range(n):
  x = z[j] - minv
  if x > maxv:
    maxv = x
  if z[j] < minv:
    minv = z[j]
print(maxv)
"
8914750,ALDS1_1_D,"n=int(input())
R=[int(input()) for _ in range(n)]
minv=10**10
max_diff=-10**10
for i in R:
    max_diff=max(max_diff, i-minv)
    if i<minv:
        minv=i
print(max_diff)
"
8922920,ALDS1_1_D,"n = int(input())

r = []
for i in range(n):
    r.append(int(input()))

minv = r[0]
maxv = r[1] - r[0]
for j in range(1, n):
    if maxv < r[j]-minv:
        maxv = r[j]-minv
    if minv > r[j]:
        minv = r[j]

print(maxv)

"
8937300,ALDS1_1_D,"n = int(input())

lis = []
for _ in range(n):
    a = int(input())
    lis.append(a)

m = lis[1] - lis[0]
l = min(lis[0], lis[1])

for i in range(2, n):
    diff = lis[i] - l

    if diff > m:
        m = diff

    if lis[i] < l:
        l = lis[i]

print(m)
"
8966633,ALDS1_1_D,"n = int(input())
list_price = [int(input()) for _ in range(n)]

revenue = - 2 << 60
min_price_at_the_moment = 2 << 60

for price in list_price:
    revenue = max(revenue, price - min_price_at_the_moment)
    min_price_at_the_moment = min(price, min_price_at_the_moment)

print(revenue)
"
9006945,ALDS1_1_D,"n = int(input())
r = [int(input()) for _ in range(n)]

max_p = r[1] - r[0]
min_value = min(r[1], r[0])

for i in range(2, n):
    if r[i-1] < min_value:
        min_value = r[i-1]
    max_p = max(max_p, r[i] - min_value)

print(max_p)
"
9023931,ALDS1_1_D,"def main():
  n = int(input())
  r = [int(input()) for _ in range(n)]

  minv = r[0]
  maxv = -10 ** 10
  for i in range(1, n):
    maxv = max(maxv, r[i] - minv)
    minv = min(minv, r[i])

  print(maxv)

if __name__ == '__main__':
  main()

"
9065058,ALDS1_1_D,"# ある通貨について、時刻 t における価格 Rt (t=0,1,2,,,n−1)が入力として与えられるので、価格の差 Rj−Ri (ただし、j>i とする) の最大値を求めてください。

n = int(input())
dif = None
for i in range(n):
  a = int(input())
  if i == 0:
    min = a
  elif i == 1:
    dif = a - min
    if a < min:
      min = a
  else:
    subDif = a - min
    if subDif > dif:
      dif = subDif
    if a < min:
      min = a

print(dif)
"
9156973,ALDS1_1_D,"n = int(input())
li = []          
for _ in range(n):
    li.append(int(input()))

tmp_low = float('inf')
max_diff = float('-inf')
for i in range(n - 1):
    if li[i] < tmp_low:     
        tmp_low = li[i]
        tmp_diff = li[i + 1] - li[i]
    else:
        tmp_diff = li[i + 1] - tmp_low
    if tmp_diff > max_diff:
        max_diff = tmp_diff
print(max_diff)
"
2839424,ALDS1_1_D,"import sys

count=int(input())
input_list=[ int(i) for i in sys.stdin.readlines() ]

first=0
second=1
maxv=-1000000000
minv=input_list[first]

for i in input_list[second:]:
    if i-minv > maxv:
        maxv=i-minv
    if i < minv:
        minv=i

print(maxv)
"
8243959,ALDS1_2_A,"N = int(input())
L = list(map(int,input().split()))
count = 0
for n in range(N):
    while n > 0 and L[n] < L[n-1]:
        L[n],L[n-1] = L[n-1],L[n]
        count += 1
        n -= 1

L = list(map(str,L))        
print(' '.join(L))
print(count)
        
"
8253620,ALDS1_2_A,"def bubblesort(n,A):
    v = 0
    a = 1
    while a != 0:
        a = 0
        for i in range(n-1):
            if A[i] > A[i+1]:
                x = A[i]
                A[i] = A[i+1]
                A[i+1] = x
                v += 1
                a += 1
            else :
                pass
    A = map(str,A)
    print("" "".join(A))
    print(v)

n = int(input())
A = list(map(int,input().split()))
bubblesort(n,A)
"
8255773,ALDS1_2_A,"num=int(input())
sort_list=list(map(int,input().split("" "")))
flag=True
i=0
s=0
while flag:
    flag=False
    #jは右側
    for j in range(num-1,i,-1):
        if sort_list[j]<sort_list[j-1]:
            sort_list[j],sort_list[j-1]=sort_list[j-1],sort_list[j]
            flag=True
            s+=1
    i+=1

print(*sort_list,sep=' ')
print(s)
"
8272407,ALDS1_2_A,"n = int(input())
data = [int(s) for s in input().split()]
count = 0
for i in range(n):
    for j in range(n - i - 1):
        if data[j+1] < data[j]:
            data[j], data[j+1] = data[j+1], data[j]
            count += 1
print(*data)
print(count)
"
8289535,ALDS1_2_A,"n = int(input())
l = list(map(int,input().split()))

cnt = 0
for i in range(n):
    for j in reversed(range(1, n)):
        if l[j] < l[j-1]:
            a = l[j-1]
            b = l[j]
            l[j-1] = b
            l[j] = a
            cnt += 1

print(*l)
print(cnt)
"
8296511,ALDS1_2_A,"n = int(input())
A = list(map(int, input().split()))

flag = 1
count = 0

while flag == 1:
    flag = 0
    for i in range(1, n):
        if A[i-1] > A[i]:
            A[i-1], A[i] = A[i], A[i-1]
            flag = 1
            count += 1

for j in range(n):
    if j < n-1:
        print(f""{A[j]} "", end="""")
    else:
        print(A[j])

print(count)
"
8327033,ALDS1_2_A,"n = int(input())
A = list(map(int, input().split()))
flag = 1
cnt = 0
while flag:
	flag = 0
	for i in range(n-1, 0, -1):
		if A[i]<A[i-1]:
			A[i], A[i-1] = A[i-1], A[i]
			cnt += 1
			flag = 1
print(*A); print(cnt)
"
8339111,ALDS1_2_A,"n = int(input())
numbers = list(map(int, input().split()))  # 空白区切りの数字を読み込んでリストに変換

def bubble_sort(list, n):
    count = 0
    flag = 1
    while flag:
        flag = 0
        for j in range(n-1, 0, -1):
            if list[j] < list[j-1]:
                list[j], list[j-1] = list[j-1], list[j]
                flag = 1
                count += 1
    print("" "".join(map(str, list)))
    print(count)

bubble_sort(numbers, n)
"
8340355,ALDS1_2_A,"def bubbleSort(A, n):
    cnt = 0
    flag = 1
    while flag:
        flag = 0
        for j in range(n-1,0,-1):
            if A[j] < A[j-1]:
                cnt += 1
                A[j],A[j-1] = A[j-1],A[j]
                flag = 1
    print(*A)
    print(cnt)

n = int(input())
A = list(map(int,input().split()))
bubbleSort(A,n)

"
8345209,ALDS1_2_A,"N=int(input())
A=list(map(int,input().split()))


def bubbleSort(B:list,X:int):
    change_count=0
    flag=1 #逆の隣接要素が存在する
    while flag:
        flag=0
        for j in range(N-1,0,-1):
            if(B[j]<B[j-1]):
                tmp=B[j]
                B[j]=B[j-1]
                B[j-1]=tmp
                flag=1
                change_count+=1
    
    return B,change_count

reA,count=bubbleSort(A,N)

# for i in range(N):
#     if(i<N-1):
#         print('{} '.format(reA[i]),end="""")
#     else:
#         print(reA[i])
output=' '.join(map(str,reA))
print(output)
print(count)
"
8348285,ALDS1_2_A,"def bubblesort(a,n):
    flag=1
    i=0
    count=0
    while flag:
        flag=0
        for j in range(n-1,i,-1):
            if a[j]<a[j-1]:
                temp=a[j-1]
                a[j-1]=a[j]
                a[j]=temp
                count+=1
                flag=1
        i+=1
    for k in range(len(a)):
        if k==len(a)-1:
            print(a[k])
        else:
            print(a[k],end="" "")            
    print(count)

n=int(input())
a=list(map(int,input().split()))
bubblesort(a,n)

"
8350820,ALDS1_2_A,"def bubble(A, n):
    count = 0
    for i in range(n):
        for j in range(n - 1):
            if A[j] > A[j + 1]:
                A[j], A[j + 1] = A[j + 1], A[j]
                count += 1
    print(*A)
    print(count)

n = int(input())
A = list(map(int, input().split()))
bubble(A, n)
"
8369946,ALDS1_2_A,"N = int(input())
A = list(map(int,input().split()))

def BubbleSort(N,A):
    flag = 1
    i = 0
    count = 0

    while flag:
        flag = 0
        for j in reversed(range(i+1,N)):#降順(大きい値から小さくなる順)
            if A[j] < A[j-1]:
                A[j],A[j-1] = A[j-1],A[j]
                flag = 1
                count += 1
        i+=1

    return count

count = BubbleSort(N,A)
print(*A)
print(count)
"
8387792,ALDS1_2_A,"N = int(input())
A = [*map(int, input().split())]

inv = 0
for i in range(N):
  for j in reversed(range(i+1, N)):
    if A[j] < A[j-1]:
      A[j-1], A[j] = A[j], A[j-1]
      inv += 1
print(*A)
print(inv)

"
8399263,ALDS1_2_A,"def bubbleSort(A,N):
    flag = True
    cnt = 0
    while flag:
        flag = False
        for j in range(N-1,0,-1):
            if A[j] < A[j-1]:
                temp = A[j]
                A[j] = A[j-1]
                A[j-1] = temp
                flag = True
                cnt += 1 
    return A,cnt
    
N = int(input())
A = list(map(int, input().split()))

A_sort, cnt = bubbleSort(A,N)

for i in range(N):
    if i != N-1:
        print(A[i], end = ' ')
    else:
        print(A[i])

print(cnt)
"
8402279,ALDS1_2_A,"n = int(input()) - 1
a = [int(s) for s in input().split()]
cnt = 0

for i in range(n):
    for j in range(n, i, -1):
        if a[j] < a[j - 1]:
            a[j], a[j - 1] = a[j - 1], a[j]
            cnt += 1

print(*a)
print(cnt)
"
8403987,ALDS1_2_A,"N = int(input()) # 要素数
x = [None] * N

s = input()
x0 = s.split(' ')
for i in range(N):
  x[i] = int(x0[i])

cnt = 0
flag = 1
while flag:
  flag = 0
  for j in range(N - 1, 0, -1):
    if x[j] < x[j - 1]:
      x[j], x[j - 1] = x[j - 1], x[j]
      flag = 1
      cnt += 1



for i in range(N):
  if i < N - 1:
    print(x[i], end = ' ')
  else:
    print(x[i])

print(cnt)
"
8404107,ALDS1_2_A,"def buble_sort(n, a):
    flag = True
    counter = 0

    while flag:
        flag = False
        for i in range(n-1, 0, -1):
            if a[i] < a[i - 1]:
                temp = a[i]
                a[i] = a[i - 1]
                a[i - 1] = temp
                flag = True
                counter += 1
    return(a, counter)

n = int(input())
a_init = list(map(int, input().split()))

a, counter = buble_sort(n, a_init)
print(*a)
print(counter)

"
8404381,ALDS1_2_A,"def bubbleSort(A, N): # N個の要素を含む 0-オリジンの配列 A
    flag = 1
    count = 0
    while flag:
        flag = 0
        for j in range(1, N):
            if A[j] < A[j-1]:
                a = A[j]
                A[j] = A[j-1]
                A[j-1] = a
                flag = 1
                count += 1
    return A, count
    
N = int(input())
A = [int(x) for x in input().split()]
A_sort, count = bubbleSort(A, N)
print(' '.join(map(str, A_sort)))
print(count)
"
8405475,ALDS1_2_A,"N = int(input()) #要素数
L = input().split(' ')
for i in range(N):
    L[i] = int(L[i])
    
flag = 1
cnt = 0
while flag:
    flag = 0
    for j in range(N-1,0,-1):
        if L[j] < L[j-1]:
            L[j], L[j-1] = L[j-1], L[j]
            flag = 1
            cnt += 1
            
s = ''
for i in range(len(L)):
    if(i == 0):
        s += str(L[i])
    else:
        s += (' ' + str(L[i]))
print(s)
print(cnt)
"
8407244,ALDS1_2_A,"def bubbleSort(array , n) -> int:
    swap_count = 0
    flag = 1
    while flag:
        flag = 0
        for j in range(n-1):
            if array[j] > array[j+1]:
                array[j], array[j+1] = array[j+1], array[j] #swap
                # tmp = array[j]
                # array[j] = array[j+1]
                # array[j+1] = tmp
                flag = 1
                swap_count += 1
    return swap_count

n = int(input())
array = list(map(int, input().split()))

swap_count = bubbleSort(array,n)
print(*array)
print(swap_count)
"
8422414,ALDS1_2_A,"# ALDS1_2_A
def bubble_sort(A,N):
    flag = 1
    cnt = 0 # 要素の交換が行われた回数
    while flag:
        flag = 0
        for j in range(N-1):
            j = N-1-j # 逆順なので j = N-1-j 
            if A[j] < A[j-1]:
                # A[j]とA[j-1]の交換
                tmp = A[j]
                A[j] = A[j-1]
                A[j-1] = tmp
                flag = 1
                cnt += 1
                
    return cnt
                
N = int(input())
A = list(map(int,input().split("" "")))

swap_cnt = bubble_sort(A,N)
print(*A)
print(swap_cnt)
"
8429111,ALDS1_2_A,"import sys

input = sys.stdin.readline

def print_list(array):
    print("" "".join(map(str, array)))




def bubble_sort(n, array):
    flag = 1
    count = 0
    while flag:
        flag = 0
        for j in reversed(range(1,n)):
            if array[j - 1] > array[j]:
                array[j], array[j-1] = array[j-1], array[j]
                count += 1
                flag = 1
    
    return count

def main():
    n = int(input())
    array = list(map(int, input().split()))
    
    count = bubble_sort(n, array)
    
    # sorted list
    print_list(array)
    
    # swap count
    print(count)
    

if __name__ == ""__main__"":
    main()
"
8447771,ALDS1_2_A,"def bubbleSort(A,N):
    
    n = 0
    for i in range(N):
        flag = 0
        for j in range(N-1, 0, -1):
            if A[j] < A[j-1]:
                a = A[j]
                b = A[j-1]
                A[j] = b
                A[j-1] = a
                flag = 1
                n += 1
        if flag == 0:
            break

    print(*A)
    print(n)

N = int(input())

A = list(map(int, input().split()))
bubbleSort(A,N)
"
8456833,ALDS1_2_A,"n = int(input())
a = []
a = list(map(int, input().split()))

flag = 1
change_count = 0
while flag:
    flag = 0
    for j in range(n - 1, 0, -1):
        if a[j] < a[j - 1]:
            tmp = a[j]
            a[j] = a[j - 1]
            a[j - 1] = tmp
            change_count += 1
            flag = 1

for i in range(n):
     if i != 0:
         print("" "",end="""")
     print(a[i], end="""")
print()
print(change_count)

"
8459245,ALDS1_2_A,"def bubble_sort(A,N):
    count = 0
    for i in range(1,N):
        j = i
        while j>0 and A[j-1]>A[j]:
            A[j-1],A[j] = A[j],A[j-1]
            j-=1
            count+=1
    print(*A)
    print(count)
n = int(input())
A = list(map(int,input().split()))
bubble_sort(A,n)
"
8464687,ALDS1_2_A,"n = int(input())
x = list( map( int , input().split() ) )

flag = 1
sum=0

while flag:
    flag = 0

    for j in range(n-1,0,-1):

        if x[j]<x[j-1]:
            x[j],x[j-1]=x[j-1],x[j]
            sum+=1
            flag = 1
        
    
print(*x)
print(sum)
"
8475802,ALDS1_2_A,"def bubble_sort(A,n):
    flag=1
    j=0
    sum=0
    while flag:
        flag=0
        for i in reversed(range(j+1,n)):
            if A[i]<A[i-1]:
                A[i],A[i-1]=A[i-1],A[i]
                flag=1
                sum+=1
        j+=1
    return sum

n=int(input())
L=[int(i) for i in input().split()]
sum=bubble_sort(L,n)
print(*L)
print(sum)
"
8483538,ALDS1_2_A,"def bubblesort(A,N):
    ans = 0
    for i in range (N):
        for j in range(N-1):
            if A[j+1]<A[j]:
                A[j],A[j+1]=A[j+1],A[j]
                ans+=1
    print(*A)
    print(ans)
N = int(input())
A = list(map(int,input().split()))
bubblesort(A,N)
"
8483551,ALDS1_2_A,"def bubblesort(A,N):
    ans = 0
    for i in range (N):
        for j in range(N-1):
            if A[j+1]<A[j]:
                A[j],A[j+1]=A[j+1],A[j]
                ans+=1
    print(*A)
    print(ans)
    
N = int(input())
A = list(map(int,input().split()))
bubblesort(A,N)
"
8486051,ALDS1_2_A,"def bubbleSort(A):
    N=len(A)
    count=0
    flag=True
    while flag:
        flag=False
        for j in reversed(range(1,N)):
            if A[j]<A[j-1]:
                A[j],A[j-1]=A[j-1],A[j]
                count+=1
                flag=True
    return count
    
N=int(input())
A=list(map(int,input().split()))
c=bubbleSort(A)
print(*A)
print(c)

"
8492146,ALDS1_2_A,"def swap(a, i, j):
    # list aのi番目の要素とj番目の要素を交換する関数
    k = a[j]
    a[j] = a[i]
    a[i] = k

def bubbleSort(a, n):
    sw = 0
    flag = 1
    while flag:
        flag = 0
        for j in range(n-1, 0, -1):
            if a[j] < a[j-1]:
                swap(a, j-1, j)
                flag = 1
                sw += 1
    print(' '.join(list(map(str,a))))
    print(sw)

n = int(input())
a = list(map(int, input().split()))
bubbleSort(a, n)
"
8508533,ALDS1_2_A,"N = int(input())
A = list(map(int, input().split()))

flag = 1
swap_count = 0  # 交換回数をカウントする変数

while flag:
    flag = 0
    for j in range(N-1, 0, -1):  # 最後から先頭に向かってループ
        if A[j] < A[j-1]:
            A[j], A[j-1] = A[j-1], A[j]
            swap_count += 1  # 交換が行われたのでカウントを増やす
            flag = 1

print("" "".join(map(str, A)))
print(swap_count)

"
8532856,ALDS1_2_A,"n = int(input())
l = list(map(int, input().split()))

a = 0
c = 0
while a < n:
    i = n - 1
    j = n - 2
    while j >= 0:
        if l[j] > l[i]:
            t = l[i]
            l[i] = l[j]
            l[j] = t
            c += 1
        i -= 1
        j -= 1
    a += 1

print(*l)
print(c)
"
8533554,ALDS1_2_A,"def show_list(A):
    for i, num in enumerate(A):
        if i != len(A)-1:
            print(num, end="" "")
        else:
            print(num)

def BubbleSort(N, l):
    ans = 0
    idx = 0  # 未ソート部分の先頭インデックス
    flag = True
    while flag:
        flag = False
        for i in range(N - 1, idx, -1):
            if l[i] < l[i - 1]:
                l[i - 1], l[i] = l[i], l[i - 1]
                ans += 1
                flag = True
        idx += 1
    show_list(l)
    print(ans)
N = int(input())
num_list = list(map(int, input().split()))
BubbleSort(N, num_list)
"
8533626,ALDS1_2_A,"def bubble_sort(A, N):
    flag = 1
    counter = 0
    while flag:
          flag = 0
          for j in range(N-1, 0, -1):
               if A[j] < A[j-1]:
                    counter += 1
                    dummy = A[j]
                    A[j] = A[j-1]
                    A[j-1] = dummy
                    flag = 1
    return A, counter 

def main():
      n = int(input())
      A = list(map(int, input().split(' ')))

      ans, count = bubble_sort(A, n)
      print(' '.join(list(map(str, ans))))
      print(count)


    

if __name__ == '__main__':
    main()
"
8561662,ALDS1_2_A,"N = int(input())
a_list = list(map(int, input().split()))

flag = True
count = 0
while flag:
    flag = False
    for i in range(N - 1, 0, -1):
        if a_list[i] < a_list[i - 1]:
            tmp = a_list[i]
            a_list[i] = a_list[i - 1]
            a_list[i - 1] = tmp
            flag = True
            count = count + 1

print(*a_list)
print(count)

"
8572864,ALDS1_2_A,"N=int(input())
s=list(input().split())
count=0
for i in range(N):
  s[i]=int(s[i])
flag=1
while flag:
  flag=0
  for i in range(N-1):
    if s[i]>s[i+1]:
      t=s[i]
      s[i]=s[i+1]
      s[i+1]=t
      flag=1
      count+=1
for i in range(N):
  if i!=N-1:
    print(s[i], end=' ')
  else:
    print(s[i])
print(count)

"
8573074,ALDS1_2_A,"N = int(input())
A = list(map(int, input().split()))

flag = 1
cnt = 0
while flag:
    flag = 0
    for j in range(N-1):
        j = N-1-j
        if A[j]<A[j-1]:
            tmp = A[j-1]
            A[j-1] = A[j]
            A[j] = tmp
            flag = 1
            cnt += 1
print(*A)
print(cnt)
"
8576573,ALDS1_2_A,"n = int(input())
lis = list(map(int, input().split()))
count = 0
for i in range(n-1):
    for j in range(n-1,i,-1):
        if lis[j] < lis[j-1]:
            lis[j-1], lis[j] = lis[j], lis[j-1]
            count += 1
print("" "".join(map(str,lis)))
print(count)

"
8580366,ALDS1_2_A,"n = int(input())
numbers = list(map(int, input().split()))

count = 0
flag = 0

while(1):
    flag = 0

    for i in range(n - 1):
        if(numbers[i] > numbers[i + 1]):

            numbers[i], numbers[i + 1] = numbers[i + 1], numbers[i]

            count += 1
            flag = 1

    if(flag == 0):
        break

print(*numbers)
print(count)
"
8589269,ALDS1_2_A,"n = int(input())
a = list(map(int, input().split()))
flag = 1
num = 0
while (flag):
    flag = 0
    for j in reversed(range(1, n)):
        if a[j] < a[j-1]:
            tmp = a[j]
            a[j] = a[j-1]
            a[j-1] = tmp
            num+=1
            flag = 1
print(*a)
print(num)
"
8592667,ALDS1_2_A,"n = int(input())
A = list(map(int, input().split()))
cnt = 0
for i in range(n):
  for j in reversed(range(i+1, n)):
    v = A[j]
    if A[j-1] > v:
      cnt += 1
      A[j] = A[j-1]
      A[j-1] = v
print(*A)
print(cnt)
"
8597299,ALDS1_2_A,"n = int(input())
a = []
cnt = 0
a =list(map(int, input().split()))
for i in range(n-2,-1,-1):
    for j in range(0,i+1):
        if (int(a[j]) > int(a[j+1])):
            tmp = a[j]
            a[j] = a[j+1]
            a[j+1] = tmp
            cnt = cnt + 1
for i in range(n-1):
    print(a[i],end="" "")
print(a[n-1])
print (cnt)
"
8611538,ALDS1_2_A,"n = int(input())
al = list(map(int, input().split()))

def bubble_sort(al, n):
    cnt = 0
    flag = 1
    while flag:
        flag = 0
        for j in range(n - 1, 0, -1):
            if al[j] < al[j - 1]:
                al[j], al[j - 1] = al[j - 1], al[j]
                cnt += 1
                flag = 1
    return al, cnt

al, cnt = bubble_sort(al, n)
print(*al)
print(cnt)

"
8617384,ALDS1_2_A,"def bubbleSort(A, N):
    flg = 1
    change = 0
    while flg == 1:
        flg = 0
        for j in reversed(range(1 ,N)):
            if A[j] < A[j-1]:
                tmp = A[j]
                A[j] = A[j-1]
                A[j-1] = tmp
                flg = 1
                change += 1
    return {
        ""arr"" : A, 
        ""excahnge"" : change,
    }

n = int(input())
a =  [int(i) for i in input().split(' ')]

ans = bubbleSort(a, n)
print (' '.join([str(i) for i in ans['arr']]))
print(ans['excahnge'])
"
8617506,ALDS1_2_A,"N = int(input())
A = [*map(int,input().split())]

na = 0
for i in range(N-1):
    for j in range(N-1, i, -1):
        if A[j-1] > A[j] :
            A[j], A[j-1] = A[j-1], A[j]
            na += 1

print(*A)
print(na)
"
8622460,ALDS1_2_A,"#読み込み
n = int(input())
lis = list(map(int, input().split()))

#Sort
swap_count = 0
for i in range(n-1):
    for j in range(n-1,i,-1):
        if lis[j] < lis[j-1]:
            lis[j-1], lis[j] = lis[j], lis[j-1]
            swap_count += 1

#出力
print("" "".join(map(str,lis)))
print(swap_count)

"
8629090,ALDS1_2_A,"def PrintFormat(A:list[int]):
    print(A[0], end="""")
    for i in range(1,len(A)):
        print("" ""+str(A[i]),end="""")
    print()

def BubbleSort(A:list[int]):
    count = 0
    N = len(A)
    for i in range(0,N):
        for j in range(N-1,i,-1):
            if A[j] < A[j-1]:
                A[j], A[j-1] = A[j-1], A[j]
                count += 1
    PrintFormat(A)
    print(count)

Length = input()
Array = input()
a = list(map(int,Array.split()))
BubbleSort(a)
"
8631086,ALDS1_2_A,"def bubble_sort(arr):
    n = len(arr)
    count = 0
    for i in range(n):
        swapped = False
        for j in range(0, n-i-1):
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]
                count += 1
                swapped = True
        if not swapped:
            break
    return arr, count
input_NUM = list(map(int, input().split()))
input_array = list(map(int, input().split()))

sorted_array, swaps = bubble_sort(input_array)
print("" "".join(map(str, sorted_array)))
print(swaps)


"
8645652,ALDS1_2_A,"N = int(input())
l = list(map(int, input().split()))
c = 0
for i in range(N):
    j = len(l) - 1
    while j >= i + 1:
        if l[j] < l[j - 1]:
            l[j], l[j - 1] = l[j - 1], l[j]
            c += 1
        j -= 1
print("" "".join(map(str, l)))
print(c)
"
8667209,ALDS1_2_A,"n = int(input())
a = list(map(int,input().split()))
count = 0

flag = 1

while flag:
    flag = 0
    for i in reversed(range(1,n)):
        if a[i] < a[i - 1]:
            a[i],a[i - 1] = a[i - 1],a[i]
            count += 1
            flag = 1
print(*a)
print(count)
"
8674949,ALDS1_2_A,"n = int(input())
arr = list(map(int, input().split()))
count = 0

for i in range(len(arr)-1):
    for j in range(len(arr)-1, i, -1):
        if arr[j] < arr[j-1]:
            arr[j], arr[j-1] = arr[j-1], arr[j]
            count += 1
            
print(*arr)
print(count)
"
8685247,ALDS1_2_A,"N = int(input())
A = list(map(int, input().split()))
flag = 1
count = 0
while flag:
    flag = 0
    for j in range(N-1,0,-1):
        if A[j] < A[j-1]:
            A[j],A[j-1] = A[j-1],A[j]
            flag = 1
            count += 1
print(*A)
print(count)
"
8689093,ALDS1_2_A,"import sys

N = int(input())

A = list(map(int,input().split()))

ans = 0
for i in range(len(A)-1,0,-1):
    k = 0
    while k < i:
        if A[k] > A[k+1]:
            tmp = A[k]
            A[k] = A[k+1]
            A[k+1] = tmp
            ans += 1
        k += 1

print(' '.join(map(str,A)))
print(ans)


"
8689523,ALDS1_2_A,"n = int(input())
a = list(map(int,input().split()))
count = 0
flag = True
while flag:
    flag = False
    for j in range(n-1,0,-1):
        if a[j] < a[j-1]:
            a[j],a[j-1] = a[j-1],a[j]
            count += 1
            flag = True

print(*a)
print(count)

"
8702709,ALDS1_2_A,"N = int(input())
A = list(map(int,input().split()))


count = 0

def buble_sort(A,N,count):
  for i in range(len(A)):
    for j in range(len(A)-i-1):
      if A[j] > A[j+1]:
        A[j], A[j+1] = A[j+1], A[j]
        count = count + 1
  
  return count


count = buble_sort(A,N,count)

output = ' '.join(str(x) for x in A)
print(output)
print(count)
  

"
8709215,ALDS1_2_A,"n = int(input())
a = list(map(int, input().split()))

cnt = 0

is_sorted = False
while not is_sorted:
    is_sorted = True
    for i in range(len(a) - 1):
        if a[i] > a[i + 1]:
            a[i], a[i + 1] = a[i + 1], a[i]
            is_sorted = False
            cnt += 1

print(*a)
print(cnt)
"
8733244,ALDS1_2_A,"def bubble_sort(list):
    flag = True
    count_swap = 0
    while flag:
        flag = False
        for j in range(len(list)-1, 0, -1):
            if list[j] < list[j-1]:
                list[j], list[j-1] = list[j-1], list[j]
                count_swap += 1
                flag = True
    return list, count_swap

length = int(input())
array = list(map(int, input().split()))
sorted_array, swap_count = bubble_sort(array)
print(*sorted_array)
print(swap_count)
"
8743893,ALDS1_2_A,"# aizu_ ALDS1_2_A_BubbleSort.py  バブルソート

N = int(input())
A = list(map(int,input().split()))

def bubblesort(A,N):
    flag = 1
    cnt = 0
    while flag:
        flag = 0
        for j in range(N-1,0,-1):
            if A[j] < A[j-1]:
                cnt += 1
                A[j],A[j-1] = A[j-1],A[j]
                flag = 1
    return A,cnt

result,cnt = bubblesort(A,N) 
print(*result)
print( cnt )

"
8243850,ALDS1_2_B,"def selectionsort(A,N):
    ans =0
    for i in range(N-1):
        minj = i
        for j in range(i,N):
            if A[j]<A[minj]:
                minj = j
        if i != minj:
            A[i],A[minj]=A[minj],A[i]
            ans += 1
    print(*A)
    print(ans)
N = int(input())
A = list(map(int,input().split()))
selectionsort(A,N)

"
8257143,ALDS1_2_B,"num=int(input())
sort_list=list(map(int,input().split("" "")))
change=0
#i番目の数を決める
for i in range(0,num-1):
    #そのターンの最小値
    minj=i
    #iからjの中の最小値を決定する
    for j in range(i,num):
        if sort_list[j]<sort_list[minj]:
            minj=j
    if minj!=i:
        sort_list[i],sort_list[minj]=sort_list[minj],sort_list[i]
        change+=1



print(*sort_list,sep=' ')
print(change)
"
8270319,ALDS1_2_B,"def selection(A,N):
    k = 0
    for i in range(N):
        minj = i
        for j in range(i,N):
            if A[j] < A[minj]:
                minj = j
        if A[i] != A[minj]:
            k += 1
            A[i],A[minj] = A[minj],A[i]
    x = map(str,A)
    print("" "".join(x))
    print(k)

n = int(input())
x = list(map(int,input().split()))
selection(x,n)
"
8272499,ALDS1_2_B,"n = int(input())
data = [int(s) for s in input().split()]
count = 0
for i in range(n - 1):
    min_i = i
    for j in range(i + 1, n):
        if data[j] < data[min_i]:
            min_i = j
    if min_i != i:
        data[i], data[min_i] = data[min_i], data[i]
        count += 1
print(*data)
print(count)
"
8296534,ALDS1_2_B,"n = int(input())
A = list(map(int, input(). split()))

count = 0

for i in range(n):
    minj = i
    for j in range(i, n):
        if A[j] < A[minj]:
            minj = j
    if A[i] != A[minj]:
        A[i], A[minj] = A[minj], A[i]
        count += 1

for k in range(n):
    if k < n-1:
        print(f""{A[k]} "", end = """")
    else:
        print(A[k])
print(count)
"
8340372,ALDS1_2_B,"def selectionSort(A, N):
    cnt = 0
    for i in range(N):
        minj = i
        for j in range(i,N):
            if A[j] < A[minj]:
                minj = j
        if i!=minj:
            A[i],A[minj] = A[minj],A[i]
            cnt += 1
        
    print(*A)
    print(cnt)


N = int(input())
A = list(map(int,input().split()))
selectionSort(A,N)

"
8345267,ALDS1_2_B,"N=int(input())
A=list(map(int,input().split()))

def selectionSort(B:list,X:int):
    change_count=0
    for i in range(X):
        minj=i
        for j in range(i,X):
            if(B[j]<B[minj]):
                minj=j
        if(i!=minj):
            tmp=B[minj]
            B[minj]=B[i]
            B[i]=tmp
            change_count+=1
        # # debug
        # out=' '.join(map(str,B))
        # print(out)
        # # debug
    return B,change_count

reA,count=selectionSort(A,N)
output=' '.join(map(str,reA))
print(output)
print(count)
"
8350892,ALDS1_2_B,"def selectionSort(A, n):
    count = 0
    for i in range(n):
        mini = i
        for j in range(i + 1, n):
            if A[j] < A[mini]:
                mini = j
        if i != mini:
            A[i], A[mini] = A[mini], A[i]
            count += 1
    
    print(*A)
    print(count)


n = int(input())

A = list(map(int, input().split()))

selectionSort(A,n)
"
8351677,ALDS1_2_B,"def selectsort(a,n):
    count=0
    for i in range(n):
        minj=i
        
        for j in range(i,n):
            if a[j]<a[minj]:
                minj=j
        
        if a[i]>a[minj]:
            tmp=a[i]
            a[i]=a[minj]
            a[minj]=tmp
            count+=1

    for _ in range(n):
        if _==n-1:
            print(a[_])
        else:
            print(a[_],end="" "")
    print(count)

n=int(input())
a=list(map(int,input().split()))
selectsort(a,n)
"
8369954,ALDS1_2_B,"N = int(input())
A = list(map(int,input().split()))

def SelecitonSort(N,A):
    count = 0
    for i in range(N):
        minj = i
        for j in range(i,N):
            if A[j] < A[minj]:
                minj = j
        A[i],A[minj] = A[minj],A[i]
        
        if i != minj:#重複を除いてカウント
            count+=1
    
    return count

count = SelecitonSort(N,A)
print(*A)
print(count)
"
8387898,ALDS1_2_B,"N = int(input())
A = [*map(int, input().split())]

count = 0
for i in range(N-1):
  j_min = A.index(min(A[i:]), i)
  if A[i] > A[j_min]:
    A[i], A[j_min] = A[j_min], A[i]
    count += 1
print(*A)
print(count)

"
8401548,ALDS1_2_B,"def SelectionSort(A,N):
    cnt = 0
    for i in range(N):
        mini = i
        for j in range(i,N):
            if A[j] < A[mini]:
                mini = j
                
        A[i], A[mini] = A[mini], A[i]
        if i != mini:
            cnt += 1
        
    return A,cnt
    
N = int(input())
A = list(map(int, input().split()))

ans, cnt = SelectionSort(A,N)
for i in range(N):
    if i != N-1:
        print(ans[i], end="" "")
    else:
        print(ans[i])
print(cnt)
"
8402424,ALDS1_2_B,"n = int(input())
a = [int(s) for s in input().split()]
cnt = 0

for i in range(n - 1):
    m = i
    for j in range(i + 1, n):
        if a[m] > a[j]:
            m = j
    if m != i:
        a[m], a[i] = a[i], a[m]
        cnt += 1

print(*a)
print(cnt)
"
8404027,ALDS1_2_B,"N = int(input()) # 要素数
x = [None] * N

s = input()
x0 = s.split(' ')
for i in range(N):
  x[i] = int(x0[i])

cnt = 0
flag = 1

for i in range(N):
  minj = i
  for j in range(i, N):
    if x[j] < x[minj]:
      minj = j
  if minj != i:
    cnt += 1
  x[i], x[minj] = x[minj], x[i]



for i in range(N):
  if i < N - 1:
    print(x[i], end = ' ')
  else:
    print(x[i])

print(cnt)
"
8404085,ALDS1_2_B,"def selection_sort(n, a):
    counter = 0

    for i in range(0, n-1):
        minj = i
        for j in range(i, n):
            if a[j] < a[minj]:
                minj = j
        if i != minj:
            temp = a[i]
            a[i] = a[minj]
            a[minj] = temp
            counter += 1
    return(a, counter)

n = int(input())
a_initial = list(map(int, input().split()))

a, counter = selection_sort(n, a_initial)
print(*a)
print(counter)

"
8405556,ALDS1_2_B,"N = int(input())
L = input().split(' ')
for i in range(N):
    L[i] = int(L[i])
    
cnt = 0
for i in range(N):
    minj = i
    for j in range(i,N):
        if L[j] < L[minj]:
            minj = j
    L[i], L[minj] = L[minj], L[i]
    if i != minj:
        cnt += 1
    
s = ''
for i in range(len(L)):
    if(i == 0):
        s += str(L[i])
    else:
        s += (' ' + str(L[i]))
print(s)
print(cnt)        
"
8407285,ALDS1_2_B,"def selectionSort(A, N) -> int:
    swap_count = 0
    for i in range(N):
        min_j = i
        for j in range(i, N):
            if A[j] < A[min_j]:
                min_j = j
        if i != min_j:
            A[i], A[min_j] = A[min_j], A[i]
            swap_count += 1
    return swap_count

n = int(input())
array = list(map(int, input().split()))

swap_count = selectionSort(array,n)
print(*array)
print(swap_count)
"
8408681,ALDS1_2_B,"def selectionSort(A, N):
    count = 0
    for i in range(N):
        minj = i
        for j in range(i, N):
            if A[j] < A[minj]:
                minj = j
        if A[i] != A[minj]:
            A[i], A[minj] = A[minj], A[i]
            count += 1
    return A , count

N = int(input())
A = list(map(int, input().split()))
A_sort, count = selectionSort(A, N)
print(' '.join(map(str, A_sort)))
print(count)
"
8417000,ALDS1_2_B,"n = int(input())
A = list(map(int,input().split()))
cnt = 0
for i in range(n):
    minj = i
    
    for j in range(i,n):
       if A[j] < A[minj]:
            minj = j
            
    _a = A[minj]
    _b = A[i] 
    A[i] = _a
    A[minj] = _b
    if i != minj:
        cnt += 1
        
print(*A)
print(cnt)
"
8429124,ALDS1_2_B,"import sys

input = sys.stdin.readline

def print_list(array):
    print("" "".join(map(str, array)))

def selection_sort(n, array):
    count = 0
    for i in range(0, n):
        min_i = i
        for j in range(i + 1,n):
            if array[j] < array[min_i]:
                min_i = j
        
        if min_i != i:
            array[i], array[min_i] = array[min_i], array[i]
            count += 1
    
    return count


def main():
    n = int(input())
    array = list(map(int, input().split()))
    
    swap_count = selection_sort(n, array)
    
    print_list(array)
    print(swap_count)

if __name__ == ""__main__"":
    main()
"
8449127,ALDS1_2_B,"def selectionSort(A,N):
    n = 0
    for i in range(N):
        minj = i
        for j in range(i,N):
            if A[j] < A[minj]:
                minj = j
        a = A[i]
        b = A[minj]
        A[i] = b
        A[minj] = a
        if i != minj:
            n += 1
    print(*A)
    print(n)

N = int(input())

A = list(map(int, input().split()))

selectionSort(A,N)
"
8458653,ALDS1_2_B,"def selection_sort(A,N):
    count=0
    for i in range(N):
        if A[i]!=min(A[i:]):
            r = A[i:].index(min(A[i:]))+i
            A[i],A[r]=A[r],A[i]
            count+=1
    print(*A)
    print(count)
n = int(input())
A = list(map(int,input().split()))
selection_sort(A,n)
            
"
8463792,ALDS1_2_B,"n = int(input())
a = list(map(int, input().split()))
ans = 0
for i in range(n):
    min_ = i
    for j in range(i+1, n):
        if a[j] < a[min_]:
            min_ = j
    if i != min_:
        a[i], a[min_] = a[min_], a[i]
        ans += 1

print(*a)
print(ans)

"
8466507,ALDS1_2_B,"n = int(input())
a = []
a = list(map(int, input().split()))
change_count = 0

for i in range(n-1):
    minj = i
    for j in range(i+1, n):
        if a[j] < a[minj]:
            minj = j
    if i != minj:
        change_count += 1
        a[i],a[minj] = a[minj],a[i]
    
    
print(' '.join(list(map(str, a))))
print(change_count)
"
8468394,ALDS1_2_B,"n = int(input())
x = list( map( int , input().split() ) )

sum=0

for i in range(n):

    minj = i

    for j in range(i,n):
        if x[j]<x[minj]:
            minj=j

    if not minj==i:        
        x[i],x[minj]=x[minj],x[i]
        sum+=1
        
        
    
print(*x)
print(sum)
"
8478676,ALDS1_2_B,"def selection_sort(A,n):
    sum=0
    for i in range(n):
        minj=i
        for j in range(i,n):
            if A[j]<A[minj]:
                minj=j
            
        if minj!=i:
            sum+=1
        A[i],A[minj]=A[minj],A[i]
    return sum
    
n=int(input())
L=[int(i) for i in input().split()]
sum=selection_sort(L,n)
print(*L)
print(sum)


"
8497983,ALDS1_2_B,"def SelectionSort(A, N):
	n = 0 #交換回数を格納する変数
	for i in range(N):
		minj = i
		for j in range(i, N, 1):
			if A[j] < A[minj]:
				minj = j
		A[i], A[minj] = A[minj], A[i]
		if i != minj:
			n += 1

	return A, n

N = int(input())

A = list(map(int, input().split()))

A, n = SelectionSort(A, N)
print(*A)
print(n)
"
8508599,ALDS1_2_B,"n=int(input())
ns=list(map(int,input().split()))
ans=0
for i in range(n):
    minj=i
    for j in range(i,n):
        if(ns[j]<ns[minj]):
            minj=j
    if i!=minj:
        ans+=1
        k=ns[i]
        ns[i]=ns[minj]
        ns[minj]=k

for i in range(n):
    if(i!=n-1):
        print(ns[i],end=' ')
print(ns[n-1])
print(ans)
"
8520311,ALDS1_2_B,"N = int(input())
A = list(map(int,input().split()))

cnt = 0
for i in range(N):
    minj = i
    for j in range(i,N):
        if A[j]<A[minj]:
            minj = j
    if i != minj:
        tmp = A[i]
        A[i] = A[minj]
        A[minj] = tmp
        cnt += 1
print(*A)
print(cnt)

"
8532968,ALDS1_2_B,"n = int(input())
l = list(map(int, input().split()))

c = 0
for i in range(n):
    m = l[i]
    s = -1
    for j in range(i+1, n):
        if m > l[j]:
            m = l[j]
            s = j

    if s > -1:
        t = l[i]
        l[i] = l[s]
        l[s] = t
        c += 1

print(*l)
print(c)
"
8533656,ALDS1_2_B,"class utill:
    def show_list(A):
        for i, num in enumerate(A):
            if i != len(A)-1:
                print(num, end="" "")
            else:
                print(num)
def SelectionSort(N, l):
    ans = 0
    for i in range(N):
        # ソート済みのインデックス
        minj = i 
        for j in range(i, N):
            if l[j] < l[minj]:
                minj = j
        if l[minj] != l[i]:
            l[minj], l[i] = l[i], l[minj]
            ans += 1
    utill.show_list(l)
    print(ans)

N = int(input())
num_list = list(map(int, input().split()))
SelectionSort(N, num_list)
"
8533664,ALDS1_2_B,"def selection_sort(A, N):
    counter = 0
    for i in range(N):
        minj = i
        for j in range(i, N):
            if A[j] < A[minj]:
                minj = j
        if minj != i:
            counter += 1
            dummy = A[i]
            A[i] = A[minj]
            A[minj] = dummy
    return A, counter 
            

def main():
      n = int(input())
      A = list(map(int, input().split(' ')))

      ans, count = selection_sort(A, n)
      print(' '.join(list(map(str, ans))))
      print(count)


    

if __name__ == '__main__':
    main()
"
8561678,ALDS1_2_B,"N = int(input())
a_list = list(map(int, input().split()))

count = 0
for i in range(N):
    min_j = i
    for j in range(i, N):
        if a_list[j] < a_list[min_j]:
            min_j = j
    tmp = a_list[i]
    a_list[i] = a_list[min_j]
    a_list[min_j] = tmp
    if i != min_j:
        count = count + 1

print(*a_list)
print(count)

"
8572897,ALDS1_2_B,"def selectionsort(A,N):
  count=0
  for i in range(N):
    minj=i
    for j in range(i,N):
      if A[j]<A[minj]:
        minj=j
    if minj!=i:
      t=A[minj]
      A[minj]=A[i]
      A[i]=t
      count+=1
  for i in range(N):
    if i!=N-1:
      print(A[i], end=' ')
    else:
      print(A[i])
  print(count)

N=int(input())
A=list(input().split())
for i in range(N):
  A[i]=int(A[i])
selectionsort(A,N)
"
8594426,ALDS1_2_B,"n = int(input())
a = list(map(int, input().split()))
num = 0
for i in range(n):
    min = i
    change = 0
    for j in range(i, n):
        if a[min] > a[j]:
            min = j
            change+=1
    if change != 0:
        tmp = a[i]
        a[i] = a[min]
        a[min] = tmp
        num+=1
print(*a)
print(num)
"
8599308,ALDS1_2_B,"n = int(input())
a = []
cnt = 0
a =list(map(int, input().split()))
for i in range(0,n-1,1):
    min = i
    for j in range(i+1,n):
        if (int(a[min]) > int(a[j])):
            min = j
    if min != i:
        tmp = a[min]
        a[min] = a[i]
        a[i] = tmp
        cnt = cnt + 1
for i in range(n-1):
    print(a[i],end="" "")
print(a[n-1])
print (cnt)
"
8603209,ALDS1_2_B,"n = int(input())
arr = list(map(int, input().split()))

count = 0

for i in range(n):
    min_index = arr[i]

    for j in range(i + 1, n):
        if(min_index > arr[j]):
            min_index = arr[j]
            k = j


    if(arr[i] != min_index):
        arr[i],arr[k] = arr[k], arr[i]
        count += 1

print(*arr)
print(count)
"
8611546,ALDS1_2_B,"n = int(input())
al = list(map(int, input().split()))

def selection_sort(al, n):
    cnt = 0
    for i in range(n):
        min_j = i
        for j in range(i, n):
            if al[j] < al[min_j]:
                min_j = j
        if i != min_j:
            cnt += 1
            al[i], al[min_j] = al[min_j], al[i]
    return al, cnt

al, cnt = selection_sort(al, n)
print(*al)
print(cnt)

"
8612508,ALDS1_2_B,"N = int(input())
A = list(map(int, input().split()))
cnt = 0
for i in range(N):
  minj = A.index(min(A[i:]), i)
  if A[i] > A[minj]:
    A[i], A[minj] = A[minj], A[i]
    cnt += 1

print(*A)
print(cnt)

"
8618282,ALDS1_2_B,"def selectionSort(A, N):
    exchange = 0
    for i in range(N):
        minj = i
        for j in range(i, N):
            if A[j] < A[minj]:
                minj = j
        if A[i]  != A[minj]:
            exchange += 1
        tmp = A[i]
        A[i] = A[minj]
        A[minj] = tmp

    return {
        ""arr"" : A,
        ""exchange"" : exchange
    }

n = int(input())
a = list(map(int, input().split(' ')))

arr = selectionSort(a, n)
print(' '.join(list(map(str, arr[""arr""]))))
print(arr[""exchange""])
"
8621813,ALDS1_2_B,"N = int(input())
A = list(map(int,input().split()))
swap_count = 0
for i in range(N):
    min_j = i
    Flag = 0
    for j in range(i,N):
        if A[j] < A[min_j]:
            min_j = j
            Flag = 1
    swap_count += Flag
    A[i], A[min_j] = A[min_j], A[i]
    
print("" "".join(map(str,A)))
print(swap_count)
"
8629553,ALDS1_2_B,"def PrintFormat(A:list[int]):
    print(A[0], end="""")
    for i in range(1,len(A)):
        print("" ""+str(A[i]),end="""")
    print()

def SelectionSort(A:list[int]):
    N = len(A)
    count = 0
    for i in range(0,N-1):
        minj = i
        swap = False
        for j in range(i,N):
            if A[j] < A[minj]:
                minj = j
                swap = True
        if swap == True:
            A[i] , A[minj] = A[minj], A[i]
            # PrintFormat(A)
            count += 1
    PrintFormat(A)
    print(count)

Length = input()
Array = input()
a = list(map(int,Array.split()))
SelectionSort(a)
"
8630266,ALDS1_2_B,"
N = int(input())
a = list(map(int,input().split()))
cnt=0
frag = False
for i in range(0,N):
    minj = i
    for j in range(i,N):
        if a[j] < a[minj]:
           minj = j
           frag = True
    if frag == True:
      a[i],a[minj] = a[minj],a[i]
      cnt+=1
      frag = False

      
for i in range(0,len(a)):
     if i != len(a)-1:
        print(a[i],end = "" "")
     else :
        print(a[i])
print(cnt)
        
    

"
8632247,ALDS1_2_B,"def selectionSort(arr):
    n = len(arr)
    count = 0
    for i in range(n - 1):
        min = i
        for j in range(i + 1, n):
            if arr[j] < arr[min]:
                min = j
        if min != i:
            arr[i], arr[min] = arr[min], arr[i]
            count += 1

    return arr, count

N = int(input())
array = list(map(int, input().split()))
sorted_array, num_swaps = selectionSort(array)
print(' '.join(map(str, sorted_array)))
print(num_swaps)

"
8646219,ALDS1_2_B,"N = int(input())
l = list(map(int, input().split()))
c = 0
for i in range(N):
    mini = i
    for j in range(i, N):
        if l[j] < l[mini]:
        	mini = j
    l[i], l[mini] = l[mini], l[i]
    if mini != i: c += 1
print("" "".join(map(str, l)))
print(c)
"
8678035,ALDS1_2_B,"
n = int(input())
num = list(map(int, input().split()))

count = 0

for i in range(len(num)):
    mini = i
    for j in range(i+1, len(num)):
        if num[j] < num[mini]:
            mini = j
            
    if i != mini:
            
        num[i], num[mini] = num[mini], num[i]
        count += 1
    
    
print(*num)
print(count)



# SelectionSort(A)
# 1 for i = 0 to A.length-1
# 2     mini = i
# 3     for j = i to A.length-1
# 4         if A[j] < A[mini]
# 5             mini = j
# 6     swap A[i] and A[mini]
"
8685423,ALDS1_2_B,"N = int(input())
*A, = map(int, input().split())
c = 0
for i in range(N):
    minj = i
    for j in range(i,N):
        if A[j] < A[minj]:
            minj = j
    if i != minj:
        A[i],A[minj] = A[minj],A[i]
        c += 1
print(*A)
print(c)
"
8689556,ALDS1_2_B,"n = int(input())
a = list(map(int, input().split()))
count = 0

for i in range(n):
    minj = i
    for j in range(i, n):
        if a[j] < a[minj]:
            minj = j
    a[i], a[minj] = a[minj], a[i]
    count += 1 if i != minj else 0

# 数列を連続する要素が空白で区切られた状態で出力
print(*a)

# 交換回数を出力
print(count)

"
8704854,ALDS1_2_B,"N = int(input())
A = list(map(int,input().split()))


count = 0

def selection_sort(A, N, count):
    count = 0
    for i in range(0, N - 1):
        minj = i
        for j in range(i + 1, N):  # i+1から始めることで、最小値のインデックスを正しく取得できます
            if A[j] < A[minj]:
                minj = j
                
        if minj != i:  # 最小値がiではない場合のみ交換とカウントを行います
            A[i], A[minj] = A[minj], A[i]
            count += 1
            
    return count


count = selection_sort(A,N,count)

output = ' '.join(str(x) for x in A)
print(output)
print(count)
  

"
8709235,ALDS1_2_B,"n = int(input())
a = list(map(int, input().split()))

cnt = 0

for i in range(len(a)):
    min_index = i
    for j in range(i + 1, len(a)):
        if a[j] < a[min_index]:
            min_index = j
    if min_index != i:
        a[min_index], a[i] = a[i], a[min_index]
        cnt += 1

print(*a)
print(cnt)
"
8733308,ALDS1_2_B,"def selection_sort(list):
    swap_count = 0
    for i in range(len(list)):
        minj = i
        for j in range(i, len(list)):
            if list[j] < list[minj]:
                minj = j
        if i != minj:
            list[i], list[minj] = list[minj], list[i]
            swap_count += 1
    return list, swap_count

length = int(input())
array = list(map(int, input().split()))
sorted_array, swap_count = selection_sort(array)
print(*sorted_array)
print(swap_count)
"
8743967,ALDS1_2_B,"# aizu_ ALDS1_2_B_SelectionSort.py  選択ソート

N = int(input())
A = list(map(int,input().split()))

def selectionsort(A,N):
    cnt = 0
    for i in range(N):
        min_j = i
        for j in range(i,N):
            if A[j] < A[min_j]:
                min_j = j
        if i == min_j: continue
        A[i],A[min_j] = A[min_j],A[i]
        cnt += 1

    return A,cnt

result,cnt = selectionsort(A,N) 
print(*result)
print( cnt )
"
8759756,ALDS1_2_B,"num1 = int(input())
retu = input().split("" "")
risuto = []
cnt = 0

for x in range(num1):
    risuto.append(retu[x])

for i in range(0, (num1 - 1)):
    minj = i
    for j in range(i, num1):
        if int(risuto[j]) < int(risuto[minj]):
            minj = j
    if int(risuto[i]) > int(risuto[minj]):
        risuto[i], risuto[minj] = risuto[minj], risuto[i]
        cnt = cnt + 1

for y in range(num1):
    if y + 1 == num1:
        print(risuto[y])
    else:
        print(risuto[y], end="" "")

print(cnt)

"
8764404,ALDS1_2_B,"N = int(input())
A = [*map(int,input().split())]

na = 0
for i in range(N-1):   
    minj = min(A[i+1: N])
    l = A.index(minj,i+1,N)
    if A[l] < A[i] :
        A[i], A[l] = A[l], A[i]
        na += 1

print(*A)
print(na)
"
8772949,ALDS1_2_B,"n = int(input())
a = list(map(int,input().split()))
count = 0

for i in range(n - 1):
    min_a = i
    for j in range(i,n):
        if a[j] < a[min_a]:
            min_a = j
    if a[i] != a[min_a]:
        a[i],a[min_a] = a[min_a],a[i]
        count += 1
print(*a)
print(count)
"
8796100,ALDS1_2_B,"n = int(input())
L = list(map(int,input().split()))
num = 0

for i in range(n-1):
    min_index = i
    for j in range(i+1,n):
        if L[j] < L[min_index]:
            min_index = j
    if min_index != i:
        L[i], L[min_index] = L[min_index], L[i]
        num += 1

print(' '.join(map(str,L)))
print(num)
"
8814915,ALDS1_2_B,"n = int(input())
a = list(map(int,input().split()))

flag = 1
cnt = 0

for i in range(len(a)-1):
    minj = i
    flag = 0
    for j in range(i,len(a)):
        if a[j] < a[minj]:
            minj = j
            flag = 1
    if flag==1:
        cnt += 1
        a[minj],a[i] = a[i],a[minj]

print("" "".join(map(str,a)))
print(cnt)
"
8243950,ALDS1_2_C,"N = int(input())
SI = list(input().split())
SB = SI.copy()

# bubble sort
for i in range(N):
	for j in range(N - 1, i, -1):
		if SB[j - 1][1] > SB[j][1]:
			x = SB[j - 1]
			SB[j - 1] = SB[j]
			SB[j] = x

# insertion sort
for i in range(N):
	ptr = i
	for j in range(i + 1, N):
		if SI[ptr][1] > SI[j][1]:
			ptr = j
	x = SI[i]
	SI[i] = SI[ptr]
	SI[ptr] = x

# print the answer!
for i in range(N):
	print(SB[i] + "" "" if i != N - 1 else str(SB[i]) + ""\n"", end='')
print(""Stable"")
for i in range(N):
	print(SI[i] + "" "" if i != N - 1 else str(SI[i]) + ""\n"", end='')
print(""Stable"" if SI == SB else ""Not stable"")


"
8257321,ALDS1_2_C,"num=int(input())
sort_list=input().split("" "")
another=[]

for q in sort_list:
    another.append(q)


def BubbleSort(C,N):
    #最後尾から比較を繰り返す
    #i番目まで入れ替える
    for i in range(N):
        #jは比較の右側
        for j in range(N-1,i,-1):
            if int(C[j][1])<int(C[j-1][1]):
                C[j],C[j-1]=C[j-1],C[j]

    return C
 


def SelectionSort(a,k):
    #i番目に入る正しい数値を見つける
    for i in range(k-1):
        #minjは最小値のインデックス
        minj=i
        #このループの中でi番目以降の最小値を見つける
        for j in range(i,k):
            if int(a[j][1])<int(a[minj][1]):
                minj=j
        if minj!=i:
            a[i],a[minj]=a[minj],a[i]
    return a

print(*BubbleSort(sort_list,num),sep=' ')
print('Stable')

print(*SelectionSort(another,num),sep=' ')
if BubbleSort(sort_list,num)==SelectionSort(another,num):
    print('Stable')
else:
    print('Not stable')
"
8273415,ALDS1_2_C,"def bubble_sort(data):
    n = len(data)
    for i in range(n - 1):
        for j in range(n - 1 - i):
            if int(data[j+1][1]) < int(data[j][1]):
                data[j], data[j+1] = data[j+1], data[j]


def selection_sort(data):
    n = len(data)
    for i in range(n - 1):
        k = i
        for j in range(i + 1, n):
            if int(data[j][1]) < int(data[k][1]):
                k = j
        if k != i:
            data[i], data[k] = data[k], data[i]


def order_analysis(data):
    lst = [[] for i in range(9)]
    for i in range(len(data)):
        lst[int(data[i][1])-1].append(data[i][0])
    return lst


def stability_check(data_0, data_1):
    if order_analysis(data_0) == order_analysis(data_1):
        print(""Stable"")
    else:
        print(""Not stable"")


def main():
    n = int(input())
    data = [s for s in input().split()]

    data_ = data.copy()
    bubble_sort(data_)
    print(*data_)
    stability_check(data, data_)

    data_ = data.copy()
    selection_sort(data_)
    print(*data_)
    stability_check(data, data_)


if __name__ == ""__main__"":
    main()

"
8296689,ALDS1_2_C,"n = int(input())
A = list(input().split())
BS = A[:]
SS = A[:]

for i in range(n):
    for j in range(n-1, i, -1):
        if BS[j][1] < BS[j-1][1]:
            BS[j], BS[j-1] = BS[j-1], BS[j]

for pr in range(n):
    if pr < n-1:
        print(f""{BS[pr]} "", end = """")
    else:
        print(BS[pr])
print(""Stable"")

for k in range(n):
    minl = k
    for l in range(k, n):
        if SS[l][1] < SS[minl][1]:
            minl = l
    SS[k], SS[minl] = SS[minl], SS[k]

for pr in range(n):
    if pr < n-1:
        print(f""{SS[pr]} "", end = """")
    else:
        print(SS[pr])

if BS == SS:
    print(""Stable"")
else:
    print(""Not stable"")
"
8340547,ALDS1_2_C,"def BubbleSort(C, N):
    for i in range(0,N):
        for j in range(N-1,i,-1):
            if C[j][1] < C[j-1][1]:
                C[j],C[j-1] = C[j-1],C[j]
    print(*C)
    return C

def SelectionSort(D, N):
    for i in range(0, N):
        minj = i
        for j in range(i,N):
            if D[j][1] < D[minj][1]:
                minj = j
        D[i],D[minj]=D[minj],D[i]
    print(*D)
    return D

N = int(input())
C = input().split()
D = C.copy()
x = BubbleSort(C,N)
print(""Stable"")
y = SelectionSort(D,N)
if x == y:
    print(""Stable"")
else:
    print(""Not stable"")
"
8354275,ALDS1_2_C,"def BubbleSort(C, n):
    for i in range(n):
        for j in range(n-1, i, -1):
            if int(C[j][1]) < int(C[j-1][1]):
                C[j],C[j-1] = C[j-1],C[j]

    return C

def SelectionSort(C, n):
    for i in range(n):
        minj = i
        for j in range(i, n):
            if int(C[minj][1]) > int(C[j][1]):
                minj = j
        C[minj], C[i] = C[i], C[minj]

    return C


n = int(input())

cards = input().split()

CB = BubbleSort(cards[:], n)
print(*CB)
print('Stable')

CS = SelectionSort(cards[:], n)
print(*CS)
if CB == CS:
    print('Stable')
else:
    print('Not stable')

"
8363438,ALDS1_2_C,"def bubblesort(c,n):
    for i in range(n):
        for j in range(n-1,i,-1):
            if c[j][1]<c[j-1][1]:
                tmp=c[j]
                c[j]=c[j-1]
                c[j-1]=tmp
    
    return c

def selectsort(c,n):
    for i in range(n):
        minj=i
        for j in range(i,n):
            if c[j][1]<c[minj][1]:
                minj=j
        
        if c[i][1]>c[minj][1]:
            tmp=c[i]
            c[i]=c[minj]
            c[minj]=tmp
        
    return c
    
def is_stable(c,c_2):
        if c!=c_2:
            return False
        else:
            return True
            
n=int(input())
c=list(input().split())
c_2=c[:]
for i in range(n):
    if i==n-1:
        print(bubblesort(c,n)[i])
    else:
        print(bubblesort(c,n)[i],end="" "")

print(""Stable"")

for i in range(n):
    if i==n-1:
        print(selectsort(c_2,n)[i])
    else:
        print(selectsort(c_2,n)[i],end="" "")
        
if is_stable(c,c_2):
    print(""Stable"")
else:
    print(""Not stable"")
"
8402022,ALDS1_2_C,"def BubbleSort(c, N):
    for i in range(N):
        for j in range(N-1,i,-1):
            if int(c[j][1]) < int(c[j-1][1]):
                c[j], c[j-1] = c[j-1], c[j]
    return c
    
def SelectionSort(B,N):
    for i in range(N):
        mj = i
        for j in range(i, N):
            if B[j][1] < B[mj][1]:
                mj = j
        B[i], B[mj] = B[mj], B[i]
   
    return B
    
def isStable(in_data, out_data):
    N = len(in_data)
    for i in range(N):
        for j in range(i+1,N):
            for a in range(N):
                for b in range(a+1,N):
                    if in_data[i][1] == in_data[j][1] and in_data[i] == out_data[b] and in_data[j] == out_data[a]:
                        return False
    return True
    
N = int(input())
*c, = input().split()

B = c[:]
for i in range(N):
        for j in range(N-1,i,-1):
            if int(c[j][1]) < int(c[j-1][1]):
                c[j], c[j-1] = c[j-1], c[j]
print(*c)
print(""Stable"")
 
for i in range(N):
        mj = i
        for j in range(i, N):
            if B[j][1] < B[mj][1]:
                mj = j
        B[i], B[mj] = B[mj], B[i]
print(*B)
if c == B:
  print(""Stable"")
else:
  print(""Not stable"")

        
"
8402512,ALDS1_2_C,"n = int(input())
a = [s for s in input().split()]
cnt = 0

b = sorted(a, key = lambda x: int(x[1:]))

for i in range(n - 1):
    m = i
    for j in range(i + 1, n):
        if int(a[m][1:]) > int(a[j][1:]):
            m = j
    a[m], a[i] = a[i], a[m]

print(*b)
print('Stable')
print(*a)
print('Stable' if a == b else 'Not stable')
"
8407427,ALDS1_2_C,"def bubbleSort(C, N) -> None:
    for i in range(N):
        for j in range(N-1, i, -1):
            if C[j][1] < C[j-1][1]:
                C[j], C[j-1] = C[j-1], C[j]

def selectionSort(C, N) -> None:
    for i in range(N):
        min_j = i
        for j in range(i, N):
            if C[j][1] < C[min_j][1]:
                min_j = j
        if i != min_j:
            C[i], C[min_j] = C[min_j], C[i]

n = int(input())
args = input().split()
bubble_array = args[:]
selection_array = args[:]
bubbleSort(bubble_array, n)
print(*bubble_array)
print(""Stable"")
selectionSort(selection_array, n)
print(*selection_array)
if selection_array == bubble_array:
    print(""Stable"")
else:
    print(""Not stable"")
"
8408223,ALDS1_2_C,"N = int(input())
A = input().split()

def bubble_sort(A, N):
    for i in range(N):
        for j in reversed(range(i+1, N)):
            if A[j][1] < A[j-1][1]:
                A[j-1], A[j] = A[j], A[j-1]

def sellection_sort(A, N):
    for i in range(N-1):
        j_min = A.index(min(A[i:], key=lambda a:a[1]), i)
        A[i], A[j_min] = A[j_min], A[i]
        
A_bub = A[:]
bubble_sort(A_bub, N)
print(*A_bub)
print(""Stable"")

sellection_sort(A, N)
print(*A)
print(""Stable"" if A == A_bub else ""Not stable"")
"
8408749,ALDS1_2_C,"def bubbleSort(cards):
    N = len(cards)
    for i in range(N):
        for j in range(N - 1, i, -1):
            if int(cards[j - 1][1]) > int(cards[j][1]):
                cards[j], cards[j - 1] = cards[j - 1], cards[j]
    return cards

def selectionSort(cards):
    N = len(cards)
    for i in range(N):
        min_idx = i
        for j in range(i + 1, N):
            if int(cards[j][1]) < int(cards[min_idx][1]):
                min_idx = j
        cards[i], cards[min_idx] = cards[min_idx], cards[i]
    return cards

def isStable(original, sorted_cards):
    # カードの数字（2文字目）が等しいカード同士の順序が元の順序と同じかどうかを確認
    for i in range(len(original)):
        for j in range(i + 1, len(original)):
            if original[i][1] == original[j][1]:
                if sorted_cards.index(original[i]) > sorted_cards.index(original[j]):
                    return ""Not stable""
    return ""Stable""

N = int(input())
cards = input().split()
original = cards[:]  # ソート前のカードのコピーを保持

# カードを数字でソート
bubble_sorted = bubbleSort(cards.copy())
selection_sorted = selectionSort(cards.copy())

print("" "".join(bubble_sorted))
print(isStable(original, bubble_sorted))
print("" "".join(selection_sorted))
print(isStable(original, selection_sorted))
"
8414784,ALDS1_2_C,"# バブルソート
def bubble_sort(n, original_cards):
    cards = list(original_cards)
    flag = True

    while flag:
        flag = False
        for i in range(n-1, 0, -1):
            if cards[i][1] < cards[i - 1][1]:
                cards[i], cards[i - 1] = cards[i - 1], cards[i]
                flag = True
    return(cards)

# 選択ソート
def selection_sort(n, original_cards):
    cards = list(original_cards)

    for i in range(0, n-1):
        minj = i
        for j in range(i, n):
            if cards[j][1] < cards[minj][1]:
                minj = j
        if i != minj:
            cards[i], cards[minj] = cards[minj], cards[i]
    return(cards)

# ソートの安定性評価
def is_stable(n, original, sorted_cards):
    for i in range(n - 1):
        for j in range(i + 1, n):
            if (original[i][1] == original[j][1]) and \
                (sorted_cards.index(original[i]) > sorted_cards.index(original[j])):
                return ""Not stable""
    return ""Stable""

# main
def main():
    n = int(input())
    # cards_taple = tuple(map(str, input().split()))
    original_cards = tuple(input().split())

    # バブルソート
    sorted_cards = bubble_sort(n, original_cards)
    stability = is_stable(n, original_cards, sorted_cards)
    print(*sorted_cards)
    print(stability)

    # 選択ソート
    sorted_cards = selection_sort(n, original_cards)
    stability = is_stable(n, original_cards, sorted_cards)
    print(*sorted_cards)
    print(stability)

if __name__ == ""__main__"":
  main()

"
8459285,ALDS1_2_C,"def bubble_sort(A,n):
    for i in range(1,n):
        j=i
        while j>0 and A[j-1][1]>A[j][1]:
            A[j-1],A[j]=A[j],A[j-1]
            j-=1
    print(*A)
def selection_sort(A,n):
    for i in range(n-1):
        ptr=i
        for j in range(i+1,n):
            if A[j][1]<A[ptr][1]:
                ptr=j
        A[ptr],A[i]=A[i],A[ptr]
    print(*A)
n = int(input())
A = list(input().split())
B = A.copy()
bubble_sort(A,n)
print('Stable')
selection_sort(B,n)
print('Stable' if A==B else 'Not stable')   
            
"
8463802,ALDS1_2_C,"n = int(input())
a1 = input().split()
a2 = a1[::]

for i in range(n):
    for j in range(n-1, i, -1):
        if int(a1[j][1]) < int(a1[j-1][1]):
            a1[j], a1[j-1] = a1[j-1], a1[j]

for i in range(n):
    min_ = i
    for j in range(i, n):
        if int(a2[j][1]) < int(a2[min_][1]):
            min_ = j

    if i != min_:
        a2[i], a2[min_] = a2[min_], a2[i]

print(*a1)
print(""Stable"")
print(*a2)

if a1 != a2:
    print(""Not stable"")
else:
    print(""Stable"")

"
8468448,ALDS1_2_C,"n = int(input())

*x,=input().split()
*y,=*x,

for i in range(n):
    for j in range(n-1,i,-1):
        if x[j][1]<x[j-1][1]:
            x[j],x[j-1]=x[j-1],x[j]


for o in range(n):
    minp=o
    for p in range(o,n):
        if y[p][1]<y[minp][1]:
          minp=p

    if not minp==o:
        y[o],y[minp]=y[minp],y[o]

print(*x)
print(""Stable"")
print(*y)
if x==y:
    print(""Stable"")
else:
    print(""Not stable"")
"
8470119,ALDS1_2_C,"import copy

def BubbleSort(a, n):
    flag = 1
    while flag:
        flag = 0
        for j in range(n - 1, 0, -1):
            if int(a[j][1:]) < int(a[j - 1][1:]):
                a[j], a[j - 1] = a[j - 1], a[j]
                flag = 1
    return a

def SelectionSort(a, n):
    for i in range(n - 1):
        minj = i
        for j in range(i + 1, n):
            if int(a[j][1:]) < int(a[minj][1:]):
                minj = j
        a[i], a[minj] = a[minj], a[i]
    return a

n = int(input())
a = []
a = list(input().split())
aa = copy.deepcopy(a)

b = BubbleSort(a, n)
c = SelectionSort(aa,n)

print(' '.join(list(map(str, b))))
print(""Stable"")
print(' '.join(list(map(str, c))))
print(""Stable"" if c == b else ""Not stable"")
"
8505373,ALDS1_2_C,"def swap(a, i, j):
    # list aのi番目の要素とj番目の要素を交換する関数
    k = a[j]
    a[j] = a[i]
    a[i] = k


def selectionSort(a, n):
    for i in range(n):
        minj = i
        for j in range(i,n):
            if a[j][1] < a[minj][1]: #数字が１桁なのでstrのまま比較可能
                minj = j
        swap(a, i, minj)


def bubbleSort(a, n):
    flag = 1
    while flag:
        flag = 0
        for j in range(n-1,0,-1):
            if a[j][1] < a[j-1][1]:
                swap(a, j-1, j)
                flag = 1


n = int(input())
a = list(input().split())
b = a[:]
bubbleSort(a, n)
print(' '.join(a))
print('Stable')
selectionSort(b, n)
print(' '.join(b))
if a == b:
    print('Stable')
else:
    print('Not stable')
"
8534008,ALDS1_2_C,"class utill:
    def print_list(A):
        for i, num in enumerate(A):
            if i != len(A)-1:
                print(num, end="" "")
            else:
                print(num)

def BubbleSort(N:int, l_:list) -> list:
    # ans = 0
    l = l_.copy()
    idx = 0  # 未ソート部分の先頭インデックス
    flag = True
    while flag:
        flag = False
        for i in range(N - 1, idx, -1):
            if l[i][1] < l[i - 1][1]:
                l[i - 1], l[i] = l[i], l[i - 1]
                # ans += 1
                flag = True
        idx += 1
    utill.print_list(l)
    # print(ans)
    return l
    
def SelectionSort(N:int, l_:list) -> None:
    l = l_.copy()
    for i in range(N):
        # ソート済みのインデックス
        minj = i 
        for j in range(i+1, N):
            if l[j][1] < l[minj][1]:
                minj = j
        l[i], l[minj] = l[minj], l[i]
        # print(l)
    utill.print_list(l)
    return l


N = int(input())
ori_list = input().split()
BS_list = BubbleSort(N, ori_list)
# print(BS_list)
print(""Stable"")
SS_list = SelectionSort(N, ori_list)

SS_ans = ""Stable"" if BS_list == SS_list else ""Not stable""
print(SS_ans)


"
8535862,ALDS1_2_C,"n=int(input())
b=input().split()
s=b[:]
for i in range(n):
    for j in range(n-1,i,-1):
        if b[j][1]<b[j-1][1]:b[j],b[j-1]=b[j-1],b[j]
    m=i
    for j in range(i,n):
        if s[m][1]>s[j][1]:m=j
    s[m],s[i]=s[i],s[m]
print(*b)
print('Stable')
print(*s)
print(['Not s','S'][b==s]+'table')

"
8561726,ALDS1_2_C,"from functools import total_ordering


@total_ordering
class Card:
    def __init__(self, card: str) -> None:
        self.value = int(card[1])
        self.suit = card[0]

    def __str__(self):
        return f""{self.suit}{self.value}""

    def __eq__(self, __value: object) -> bool:
        if not isinstance(__value, Card):
            return NotImplemented
        return self.value == __value.value

    def __lt__(self, __value: object) -> bool:
        if not isinstance(__value, Card):
            return NotImplemented
        return self.value < __value.value

    def eq_strict(self, other: object) -> bool:
        if not isinstance(other, Card):
            return NotImplemented
        return self.value == other.value and self.suit == other.suit


N = int(input())
card_list = list(map(Card, input().split()))
card_list_copied = card_list.copy()

for i in range(N):
    for j in range(N - 1, i, -1):
        if card_list[j] < card_list[j - 1]:
            tmp = card_list[j]
            card_list[j] = card_list[j - 1]
            card_list[j - 1] = tmp

print(*card_list)
print(""Stable"")

for i in range(N):
    min_j = i
    for j in range(i, N):
        if card_list_copied[j] < card_list_copied[min_j]:
            min_j = j
    tmp = card_list_copied[i]
    card_list_copied[i] = card_list_copied[min_j]
    card_list_copied[min_j] = tmp

print(*card_list_copied)
if all([card.eq_strict(card_copied) for card, card_copied in zip(card_list, card_list_copied)]):
    print(""Stable"")
else:
    print(""Not stable"")

"
8574893,ALDS1_2_C,"import copy


def bubbleSort(C, N):
    for i in range(N):
        for j in range(N-1, i, -1):
            if C[j][1] < C[j-1][1]:
                tmp = C[j]
                C[j] = C[j-1]
                C[j-1] = tmp

def selectionSort(C, N):
    for i in range(N):
        minj = i
        for j in range(i, N):
            if C[j][1] < C[minj][1]:
                minj = j
        tmp = C[i]
        C[i] = C[minj]
        C[minj] = tmp


inputN = int(input())
inputs = list(input().split("" ""))
for i in range(inputN):
    inputs[i] = [inputs[i], int(inputs[i][-1]), i]

bubbleList = copy.deepcopy(inputs)
bubbleSort(bubbleList, inputN)
selectionList = copy.deepcopy(inputs)
selectionSort(selectionList, inputN)

def stableChecker(list):
    isStable = ""Stable""
    for i in range(inputN-1):
        if list[i][1] == list[i+1][1]:
            if list[i][2] > list[i+1][2]:
                isStable = ""Not stable""
                break
    return isStable

def printList(list):
    for i in list[:-1]:
        print(i[0], end="" "")
    print(list[-1][0])

printList(bubbleList)
print(stableChecker(bubbleList))
printList(selectionList)
print(stableChecker(selectionList))
"
8575152,ALDS1_2_C,"n = int(input())
*A, = input().split()
B = A[:]
for i in range(n):
    for j in range(n-1, i, -1):
        if A[j][1] < A[j-1][1]:
            A[j], A[j-1] = A[j-1], A[j]
print(*A)
print(""Stable"")

for i in range(n):
    mj = i
    for j in range(i, n):
        if B[j][1] < B[mj][1]:
            mj = j
    B[i], B[mj] = B[mj], B[i]
print(*B)
if A == B:
  print(""Stable"")
else:
  print(""Not stable"")
"
8611610,ALDS1_2_C,"def bubble_sort(al, n):
    cnt = 0
    flag = 1
    while flag:
        flag = 0
        for j in range(n - 1, 0, -1):
            if int(al[j][1]) < int(al[j - 1][1]):
                al[j], al[j - 1] = al[j - 1], al[j]
                cnt += 1
                flag = 1
    return al, cnt

def selection_sort(al, n):
    cnt = 0
    for i in range(n):
        min_j = i
        for j in range(i, n):
            if int(al[j][1]) < int(al[min_j][1]):
                min_j = j
        if i != min_j:
            cnt += 1
        al[i], al[min_j] = al[min_j], al[i]
    return al, cnt

n = int(input())
al = input().split()

l, _ = bubble_sort(al.copy(), n)
print(*l)
for a, b in zip(l, l[1:]):
    if int(a[1]) == int(b[1]):
        i = al.index(a)
        j = al.index(b)
        if i > j:
            print(""Not stable"")
            break
else:
    print(""Stable"")
l, _ = selection_sort(al.copy(), n)
print(*l)
for a, b in zip(l, l[1:]):
    if int(a[1]) == int(b[1]):
        i = al.index(a)
        j = al.index(b)
        if i > j:
            print(""Not stable"")
            break
else:
    print(""Stable"")

"
8612597,ALDS1_2_C,"N = int(input())
A = input().split()

def bubble(N, A):
  for i in range(N):
    for j in reversed(range(i+1, N)):
      if A[j][1] < A[j-1][1]:
        A[j-1], A[j] = A[j], A[j-1]

def select(N, A):
  for i in range(N-1):
    j_min = A.index(min(A[i:], key=lambda a:a[1]), i)
    A[i], A[j_min] = A[j_min], A[i]

A_bub = A[:]
bubble(N, A_bub)
print(*A_bub)
print(""Stable"")

select(N, A)
print(*A)
print(""Stable"" if A == A_bub else ""Not stable"")


"
8632253,ALDS1_2_C,"def PrintFormat(A:list[int]):
    print(A[0], end="""")
    for i in range(1,len(A)):
        print("" ""+str(A[i]),end="""")
    print()
    
def PrintCard(A:list):
    print(A[0][0]+str(A[0][1]), end="""")
    for i in range(1,len(A)):
        print("" ""+A[i][0]+str(A[i][1]),end="""")
    print()

def BubbleSort(A:list):
    N = len(A)
    for i in range(0,N):
        for j in range(N-1,i,-1):
            if A[j][1] < A[j-1][1]:
                A[j], A[j-1] = A[j-1], A[j]
    return(A)

def SelectionSort(A:list):
    N = len(A)
    for i in range(0,N-1):
        minj = i
        swap = False
        for j in range(i,N):
            if A[j][1] < A[minj][1]:
                minj = j
                swap = True
        if swap == True:
            A[i] , A[minj] = A[minj], A[i]
    return A

def isStable(Original:list, Sorted:list):
    numList = [0 for i in range(10)]
    dupeList = []
    for i in Original:
        numList[i[1]] += 1
    for i, j in enumerate(numList):
        if j > 1:
            dupeList.append(i)
    if len(dupeList) == 0: return True

    OriLetter = """"
    for i in dupeList:
        for j in Original:
            if j[1] == i:
                OriLetter += j[0]
    # print(OriLetter)

    SortedLetter = """"
    for i in dupeList:
        for j in Sorted:
            if j[1] == i:
                SortedLetter += j[0]
    # print(SortedLetter)

    return True if OriLetter == SortedLetter else False

Length = int(input())
Array = input()
a = list(map(str,Array.split()))

card_default = [[i[0], int(i[1])] for i in a]
card = [[i[0], int(i[1])] for i in a]
card2 = [[i[0], int(i[1])] for i in a]

PrintCard(BubbleSort(card))
print(""Stable"") if isStable(card_default, card) == True else print(""Not stable"")

PrintCard(SelectionSort(card2))
print(""Stable"") if isStable(card_default, card2) == True else print(""Not stable"")
"
8634853,ALDS1_2_C,"def bubbleSort(CB, N):
    for i in range(N):
        for j in reversed(range(i+1, N)):
            if int(CB[j][1]) < int(CB[j-1][1]):
                tmp = CB[j]
                CB[j] = CB[j-1]
                CB[j-1] = tmp
                
def selectSort(CS, N):
    for i in range(N):
        minj = i
        for j in range(i, N):
            if int(CS[j][1]) < int(CS[minj][1]):
                minj = j
        tmp = CS[i]
        CS[i] = CS[minj]
        CS[minj] = tmp

def stableCheck(arr, sort_arr):
    for i in range(len(arr) -1 ):
        if sort_arr[i][1] == sort_arr[i+1][1] and arr.index(sort_arr[i]) > arr.index(sort_arr[i+1]):
            return 'Not stable'
    return 'Stable'
            

num = int(input())
input_arr = input().split(' ')
bubble = input_arr[:]
select = input_arr[:]

bubbleSort(bubble, num)
print(' '.join(bubble))
print(stableCheck(input_arr, bubble))

selectSort(select, num)
print(' '.join(select))
print(stableCheck(input_arr, select))
"
8651404,ALDS1_2_C,"def bubbleSort(n, card_type, card_number, card_type_number):
    while(1):
        flag = 0

        for i in range(n - 1):
            if(card_number[i] > card_number[i + 1]):
                card_number[i], card_number[i + 1] = card_number[i + 1], card_number[i]
                card_type[i], card_type[i + 1] = card_type[i + 1], card_type[i]
                card_type_number[i], card_type_number[i + 1] = card_type_number[i + 1], card_type_number[i]

                flag = 1

        if(flag == 0):
            break

    card2 = addition(n, card_type, card_number)

    judge = sort_judge(n, card_number, card_type_number, card1, card2)

    return card2, judge

def selectionSort(n, card_type, card_number, card_type_number):
    for i in range(n):
        min_index = i

        for j in range(i + 1, n):
            if(card_number[min_index] > card_number[j]):
                min_index = j

        if(card_number[i] != card_number[min_index]):
            card_number[i], card_number[min_index] = card_number[min_index], card_number[i]
            card_type[i], card_type[min_index] = card_type[min_index], card_type[i]
            card_type_number[i], card_type_number[min_index] = card_type_number[min_index], card_type_number[i]


    card2 = addition(n, card_type, card_number)

    judge = sort_judge(n, card_number, card_type_number, card1, card2)

    return card2, judge

def addition(n, card_type, card_number):
    card =[]

    for i in range(n):
        card.append(card_type[i] + str(card_number[i]))

    return card

def sort_judge(n, card_number, card_type_number, card1, card2):
    for i in range(n - 1):
        if(card_number[i] == card_number[i + 1]):
            if(card1.index(card2[i]) > card1.index(card2[i + 1])):
                return ""Not stable""
                break

    return ""Stable""

def type_Number(n, card):
    arr = []

    for i in range(n):
        if(card[i][0] == ""S""):
            arr.append(1)
        
        if(card[i][0] == ""H""):
            arr.append(2)

        if(card[i][0] == ""C""):
            arr.append(3)

        if(card[i][0] == ""D""):
            arr.append(4)

    return arr

n = int(input())
card1 = list(input().split())

card_type = []
card_number = []

for i in range(n):
    card_type.append(card1[i][0])
    card_number.append(int(card1[i][1]))
    card_type_number = type_Number(n, card1)



bubbleSort_Card, bubbleSort_Card_judge = bubbleSort(n, card_type.copy(), card_number.copy(), card_type_number.copy())
selectionSort_Card, selectionSort_Card_judge = selectionSort(n, card_type.copy(), card_number.copy(), card_type_number.copy())

print(*bubbleSort_Card)
print(bubbleSort_Card_judge)
print(*selectionSort_Card)
print(selectionSort_Card_judge)
"
8653051,ALDS1_2_C,"
def bubble(lst):
	for j in range(len(lst)):
		for i in range(len(lst)-j-1):
			if int(lst[i][1]) > int(lst[i+1][1]):
				lst[i], lst[i+1] = lst[i+1], lst[i]

def selection(lst):
	for j in range(len(lst)):
		mini = j
		for i in range(j+1, len(lst)):
			if int(lst[i][1]) < int(lst[mini][1]):
				mini = i
		lst[j], lst[mini] = lst[mini], lst[j]

def check(lst, orig):
	nums = list(map(lambda x: int(x[1]), lst))

	for i in range(len(nums)-1):

		if nums[i] == nums[i+1]:

			if orig.index(lst[i]) > orig.index(lst[i+1]):

				print(""Not stable"")
				return
	print(""Stable"")
				


N = input()
cards = input().split()

bubblecards = cards[:]
selectioncards = cards[:]

bubble(bubblecards)
print(*bubblecards)
check(bubblecards, cards)

selection(selectioncards)
print(*selectioncards)
check(selectioncards, cards)


"
8687573,ALDS1_2_C,"N = int(input())
C = input().split()
c = C.copy()

for i in range(N):
    for j in range(N-1,i,-1):
        if int(C[j][1]) < int(C[j-1][1]):
            C[j],C[j-1] = C[j-1],C[j]
print(*C)
print('Stable')

for i in range(N):
    minj = i
    for j in range(i,N):
        if int(c[j][1]) < int(c[minj][1]):
            minj = j
    c[i],c[minj] = c[minj],c[i]
print(*c)
if c == C:
    print('Stable')
else:
    print('Not stable')
"
8689625,ALDS1_2_C,"n = int(input())
sb = list(input().split())
si = sb.copy()
#bubble sort
for i in range(n):
    for j in range(n-1,i,-1):
        if sb[j-1][1] > sb[j][1]:
            sb[j-1],sb[j] = sb[j],sb[j-1]

#insertion sort
for i in range(n):
    cur = i
    for j in range(i+1,n):
        if si[cur][1] > si[j][1]:
            cur = j
    
    si[i],si[cur] = si[cur],si[i]

print(' '.join(sb))
print(""Stable"")
print(' '.join(si))
print(""Stable"" if si == sb else ""Not stable"")
"
8704960,ALDS1_2_C,"N = int(input())
A = list(input().split())

def buble_sort(A,N):
  for i in range(N-1):
    for j in range(N-i-1):
      jnum = A[j]
      j1num = A[j+1]
      if int(str(jnum)[-1]) > int(str(j1num)[-1]):
        A[j], A[j+1] = A[j+1], A[j]

def selection_sort(A,N):
  for i in range(0, N-1):
    min = i
    for j in range(i+1, N):
      minnum = A[min]
      jnum = A[j]
      if int(str(jnum)[-1]) < int(str(minnum)[-1]):
        min = j
    
    if min != i:
      A[i], A[min] = A[min], A[i]
      

def if_stable(A,B):
  for i in range(N):
    if A[i] != B[i]:
      return False
  
  return True

blist = list(A)
buble_sort(blist,N)

output = ' '.join(str(x) for x in blist)
print(output)
print('Stable')

slist = list(A)
selection_sort(slist,N)
output = ' '.join(str(x) for x in slist)
print(output)

flag = if_stable(blist,slist)
if flag:
  print('Stable')
else:
  print('Not stable')
  

"
8709268,ALDS1_2_C,"n = int(input())
a = list(input().split())

b = [(i, int(ai[1]), ai) for i, ai in enumerate(a)]

def is_stable(arr):
    for i in range(len(arr) - 1):
        if arr[i][1] == arr[i + 1][1] and arr[i][0] > arr[i + 1][0]:
            return False
    return True

# bubble_sort
is_sorted = False
while not is_sorted:
    is_sorted = True
    for i in range(len(b) - 1):
        if b[i][1] > b[i + 1][1]:
            b[i], b[i + 1] = b[i + 1], b[i]
            is_sorted = False
print(*[bi[2] for bi in b])
print(""Stable"" if is_stable(b) else ""Not stable"")

c = [(i, int(ai[1]), ai) for i, ai in enumerate(a)]

# selection_sort
for i in range(len(c)):
    min_index = i
    for j in range(i + 1, len(c)):
        if c[min_index][1] > c[j][1]:
            min_index = j
    if min_index != i:
        c[min_index], c[i] = c[i], c[min_index]

print(*[ci[2] for ci in c])
print(""Stable"" if is_stable(c) else ""Not stable"")
"
8733377,ALDS1_2_C,"def bubble_sort(array, length):
    for i in range(0, length):
        for j in range(length-1, i, -1):
            if int(array[j][1]) < int(array[j-1][1]):
                array[j], array[j-1] = array[j-1], array[j]
    return array
    
def selection_sort(array, length):
    for i in range(0, length):
        minj = i
        for j in range(i, length):
            if int(array[j][1]) < int(array[minj][1]):
                minj = j
        array[i], array[minj] = array[minj], array[i]
    return array
    
length = int(input())
array = input().split()
cpy_array = list(array)
bubble_array = bubble_sort(array, len(array))
selection_array = selection_sort(cpy_array, len(cpy_array))

print(*bubble_array)
print(""Stable"")
print(*selection_array)
if bubble_array == selection_array:
    print(""Stable"")
else:
    print(""Not stable"")
"
8745674,ALDS1_2_C,"# aizu_ ALDS1_2_C_StableSort.py  バブルソート　選択ソートの比較

N = int(input())
A = input().split()
A = [ [a[0],int(a[1])] for a in A]

def selectionsort(A,N):
    cnt = 0
    for i in range(N):
        min_j = i
        for j in range(i,N):
            if A[j][1] < A[min_j][1]:
                min_j = j
        if i == min_j: continue
        A[i],A[min_j] = A[min_j],A[i]
        cnt += 1
    return A[:],cnt

def bubblesort(A,N):
    flag = 1
    cnt = 0
    while flag:
        flag = 0
        for j in range(N-1,0,-1):
            if A[j][1] < A[j-1][1]:
                cnt += 1
                A[j],A[j-1] = A[j-1],A[j]
                flag = 1
    return A[:],cnt

r_bubble,cnt = bubblesort(A[:],N)
r_select,cnt = selectionsort(A[:],N) 

def p_print(A):
    ans = [ a[0]+str(a[1]) for a in A]
    print(*ans)

p_print(r_bubble)
print('Stable')

p_print(r_select)
print('Stable' if r_bubble == r_select else 'Not stable')
"
8768061,ALDS1_2_C,"num1 = int(input())
risuto = []
risuto2 = []
retu = input().split("" "")
cnt1 = num1 - 1
cnt2 = num1 - 1
cnt = 0
kaisu = 0
cnt123 = 0

#バブルソート

for x in range(num1):
    risuto.append(retu[x])
    risuto2.append(retu[x])
    
for i in range(num1 - 1):
    for j in range(cnt1):
        if int(risuto[cnt2 - j][1]) < int(risuto[cnt2 - j - 1][1]):
            risuto[cnt2 - j], risuto[cnt2 - j - 1] = risuto[cnt2 - j - 1], risuto[cnt2 - j]
            kaisu = kaisu + 1
            
    cnt1 = cnt1 - 1

for y in range(len(risuto)):
    if y + 1 == len(risuto):
        print(risuto[y])
    else:
        print(risuto[y], end="" "")

print(""Stable"")


for i in range(0, (num1 - 1)):
    minj = i
    for j in range(i, num1):
        if int(risuto2[j][1]) < int(risuto2[minj][1]):
            minj = j
    if int(risuto2[i][1]) > int(risuto2[minj][1]):
        risuto2[i], risuto2[minj] = risuto2[minj], risuto2[i]
        cnt = cnt + 1

for y in range(num1):
    if y + 1 == num1:
        print(risuto2[y])
    else:
        print(risuto2[y], end="" "")

if risuto == risuto2:
    print(""Stable"")
else:
    print(""Not stable"")
"
8773546,ALDS1_2_C,"n = int(input())
*C, = input().split()
b = C[:]

for i in range(n):
    for j in range(n-1,i,-1):
        if C[j][1] < C[j - 1][1]:
            C[j],C[j - 1] = C[j - 1],C[j]
print(*C)
print(""Stable"")

for i in range(n - 1):
    min_C = i
    for j in range(i,n):
        if b[j][1] < b[min_C][1]:
            min_C = j
    if b[i] != b[min_C]:
        b[i],b[min_C] = b[min_C],b[i]
print(*b)
if C == b:
    print(""Stable"")
else:
    print(""Not stable"")
"
8815805,ALDS1_2_C,"def isStable(ina, outa):

    for i in range(len(ina)):
        if ina[i][0] != outa[i][0] or ina[i][0] != outa[i][0]:
            return False
            break
    return True

n = int(input())
a = list(map(str,input().split()))

cnt = 0

c = a.copy()

for i in range(len(c)-1):
    for j in range(len(c)-1,i,-1):
        if c[j][1] < c[j-1][1]:
            c[j-1],c[j] = c[j],c[j-1]
print("" "".join(c))
print(""Stable"")

c1 = a.copy()

for i in range(len(c1)-1):
    minj = i
    flag = 0
    for j in range(i,len(c1)):
        if c1[j][1] < c1[minj][1]:
            minj = j
            flag = 1
    if flag==1:
        c1[minj],c1[i] = c1[i],c1[minj]

print("" "".join(c1))

if isStable(c, c1) == True:
    print(""Stable"")
else:
    print(""Not stable"")

"
8837709,ALDS1_2_C,"n = int(input())
*A, = input().split()
B = A[:]
for i in range(n):
    for j in range(n-1, i, -1):
        if A[j][1] < A[j-1][1]:
            A[j], A[j-1] = A[j-1], A[j]
print(*A)
print(""Stable"")

for i in range(n):
    mj = i
    for j in range(i, n):
        if B[j][1] < B[mj][1]:
            mj = j
    B[i], B[mj] = B[mj], B[i]
print(*B)
if A == B:
    print(""Stable"")
else:
    print(""Not stable"")
"
8846200,ALDS1_2_C,"n = int(input())
a = list(input().split())
bubble = a
sorting = bubble.copy()

for i in range(n-1):
    for j in range(n-1,i,-1):
        if int(bubble[j][1]) < int(bubble[j-1][1]):
            bubble[j], bubble[j-1] = bubble[j-1], bubble[j]
print(*bubble)
print('Stable')

for i in range(n-1):
    minj = i
    for j in range(i+1,n):
        if int(sorting[j][1]) < int(sorting[minj][1]):
            minj = j
    sorting[i], sorting[minj] = sorting[minj], sorting[i]
print(*sorting)
if sorting == bubble:
    print('Stable')
else:
    print('Not stable')
"
8856842,ALDS1_2_C,"def bubblesort(lst,n):
  for i in range(n):
    for j in range(n-1, i, -1):
      if lst[j][1:] < lst[j-1][1:]:
        lst[j], lst[j-1] = lst[j-1], lst[j]
  
def selectsort(lst, n):
  for i in range(N):
    minj = i
    for j in range(i, n):
      if lst[j][1:] < lst[minj][1:]:
        minj = j
    lst[i], lst[minj] = lst[minj], lst[i]

N = int(input())
A = [*map(str, input().split())]
B = A.copy()

bubblesort(A, N)
selectsort(B, N)
print(*A)
print(""Stable"")
print(*B)
print(""Stable"") if A == B else print(""Not stable"")
"
8875303,ALDS1_2_C,"N = int(input())
A = input().split()


def order(A):
    N = len(A)
    orderMap = {}
    for i in range(N):
        key = A[i][1:]
        value = orderMap.get(key, """") + A[i][0]
        orderMap[key] = value
    return orderMap


def check_stable(cards, orderMap):
    cardsOrder = order(cards)
    for key in sorted(orderMap):
        if orderMap[key] != cardsOrder[key]:
            return ""Not stable""
    return ""Stable""


def bubble_sort(A):
    cards = A[:]
    N = len(cards)
    flag = True
    while flag:
        flag = False
        for j in range(N - 1, 0, -1):
            if cards[j][1:] < cards[j - 1][1:]:
                cards[j], cards[j - 1] = cards[j - 1], cards[j]
                flag = True
    return cards


def selection_sort(A):
    cards = A[:]
    for i in range(N):
        minj = i
        for j in range(i, N):
            if cards[j][1:] < cards[minj][1:]:
                minj = j
        cards[i], cards[minj] = cards[minj], cards[i]
    return cards


res = order(A)

ans1 = bubble_sort(A)
print("" "".join(map(str, ans1)))

print(check_stable(ans1, res))

ans2 = selection_sort(A)
print("" "".join(map(str, ans2)))
print(check_stable(ans2, res))
"
8881786,ALDS1_2_C,"n = int(input())
l = input().split()

def bubble(l):
    xl = l.copy()
    le = len(l)
    for i in range(le):
        for j in range(le - 1, i, -1):
            if xl[j][1] < xl[j - 1][1]:
                xl[j], xl[j - 1] = xl[j - 1], xl[j]
    return xl
    
def select(l):
    xl = l.copy()
    le = len(l)
    for i in range(le):
        minj = i
        for j in range(i, le):
            if xl[j][1] < xl[minj][1]:
                minj = j
        xl[i], xl[minj] = xl[minj], xl[i]
    return xl

bl = bubble(l)
sl = select(l)
print(*bl)
print(""Stable"")
print(*sl)
cl = [[] for i in range(4)]
cxl = [[] for i in range(4)]
for i in range(len(l)):
    if l[i][0] == 'S':
        cl[0].append(l[i][1])
    elif l[i][0] == 'H':
        cl[1].append(l[i][1])
    elif l[i][0] == 'C':
        cl[2].append(l[i][1])
    elif l[i][0] == 'D':
        cl[3].append(l[i][1])
        
    if sl[i][0] == 'S':
        cxl[0].append(sl[i][1])
    elif sl[i][0] == 'H':
        cxl[1].append(sl[i][1])
    elif sl[i][0] == 'C':
        cxl[2].append(sl[i][1])
    elif sl[i][0] == 'D':
        cxl[3].append(sl[i][1])
    
def check(cl, cxl):
    for i in range(4):
        for j in range(len(cl[i])):
            if cl[i][j] != cxl[i][j]:
                return False
    return True
    
if check(cl, cxl):
    print(""Stable"")
else:
    print(""Not stable"")
    

"
8881873,ALDS1_2_C,"def BubbleSort(A, N):
    # 後ろから大きいものを前にスワップしていく
    flag = True
    cnt = 0
    while flag:
        flag = False
        for i in range(1, N)[::-1]:
            if A[i] < A[i-1]:
                A[i], A[i-1] = A[i-1], A[i]
                cnt += 1
                flag = True
    return A, cnt

def SelectionSort(A, N):
    # 前から最小値を見つけてスワップしていく
    cnt = 0
    for i in range(N):
        minpos = i
        for j in range(i+1, N):
            if A[j] < A[minpos]:
                minpos = j
        if i != minpos:
            A[i], A[minpos] = A[minpos], A[i]
            cnt += 1
    return A, cnt

class Card:
    def __init__(self, s:str):
        self.type = s[0]
        self.value = int(s[1:])
        self.card = s

    def __lt__(self, other):
        return self.value < other.value



n = int(input())
X = list(input().split())

BSA, _ = BubbleSort(list(map(Card, X)), n)
SSA, _ = SelectionSort(list(map(Card, X)), n)

BSA = [c.card for c in BSA]
SSA = [c.card for c in SSA]

print(*BSA)
print('Stable')
print(*SSA)
if BSA == SSA:
    print('Stable')
else:
    print('Not stable')
"
8890040,ALDS1_2_C,"def bubbleSort(A):
    n = len(A)
    for i in range(n):
        for j in range(n-1,i,-1):
            if A[j][1] < A[j-1][1]:
                A[j],A[j-1] = A[j-1],A[j]
    return A

def selectionSort(A):
    n = len(A)
    for i in range(n):
        mini = i
        for j in range(i,n):
            if A[mini][1] > A[j][1]:
                mini = j
        A[mini],A[i] = A[i],A[mini]
    return A

n = int(input())
A = input().split()

bubble_sorted = bubbleSort(A.copy())
print(*bubble_sorted)
print(""Stable"")
selection_sorted = selectionSort(A.copy())
print(*selection_sorted)
if selection_sorted == bubble_sorted:
    print(""Stable"")
else:
    print(""Not stable"")

"
8899898,ALDS1_2_C,"# coding: utf-8
# Your code here!
import math

def BubbleSort(l,n):
    tmp=l.copy()
    for i in range(n):
        for j in reversed(range(i+1,n)):
            if int(tmp[j-1][1])>int(tmp[j][1]):
                tmp[j-1],tmp[j]=tmp[j],tmp[j-1]
    
    print(*tmp)    
    return tmp
    
def selectionsort(l,n):
    tmp=l.copy()
    for i in range(n):
        minj=i
        for j in range(i+1,n):
            if tmp[j][1]<tmp[minj][1]:
                minj=j
        tmp[i],tmp[minj]=tmp[minj],tmp[i]
    print(*tmp)
    return tmp

def check(n,l):
    count=0
    for i in l:
        if len(Stable_key[int(i[1])])>1:
            tmp=Stable_key[int(i[1])][count]
            count+=1
            if tmp!=i[0]:
                return ""Not stable""
            if count==len(Stable_key[int(i[1])]):
                count=0
    return ""Stable""
    
n=int(input())
l=list(input().split())

Stable_key={ int(i[1]):[]for i in l}
for i in l:
    Stable_key[int(i[1])].append(i[0])
#print(Stable_key[4][1],Stable_key[4])

Bubble_list=BubbleSort(l,n)
print(check(n,Bubble_list))
selection_List=selectionsort(l,n)
print(check(n,selection_List))

#print(type(int(l[1][1])))
"
8904821,ALDS1_2_C,"n=int(input())
a=input().split()

def bubblesort(c,n):
    for i in range(n):
        for j in range(n-1,i,-1):
            if c[j][1]<c[j-1][1]:
                c[j],c[j-1]=c[j-1],c[j]

def selectionsort(c,n):
    for i in range(n):
        minj=i
        for j in range(i,n):
            if c[j][1]<c[minj][1]:
                minj=j
        c[i],c[minj]=c[minj],c[i]

a_bub=a[:]
bubblesort(a_bub,n)
print(*a_bub)
print(""Stable"")

selectionsort(a,n)
print(*a)
print(""Stable"" if a==a_bub else ""Not stable"")
"
8918839,ALDS1_2_C,"def bubbleSort(A, N):
    for i in range(N):
        for j in range(N - 1, i, -1):
            if A[j][1] < A[j - 1][1]:
                A[j], A[j - 1] = A[j - 1], A[j]
    return A


def selectionSort(A, N):
    for i in range(N):
        minj = i
        for j in range(i, N):
            if A[j][1] < A[minj][1]:
                minj = j
        if minj != i:
            A[i], A[minj] = A[minj], A[i]
    return A


def is_stable(A, B):
    for i in range(len(B) - 1):
        if B[i][1] == B[i + 1][1]:
            if A.index(B[i]) > A.index(B[i + 1]):
                return False
    return True


N = int(input())
A = list(input().split())

B = bubbleSort(A[:], N)
print(*B)
if is_stable(A, B):
    print('Stable')
else:
    print('Not stable')

S = selectionSort(A[:], N)
print(*S)
if is_stable(A, S):
    print('Stable')
else:
    print('Not stable')
"
8925003,ALDS1_2_C,"def bubbleSort(c, n):
    for i in range(n):
        for j in range(n-1, i, -1):
            if c[j][-1] < c[j-1][-1]:
                t = c[j]
                c[j] = c[j-1]
                c[j-1] = t

def selectionSort(c, n):
    for i in range(n):
        minj = i
        for j in range(i, n):
            if c[j][-1] < c[minj][-1]:
                minj = j
        t = c[i]
        c[i] = c[minj]
        c[minj] = t

n = int(input())
card = list(map(str, input().split()))
b_card = card[:]

bubbleSort(b_card, n)
for i in range(n):
    if i != n-1:
        print(b_card[i], end="" "")
    else:
        print(b_card[i])
        print(""Stable"")

s_card = card[:]
selectionSort(s_card, n)
for i in range(n):
    if i != n-1:
        print(s_card[i], end="" "")
    else:
        print(s_card[i])

if b_card == s_card:
    print(""Stable"")
else:
    print(""Not stable"")

"
8938215,ALDS1_2_C,"import copy

def bubble(A:list, n:int) -> tuple[list, int]:
    flag = True
    cnt = 0
    while flag:
        flag = False
        for i in range(n-1, 0, -1):
            if int(A[i][1]) < int(A[i-1][1]):
                A[i], A[i-1] = A[i-1], A[i]
                cnt += 1
                flag = True
    return A, cnt

def selection(A:list, n:int) -> tuple[list, int]:
    cnt = 0
    for i in range(n):
        flag = False
        minj = i
        for j in range(i, n):
            if int(A[minj][1]) > int(A[j][1]):
                minj = j
                flag = True
        A[minj], A[i] = A[i], A[minj]
        if flag:
            cnt += 1
    return A, cnt

def make_sort_dic(A:list) -> dict[str, list]:
    sort_dic = {}
    for a in A:
        mark = a[0]
        num = int(a[1])
        if num not in sort_dic:
            sort_dic[num] = [mark]
        else:
            sort_dic[num].append(mark)
    return sort_dic

def is_equivalent_dic(dic1:dict, dic2:dict) -> bool:
    for k in dic1.keys():
        for m1, m2 in zip(dic1[k], dic2[k]):
            if m1 != m2:
                return False
    return True

n = int(input())
A = input().split()
ref_dic = make_sort_dic(A)

new_Ab, _ = bubble(copy.deepcopy(A), n)
new_As, _ = selection(copy.deepcopy(A), n)

print(*new_Ab)
b_flag = is_equivalent_dic(ref_dic, make_sort_dic(new_Ab))
print(""Stable"" if b_flag else ""Not stable"")

print(*new_As)
s_flag = is_equivalent_dic(ref_dic, make_sort_dic(new_As))
print(""Stable"" if s_flag else ""Not stable"")
"
8938263,ALDS1_2_C,"N = int(input())
A = input().split()


def bubbleSort(ary, N):
    A = ary.copy()
    cnt = 0
    for i in range(N):
        for j in range(N-1, i, -1):
            if int(A[j][1]) < int(A[j-1][1]):
                A[j], A[j-1] = A[j-1], A[j]
                cnt += 1

    return A


def selectionSort(ary, N):
    A = ary.copy()
    cnt = 0
    for i in range(N):
        minj = i
        for j in range(i+1, N):
            if int(A[j][1]) < int(A[minj][1]):
                minj = j

        if i != minj:
            A[i], A[minj] = A[minj], A[i]
            cnt += 1

    return A


def isStable(bubbleSorted, selectionSorted):
    for bubbleValue, selectionValue in zip(bubbleSorted, selectionSorted):
        if bubbleValue != selectionValue:
            return False
    return True


bubbleSorted = bubbleSort(A, N)
selectionSorted = selectionSort(A, N)

print(' '.join(map(str, bubbleSorted)))
print('Stable')
print(' '.join(map(str, selectionSorted)))
if isStable(bubbleSorted, selectionSorted):
    print('Stable')
else:
    print('Not stable')

"
8944338,ALDS1_2_C,"# 安定なソート
# バブルソート
def bubble_sort(C, N):
    flag = True
    while flag:
        flag = False
        for j in range(N - 1, 0, -1):
            if C[j][1] < C[j - 1][1]:  # 条件とインデックスを修正
                C[j], C[j - 1] = C[j - 1], C[j]
                flag = True
    return C

# 選択ソート
def selection_sort(C, N):
    for i in range(N):
        minj = i
        for j in range(i, N):
            if C[j][1] < C[minj][1]:
                minj = j
        if minj != i:
            C[i], C[minj] = C[minj], C[i]
    return C

# 入力
N = int(input())
C = input().split()

# バブルソート
bubble_C = bubble_sort(C[:], N)  # Cのコピーを渡す
print(' '.join(bubble_C))
print(""Stable"")

# 選択ソート
selection_C = selection_sort(C[:], N)  # Cの新しいコピーを渡す
print(' '.join(selection_C))
if bubble_C == selection_C:  # ソートされたリストの内容を比較
    print(""Stable"")
else:
    print(""Not stable"")



"
8960161,ALDS1_2_C,"import copy
def BS(lst,n):
    for i in range(1,n):
        for j in range(i):
            if int(list(lst[i-j])[1]) < int(list(lst[i-j-1])[1]):
                lst[i-j-1] , lst[i-j] = lst[i-j] , lst[i-j-1]

def SS(lst,n):
    for i in range(n):
        minj = i
        for j in range(i,n):
            if int(list(lst[j])[1]) < int(list(lst[minj])[1]):
                minj = j
        lst[i],lst[minj] = lst[minj],lst[i]
    
n = int(input())
lst = list(input().split())
lst2 = copy.deepcopy(lst)
BS(lst,n)
for i in range(n-1):
    print(lst[i],end="" "")
print(lst[n-1])
print(""Stable"")
SS(lst2,n)
for i in range(n-1):
    print(lst2[i],end="" "")
print(lst2[n-1])
if lst == lst2:
    print(""Stable"")
else:
    print(""Not stable"")
"
8340720,ALDS1_2_D,"def insertionSort(A, n, g):
    cnt = 0
    for i in range(g, n):
        v = A[i]
        j = i - g
        while j >= 0 and A[j] > v:
            A[j + g] = A[j]
            j = j - g
            cnt += 1
        A[j + g] = v
    return cnt

def shellSort(A, n):
    G = list([int((2.25**i-1)/1.25) for i in range(17, 0, -1)])
    G = [x for x in G if x <= n]
    m = len(G)
    cnt = 0

    for i in G:
        cnt += insertionSort(A, n, i)
    
    return m, G, cnt, A

n = int(input())
A = []
for _ in range(n):
    A.append(int(input()))

m, G, cnt, a = shellSort(A, n)
print(len(G))
print(*G)
print(cnt)
print(""\n"".join(map(str, a)))
"
8535871,ALDS1_2_D,"cnt = 0
def insertionsort(A, n, g):
    global cnt
    for i in range(g, n):
        j = i - g
        v = A[i]
        while j >= 0 and A[j] > v:
            A[j + g] = A[j]
            j -= g
            cnt += 1
        A[j + g] = v

n = int(input())
A = [int(input()) for _ in range(n)]

G = [1]
i = 1
while 1:
    tmp = 4 ** i + 3 * 2 ** (i - 1) + 1
    if tmp > n:
        break
    G.append(tmp)
    i += 1


m = len(G)
G = G[::-1]
    
for g in G:
    insertionsort(A, n, g)
print(m)
print(*G)
print(cnt)
print(*A, sep=""\n"")

"
8898873,ALDS1_2_D,"n = int(input())
A = [int(input()) for _ in range(n)]

def insertionSort(A, g):
    cnt = 0
    n = len(A)
    for i in range(g, n):
        v = A[i]
        j = i - g
        while j >= 0 and A[j] > v:
            A[j + g] = A[j]
            j -= g
            cnt += 1
        A[j + g] = v
    return cnt

def shellSort(A):
    n = len(A)
    cnt = 0
    G = []
    g = 1
    while g <= n:
        G.insert(0, g)  # Gの先頭に追加して降順に
        g = 3*g + 1

    m = len(G)
    for i in range(m):
        cnt += insertionSort(A, G[i])

    return m, G, cnt, A

m, G, cnt, sorted_A = shellSort(A)

print(m)
print(' '.join(map(str, G)))
print(cnt)
for a in sorted_A:
    print(a)

"
8408912,ALDS1_2_D,"def insertionSortWithGap(A, n, g):
    cnt = 0
    for i in range(g, n):
        v = A[i]
        j = i - g
        while j >= 0 and A[j] > v:
            A[j + g] = A[j]
            j -= g
            cnt += 1
        A[j + g] = v
    return cnt

def shellSort(A, n, G):
    cnt = 0
    m = len(G)
    for i in range(m):
        cnt += insertionSortWithGap(A, n, G[i])
    return cnt

n = int(input())  # カードの枚数 n
A = [int(input()) for _ in range(n)]  # n 個の整数 Ai を入力

# G[] の値を適切に設定
G = []
h = 1
while h <= n:
    G.append(h)
    h = 3 * h + 1
G = G[::-1]  # 逆順にソート

cnt = shellSort(A, n, G)

# 結果を出力
print(len(G))  # 整数 m を出力
print("" "".join(map(str, G)))  # G[] を空白区切りで出力
print(cnt)  # G を用いた場合の cnt の値を出力
for a in A:
    print(a)  # 整列した Ai を出力

"
8748640,ALDS1_2_D,"# aizu_ALDS1_2_D_ShellSort.py  

def insertionsort(A,n,g):
    cnt = 0
    for i in range(g,n):
        v = A[i]
        j = i-g
        while j>=0 and A[j]>v:
            A[j+g] = A[j]
            j -= g
            cnt += 1
        A[j+g] = v
    return A,cnt

def shellsort(A,n):
    cnt = 0
    h = 1
    G = []
    while h < n+1:
        G.append(h)
        h = 3 * h  +1

    G.reverse()
    for i in G:
        A,cnt0 = insertionsort(A,n,i)
        cnt += cnt0
    return A,len(G),G,cnt

n = int(input())
A = [ int(input()) for _ in range(n)]
if n == 1:
    print(1,1,0,A[0],sep='\n')
    exit()
ans,m,G,cnt = shellsort(A,n)

print(m)
print(*G)
print(cnt)
print(*ans,sep='\n')
"
8885266,ALDS1_2_D,"n = int(input())
l = [int(input()) for i in range(n)]

def insertionSort(A, n, g):
    cnt = 0
    for i in range(g, n):
        v = A[i]
        j = i - g
        while j >= 0 and A[j] > v:
            A[j + g] = A[j]
            j -= g
            cnt += 1
        A[j + g] = v
    return cnt

from collections import deque
G = deque()
G.appendleft(1)
x = 1
while 1:
    x = 3 * x + 1
    if x > n:
        break
    else:
        G.appendleft(x)

def shellSort(A, n, G):
    cnt = 0
    m = len(G)
    for i in range(m):
        cnt += insertionSort(A, n, G[i])
    return cnt
    
print(len(G))
print(*G)
print(shellSort(l, n, G))
print('\n'.join(map(str, l)))
"
8900460,ALDS1_2_D,"def insertionSort(A, n, g, cnt):
    for i in range(g, n):
        v = A[i]
        j = i - g
        while j >= 0 and A[j] > v:
            A[j + g] = A[j]
            j -= g
            cnt += 1
        A[j + g] = v
    return cnt

def shellSort(A, n):
    gaps = []
    h = 1
    while h <= n:
        gaps.append(h)
        h = 3 * h + 1

    m = len(gaps)
    print(m)
    gaps.reverse()
    print(*gaps)

    cnt = 0
    for gap in gaps:
        cnt = insertionSort(A, n, gap, cnt)
    print(cnt)
    return A

n = int(input())
l = [int(input()) for _ in range(n)]
sorted_list = shellSort(l, n)

for num in sorted_list:
    print(num)
"
8856873,ALDS1_2_D,"def insertionSort(A, n, g, cnt):
    for i in range(g, n):
        v = A[i]
        j = i - g
        while j >= 0 and A[j] > v:
            A[j+g] = A[j]
            j = j - g
            cnt += 1
        A[j+g] = v
    return cnt

def shellSort(A, n):
    cnt = 0
    G = []
    h = 1
    while h <= n:
        G.append(h)
        h = 3*h + 1
    G.reverse()
    m = len(G)
    for i in range(m):
        cnt = insertionSort(A, n, G[i], cnt)
    return m, G, cnt, A

n = int(input())
A = [int(input()) for _ in range(n)]
m, G, cnt, A = shellSort(A, n)

print(m)
print(' '.join(map(str, G)))
print(cnt)
for a in A:
    print(a)

"
8944382,ALDS1_2_D,"def insertion_sort(A, N, g):
    cnt = 0
    for i in range(g, N):
        v = A[i]
        j = i - g
        while j >= 0 and A[j] > v:
            A[j + g] = A[j]
            j -= g
            cnt += 1
        A[j + g] = v
    return cnt

def shell_sort(A, N):
    cnt = 0
    G = []
    # 動的に間隔Gを生成
    g = 1
    while g <= N:
        G.append(g)
        g = 3*g + 1  # 間隔を増加させるための一般的な式

    # 大きい間隔から処理する
    G.reverse()

    for g in G:
        cnt += insertion_sort(A, N, g)

    return G, cnt

# 入力
N = int(input())
A = [int(input()) for _ in range(N)]

# シェルソートを実行
G, cnt = shell_sort(A, N)

# 出力
print(len(G))
print(' '.join(map(str, G)))
print(cnt)
for a in A:
    print(a)


"
8938307,ALDS1_2_D,"def insert(A:list, n:int, g:int) -> tuple[list, int]:
    cnt = 0
    for i in range(g, n):
        v = A[i]
        j = i-g
        while j >= 0 and v < A[j]:
            A[j+g] = A[j]
            j -= g
            cnt += 1
        A[j+g] = v
    return A, cnt

def make_g(n:int) -> list:
    g = []
    rec = 1
    while rec <= n:
        g.append(rec)
        rec = 3*rec+1
    g = list(reversed(g))
    return g

def shell(A:list, n:int):
    ans = 0
    G = make_g(n)
    print(len(G))
    print(*G)
    for i in range(len(G)):
        A, cnt = insert(A, n, G[i])
        ans += cnt
        # print(A, cnt)
    print(ans)
    for a in A:
        print(a)

n = int(input())
A = []
for _ in range(n):
    A.append(int(input()))

shell(A, n)
"
9034086,ALDS1_2_D,"def insertionSort(A, n, g):
    cnt = 0
    for i in range(g, n):
        v = A[i]
        j = i - g
        while j >= 0 and A[j] > v:
            A[j+g] = A[j]
            j = j - g
            cnt += 1
        A[j + g] = v
    return cnt
        
def shellSort(A, n):
    cnt = 0
    m = 1
    G = []
    g = 1
    while g <= n:
        G.append(g)
        m += 1
        g = int((3**m - 1)/2)
    m -= 1
    G.reverse()
    print(m)
    print("" "".join(map(str,G)))
    for i in range(m):
        cnt += insertionSort(A, n, G[i])
    print(cnt)
    for a in A:
        print(a)

n = int(input())
a = [int(input()) for _ in range(n)] 
shellSort(a, n)
"
8941750,ALDS1_2_D,"def shellSort(A):
    n = len(A)
    cnt = 0
    G = []
    g = 1
    while g <= n:
        G.append(g)
        g = 3*g + 1  # このギャップ生成法は、実際のところ適当な選択です。
    G.reverse()  # ギャップの値を大きいものから小さいものへと並べ替える
    m = len(G)
    
    for i in range(m):
        cnt += insertionSort(A, G[i])
    
    return m, G, cnt

def insertionSort(A, g):
    cnt = 0
    n = len(A)
    for i in range(g, n):
        v = A[i]
        j = i - g
        while j >= 0 and A[j] > v:
            A[j + g] = A[j]
            j -= g
            cnt += 1
        A[j + g] = v
    return cnt

# 入力処理
n = int(input())
A = [int(input()) for _ in range(n)]

m, G, cnt = shellSort(A)

print(m)
print("" "".join(map(str, G)))
print(cnt)
for a in A:
    print(a)

"
8795812,ALDS1_2_D,"def insertionSort(A, n, g, cnt):
    for i in range(g,n):
        v = A[i]
        j = i - g 
        while j >= 0 and A[j] > v:
            A[j+g] = A[j]
            j = j - g 
            cnt += 1
        A[j+g] = v 
    return cnt, A

def shellSort(A, n): 
    G = []
    g = 1 
    while g <= n:
        G.insert(0, g)
        g = 3*g + 1 
    m = len(G)
    print(m)
    print(*G)
    cnt = 0 
    for i in range(m):
        cnt, A = insertionSort(A, n, G[i], cnt)
    print(cnt)
    for i in A:
        print(i)

n = int(input())
A = []
for i in range(n):
    A.append(int(input()))

shellSort(A, n)

"
8247421,ALDS1_2_D,"import math
def insertionsort(L,N,g):
    c = 0
    for i in range(g,N):       
        v = L[i]
        j = i - g
        while j >= 0 and L[j] > v:
            L[j + g] = L[j]
            j = j - g
            c += 1
        L[j + g] = v
       
    return c

N = int(input())
L = []
for _ in range(N):
    L.append(int(input()))
    
m = int(math.log2(N))
G = []
a = 2**m - 1
for _ in range(m):
    G.append(a)
    a = (a - 1)//2
    
if m == 0:
    m = 1
    G = [1]
    
    
    
print(m)
print(' '.join(list(map(str,G))))

count = 0
for g in G:
    count += insertionsort(L,N,g)
    
    
print(count)
for i in L:
    print(i)
"
8938356,ALDS1_2_D,"N = int(input())
A = []
for i in range(N):
    A.append(int(input()))


def insertionSort(A, N, g, cnt):
    for i in range(g, N):
        v = A[i]
        j = i - g
        while j >= 0 and A[j] > v:
            A[j+g] = A[j]
            j -= g
            cnt += 1
        A[j+g] = v
    return cnt


def shellSort(A, N):
    cnt = 0
    G = [1]

    g = 3 * G[-1] + 1
    while g < N:
        G.append(g)
        g = 3 * G[-1] + 1
    G.reverse()

    m = len(G)
    for g in G:
        cnt = insertionSort(A, N, g, cnt)

    return m, G, cnt


m, G, cnt = shellSort(A, N)
print(m)
print(' '.join(map(str, G)))
print(cnt)
for a in A:
    print(a)

"
8407620,ALDS1_2_D,"from math import ceil

def insertionSort(A, n, g) -> int:
    cnt = 0
    for i in range(g, n):
        v = A[i]
        j = i - g
        while j >= 0 and A[j] > v:
            A[j+g] = A[j]
            j = j - g
            cnt += 1
        A[j+g] = v
    return cnt

def shellSort(A, n):
    cnt = 0
    m = 1
    G = [1]
    for i in range(2, n):
        g = int(((3**i)-1)/2)
        if g > ceil(n / 3):
            m = i - 1
            break
        G.append(g)
    G.reverse()
    for i in range(m):
        cnt += insertionSort(A, n, G[i])
    
    print(m)
    print(*G)
    print(cnt)

n = int(input())
A = []
for _ in range(n):
    A.append(int(input()))

shellSort(A, n)

for i in range(n):
    print(A[i])

"
9156033,ALDS1_2_D,"def insertion_sort(array, n, g):
    global count
    for i in range(g, n):
        v = array[i]
        j = i - g
        while j >= 0 and array[j] > v:
            array[j + g] = array[j]
            j = j - g
            count += 1
        array[j + g] = v


def shell_sort(array, n):
    global count
    count = 0
    g = []
    i = n // 3
    while i > 1:
        g.append(i)
        i //= 3
    g.append(1)
    m = len(g)
    for i in range(0, m):
        insertion_sort(array, n, g[i])
    print(m)
    print(*g)
    print(count)
    print(*array, sep='\n')


n = int(input())
array = []
for _ in range(n):
    array.append(int(input()))
shell_sort(array, n)

"
8454608,ALDS1_2_D,"import sys

input = sys.stdin.readline

def print_list(array, string):
    print(string.join(map(str, array)))

def insertion_sort(n, array, g):
    global cnt
    for i in range(1, n):
        temp = array[i]
        j = i - g
        while j >= 0 and array[j] > temp:
            array[j + g] = array[j]
            j -= g
            cnt+=1
        
        array[j + g] = temp

def shell_sort(n, array):
    i = 1
    while i <= n:
        G.append(i)
        i = 3 * i + 1
    
    G.reverse()
    for g in G:
        insertion_sort(n, array, g)


def main():
    n = int(input())
    array = []
    for i in range(n):
        a = int(input())
        array.append(a)
    
    shell_sort(n, array)
    
    # output
    print(len(G))
    print_list(G, "" "")
    print(cnt)
    print_list(array, ""\n"")
    

if __name__ == ""__main__"":
    cnt = 0
    G = []
    main()
"
9094299,ALDS1_2_D,"def shell_sort(A):
    A = A[:]
    n = len(A)
    cnt = 0
    def insertion(g):
        nonlocal A
        nonlocal n
        nonlocal cnt
        for i in range(g,n):
            v = A[i]
            j = i - g
            while j >= 0 and A[j] > v:
                A[j+g] = A[j]
                j = j - g
                cnt += 1
            A[j+g] = v
    gs = [1]
    while gs[-1] <= len(A):
        gs.append(gs[-1] * 4 + 1)
    gs = gs[:-1][::-1]
    for g in gs:
        insertion(g)
    return A,cnt,gs

n = int(input())
A = [int(input()) for _ in range(n)]
A,cnt,gs = shell_sort(A)
print(len(gs))
print(*gs)
print(cnt)
for i in A:
    print(i)


"
8844787,ALDS1_2_D,"N = int(input())
A = []
for i in range(N):
    A.append(int(input()))
 
def insertionSort(N,A,g):
    global cnt
    for i in range(g,N):
        v = A[i]
        j = i-g
        while A[j] > v and j >= 0:
            A[j+g] = A[j]
            j -= g
            cnt += 1
        A[j+g] = v
    return A    
      
def shellSort(N,A):
    global cnt
    cnt = 0
    m = 1
    G = [1]
    x = 1
    for i in range(N):
        x = 3*x + 1
        if x > N:
            break
        G.insert(0,x)
        m += 1
    
    for i in range(m):
        A = insertionSort(N,A,G[i])
    
    return cnt,A,m,G
 
cnt,A,m,G = shellSort(N,A)
print(m)
print("" "".join([str(g) for g in G]))
print(cnt)
for i in range(len(A)):
    print(A[i])
"
8575014,ALDS1_2_D,"from math import log2
import sys

cnt = 0


def insertionSort(A, n, g):
    global cnt
    for i in range(g, n):
        v = A[i]
        j = i - g
        while j >= 0 and A[j] > v:
            A[j+g] = A[j]
            j -= g
            cnt += 1
        A[j+g] = v

A = []
n = int(input())
for i in range(n):
    A.append(int(input()))

if n == 1:
    print(1)
    print(A[0])
    print(0)
    print(A[0])
    sys.exit()
G = []
m = int(log2(n))
for i in range(m, 0, -1):
    G.append(2**i-1)
for i in range(m):
    insertionSort(A, n, G[i])
print(m)
if m > 1:
    for i in G[:-1]:
        print(i, end="" "")
    print(G[-1])
else:
    print(G[0])
print(cnt)
for i in A:
    print(i)
"
8402767,ALDS1_2_D,"import math

def ins(a, n, g):
    global cnt
    for i in range(g, n):
        v = a[i]
        j = i - g
        while j >= 0 and a[j] > v:
            a[j + g] = a[j]
            j -= g
            cnt += 1
        a[j + g] = v

n = int(input())
a = [int(input()) for _ in range(n)]
m = int(math.log(2 * n + 1, 3))
g = [int((3 ** k - 1) / 2) for k in range(m, 0, -1)]
cnt = 0
for i in g: ins(a, n, i)

print(m)
print(*g)
print(cnt)
for i in a: print(i)
"
8836314,ALDS1_2_D,"def insertionSort(A, n, g):
    global cnt
    for i in range(g, n):
        v = A[i]
        j = i - g
        while j >= 0 and A[j] > v:
            A[j+g] = A[j]
            j = j - g
            cnt += 1
        A[j+g] = v

n = int(input())
A = [int(input()) for i in range(n)]

cnt = 0
G = [1]
for i in range(99):
    if n < 1 + 3*G[-1]:
        break
    G.append(1 + 3*G[-1])
m = len(G)
G.reverse()
for i in range(m):
    insertionSort(A, n, G[i])

print(m)
print(*G)
print(cnt)
print(*A, sep='\n')
"
8643504,ALDS1_2_D,"cnt = 0

def insertionSort(A, n, g):
    global cnt
    for i in range(g, n):
        v = A[i]
        j = i - g
        while j >= 0 and A[j] > v:
            A[j+g] = A[j]
            j = j - g
            cnt += 1
        A[j+g] = v
        
def shellSort(A, n):
    h = 1
    G = []
    while h <= n:
        G.append(h)
        h = 3*h + 1
    #逆順
    G = G[::-1]
    m  = len(G)
    print(m)
    print(' '.join(map(str, G)))
    
    for i in range(m):
        insertionSort(A, n, G[i])
    
num = int(input())

arr = [int(input()) for i in range(num)]
shellSort(arr, num)
print(cnt)
for i in arr:
    print(i)
"
8691211,ALDS1_2_D,"def insertionSort(A, n, g):
    global cnt
    for i in range(g,n):
        v = A[i]
        j = i-g
        while j >= 0 and A[j] > v:
            A[j+g] = A[j]
            j = j -g
            cnt += 1
        A[j+g] = v

n = int(input())
A = [int(input()) for i in range(n)]
cnt = 0
G = [1]
while n >= 1+3*G[0]:
    G.insert(0, 1+3*G[0])
m = len(G)
for i in range(m):
    insertionSort(A, n, G[i])

print(m)
print(*G)
print(cnt)
for i in range(n):
    print(A[i])
"
8733445,ALDS1_2_D,"def insertion_sort(array, length, g):
    global cnt
    for i in range(g, length):
        v = array[i]
        j = i - g
        while j >= 0 and array[j] > v:
            array[j+g] = array[j]
            j = j - g
            cnt += 1
        array[j+g] = v

def calc_divide(length):
    G = [1]
    m = 1
    while True:
        next_g = 3*G[0] + 1
        if next_g >= length:
            break
        G.insert(0, next_g)
        m += 1
    return m, G
    
def shell_sort(array, length):
    m, G = calc_divide(length)
    for i in range(0, m):
        insertion_sort(array, length, G[i])
    return m, G   
        
cnt = 0
length = int(input())
array = [int(input()) for _ in range(length)]
#for i in range(length):
#    array[i] = int(input())
    
m, G = shell_sort(array, length)
print(m)
print(*G)
print(cnt)
for i in range(length):
    print(array[i])
"
8878189,ALDS1_2_D,"N = int(input())
A = [int(input()) for _ in range(N)]

cnt = 0


def insertionSort(A, n, g):
    global cnt
    for i in range(g, n):
        v = A[i]
        j = i - g
        while j >= 0 and A[j] > v:
            A[j + g] = A[j]
            j -= g
            cnt += 1
        A[j + g] = v


def shellSort(A, n):
    m = 0
    G = []
    while True:
        m = 3 * m + 1
        if m > n:
            break
        G.append(m)
    G.reverse()
    for g in G:
        insertionSort(A, n, g)
    return G


G = shellSort(A, N)
print(len(G))
print("" "".join(map(str, G)))
print(cnt)
for a in A:
    print(a)
"
8678304,ALDS1_2_D,"def insertionSort(n, number, g):
    global cnt

    for i in range (g, n):
        v = number[i]
        j = i - g

        while(j >= 0 and number[j] > v):
            number[j + g] = number[j]
            j = j - g
            cnt += 1
        number[j + g] = v

def shellSort(n, number):
    
    G = []
    a = 1

    if(len(number) == 1):
        G.append(1) 

    while(len(number) > a):
        G.append(a)
        a = a * 3 + 1
    
    G = list(reversed(G))

    for g in G:
        insertionSort(n, number, g)

    return number, G, len(G)

cnt = 0

number = []

n = int(input())

for i in range(n):
    number.append(int(input()))

number_value, G_value, m_value = shellSort(n, number)


print(m_value)
print(*G_value)
print(cnt)

for x in number_value:
    print(x)
"
8460748,ALDS1_2_D,"def insert_sort(A,n,g):
    global cnt
    for i in range(g,n):
        tmp = A[i]
        j=i-g
        while j>=0 and A[j]>tmp:
            A[j+g] = A[j]
            j=j-g
            cnt+=1
        A[j+g]=tmp
cnt = 0
n = int(input())
A = [int(input()) for i in range(n)]
G=[1]
i=0
while n > (1+3*G[i]):
    G.append(1+3*G[i])
    i+=1
m=len(G)
G.reverse()
for i in range(m):
    insert_sort(A,n,G[i])
print(m)
print(*G)
print(cnt)
print(*A,sep='\n')
"
8960505,ALDS1_2_D,"def IS(A, n, g):
    global cnt
    for i in range(g, n):
        v = A[i]
        j = i - g
        while j >= 0 and A[j] > v:
            A[j+g] = A[j]
            j = j - g
            cnt += 1
        A[j+g] = v
def SS(A,n):
    global cnt
    global m
    global G
    for i in range(m):
        IS(A,n,G[i])

n = int(input())
A = [int(input()) for i in range(n)]

cnt = 0
G = [1]
for i in range(99):
    if n < 1 + 3*G[-1]:
        break
    G.append(1 + 3*G[-1])
m = len(G)
G.reverse()
SS(A,n)

print(m)
print(*G)
print(cnt)
print(*A, sep='\n')
"
9046307,ALDS1_2_D,"def insertionSort(a, n ,g, cnt):
    for i in range(g, n):
        v = a[i]
        j = i - g
        while j >= 0 and a[j] > v:
            a[j+g] = a[j]
            j = j - g
            cnt += 1
        a[j+g] = v
    return cnt

cnt = 0
n = int(input())
a = [0 for _ in range(0, n)]
for i in range(0, n):
    a[i] = int(input())

g = list()
tmp = n
while tmp != 1:
    g.append(tmp)
    tmp = tmp // 2
if len(g) == 0 or g[len(g) - 1] != 1:
    g.append(1)

m = len(g)

for i in range(0, m):
    cnt = insertionSort(a, n, g[i], cnt)

print(m)
print("" "".join(map(str, g)))
print(cnt)
for ai in a:
    print(ai)
"
9122707,ALDS1_2_D,"def insertionSort(A,n,g,cnt):   
    for i in range(g,n):
        v= A[i]
        j= i-g
        while j >= 0 and A[j] > v:
            A[j+g] = A[j]
            j = j - g
            cnt += 1
        A[j+g] = v
    return A, cnt
        
n = int(input())
A = []
for i in range(n):
    k = int(input())
    A.append(k)
cnt = 0
G=[]
r = len(A) // 2 +1
while r > 0:
    G.append(r)
    r = r//2
m = len(G)
for i in range(m):
    A,cnt = insertionSort(A,n,G[i],cnt)
print(m)
print("" "".join(map(str,G)))
print(cnt)
for i in A:
    print(i)
"
8890783,ALDS1_2_D,"cnt = 0
def insertionSort(A,g):
    global cnt
    for i in range(len(A)):
        j = i - g
        v = A[i]
        while j >= 0 and A[j] > v:
            A[j+g] = A[j]
            j -= g
            cnt += 1
        A[j+g] = v

def shellSort(A):
    global cnt
    n = len(A)
    h = 1
    G_list = []
    while h <= len(A):
        G_list.append(h)
        h *= 3
        h += 1
    G_list.reverse()
    for g in G_list:
        insertionSort(A,g)
    print(len(G_list))
    print(*G_list)
    print(cnt)
    for a in A:
        print(a)

n = int(input())
A = []
for _ in range(n):
    A.append(int(input()))
shellSort(A)
"
8705082,ALDS1_2_D,"n = int(input())
A = [int(input()) for _ in range(n)]

gaplist = []
cnt = 0

def shell_sort(A,n,cnt):
  gap = n//2
  gaplist.append(gap)
  while gap > 0:
    for i in range(gap, n):
      tmp = A[i]
      j = i
      while j >= gap and A[j - gap] > tmp:
        A[j] = A[j - gap]
        j -= gap
        cnt+=1
      A[j] = tmp
    gap //= 2
    if gap!=0:
      gaplist.append(gap)
  
  return cnt

cnt = shell_sort(A,n,cnt)

print(len(gaplist))

gapnums = ' '.join(str(x) for x in gaplist)
print(gapnums)

print(cnt)

for i in range(n):
  print(A[i])


  

"
8372248,ALDS1_2_D,"import math

def insertionsort(a,n,g):
    global cnt
    for i in range(g,n):
        v=a[i]
        j=i-g
        while j>=0 and a[j]>v:
            a[j+g]=a[j]
            j=j-g
            cnt=cnt+1
        a[j+g]=v

def shellsort(a,n):
    global cnt
    cnt=0
    m=math.ceil(math.log(2*n-1,3)) 
    if m==0:
        m=1
    g=[math.ceil((3**i+1)/2) for i in range(m)]
    g.sort(reverse=True)
    for i in range(m):
        insertionsort(a,n,g[i])

    #出力部分    
    print(m)
    for i in range(m):
        if i==m-1:
            print(g[i])
        else:
            print(g[i],end="" "")
    print(cnt)
    for i in a:
        print(i)

        
n=int(input())
a=[0 for i in range(n)]
for i in range(n):
    a[i]=int(input())

shellsort(a,n)
"
9000965,ALDS1_2_D,"def insertion_sort(A, g):
    global cnt
    N = len(A)
    for i in range(g, N):
        v = A[i]
        j = i - g
        while j >= 0 and A[j] > v:
            A[j + g] = A[j]
            j -= g
            cnt += 1
        A[j + g] = v
    return A


def shell_sort(A):
    N = len(A)
    g = 1
    G = [1]
    while 3 * g + 1 <= N:
        g = 3 * g + 1
        G.append(g)
    print(len(G))
    print(*G[::-1])
    while g:
        A = insertion_sort(A[:], g)
        g //= 3
    return A


N: int = int(input())
A = [int(input()) for _ in range(N)]
cnt = 0
A_sort = shell_sort(A[:])
print(cnt)
print(*A_sort, sep=""\n"")

"
8611661,ALDS1_2_D,"cnt = 0

def insert_sort(al, n, g):
    global cnt
    for i in range(g, n):
        v = al[i]
        j = i - g
        while j >= 0 and al[j] > v:
            al[j + g] = al[j]
            j -= g
            cnt += 1
        al[j + g] = v

def shell_sort(al, n):
    gl = []
    tmp = n // 2
    while tmp > 0:
        gl.append(tmp)
        tmp //= 2
    if not gl:
        gl.append(1)
    m = len(gl)
    for i in range(m):
        insert_sort(al, n, gl[i])
    return m, gl

n = int(input())
al = [int(input()) for _ in range(n)]
m, gl = shell_sort(al, n)

print(m)
print(*gl)
print(cnt)
print(*al, sep=""\n"")

"
8406705,ALDS1_2_D,"def insertionSort(a, g):
    global cnt
    for i in range(g, len(a)):
        v = a[i]
        j = i - g
        while j >= 0 and a[j] > v:
            a[j+g] = a[j]
            j = j - g
            cnt += 1
            a[j+g] = v


def shellSort(a):
    global cnt
    cnt = 0
    g = []
    h = 1
    while h <= len(a):
        g.append(h)
        h = 3*h+1
    g.reverse()
    m = len(g)
    print(m)
    print(' '.join(map(str, g)))
    for i in range(m):
        insertionSort(a, g[i])


a = [int(input()) for i in range(int(input()))]
shellSort(a)
print(cnt)
for e in a:
    print(e)

"
8490997,ALDS1_2_D,"cnt = 0

def insertionSort(A, n, g):
    for i in range(g, n):
        v = A[i]
        j = i - g
        global cnt

        while (j >= 0) & (A[j] > v):
            A[j + g] = A[j]
            j = j - g
            cnt += 1
        A[j + g] = v


def shellSort(A, n):
    m = int.bit_length(n)
    G = [n//(2**i) for i in range(m)]
    print(m)
    print(*G)
    for i in range(m):
        insertionSort(A, n, G[i])


n = int(input())
a = [int(input()) for _ in range(n)]

shellSort(a, n)
print(cnt)
print(*a, sep=""\n"")

"
8689682,ALDS1_2_D,"import math

def insertionSort(A, n, g):
    global cnt
    for i in range(g, n):
        v = A[i]
        j = i - g
        while j >= 0 and A[j] > v:
            A[j + g] = A[j]
            j = j - g
            cnt += 1
        A[j + g] = v

def shellSort(A, n):
    global cnt
    cnt = 0
    G = []
    
    # ギャップ列 G を定義する部分
    m = int(math.log2(n)) + 1  # ギャップ列の要素数 m の定義
    for i in range(m):
        g = int(n / (2 ** (i + 1)))  # ギャップ g の計算
        G.append(g)
    
    # ギャップ列 G を元にして挿入ソートを行う部分
    print(m)
    print(*G)
    for i in range(m):
        insertionSort(A, n, G[i])
    
    print(cnt)
    print(*A)

n = int(input())
A = [int(input()) for _ in range(n)]

shellSort(A, n)

"
3870464,ALDS1_2_D,"import sys

def insertion_sort(a, n, g):
    count = 0
    for i in range(g, n):
        v = a[i]
        j = i - g
        while j >= 0 and a[j] > v:
            a[j+g] = a[j]
            j = j - g
            count += 1
        a[j+g] = v
    return count

def shell_sort(a, n):
    count = 0
    G = list([int((2.25**i-1)/1.25) for i in range(17, 0, -1)])
    G = [x for x in G if x <= n]
    m = len(G)
    for g in G:
        count += insertion_sort(a, n, g)
    return m, G, count, a

n = int(input())
a = list(map(int, sys.stdin))

m, G, count, a = shell_sort(a, n)
print(len(G))
print(*G)
print(count)
print(""\n"".join(map(str, a)))

"
6232213,ALDS1_2_D,"
def insertion_sort(n, l, g):
    cnt = 0
    for i in range(g, n):
        v = l[i]
        j = i - g
        while j >= 0 and l[j] > v:
            l[j+g] = l[j]
            j = j - g
            cnt += 1
        l[j+g] = v
    return cnt

def shell_sort(n,l):
    cnt = 0
    G = list([int((2.25**i-1)/1.25) for i in range(17, 0, -1)])
    G = [x for x in G if x <= n]
    m = len(G)
    for g in G:
        cnt += insertion_sort(
            n = n,
            l = l,
            g = g
        )
    return m, G, cnt, l

# test_id = 3
# test_data = [3,2,1]
test_id,*test_data = map(int, open(0).read().split())
m, G, ancer_cnt, l = shell_sort(
    n = test_id,
    l = test_data
)
print(len(G))
print(*G)
print(ancer_cnt)
print(*l,sep=""\n"")
"
8273825,ALDS1_2_D,"m = 0
gaps = []
cnt = 0
def shell_sort(data):
    n = len(data)
    global m, gaps, cnt
    if n <= 1:
        gap = 1
    else:
        gap = n // 2
    while gap > 0:
        m += 1
        gaps.append(gap)
        for i in range(gap, n):
            v = data[i]
            j = i
            while 0 <= j - gap and v < data[j - gap]:
                cnt += 1
                data[j] = data[j - gap]
                j -= gap
            data[j] = v
        gap //= 2


def main():
    n = int(input())
    data = [int(input()) for i in range(n)]
    shell_sort(data)
    print(m)
    print(*gaps)
    print(cnt)
    for d in data:
        print(d)


if __name__ == ""__main__"":
    main()

"
6696518,ALDS1_2_D,"import sys
import math

# READ_FROM_FILE = True
READ_FROM_FILE = False


def insertion_sort(a_list, n, g, counter):
    for i in range(g, n):
        v = a_list[i]
        j = i - g
        while j >= 0 and a_list[j] > v:
            a_list[j + g] = a_list[j]
            j -= g
            counter += 1
        a_list[j + g] = v
    return counter


def main():
    if READ_FROM_FILE:
        f = open('test0.txt', 'r')
    else:
        f = sys.stdin

    n = int(f.readline())
    a_list = [int(f.readline()) for _ in range(n)]

    '''
     N. Tokuda, ""An improved shellsort,"" Proceedings of the IFIP 12th World Computer Congress on Algorithms,
     Software, Architecture-Information Processing'92, Volume 1-Volume I, pp. 449--457, 1992.
    '''
    g_list = [1]
    k = 2
    while True:
        g = math.ceil((9 * (9 / 4)**(k - 1) - 4) / 5)
        if g >= n:
            break
        g_list.append(g)
        k += 1

    g_list.reverse()
    counter = 0
    for g in g_list:
        counter = insertion_sort(a_list, n, g, counter)

    print(len(g_list))
    print(*g_list)
    print(counter)
    print(*a_list, sep='\n')

    if READ_FROM_FILE:
        f.close()
    return


if __name__ == '__main__':
    main()

"
4088939,ALDS1_2_D,"import sys

def insertion_sort(a, n, g):
    count = 0
    for i in range(g, n):
        v = a[i]
        j = i - g
        while j >= 0 and a[j] > v:
            a[j+g] = a[j]
            j = j - g
            count += 1
        a[j+g] = v
    return count

def shell_sort(a, n):
    count = 0
    G = list([int((2.25**i-1)/1.25) for i in range(17, 0, -1)])
    G = [x for x in G if x <= n]
    m = len(G)
    for g in G:
        count += insertion_sort(a, n, g)
    return m, G, count, a

n = int(input())
a = list(map(int, sys.stdin))

m, G, count, a = shell_sort(a, n)
print(len(G))
print(*G)
print(count)
print(""\n"".join(map(str, a)))
"
3788127,ALDS1_2_D,"import sys

n = int(input())
A = list(map(int,sys.stdin))
cnt = 0

G = [int((2.25**i-1)/1.25)for i in range(17,0,-1)]
G = [v for v in G if v <= n]

def insertionSort(A, n, g):
    global cnt
    for i in range(g, n):
        v = A[i]
        j = i - g
        while j >= 0 and A[j] > v:
            A[j+g] = A[j]
            j = j - g
            cnt += 1
        A[j+g] = v
for g in G:
    insertionSort(A, n, g)
    
print(len(G))
print(*G)
print(cnt)
print('\n'.join(map(str,A)))
"
2724665,ALDS1_2_D,"import sys
n = int(input())
A = list(map(int,sys.stdin))
cnt = 0
G = [int((2.25**i-1)/1.25)for i in range(17,0,-1)]
G = [v for v in G if v <= n]
def insertionSort(A, n, g):
    global cnt
    for i in range(g, n):
        v = A[i]
        j = i - g
        while j >= 0 and A[j] > v:
            A[j+g] = A[j]
            j = j - g
            cnt += 1
        A[j+g] = v
for g in G:
    insertionSort(A, n, g)
print(len(G))
print(*G)
print(cnt)
print('\n'.join(map(str,A)))
"
3833220,ALDS1_2_D,"import sys
n = int(input())
A = list(map(int,sys.stdin))
cnt = 0
G = [int((2.25**i-1)/1.25)for i in range(17,0,-1)]
G = [v for v in G if v <= n]
def insertionSort(A, n, g):
    global cnt
    for i in range(g, n):
        v = A[i]
        j = i - g
        while j >= 0 and A[j] > v:
            A[j+g] = A[j]
            j = j - g
            cnt += 1
        A[j+g] = v
for g in G:
    insertionSort(A, n, g)
print(len(G))
print(*G)
print(cnt)
print('\n'.join(map(str,A)))

"
5839085,ALDS1_2_D,"import sys
n = int(input())
A = list(map(int,sys.stdin))
cnt = 0
G = [int((2.25**i-1)/1.25)for i in range(17,0,-1)]
G = [v for v in G if v <= n]
def insertionSort(A, n, g):
    global cnt
    for i in range(g, n):
        v = A[i]
        j = i - g
        while j >= 0 and A[j] > v:
            A[j+g] = A[j]
            j = j - g
            cnt += 1
        A[j+g] = v
for g in G:
    insertionSort(A, n, g)
print(len(G))
print(*G)
print(cnt)
print('\n'.join(map(str,A)))
"
5044657,ALDS1_2_D,"import sys
n = int(input())
A = list(map(int,sys.stdin))
cnt = 0
G = [int((2.25**i-1)/1.25)for i in range(17,0,-1)]
G = [v for v in G if v <= n]
def insertionSort(A, n, g):
    global cnt
    for i in range(g, n):
        v = A[i]
        j = i - g
        while j >= 0 and A[j] > v:
            A[j+g] = A[j]
            j = j - g
            cnt += 1
        A[j+g] = v
for g in G:
    insertionSort(A, n, g)
print(len(G))
print(*G)
print(cnt)
print('\n'.join(map(str,A)))

"
4131650,ALDS1_2_D,"import sys
n = int(input())
A = list(map(int,sys.stdin))
cnt = 0
G = [int((2.25**i-1)/1.25)for i in range(17,0,-1)]
G = [v for v in G if v <= n]
def insertionSort(A, n, g):
    global cnt
    for i in range(g, n):
        v = A[i]
        j = i - g
        while j >= 0 and A[j] > v:
            A[j+g] = A[j]
            j = j - g
            cnt += 1
        A[j+g] = v
for g in G:
    insertionSort(A, n, g)
print(len(G))
print(*G)
print(cnt)
print(*A, sep='\n')
"
4880484,ALDS1_2_D,"def insertionSort(A,N,G):
    global count
    for i in range(G,N):
        v = A[i]
        j = i - G
        while j>=0 and A[j]>v:
            A[j+G] = A[j]
            j = j-G
            count += 1
        A[j+G] = v

import sys
n = int(input())
a = list(map(int,sys.stdin))
count = 0
G = [int((2.25**i-1)/1.25)for i in range(17,0,-1)]
G = [g for g in G if g<=n]

for g in G:
    insertionSort(a,n,g)
print(len(G))
print(*G)
print(count)
for num in a:
    print(num)
"
6674436,ALDS1_2_D,"def shell_sort(A, n):

    def insertion_sort(A, n, g):
        nonlocal cnt
        for i in range(g,n):
            v = A[i]
            j = i-g
            while j >= 0 and A[j] > v:
                A[j+g] = A[j]
                j = j-g
                cnt += 1
            A[j+g] = v
    
    cnt = 0
    G = [1]
    k = 1
    while True:
        a = 4**k + 3*2**(k-1) + 1
        if a <= n:
            G.append(a)
            k += 1
        else:
            break
    G.reverse()
    m = len(G)
    print(m)
    print(*G)
    for i in range(m):
        insertion_sort(A, n, G[i])
    print(cnt)

n,*array = map(int, open(0).read().split())

shell_sort(array,n)

print(*array, sep='\n')


"
